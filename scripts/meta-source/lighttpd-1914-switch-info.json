{
	"switch_num":	116,
	"case_num":	[81, 3, 82, 30, 83, 162, 3, 1, 162, 31, 162, 22, 162, 22, 163, 3, 163, 101, 162, 24, 2, 1, 82, 30, 82, 3, 157, 18, 1, 81, 1, 284, 18, 283, 319, 35, 320, 376, 376, 96, 2, 1, 375, 3, 1, 377, 12, 376, 12, 375, 60, 2, 2, 377, 3, 376, 4, 2, 377, 139, 377, 139, 377, 43, 1, 319, 35, 319, 3, 319, 35, 1, 319, 38, 319, 5, 1, 318, 277, 61, 276, 114, 274, 1, 296, 10, 509, 477, 504, 346, 49, 1, 48, 1, 270, 3, 1, 269, 1, 271, 3, 2, 270, 27, 271, 46, 271, 46, 270, 9, 270, 4, 271, 4, 269, 1],
	"switch_cluster":	[[1, 3, 7, 9, 11, 13, 17, 19, 20, 21, 23, 27, 28, 30, 32, 35, 40, 41, 44, 50, 51, 52, 56, 57, 59, 61, 63, 64, 66, 70, 71, 73, 76, 79, 81, 83, 87, 89, 91, 93, 96, 98, 101, 103, 105, 107, 109, 111, 113, 115], [6, 15, 25, 39, 43, 46, 48, 54, 68, 75, 85, 95, 100], [0, 2, 4, 5, 8, 10, 12, 14, 16, 18, 22, 24, 26, 29, 31, 33, 34, 36, 37, 38, 42, 45, 47, 49, 53, 55, 58, 60, 62, 65, 67, 69, 72, 74, 77, 78, 80, 82, 84, 86, 88, 90, 92, 94, 97, 99, 102, 104, 106, 108, 110, 112, 114], []],
	"priority":	[{
			"file":	"src/array.c",
			"line":	60,
			"primary_score":	999823,
			"second_score":	21522
		}, {
			"file":	"src/array.c",
			"line":	61,
			"primary_score":	999823,
			"second_score":	21521
		}, {
			"file":	"src/array.c",
			"line":	63,
			"primary_score":	999823,
			"second_score":	21520
		}, {
			"file":	"src/array.c",
			"line":	64,
			"primary_score":	999823,
			"second_score":	21519
		}, {
			"file":	"src/array.c",
			"line":	69,
			"primary_score":	999823,
			"second_score":	21518
		}, {
			"file":	"src/array.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	111755
		}, {
			"file":	"src/array.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	111754
		}, {
			"file":	"src/array.c",
			"line":	88,
			"primary_score":	999823,
			"second_score":	111753
		}, {
			"file":	"src/array.c",
			"line":	91,
			"primary_score":	999823,
			"second_score":	111752
		}, {
			"file":	"src/array.c",
			"line":	92,
			"primary_score":	999823,
			"second_score":	111720
		}, {
			"file":	"src/array.c",
			"line":	94,
			"primary_score":	999823,
			"second_score":	111719
		}, {
			"file":	"src/array.c",
			"line":	96,
			"primary_score":	999823,
			"second_score":	111718
		}, {
			"file":	"src/array.c",
			"line":	97,
			"primary_score":	999823,
			"second_score":	111717
		}, {
			"file":	"src/array.c",
			"line":	99,
			"primary_score":	999823,
			"second_score":	111748
		}, {
			"file":	"src/array.c",
			"line":	101,
			"primary_score":	999823,
			"second_score":	111729
		}, {
			"file":	"src/array.c",
			"line":	105,
			"primary_score":	999823,
			"second_score":	111728
		}, {
			"file":	"src/array.c",
			"line":	106,
			"primary_score":	999823,
			"second_score":	113914
		}, {
			"file":	"src/array.c",
			"line":	108,
			"primary_score":	999823,
			"second_score":	111727
		}, {
			"file":	"src/array.c",
			"line":	111,
			"primary_score":	999823,
			"second_score":	111716
		}, {
			"file":	"src/array.c",
			"line":	114,
			"primary_score":	999823,
			"second_score":	113910
		}, {
			"file":	"src/array.c",
			"line":	116,
			"primary_score":	999823,
			"second_score":	111713
		}, {
			"file":	"src/array.c",
			"line":	120,
			"primary_score":	999823,
			"second_score":	111757
		}, {
			"file":	"src/array.c",
			"line":	122,
			"primary_score":	999823,
			"second_score":	111756
		}, {
			"file":	"src/array.c",
			"line":	128,
			"primary_score":	999823,
			"second_score":	111712
		}, {
			"file":	"src/array.c",
			"line":	132,
			"primary_score":	999823,
			"second_score":	114085
		}, {
			"file":	"src/array.c",
			"line":	134,
			"primary_score":	999823,
			"second_score":	114084
		}, {
			"file":	"src/array.c",
			"line":	136,
			"primary_score":	999823,
			"second_score":	116589
		}, {
			"file":	"src/array.c",
			"line":	138,
			"primary_score":	999840,
			"second_score":	609704
		}, {
			"file":	"src/array.c",
			"line":	140,
			"primary_score":	999823,
			"second_score":	114081
		}, {
			"file":	"src/array.c",
			"line":	141,
			"primary_score":	999839,
			"second_score":	293051
		}, {
			"file":	"src/array.c",
			"line":	143,
			"primary_score":	999839,
			"second_score":	293050
		}, {
			"file":	"src/array.c",
			"line":	146,
			"primary_score":	999823,
			"second_score":	114080
		}, {
			"file":	"src/array.c",
			"line":	193,
			"primary_score":	999823,
			"second_score":	114015
		}, {
			"file":	"src/array.c",
			"line":	194,
			"primary_score":	999823,
			"second_score":	114014
		}, {
			"file":	"src/array.c",
			"line":	195,
			"primary_score":	999823,
			"second_score":	114013
		}, {
			"file":	"src/array.c",
			"line":	198,
			"primary_score":	999823,
			"second_score":	114012
		}, {
			"file":	"src/array.c",
			"line":	199,
			"primary_score":	999823,
			"second_score":	129896
		}, {
			"file":	"src/array.c",
			"line":	200,
			"primary_score":	999823,
			"second_score":	129867
		}, {
			"file":	"src/array.c",
			"line":	204,
			"primary_score":	999823,
			"second_score":	114011
		}, {
			"file":	"src/array.c",
			"line":	206,
			"primary_score":	999835,
			"second_score":	256988
		}, {
			"file":	"src/array.c",
			"line":	207,
			"primary_score":	999835,
			"second_score":	256987
		}, {
			"file":	"src/array.c",
			"line":	211,
			"primary_score":	999835,
			"second_score":	256951
		}, {
			"file":	"src/array.c",
			"line":	216,
			"primary_score":	999823,
			"second_score":	113908
		}, {
			"file":	"src/array.c",
			"line":	221,
			"primary_score":	999823,
			"second_score":	113907
		}, {
			"file":	"src/array.c",
			"line":	222,
			"primary_score":	999823,
			"second_score":	116487
		}, {
			"file":	"src/array.c",
			"line":	223,
			"primary_score":	999823,
			"second_score":	116486
		}, {
			"file":	"src/array.c",
			"line":	224,
			"primary_score":	999823,
			"second_score":	116485
		}, {
			"file":	"src/array.c",
			"line":	225,
			"primary_score":	999823,
			"second_score":	116484
		}, {
			"file":	"src/array.c",
			"line":	226,
			"primary_score":	999823,
			"second_score":	116483
		}, {
			"file":	"src/array.c",
			"line":	227,
			"primary_score":	999823,
			"second_score":	116482
		}, {
			"file":	"src/array.c",
			"line":	228,
			"primary_score":	999823,
			"second_score":	113906
		}, {
			"file":	"src/array.c",
			"line":	229,
			"primary_score":	999840,
			"second_score":	228218
		}, {
			"file":	"src/array.c",
			"line":	230,
			"primary_score":	999840,
			"second_score":	228217
		}, {
			"file":	"src/array.c",
			"line":	231,
			"primary_score":	999840,
			"second_score":	228216
		}, {
			"file":	"src/array.c",
			"line":	232,
			"primary_score":	999840,
			"second_score":	228215
		}, {
			"file":	"src/array.c",
			"line":	233,
			"primary_score":	999840,
			"second_score":	228214
		}, {
			"file":	"src/array.c",
			"line":	234,
			"primary_score":	999840,
			"second_score":	228213
		}, {
			"file":	"src/array.c",
			"line":	237,
			"primary_score":	999823,
			"second_score":	113905
		}, {
			"file":	"src/array.c",
			"line":	239,
			"primary_score":	999823,
			"second_score":	113904
		}, {
			"file":	"src/array.c",
			"line":	241,
			"primary_score":	999823,
			"second_score":	113903
		}, {
			"file":	"src/array.c",
			"line":	244,
			"primary_score":	999823,
			"second_score":	115363
		}, {
			"file":	"src/array.c",
			"line":	248,
			"primary_score":	999823,
			"second_score":	113876
		}, {
			"file":	"src/array.c",
			"line":	249,
			"primary_score":	999823,
			"second_score":	113875
		}, {
			"file":	"src/array.c",
			"line":	253,
			"primary_score":	999823,
			"second_score":	113874
		}, {
			"file":	"src/array.c",
			"line":	255,
			"primary_score":	999823,
			"second_score":	115166
		}, {
			"file":	"src/array.c",
			"line":	257,
			"primary_score":	999823,
			"second_score":	113872
		}, {
			"file":	"src/buffer.c",
			"line":	20,
			"primary_score":	999823,
			"second_score":	986
		}, {
			"file":	"src/buffer.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	985
		}, {
			"file":	"src/buffer.c",
			"line":	23,
			"primary_score":	999823,
			"second_score":	984
		}, {
			"file":	"src/buffer.c",
			"line":	25,
			"primary_score":	999823,
			"second_score":	983
		}, {
			"file":	"src/buffer.c",
			"line":	26,
			"primary_score":	999823,
			"second_score":	982
		}, {
			"file":	"src/buffer.c",
			"line":	27,
			"primary_score":	999823,
			"second_score":	981
		}, {
			"file":	"src/buffer.c",
			"line":	29,
			"primary_score":	999823,
			"second_score":	980
		}, {
			"file":	"src/buffer.c",
			"line":	44,
			"primary_score":	999823,
			"second_score":	946
		}, {
			"file":	"src/buffer.c",
			"line":	46,
			"primary_score":	999823,
			"second_score":	945
		}, {
			"file":	"src/buffer.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	944
		}, {
			"file":	"src/buffer.c",
			"line":	51,
			"primary_score":	999823,
			"second_score":	21526
		}, {
			"file":	"src/buffer.c",
			"line":	54,
			"primary_score":	999823,
			"second_score":	21525
		}, {
			"file":	"src/buffer.c",
			"line":	55,
			"primary_score":	999823,
			"second_score":	110946
		}, {
			"file":	"src/buffer.c",
			"line":	56,
			"primary_score":	999823,
			"second_score":	110945
		}, {
			"file":	"src/buffer.c",
			"line":	57,
			"primary_score":	999823,
			"second_score":	110944
		}, {
			"file":	"src/buffer.c",
			"line":	60,
			"primary_score":	999823,
			"second_score":	21524
		}, {
			"file":	"src/buffer.c",
			"line":	74,
			"primary_score":	999823,
			"second_score":	430
		}, {
			"file":	"src/buffer.c",
			"line":	76,
			"primary_score":	999823,
			"second_score":	429
		}, {
			"file":	"src/buffer.c",
			"line":	78,
			"primary_score":	999823,
			"second_score":	599
		}, {
			"file":	"src/buffer.c",
			"line":	80,
			"primary_score":	999823,
			"second_score":	598
		}, {
			"file":	"src/buffer.c",
			"line":	83,
			"primary_score":	999823,
			"second_score":	597
		}, {
			"file":	"src/buffer.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	596
		}, {
			"file":	"src/buffer.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	595
		}, {
			"file":	"src/buffer.c",
			"line":	88,
			"primary_score":	999823,
			"second_score":	428
		}, {
			"file":	"src/buffer.c",
			"line":	89,
			"primary_score":	999823,
			"second_score":	427
		}, {
			"file":	"src/buffer.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	314
		}, {
			"file":	"src/buffer.c",
			"line":	102,
			"primary_score":	999823,
			"second_score":	313
		}, {
			"file":	"src/buffer.c",
			"line":	103,
			"primary_score":	999823,
			"second_score":	120173
		}, {
			"file":	"src/buffer.c",
			"line":	106,
			"primary_score":	999823,
			"second_score":	120172
		}, {
			"file":	"src/buffer.c",
			"line":	108,
			"primary_score":	999823,
			"second_score":	120171
		}, {
			"file":	"src/buffer.c",
			"line":	109,
			"primary_score":	999823,
			"second_score":	120170
		}, {
			"file":	"src/buffer.c",
			"line":	110,
			"primary_score":	999823,
			"second_score":	120169
		}, {
			"file":	"src/buffer.c",
			"line":	111,
			"primary_score":	999823,
			"second_score":	312
		}, {
			"file":	"src/buffer.c",
			"line":	112,
			"primary_score":	999823,
			"second_score":	111925
		}, {
			"file":	"src/buffer.c",
			"line":	115,
			"primary_score":	999823,
			"second_score":	111924
		}, {
			"file":	"src/buffer.c",
			"line":	117,
			"primary_score":	999823,
			"second_score":	111923
		}, {
			"file":	"src/buffer.c",
			"line":	118,
			"primary_score":	999823,
			"second_score":	111922
		}, {
			"file":	"src/buffer.c",
			"line":	120,
			"primary_score":	999823,
			"second_score":	311
		}, {
			"file":	"src/buffer.c",
			"line":	124,
			"primary_score":	999823,
			"second_score":	112311
		}, {
			"file":	"src/buffer.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	112310
		}, {
			"file":	"src/buffer.c",
			"line":	128,
			"primary_score":	999823,
			"second_score":	112309
		}, {
			"file":	"src/buffer.c",
			"line":	129,
			"primary_score":	999823,
			"second_score":	112308
		}, {
			"file":	"src/buffer.c",
			"line":	131,
			"primary_score":	999823,
			"second_score":	112298
		}, {
			"file":	"src/buffer.c",
			"line":	132,
			"primary_score":	999823,
			"second_score":	112297
		}, {
			"file":	"src/buffer.c",
			"line":	134,
			"primary_score":	999823,
			"second_score":	112296
		}, {
			"file":	"src/buffer.c",
			"line":	138,
			"primary_score":	999823,
			"second_score":	21272
		}, {
			"file":	"src/buffer.c",
			"line":	147,
			"primary_score":	999823,
			"second_score":	21271
		}, {
			"file":	"src/buffer.c",
			"line":	149,
			"primary_score":	999823,
			"second_score":	21266
		}, {
			"file":	"src/buffer.c",
			"line":	150,
			"primary_score":	999823,
			"second_score":	21265
		}, {
			"file":	"src/buffer.c",
			"line":	151,
			"primary_score":	999823,
			"second_score":	21264
		}, {
			"file":	"src/buffer.c",
			"line":	153,
			"primary_score":	999823,
			"second_score":	21263
		}, {
			"file":	"src/buffer.c",
			"line":	157,
			"primary_score":	999823,
			"second_score":	21275
		}, {
			"file":	"src/buffer.c",
			"line":	159,
			"primary_score":	999823,
			"second_score":	21274
		}, {
			"file":	"src/buffer.c",
			"line":	160,
			"primary_score":	999828,
			"second_score":	451850
		}, {
			"file":	"src/buffer.c",
			"line":	161,
			"primary_score":	999828,
			"second_score":	451849
		}, {
			"file":	"src/buffer.c",
			"line":	163,
			"primary_score":	999823,
			"second_score":	21273
		}, {
			"file":	"src/buffer.c",
			"line":	167,
			"primary_score":	999823,
			"second_score":	961
		}, {
			"file":	"src/buffer.c",
			"line":	169,
			"primary_score":	999823,
			"second_score":	960
		}, {
			"file":	"src/buffer.c",
			"line":	171,
			"primary_score":	999823,
			"second_score":	959
		}, {
			"file":	"src/buffer.c",
			"line":	172,
			"primary_score":	999823,
			"second_score":	958
		}, {
			"file":	"src/buffer.c",
			"line":	173,
			"primary_score":	999823,
			"second_score":	953
		}, {
			"file":	"src/buffer.c",
			"line":	176,
			"primary_score":	999823,
			"second_score":	952
		}, {
			"file":	"src/buffer.c",
			"line":	177,
			"primary_score":	999823,
			"second_score":	951
		}, {
			"file":	"src/buffer.c",
			"line":	179,
			"primary_score":	999823,
			"second_score":	950
		}, {
			"file":	"src/buffer.c",
			"line":	214,
			"primary_score":	999823,
			"second_score":	111678
		}, {
			"file":	"src/buffer.c",
			"line":	215,
			"primary_score":	999835,
			"second_score":	256964
		}, {
			"file":	"src/buffer.c",
			"line":	217,
			"primary_score":	999823,
			"second_score":	111676
		}, {
			"file":	"src/buffer.c",
			"line":	218,
			"primary_score":	999823,
			"second_score":	111671
		}, {
			"file":	"src/buffer.c",
			"line":	219,
			"primary_score":	999835,
			"second_score":	439782
		}, {
			"file":	"src/buffer.c",
			"line":	221,
			"primary_score":	999823,
			"second_score":	111670
		}, {
			"file":	"src/buffer.c",
			"line":	222,
			"primary_score":	999823,
			"second_score":	111669
		}, {
			"file":	"src/buffer.c",
			"line":	223,
			"primary_score":	999823,
			"second_score":	111668
		}, {
			"file":	"src/buffer.c",
			"line":	225,
			"primary_score":	999823,
			"second_score":	111667
		}, {
			"file":	"src/buffer.c",
			"line":	229,
			"primary_score":	999823,
			"second_score":	111695
		}, {
			"file":	"src/buffer.c",
			"line":	230,
			"primary_score":	999823,
			"second_score":	111694
		}, {
			"file":	"src/buffer.c",
			"line":	232,
			"primary_score":	999823,
			"second_score":	111693
		}, {
			"file":	"src/buffer.c",
			"line":	285,
			"primary_score":	999823,
			"second_score":	111868
		}, {
			"file":	"src/buffer.c",
			"line":	286,
			"primary_score":	999823,
			"second_score":	111867
		}, {
			"file":	"src/buffer.c",
			"line":	287,
			"primary_score":	999823,
			"second_score":	111866
		}, {
			"file":	"src/buffer.c",
			"line":	289,
			"primary_score":	999823,
			"second_score":	111865
		}, {
			"file":	"src/buffer.c",
			"line":	290,
			"primary_score":	999982,
			"second_score":	672
		}, {
			"file":	"src/buffer.c",
			"line":	291,
			"primary_score":	999982,
			"second_score":	671
		}, {
			"file":	"src/buffer.c",
			"line":	292,
			"primary_score":	999982,
			"second_score":	670
		}, {
			"file":	"src/buffer.c",
			"line":	295,
			"primary_score":	999823,
			"second_score":	111864
		}, {
			"file":	"src/buffer.c",
			"line":	296,
			"primary_score":	999823,
			"second_score":	111863
		}, {
			"file":	"src/buffer.c",
			"line":	297,
			"primary_score":	999823,
			"second_score":	111910
		}, {
			"file":	"src/buffer.c",
			"line":	298,
			"primary_score":	999823,
			"second_score":	111909
		}, {
			"file":	"src/buffer.c",
			"line":	300,
			"primary_score":	999823,
			"second_score":	111862
		}, {
			"file":	"src/buffer.c",
			"line":	301,
			"primary_score":	999823,
			"second_score":	111861
		}, {
			"file":	"src/buffer.c",
			"line":	302,
			"primary_score":	999823,
			"second_score":	111860
		}, {
			"file":	"src/buffer.c",
			"line":	304,
			"primary_score":	999823,
			"second_score":	111859
		}, {
			"file":	"src/buffer.c",
			"line":	305,
			"primary_score":	999823,
			"second_score":	111904
		}, {
			"file":	"src/buffer.c",
			"line":	306,
			"primary_score":	999823,
			"second_score":	111903
		}, {
			"file":	"src/buffer.c",
			"line":	307,
			"primary_score":	999823,
			"second_score":	111902
		}, {
			"file":	"src/buffer.c",
			"line":	309,
			"primary_score":	999823,
			"second_score":	111901
		}, {
			"file":	"src/buffer.c",
			"line":	310,
			"primary_score":	999823,
			"second_score":	111900
		}, {
			"file":	"src/buffer.c",
			"line":	313,
			"primary_score":	999823,
			"second_score":	111858
		}, {
			"file":	"src/buffer.c",
			"line":	317,
			"primary_score":	999823,
			"second_score":	111876
		}, {
			"file":	"src/buffer.c",
			"line":	319,
			"primary_score":	999823,
			"second_score":	111875
		}, {
			"file":	"src/buffer.c",
			"line":	320,
			"primary_score":	999823,
			"second_score":	111870
		}, {
			"file":	"src/buffer.c",
			"line":	321,
			"primary_score":	999823,
			"second_score":	120166
		}, {
			"file":	"src/buffer.c",
			"line":	323,
			"primary_score":	999823,
			"second_score":	111869
		}, {
			"file":	"src/buffer.c",
			"line":	324,
			"primary_score":	999823,
			"second_score":	111857
		}, {
			"file":	"src/buffer.c",
			"line":	328,
			"primary_score":	999823,
			"second_score":	120180
		}, {
			"file":	"src/buffer.c",
			"line":	330,
			"primary_score":	999823,
			"second_score":	120179
		}, {
			"file":	"src/buffer.c",
			"line":	331,
			"primary_score":	999823,
			"second_score":	120178
		}, {
			"file":	"src/buffer.c",
			"line":	454,
			"primary_score":	999827,
			"second_score":	640225
		}, {
			"file":	"src/buffer.c",
			"line":	567,
			"primary_score":	999823,
			"second_score":	120604
		}, {
			"file":	"src/buffer.c",
			"line":	569,
			"primary_score":	999823,
			"second_score":	120596
		}, {
			"file":	"src/buffer.c",
			"line":	571,
			"primary_score":	999823,
			"second_score":	120579
		}, {
			"file":	"src/buffer.c",
			"line":	575,
			"primary_score":	999823,
			"second_score":	113519
		}, {
			"file":	"src/buffer.c",
			"line":	586,
			"primary_score":	999823,
			"second_score":	112434
		}, {
			"file":	"src/buffer.c",
			"line":	587,
			"primary_score":	999823,
			"second_score":	118474
		}, {
			"file":	"src/buffer.c",
			"line":	589,
			"primary_score":	999823,
			"second_score":	118473
		}, {
			"file":	"src/buffer.c",
			"line":	593,
			"primary_score":	999823,
			"second_score":	112438
		}, {
			"file":	"src/buffer.c",
			"line":	595,
			"primary_score":	999823,
			"second_score":	112437
		}, {
			"file":	"src/buffer.c",
			"line":	596,
			"primary_score":	999823,
			"second_score":	112436
		}, {
			"file":	"src/buffer.c",
			"line":	598,
			"primary_score":	999823,
			"second_score":	112435
		}, {
			"file":	"src/buffer.c",
			"line":	607,
			"primary_score":	999823,
			"second_score":	111747
		}, {
			"file":	"src/buffer.c",
			"line":	608,
			"primary_score":	999823,
			"second_score":	111746
		}, {
			"file":	"src/buffer.c",
			"line":	609,
			"primary_score":	999823,
			"second_score":	111745
		}, {
			"file":	"src/buffer.c",
			"line":	611,
			"primary_score":	999823,
			"second_score":	111744
		}, {
			"file":	"src/buffer.c",
			"line":	612,
			"primary_score":	999823,
			"second_score":	111743
		}, {
			"file":	"src/buffer.c",
			"line":	615,
			"primary_score":	999823,
			"second_score":	111742
		}, {
			"file":	"src/buffer.c",
			"line":	618,
			"primary_score":	999823,
			"second_score":	111741
		}, {
			"file":	"src/buffer.c",
			"line":	620,
			"primary_score":	999823,
			"second_score":	111740
		}, {
			"file":	"src/buffer.c",
			"line":	621,
			"primary_score":	999823,
			"second_score":	113894
		}, {
			"file":	"src/buffer.c",
			"line":	622,
			"primary_score":	999823,
			"second_score":	115200
		}, {
			"file":	"src/buffer.c",
			"line":	628,
			"primary_score":	999823,
			"second_score":	111739
		}, {
			"file":	"src/buffer.c",
			"line":	629,
			"primary_score":	999823,
			"second_score":	111738
		}, {
			"file":	"src/buffer.c",
			"line":	631,
			"primary_score":	999823,
			"second_score":	111737
		}, {
			"file":	"src/buffer.c",
			"line":	633,
			"primary_score":	999823,
			"second_score":	111736
		}, {
			"file":	"src/buffer.c",
			"line":	634,
			"primary_score":	999823,
			"second_score":	111735
		}, {
			"file":	"src/buffer.c",
			"line":	636,
			"primary_score":	999823,
			"second_score":	111734
		}, {
			"file":	"src/buffer.c",
			"line":	637,
			"primary_score":	999823,
			"second_score":	111733
		}, {
			"file":	"src/buffer.c",
			"line":	639,
			"primary_score":	999823,
			"second_score":	111732
		}, {
			"file":	"src/buffer.c",
			"line":	641,
			"primary_score":	999823,
			"second_score":	111731
		}, {
			"file":	"src/buffer.c",
			"line":	646,
			"primary_score":	999823,
			"second_score":	115505
		}, {
			"file":	"src/buffer.c",
			"line":	658,
			"primary_score":	999912,
			"second_score":	118755
		}, {
			"file":	"src/buffer.c",
			"line":	661,
			"primary_score":	999912,
			"second_score":	118754
		}, {
			"file":	"src/buffer.c",
			"line":	664,
			"primary_score":	999912,
			"second_score":	118753
		}, {
			"file":	"src/buffer.c",
			"line":	666,
			"primary_score":	999912,
			"second_score":	118752
		}, {
			"file":	"src/buffer.c",
			"line":	671,
			"primary_score":	999916,
			"second_score":	118751
		}, {
			"file":	"src/buffer.c",
			"line":	905,
			"primary_score":	999858,
			"second_score":	126720
		}, {
			"file":	"src/buffer.c",
			"line":	906,
			"primary_score":	999858,
			"second_score":	126719
		}, {
			"file":	"src/buffer.c",
			"line":	907,
			"primary_score":	999858,
			"second_score":	126718
		}, {
			"file":	"src/buffer.c",
			"line":	909,
			"primary_score":	999858,
			"second_score":	126717
		}, {
			"file":	"src/buffer.c",
			"line":	911,
			"primary_score":	999858,
			"second_score":	126716
		}, {
			"file":	"src/buffer.c",
			"line":	912,
			"primary_score":	999858,
			"second_score":	126715
		}, {
			"file":	"src/buffer.c",
			"line":	914,
			"primary_score":	999858,
			"second_score":	126714
		}, {
			"file":	"src/buffer.c",
			"line":	915,
			"primary_score":	999858,
			"second_score":	126648
		}, {
			"file":	"src/buffer.c",
			"line":	917,
			"primary_score":	999858,
			"second_score":	126647
		}, {
			"file":	"src/buffer.c",
			"line":	934,
			"primary_score":	999858,
			"second_score":	126646
		}, {
			"file":	"src/buffer.c",
			"line":	937,
			"primary_score":	999858,
			"second_score":	126645
		}, {
			"file":	"src/buffer.c",
			"line":	938,
			"primary_score":	999858,
			"second_score":	126644
		}, {
			"file":	"src/buffer.c",
			"line":	941,
			"primary_score":	999858,
			"second_score":	126643
		}, {
			"file":	"src/buffer.c",
			"line":	942,
			"primary_score":	999858,
			"second_score":	126642
		}, {
			"file":	"src/buffer.c",
			"line":	944,
			"primary_score":	999858,
			"second_score":	126641
		}, {
			"file":	"src/buffer.c",
			"line":	948,
			"primary_score":	999858,
			"second_score":	126721
		}, {
			"file":	"src/buffer.c",
			"line":	968,
			"primary_score":	999858,
			"second_score":	126639
		}, {
			"file":	"src/buffer.c",
			"line":	969,
			"primary_score":	999858,
			"second_score":	126638
		}, {
			"file":	"src/buffer.c",
			"line":	970,
			"primary_score":	999858,
			"second_score":	126637
		}, {
			"file":	"src/buffer.c",
			"line":	971,
			"primary_score":	999858,
			"second_score":	126636
		}, {
			"file":	"src/buffer.c",
			"line":	973,
			"primary_score":	999858,
			"second_score":	126635
		}, {
			"file":	"src/buffer.c",
			"line":	976,
			"primary_score":	999858,
			"second_score":	126634
		}, {
			"file":	"src/buffer.c",
			"line":	979,
			"primary_score":	999858,
			"second_score":	126633
		}, {
			"file":	"src/buffer.c",
			"line":	981,
			"primary_score":	999858,
			"second_score":	126623
		}, {
			"file":	"src/buffer.c",
			"line":	982,
			"primary_score":	999858,
			"second_score":	126622
		}, {
			"file":	"src/buffer.c",
			"line":	983,
			"primary_score":	999858,
			"second_score":	126621
		}, {
			"file":	"src/buffer.c",
			"line":	984,
			"primary_score":	999858,
			"second_score":	126620
		}, {
			"file":	"src/buffer.c",
			"line":	985,
			"primary_score":	999858,
			"second_score":	126619
		}, {
			"file":	"src/buffer.c",
			"line":	989,
			"primary_score":	999858,
			"second_score":	126618
		}, {
			"file":	"src/buffer.c",
			"line":	990,
			"primary_score":	999858,
			"second_score":	126617
		}, {
			"file":	"src/buffer.c",
			"line":	991,
			"primary_score":	999858,
			"second_score":	126616
		}, {
			"file":	"src/buffer.c",
			"line":	992,
			"primary_score":	999858,
			"second_score":	126615
		}, {
			"file":	"src/buffer.c",
			"line":	996,
			"primary_score":	999858,
			"second_score":	126614
		}, {
			"file":	"src/buffer.c",
			"line":	998,
			"primary_score":	999858,
			"second_score":	126613
		}, {
			"file":	"src/buffer.c",
			"line":	1003,
			"primary_score":	999858,
			"second_score":	126612
		}, {
			"file":	"src/buffer.c",
			"line":	1004,
			"primary_score":	999858,
			"second_score":	126507
		}, {
			"file":	"src/buffer.c",
			"line":	1005,
			"primary_score":	999858,
			"second_score":	126506
		}, {
			"file":	"src/buffer.c",
			"line":	1006,
			"primary_score":	999858,
			"second_score":	126505
		}, {
			"file":	"src/buffer.c",
			"line":	1017,
			"primary_score":	999858,
			"second_score":	126504
		}, {
			"file":	"src/buffer.c",
			"line":	1023,
			"primary_score":	999858,
			"second_score":	126503
		}, {
			"file":	"src/buffer.c",
			"line":	1026,
			"primary_score":	999858,
			"second_score":	126502
		}, {
			"file":	"src/buffer.c",
			"line":	1027,
			"primary_score":	999858,
			"second_score":	126501
		}, {
			"file":	"src/buffer.c",
			"line":	1029,
			"primary_score":	999884,
			"second_score":	126513
		}, {
			"file":	"src/buffer.c",
			"line":	1030,
			"primary_score":	999884,
			"second_score":	126512
		}, {
			"file":	"src/buffer.c",
			"line":	1031,
			"primary_score":	999884,
			"second_score":	126511
		}, {
			"file":	"src/buffer.c",
			"line":	1032,
			"primary_score":	999884,
			"second_score":	126510
		}, {
			"file":	"src/buffer.c",
			"line":	1034,
			"primary_score":	999884,
			"second_score":	126509
		}, {
			"file":	"src/buffer.c",
			"line":	1035,
			"primary_score":	999884,
			"second_score":	126508
		}, {
			"file":	"src/buffer.c",
			"line":	1038,
			"primary_score":	999858,
			"second_score":	126500
		}, {
			"file":	"src/buffer.c",
			"line":	1039,
			"primary_score":	999858,
			"second_score":	126499
		}, {
			"file":	"src/buffer.c",
			"line":	1041,
			"primary_score":	999858,
			"second_score":	126498
		}, {
			"file":	"src/buffer.c",
			"line":	1045,
			"primary_score":	999829,
			"second_score":	130144
		}, {
			"file":	"src/buffer.c",
			"line":	1056,
			"primary_score":	999905,
			"second_score":	130143
		}, {
			"file":	"src/buffer.c",
			"line":	1057,
			"primary_score":	999905,
			"second_score":	130142
		}, {
			"file":	"src/buffer.c",
			"line":	1061,
			"primary_score":	999911,
			"second_score":	130145
		}, {
			"file":	"src/buffer.c",
			"line":	1084,
			"primary_score":	999840,
			"second_score":	613332
		}, {
			"file":	"src/buffer.c",
			"line":	1090,
			"primary_score":	999823,
			"second_score":	129426
		}, {
			"file":	"src/buffer.c",
			"line":	1092,
			"primary_score":	999823,
			"second_score":	129425
		}, {
			"file":	"src/buffer.c",
			"line":	1094,
			"primary_score":	999823,
			"second_score":	129424
		}, {
			"file":	"src/buffer.c",
			"line":	1095,
			"primary_score":	999823,
			"second_score":	129409
		}, {
			"file":	"src/buffer.c",
			"line":	1100,
			"primary_score":	999823,
			"second_score":	129408
		}, {
			"file":	"src/buffer.c",
			"line":	1119,
			"primary_score":	999823,
			"second_score":	117193
		}, {
			"file":	"src/buffer.c",
			"line":	1121,
			"primary_score":	999823,
			"second_score":	117192
		}, {
			"file":	"src/buffer.c",
			"line":	1123,
			"primary_score":	999823,
			"second_score":	117191
		}, {
			"file":	"src/buffer.c",
			"line":	1127,
			"primary_score":	999823,
			"second_score":	115603
		}, {
			"file":	"src/buffer.c",
			"line":	1129,
			"primary_score":	999823,
			"second_score":	115602
		}, {
			"file":	"src/buffer.c",
			"line":	1131,
			"primary_score":	999823,
			"second_score":	115584
		}, {
			"file":	"src/buffer.c",
			"line":	1133,
			"primary_score":	999823,
			"second_score":	115583
		}, {
			"file":	"src/buffer.c",
			"line":	1137,
			"primary_score":	999823,
			"second_score":	115766
		}, {
			"file":	"src/buffer.c",
			"line":	1139,
			"primary_score":	999823,
			"second_score":	115765
		}, {
			"file":	"src/buffer.c",
			"line":	1140,
			"primary_score":	999823,
			"second_score":	116095
		}, {
			"file":	"src/buffer.c",
			"line":	1143,
			"primary_score":	999824,
			"second_score":	115764
		}, {
			"file":	"src/buffer.c",
			"line":	1145,
			"primary_score":	999824,
			"second_score":	115763
		}, {
			"file":	"src/buffer.c",
			"line":	1147,
			"primary_score":	999824,
			"second_score":	115759
		}, {
			"file":	"src/buffer.c",
			"line":	1151,
			"primary_score":	999824,
			"second_score":	115607
		}, {
			"file":	"src/buffer.c",
			"line":	1153,
			"primary_score":	999823,
			"second_score":	115605
		}, {
			"file":	"src/chunk.c",
			"line":	40,
			"primary_score":	999823,
			"second_score":	114357
		}, {
			"file":	"src/chunk.c",
			"line":	42,
			"primary_score":	999823,
			"second_score":	114356
		}, {
			"file":	"src/chunk.c",
			"line":	44,
			"primary_score":	999823,
			"second_score":	114355
		}, {
			"file":	"src/chunk.c",
			"line":	45,
			"primary_score":	999823,
			"second_score":	114354
		}, {
			"file":	"src/chunk.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	114353
		}, {
			"file":	"src/chunk.c",
			"line":	51,
			"primary_score":	999823,
			"second_score":	112905
		}, {
			"file":	"src/chunk.c",
			"line":	53,
			"primary_score":	999823,
			"second_score":	112904
		}, {
			"file":	"src/chunk.c",
			"line":	55,
			"primary_score":	999823,
			"second_score":	112903
		}, {
			"file":	"src/chunk.c",
			"line":	56,
			"primary_score":	999823,
			"second_score":	112895
		}, {
			"file":	"src/chunk.c",
			"line":	57,
			"primary_score":	999823,
			"second_score":	112887
		}, {
			"file":	"src/chunk.c",
			"line":	58,
			"primary_score":	999823,
			"second_score":	112886
		}, {
			"file":	"src/chunk.c",
			"line":	59,
			"primary_score":	999823,
			"second_score":	112885
		}, {
			"file":	"src/chunk.c",
			"line":	60,
			"primary_score":	999823,
			"second_score":	112884
		}, {
			"file":	"src/chunk.c",
			"line":	62,
			"primary_score":	999823,
			"second_score":	112883
		}, {
			"file":	"src/chunk.c",
			"line":	64,
			"primary_score":	999823,
			"second_score":	112882
		}, {
			"file":	"src/chunk.c",
			"line":	68,
			"primary_score":	999823,
			"second_score":	110950
		}, {
			"file":	"src/chunk.c",
			"line":	70,
			"primary_score":	999823,
			"second_score":	110949
		}, {
			"file":	"src/chunk.c",
			"line":	72,
			"primary_score":	999823,
			"second_score":	110942
		}, {
			"file":	"src/chunk.c",
			"line":	75,
			"primary_score":	999823,
			"second_score":	110941
		}, {
			"file":	"src/chunk.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	110940
		}, {
			"file":	"src/chunk.c",
			"line":	79,
			"primary_score":	999823,
			"second_score":	110936
		}, {
			"file":	"src/chunk.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	110935
		}, {
			"file":	"src/chunk.c",
			"line":	89,
			"primary_score":	999823,
			"second_score":	110934
		}, {
			"file":	"src/chunk.c",
			"line":	94,
			"primary_score":	999823,
			"second_score":	110933
		}, {
			"file":	"src/chunk.c",
			"line":	95,
			"primary_score":	999823,
			"second_score":	110932
		}, {
			"file":	"src/chunk.c",
			"line":	97,
			"primary_score":	999823,
			"second_score":	110931
		}, {
			"file":	"src/chunk.c",
			"line":	98,
			"primary_score":	999823,
			"second_score":	110930
		}, {
			"file":	"src/chunk.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	110929
		}, {
			"file":	"src/chunk.c",
			"line":	101,
			"primary_score":	999823,
			"second_score":	110928
		}, {
			"file":	"src/chunk.c",
			"line":	103,
			"primary_score":	999823,
			"second_score":	110927
		}, {
			"file":	"src/chunk.c",
			"line":	104,
			"primary_score":	999823,
			"second_score":	110926
		}, {
			"file":	"src/chunk.c",
			"line":	106,
			"primary_score":	999823,
			"second_score":	110925
		}, {
			"file":	"src/chunk.c",
			"line":	107,
			"primary_score":	999823,
			"second_score":	110924
		}, {
			"file":	"src/chunk.c",
			"line":	111,
			"primary_score":	999823,
			"second_score":	113131
		}, {
			"file":	"src/chunk.c",
			"line":	114,
			"primary_score":	999823,
			"second_score":	113130
		}, {
			"file":	"src/chunk.c",
			"line":	116,
			"primary_score":	999823,
			"second_score":	113102
		}, {
			"file":	"src/chunk.c",
			"line":	117,
			"primary_score":	999823,
			"second_score":	113098
		}, {
			"file":	"src/chunk.c",
			"line":	119,
			"primary_score":	999823,
			"second_score":	113094
		}, {
			"file":	"src/chunk.c",
			"line":	129,
			"primary_score":	999823,
			"second_score":	110963
		}, {
			"file":	"src/chunk.c",
			"line":	133,
			"primary_score":	999823,
			"second_score":	110962
		}, {
			"file":	"src/chunk.c",
			"line":	150,
			"primary_score":	999823,
			"second_score":	110957
		}, {
			"file":	"src/chunk.c",
			"line":	173,
			"primary_score":	999823,
			"second_score":	112908
		}, {
			"file":	"src/chunk.c",
			"line":	176,
			"primary_score":	999823,
			"second_score":	112907
		}, {
			"file":	"src/chunk.c",
			"line":	177,
			"primary_score":	999823,
			"second_score":	112906
		}, {
			"file":	"src/chunk.c",
			"line":	180,
			"primary_score":	999971,
			"second_score":	114292
		}, {
			"file":	"src/chunk.c",
			"line":	181,
			"primary_score":	999971,
			"second_score":	114291
		}, {
			"file":	"src/chunk.c",
			"line":	182,
			"primary_score":	999971,
			"second_score":	114290
		}, {
			"file":	"src/chunk.c",
			"line":	184,
			"primary_score":	999971,
			"second_score":	114289
		}, {
			"file":	"src/chunk.c",
			"line":	187,
			"primary_score":	999823,
			"second_score":	112881
		}, {
			"file":	"src/chunk.c",
			"line":	199,
			"primary_score":	999823,
			"second_score":	110952
		}, {
			"file":	"src/chunk.c",
			"line":	202,
			"primary_score":	999823,
			"second_score":	110951
		}, {
			"file":	"src/chunk.c",
			"line":	205,
			"primary_score":	999823,
			"second_score":	110923
		}, {
			"file":	"src/chunk.c",
			"line":	206,
			"primary_score":	999823,
			"second_score":	110922
		}, {
			"file":	"src/chunk.c",
			"line":	207,
			"primary_score":	999823,
			"second_score":	110921
		}, {
			"file":	"src/chunk.c",
			"line":	213,
			"primary_score":	999823,
			"second_score":	21214
		}, {
			"file":	"src/chunk.c",
			"line":	215,
			"primary_score":	999823,
			"second_score":	21213
		}, {
			"file":	"src/chunk.c",
			"line":	217,
			"primary_score":	999823,
			"second_score":	21212
		}, {
			"file":	"src/chunk.c",
			"line":	223,
			"primary_score":	999823,
			"second_score":	21211
		}, {
			"file":	"src/chunk.c",
			"line":	227,
			"primary_score":	999823,
			"second_score":	114280
		}, {
			"file":	"src/chunk.c",
			"line":	228,
			"primary_score":	999823,
			"second_score":	114279
		}, {
			"file":	"src/chunk.c",
			"line":	230,
			"primary_score":	999823,
			"second_score":	114278
		}, {
			"file":	"src/chunk.c",
			"line":	231,
			"primary_score":	999823,
			"second_score":	114277
		}, {
			"file":	"src/chunk.c",
			"line":	234,
			"primary_score":	999823,
			"second_score":	114276
		}, {
			"file":	"src/chunk.c",
			"line":	238,
			"primary_score":	999823,
			"second_score":	112873
		}, {
			"file":	"src/chunk.c",
			"line":	239,
			"primary_score":	999865,
			"second_score":	112872
		}, {
			"file":	"src/chunk.c",
			"line":	241,
			"primary_score":	999823,
			"second_score":	112871
		}, {
			"file":	"src/chunk.c",
			"line":	243,
			"primary_score":	999823,
			"second_score":	112870
		}, {
			"file":	"src/chunk.c",
			"line":	244,
			"primary_score":	999823,
			"second_score":	113155
		}, {
			"file":	"src/chunk.c",
			"line":	247,
			"primary_score":	999823,
			"second_score":	112869
		}, {
			"file":	"src/chunk.c",
			"line":	254,
			"primary_score":	999823,
			"second_score":	21538
		}, {
			"file":	"src/chunk.c",
			"line":	257,
			"primary_score":	999823,
			"second_score":	21537
		}, {
			"file":	"src/chunk.c",
			"line":	258,
			"primary_score":	999823,
			"second_score":	110964
		}, {
			"file":	"src/chunk.c",
			"line":	261,
			"primary_score":	999823,
			"second_score":	21536
		}, {
			"file":	"src/chunk.c",
			"line":	263,
			"primary_score":	999823,
			"second_score":	21532
		}, {
			"file":	"src/chunk.c",
			"line":	264,
			"primary_score":	999823,
			"second_score":	21531
		}, {
			"file":	"src/chunk.c",
			"line":	265,
			"primary_score":	999823,
			"second_score":	21530
		}, {
			"file":	"src/chunk.c",
			"line":	313,
			"primary_score":	999912,
			"second_score":	112916
		}, {
			"file":	"src/chunk.c",
			"line":	314,
			"primary_score":	999912,
			"second_score":	112915
		}, {
			"file":	"src/chunk.c",
			"line":	315,
			"primary_score":	999912,
			"second_score":	112914
		}, {
			"file":	"src/chunk.c",
			"line":	317,
			"primary_score":	999912,
			"second_score":	112913
		}, {
			"file":	"src/chunk.c",
			"line":	319,
			"primary_score":	999912,
			"second_score":	112912
		}, {
			"file":	"src/chunk.c",
			"line":	321,
			"primary_score":	999912,
			"second_score":	112911
		}, {
			"file":	"src/chunk.c",
			"line":	324,
			"primary_score":	999912,
			"second_score":	112867
		}, {
			"file":	"src/chunk.c",
			"line":	325,
			"primary_score":	999912,
			"second_score":	112866
		}, {
			"file":	"src/chunk.c",
			"line":	326,
			"primary_score":	999912,
			"second_score":	112865
		}, {
			"file":	"src/chunk.c",
			"line":	328,
			"primary_score":	999912,
			"second_score":	112864
		}, {
			"file":	"src/chunk.c",
			"line":	329,
			"primary_score":	999912,
			"second_score":	112863
		}, {
			"file":	"src/chunk.c",
			"line":	330,
			"primary_score":	999912,
			"second_score":	112862
		}, {
			"file":	"src/chunk.c",
			"line":	332,
			"primary_score":	999912,
			"second_score":	112861
		}, {
			"file":	"src/chunk.c",
			"line":	333,
			"primary_score":	999912,
			"second_score":	112860
		}, {
			"file":	"src/chunk.c",
			"line":	334,
			"primary_score":	999912,
			"second_score":	112859
		}, {
			"file":	"src/chunk.c",
			"line":	336,
			"primary_score":	999912,
			"second_score":	112858
		}, {
			"file":	"src/chunk.c",
			"line":	338,
			"primary_score":	999912,
			"second_score":	112855
		}, {
			"file":	"src/chunk.c",
			"line":	346,
			"primary_score":	999823,
			"second_score":	112926
		}, {
			"file":	"src/chunk.c",
			"line":	347,
			"primary_score":	999823,
			"second_score":	112925
		}, {
			"file":	"src/chunk.c",
			"line":	349,
			"primary_score":	999823,
			"second_score":	112924
		}, {
			"file":	"src/chunk.c",
			"line":	351,
			"primary_score":	999823,
			"second_score":	112923
		}, {
			"file":	"src/chunk.c",
			"line":	352,
			"primary_score":	999865,
			"second_score":	112922
		}, {
			"file":	"src/chunk.c",
			"line":	355,
			"primary_score":	999865,
			"second_score":	112921
		}, {
			"file":	"src/chunk.c",
			"line":	357,
			"primary_score":	999865,
			"second_score":	112919
		}, {
			"file":	"src/chunk.c",
			"line":	361,
			"primary_score":	999912,
			"second_score":	112918
		}, {
			"file":	"src/chunk.c",
			"line":	362,
			"primary_score":	999912,
			"second_score":	112917
		}, {
			"file":	"src/chunk.c",
			"line":	366,
			"primary_score":	999912,
			"second_score":	112854
		}, {
			"file":	"src/chunk.c",
			"line":	381,
			"primary_score":	999865,
			"second_score":	112853
		}, {
			"file":	"src/chunk.c",
			"line":	383,
			"primary_score":	999865,
			"second_score":	112850
		}, {
			"file":	"src/chunk.c",
			"line":	386,
			"primary_score":	999823,
			"second_score":	112849
		}, {
			"file":	"src/chunk.c",
			"line":	536,
			"primary_score":	999985,
			"second_score":	115140
		}, {
			"file":	"src/chunk.c",
			"line":	538,
			"primary_score":	999985,
			"second_score":	115139
		}, {
			"file":	"src/chunk.c",
			"line":	540,
			"primary_score":	999985,
			"second_score":	115138
		}, {
			"file":	"src/chunk.c",
			"line":	541,
			"primary_score":	999985,
			"second_score":	115109
		}, {
			"file":	"src/chunk.c",
			"line":	542,
			"primary_score":	999985,
			"second_score":	115108
		}, {
			"file":	"src/chunk.c",
			"line":	543,
			"primary_score":	999985,
			"second_score":	115107
		}, {
			"file":	"src/chunk.c",
			"line":	545,
			"primary_score":	999985,
			"second_score":	115091
		}, {
			"file":	"src/chunk.c",
			"line":	547,
			"primary_score":	999985,
			"second_score":	115085
		}, {
			"file":	"src/chunk.c",
			"line":	551,
			"primary_score":	999823,
			"second_score":	114296
		}, {
			"file":	"src/chunk.c",
			"line":	553,
			"primary_score":	999823,
			"second_score":	114295
		}, {
			"file":	"src/chunk.c",
			"line":	555,
			"primary_score":	999823,
			"second_score":	114287
		}, {
			"file":	"src/chunk.c",
			"line":	556,
			"primary_score":	999823,
			"second_score":	114286
		}, {
			"file":	"src/chunk.c",
			"line":	557,
			"primary_score":	999823,
			"second_score":	114285
		}, {
			"file":	"src/chunk.c",
			"line":	559,
			"primary_score":	999823,
			"second_score":	114281
		}, {
			"file":	"src/chunk.c",
			"line":	561,
			"primary_score":	999823,
			"second_score":	114275
		}, {
			"file":	"src/chunk.c",
			"line":	565,
			"primary_score":	999823,
			"second_score":	112910
		}, {
			"file":	"src/chunk.c",
			"line":	567,
			"primary_score":	999823,
			"second_score":	112909
		}, {
			"file":	"src/chunk.c",
			"line":	569,
			"primary_score":	999823,
			"second_score":	112880
		}, {
			"file":	"src/chunk.c",
			"line":	570,
			"primary_score":	999823,
			"second_score":	112879
		}, {
			"file":	"src/chunk.c",
			"line":	571,
			"primary_score":	999823,
			"second_score":	112878
		}, {
			"file":	"src/chunk.c",
			"line":	573,
			"primary_score":	999823,
			"second_score":	112874
		}, {
			"file":	"src/chunk.c",
			"line":	575,
			"primary_score":	999823,
			"second_score":	112868
		}, {
			"file":	"src/chunk.c",
			"line":	632,
			"primary_score":	999823,
			"second_score":	112799
		}, {
			"file":	"src/chunk.c",
			"line":	633,
			"primary_score":	999823,
			"second_score":	112798
		}, {
			"file":	"src/chunk.c",
			"line":	635,
			"primary_score":	999823,
			"second_score":	112797
		}, {
			"file":	"src/chunk.c",
			"line":	648,
			"primary_score":	999823,
			"second_score":	112796
		}, {
			"file":	"src/chunk.c",
			"line":	674,
			"primary_score":	999823,
			"second_score":	21535
		}, {
			"file":	"src/chunk.c",
			"line":	676,
			"primary_score":	999823,
			"second_score":	21534
		}, {
			"file":	"src/chunk.c",
			"line":	677,
			"primary_score":	999823,
			"second_score":	115149
		}, {
			"file":	"src/chunk.c",
			"line":	680,
			"primary_score":	999823,
			"second_score":	110956
		}, {
			"file":	"src/chunk.c",
			"line":	681,
			"primary_score":	999823,
			"second_score":	110955
		}, {
			"file":	"src/chunk.c",
			"line":	683,
			"primary_score":	999823,
			"second_score":	110953
		}, {
			"file":	"src/chunk.c",
			"line":	687,
			"primary_score":	999823,
			"second_score":	21533
		}, {
			"file":	"src/chunk.c",
			"line":	705,
			"primary_score":	999823,
			"second_score":	113139
		}, {
			"file":	"src/chunk.c",
			"line":	706,
			"primary_score":	999823,
			"second_score":	113138
		}, {
			"file":	"src/chunk.c",
			"line":	707,
			"primary_score":	999823,
			"second_score":	113137
		}, {
			"file":	"src/chunk.c",
			"line":	709,
			"primary_score":	999823,
			"second_score":	113136
		}, {
			"file":	"src/chunk.c",
			"line":	710,
			"primary_score":	999823,
			"second_score":	113135
		}, {
			"file":	"src/chunk.c",
			"line":	712,
			"primary_score":	999823,
			"second_score":	113134
		}, {
			"file":	"src/chunk.c",
			"line":	713,
			"primary_score":	999823,
			"second_score":	113133
		}, {
			"file":	"src/chunk.c",
			"line":	714,
			"primary_score":	999823,
			"second_score":	113132
		}, {
			"file":	"src/chunk.c",
			"line":	715,
			"primary_score":	999823,
			"second_score":	113093
		}, {
			"file":	"src/chunk.c",
			"line":	717,
			"primary_score":	999823,
			"second_score":	113092
		}, {
			"file":	"src/configfile-glue.c",
			"line":	99,
			"primary_score":	999840,
			"second_score":	613334
		}, {
			"file":	"src/configfile-glue.c",
			"line":	101,
			"primary_score":	999840,
			"second_score":	613333
		}, {
			"file":	"src/configfile-glue.c",
			"line":	102,
			"primary_score":	999840,
			"second_score":	613318
		}, {
			"file":	"src/configfile-glue.c",
			"line":	103,
			"primary_score":	999840,
			"second_score":	613317
		}, {
			"file":	"src/configfile-glue.c",
			"line":	118,
			"primary_score":	999840,
			"second_score":	607837
		}, {
			"file":	"src/configfile-glue.c",
			"line":	120,
			"primary_score":	999840,
			"second_score":	607836
		}, {
			"file":	"src/configfile-glue.c",
			"line":	121,
			"primary_score":	999840,
			"second_score":	607835
		}, {
			"file":	"src/configfile-glue.c",
			"line":	139,
			"primary_score":	999840,
			"second_score":	607834
		}, {
			"file":	"src/configfile-glue.c",
			"line":	146,
			"primary_score":	999836,
			"second_score":	524037
		}, {
			"file":	"src/configfile-glue.c",
			"line":	147,
			"primary_score":	999836,
			"second_score":	524029
		}, {
			"file":	"src/configfile-glue.c",
			"line":	215,
			"primary_score":	999823,
			"second_score":	119870
		}, {
			"file":	"src/configfile-glue.c",
			"line":	216,
			"primary_score":	999823,
			"second_score":	119869
		}, {
			"file":	"src/configfile-glue.c",
			"line":	218,
			"primary_score":	999823,
			"second_score":	119868
		}, {
			"file":	"src/configfile-glue.c",
			"line":	219,
			"primary_score":	999835,
			"second_score":	126797
		}, {
			"file":	"src/configfile-glue.c",
			"line":	223,
			"primary_score":	999835,
			"second_score":	126796
		}, {
			"file":	"src/configfile-glue.c",
			"line":	233,
			"primary_score":	999823,
			"second_score":	119867
		}, {
			"file":	"src/configfile-glue.c",
			"line":	253,
			"primary_score":	999823,
			"second_score":	119866
		}, {
			"file":	"src/configfile-glue.c",
			"line":	254,
			"primary_score":	999840,
			"second_score":	121414
		}, {
			"file":	"src/configfile-glue.c",
			"line":	261,
			"primary_score":	999840,
			"second_score":	121413
		}, {
			"file":	"src/configfile-glue.c",
			"line":	266,
			"primary_score":	999857,
			"second_score":	119865
		}, {
			"file":	"src/configfile-glue.c",
			"line":	268,
			"primary_score":	999857,
			"second_score":	126888
		}, {
			"file":	"src/configfile-glue.c",
			"line":	270,
			"primary_score":	999857,
			"second_score":	126887
		}, {
			"file":	"src/configfile-glue.c",
			"line":	276,
			"primary_score":	999919,
			"second_score":	126885
		}, {
			"file":	"src/configfile-glue.c",
			"line":	278,
			"primary_score":	999919,
			"second_score":	126884
		}, {
			"file":	"src/configfile-glue.c",
			"line":	282,
			"primary_score":	999919,
			"second_score":	128334
		}, {
			"file":	"src/configfile-glue.c",
			"line":	284,
			"primary_score":	999919,
			"second_score":	128333
		}, {
			"file":	"src/configfile-glue.c",
			"line":	286,
			"primary_score":	999923,
			"second_score":	128332
		}, {
			"file":	"src/configfile-glue.c",
			"line":	306,
			"primary_score":	999857,
			"second_score":	126883
		}, {
			"file":	"src/configfile-glue.c",
			"line":	309,
			"primary_score":	999874,
			"second_score":	128210
		}, {
			"file":	"src/configfile-glue.c",
			"line":	319,
			"primary_score":	999874,
			"second_score":	128209
		}, {
			"file":	"src/configfile-glue.c",
			"line":	375,
			"primary_score":	999874,
			"second_score":	128208
		}, {
			"file":	"src/configfile-glue.c",
			"line":	377,
			"primary_score":	999874,
			"second_score":	128207
		}, {
			"file":	"src/configfile-glue.c",
			"line":	381,
			"primary_score":	999873,
			"second_score":	126334
		}, {
			"file":	"src/configfile-glue.c",
			"line":	392,
			"primary_score":	999874,
			"second_score":	128044
		}, {
			"file":	"src/configfile-glue.c",
			"line":	394,
			"primary_score":	999874,
			"second_score":	128043
		}, {
			"file":	"src/configfile-glue.c",
			"line":	397,
			"primary_score":	999878,
			"second_score":	128003
		}, {
			"file":	"src/configfile-glue.c",
			"line":	399,
			"primary_score":	999874,
			"second_score":	128002
		}, {
			"file":	"src/configfile-glue.c",
			"line":	402,
			"primary_score":	999874,
			"second_score":	127715
		}, {
			"file":	"src/configfile-glue.c",
			"line":	403,
			"primary_score":	999874,
			"second_score":	127714
		}, {
			"file":	"src/configfile-glue.c",
			"line":	406,
			"primary_score":	999877,
			"second_score":	127651
		}, {
			"file":	"src/configfile-glue.c",
			"line":	408,
			"primary_score":	999874,
			"second_score":	127650
		}, {
			"file":	"src/configfile-glue.c",
			"line":	433,
			"primary_score":	999914,
			"second_score":	119864
		}, {
			"file":	"src/configfile-glue.c",
			"line":	438,
			"primary_score":	999857,
			"second_score":	119863
		}, {
			"file":	"src/configfile-glue.c",
			"line":	446,
			"primary_score":	999857,
			"second_score":	119862
		}, {
			"file":	"src/configfile-glue.c",
			"line":	453,
			"primary_score":	999857,
			"second_score":	119861
		}, {
			"file":	"src/configfile-glue.c",
			"line":	459,
			"primary_score":	999858,
			"second_score":	128325
		}, {
			"file":	"src/configfile-glue.c",
			"line":	465,
			"primary_score":	999873,
			"second_score":	119860
		}, {
			"file":	"src/configfile-glue.c",
			"line":	466,
			"primary_score":	999873,
			"second_score":	119859
		}, {
			"file":	"src/configfile-glue.c",
			"line":	471,
			"primary_score":	999873,
			"second_score":	119858
		}, {
			"file":	"src/configfile-glue.c",
			"line":	474,
			"primary_score":	999873,
			"second_score":	119857
		}, {
			"file":	"src/configfile-glue.c",
			"line":	475,
			"primary_score":	999873,
			"second_score":	119856
		}, {
			"file":	"src/configfile-glue.c",
			"line":	476,
			"primary_score":	999873,
			"second_score":	127993
		}, {
			"file":	"src/configfile-glue.c",
			"line":	477,
			"primary_score":	999873,
			"second_score":	127992
		}, {
			"file":	"src/configfile-glue.c",
			"line":	479,
			"primary_score":	999873,
			"second_score":	127991
		}, {
			"file":	"src/configfile-glue.c",
			"line":	482,
			"primary_score":	999874,
			"second_score":	119855
		}, {
			"file":	"src/configfile-glue.c",
			"line":	496,
			"primary_score":	999823,
			"second_score":	112320
		}, {
			"file":	"src/configfile-glue.c",
			"line":	498,
			"primary_score":	999823,
			"second_score":	112319
		}, {
			"file":	"src/configfile-glue.c",
			"line":	499,
			"primary_score":	999823,
			"second_score":	119872
		}, {
			"file":	"src/configfile-glue.c",
			"line":	502,
			"primary_score":	999823,
			"second_score":	119871
		}, {
			"file":	"src/configfile-glue.c",
			"line":	504,
			"primary_score":	999863,
			"second_score":	128195
		}, {
			"file":	"src/configfile-glue.c",
			"line":	514,
			"primary_score":	999823,
			"second_score":	119854
		}, {
			"file":	"src/configfile-glue.c",
			"line":	516,
			"primary_score":	999823,
			"second_score":	119853
		}, {
			"file":	"src/configfile-glue.c",
			"line":	524,
			"primary_score":	999857,
			"second_score":	112318
		}, {
			"file":	"src/configfile-glue.c",
			"line":	533,
			"primary_score":	999823,
			"second_score":	112317
		}, {
			"file":	"src/configfile-glue.c",
			"line":	542,
			"primary_score":	999823,
			"second_score":	21413
		}, {
			"file":	"src/configfile-glue.c",
			"line":	544,
			"primary_score":	999823,
			"second_score":	21412
		}, {
			"file":	"src/configfile-glue.c",
			"line":	545,
			"primary_score":	999823,
			"second_score":	21315
		}, {
			"file":	"src/configfile-glue.c",
			"line":	547,
			"primary_score":	999823,
			"second_score":	21314
		}, {
			"file":	"src/configfile-glue.c",
			"line":	548,
			"primary_score":	999823,
			"second_score":	21313
		}, {
			"file":	"src/configfile-glue.c",
			"line":	549,
			"primary_score":	999823,
			"second_score":	21312
		}, {
			"file":	"src/configfile-glue.c",
			"line":	558,
			"primary_score":	999823,
			"second_score":	21415
		}, {
			"file":	"src/configfile-glue.c",
			"line":	560,
			"primary_score":	999823,
			"second_score":	21414
		}, {
			"file":	"src/configfile-glue.c",
			"line":	562,
			"primary_score":	999823,
			"second_score":	21310
		}, {
			"file":	"src/configfile-glue.c",
			"line":	563,
			"primary_score":	999823,
			"second_score":	21298
		}, {
			"file":	"src/configfile-glue.c",
			"line":	568,
			"primary_score":	999823,
			"second_score":	112321
		}, {
			"file":	"src/configfile-glue.c",
			"line":	591,
			"primary_score":	999861,
			"second_score":	123682
		}, {
			"file":	"src/configfile-glue.c",
			"line":	592,
			"primary_score":	999861,
			"second_score":	123681
		}, {
			"file":	"src/configfile-glue.c",
			"line":	593,
			"primary_score":	999861,
			"second_score":	123680
		}, {
			"file":	"src/configfile-glue.c",
			"line":	594,
			"primary_score":	999861,
			"second_score":	123679
		}, {
			"file":	"src/configfile-glue.c",
			"line":	595,
			"primary_score":	999861,
			"second_score":	123678
		}, {
			"file":	"src/configfile-glue.c",
			"line":	596,
			"primary_score":	999861,
			"second_score":	123677
		}, {
			"file":	"src/configfile-glue.c",
			"line":	597,
			"primary_score":	999861,
			"second_score":	123676
		}, {
			"file":	"src/configfile-glue.c",
			"line":	599,
			"primary_score":	999861,
			"second_score":	123675
		}, {
			"file":	"src/configfile-glue.c",
			"line":	601,
			"primary_score":	999861,
			"second_score":	123674
		}, {
			"file":	"src/configfile-glue.c",
			"line":	602,
			"primary_score":	999869,
			"second_score":	123673
		}, {
			"file":	"src/configfile-glue.c",
			"line":	604,
			"primary_score":	999869,
			"second_score":	123672
		}, {
			"file":	"src/configfile-glue.c",
			"line":	605,
			"primary_score":	999869,
			"second_score":	123671
		}, {
			"file":	"src/configfile-glue.c",
			"line":	606,
			"primary_score":	999869,
			"second_score":	123670
		}, {
			"file":	"src/configfile-glue.c",
			"line":	607,
			"primary_score":	999869,
			"second_score":	123669
		}, {
			"file":	"src/configfile-glue.c",
			"line":	609,
			"primary_score":	999869,
			"second_score":	123668
		}, {
			"file":	"src/configfile-glue.c",
			"line":	610,
			"primary_score":	999873,
			"second_score":	123667
		}, {
			"file":	"src/configfile-glue.c",
			"line":	659,
			"primary_score":	999866,
			"second_score":	123666
		}, {
			"file":	"src/configfile.c",
			"line":	255,
			"primary_score":	999823,
			"second_score":	21294
		}, {
			"file":	"src/configfile.c",
			"line":	257,
			"primary_score":	999823,
			"second_score":	21293
		}, {
			"file":	"src/configfile.c",
			"line":	258,
			"primary_score":	999823,
			"second_score":	21292
		}, {
			"file":	"src/configfile.c",
			"line":	259,
			"primary_score":	999823,
			"second_score":	21291
		}, {
			"file":	"src/configfile.c",
			"line":	260,
			"primary_score":	999823,
			"second_score":	21290
		}, {
			"file":	"src/configfile.c",
			"line":	261,
			"primary_score":	999823,
			"second_score":	21289
		}, {
			"file":	"src/configfile.c",
			"line":	262,
			"primary_score":	999823,
			"second_score":	21288
		}, {
			"file":	"src/configfile.c",
			"line":	263,
			"primary_score":	999823,
			"second_score":	21287
		}, {
			"file":	"src/configfile.c",
			"line":	264,
			"primary_score":	999823,
			"second_score":	21286
		}, {
			"file":	"src/configfile.c",
			"line":	265,
			"primary_score":	999823,
			"second_score":	21285
		}, {
			"file":	"src/configfile.c",
			"line":	266,
			"primary_score":	999823,
			"second_score":	21284
		}, {
			"file":	"src/configfile.c",
			"line":	267,
			"primary_score":	999823,
			"second_score":	21283
		}, {
			"file":	"src/configfile.c",
			"line":	269,
			"primary_score":	999823,
			"second_score":	21282
		}, {
			"file":	"src/configfile.c",
			"line":	271,
			"primary_score":	999823,
			"second_score":	21281
		}, {
			"file":	"src/configfile.c",
			"line":	272,
			"primary_score":	999823,
			"second_score":	21280
		}, {
			"file":	"src/configfile.c",
			"line":	273,
			"primary_score":	999823,
			"second_score":	21279
		}, {
			"file":	"src/configfile.c",
			"line":	274,
			"primary_score":	999823,
			"second_score":	21278
		}, {
			"file":	"src/configfile.c",
			"line":	276,
			"primary_score":	999823,
			"second_score":	21277
		}, {
			"file":	"src/configfile.c",
			"line":	277,
			"primary_score":	999823,
			"second_score":	21276
		}, {
			"file":	"src/configfile.c",
			"line":	279,
			"primary_score":	999823,
			"second_score":	21262
		}, {
			"file":	"src/configfile.c",
			"line":	280,
			"primary_score":	999823,
			"second_score":	21261
		}, {
			"file":	"src/configfile.c",
			"line":	281,
			"primary_score":	999823,
			"second_score":	21260
		}, {
			"file":	"src/configfile.c",
			"line":	282,
			"primary_score":	999823,
			"second_score":	21259
		}, {
			"file":	"src/configfile.c",
			"line":	283,
			"primary_score":	999823,
			"second_score":	21258
		}, {
			"file":	"src/configfile.c",
			"line":	284,
			"primary_score":	999823,
			"second_score":	21257
		}, {
			"file":	"src/configfile.c",
			"line":	286,
			"primary_score":	999823,
			"second_score":	21256
		}, {
			"file":	"src/configfile.c",
			"line":	287,
			"primary_score":	999823,
			"second_score":	21255
		}, {
			"file":	"src/configfile.c",
			"line":	288,
			"primary_score":	999823,
			"second_score":	21254
		}, {
			"file":	"src/configfile.c",
			"line":	290,
			"primary_score":	999823,
			"second_score":	21253
		}, {
			"file":	"src/configfile.c",
			"line":	291,
			"primary_score":	999823,
			"second_score":	21252
		}, {
			"file":	"src/configfile.c",
			"line":	292,
			"primary_score":	999823,
			"second_score":	21251
		}, {
			"file":	"src/configfile.c",
			"line":	296,
			"primary_score":	999857,
			"second_score":	119890
		}, {
			"file":	"src/configfile.c",
			"line":	298,
			"primary_score":	999857,
			"second_score":	119889
		}, {
			"file":	"src/configfile.c",
			"line":	301,
			"primary_score":	999857,
			"second_score":	119888
		}, {
			"file":	"src/configfile.c",
			"line":	302,
			"primary_score":	999857,
			"second_score":	119770
		}, {
			"file":	"src/configfile.c",
			"line":	303,
			"primary_score":	999857,
			"second_score":	119769
		}, {
			"file":	"src/configfile.c",
			"line":	306,
			"primary_score":	999857,
			"second_score":	119768
		}, {
			"file":	"src/configfile.c",
			"line":	309,
			"primary_score":	999857,
			"second_score":	119876
		}, {
			"file":	"src/configfile.c",
			"line":	312,
			"primary_score":	999863,
			"second_score":	128191
		}, {
			"file":	"src/configfile.c",
			"line":	313,
			"primary_score":	999863,
			"second_score":	128729
		}, {
			"file":	"src/configfile.c",
			"line":	315,
			"primary_score":	999863,
			"second_score":	128728
		}, {
			"file":	"src/configfile.c",
			"line":	317,
			"primary_score":	999863,
			"second_score":	128721
		}, {
			"file":	"src/configfile.c",
			"line":	319,
			"primary_score":	999863,
			"second_score":	128714
		}, {
			"file":	"src/configfile.c",
			"line":	321,
			"primary_score":	999863,
			"second_score":	128707
		}, {
			"file":	"src/configfile.c",
			"line":	323,
			"primary_score":	999863,
			"second_score":	128700
		}, {
			"file":	"src/configfile.c",
			"line":	325,
			"primary_score":	999863,
			"second_score":	128693
		}, {
			"file":	"src/configfile.c",
			"line":	327,
			"primary_score":	999863,
			"second_score":	128686
		}, {
			"file":	"src/configfile.c",
			"line":	329,
			"primary_score":	999863,
			"second_score":	128679
		}, {
			"file":	"src/configfile.c",
			"line":	331,
			"primary_score":	999863,
			"second_score":	128672
		}, {
			"file":	"src/configfile.c",
			"line":	333,
			"primary_score":	999863,
			"second_score":	128665
		}, {
			"file":	"src/configfile.c",
			"line":	335,
			"primary_score":	999863,
			"second_score":	128658
		}, {
			"file":	"src/configfile.c",
			"line":	337,
			"primary_score":	999863,
			"second_score":	128651
		}, {
			"file":	"src/configfile.c",
			"line":	339,
			"primary_score":	999863,
			"second_score":	128644
		}, {
			"file":	"src/configfile.c",
			"line":	341,
			"primary_score":	999863,
			"second_score":	128637
		}, {
			"file":	"src/configfile.c",
			"line":	344,
			"primary_score":	999863,
			"second_score":	128630
		}, {
			"file":	"src/configfile.c",
			"line":	347,
			"primary_score":	999863,
			"second_score":	128623
		}, {
			"file":	"src/configfile.c",
			"line":	349,
			"primary_score":	999864,
			"second_score":	128616
		}, {
			"file":	"src/configfile.c",
			"line":	351,
			"primary_score":	999864,
			"second_score":	128609
		}, {
			"file":	"src/configfile.c",
			"line":	353,
			"primary_score":	999864,
			"second_score":	128602
		}, {
			"file":	"src/configfile.c",
			"line":	355,
			"primary_score":	999864,
			"second_score":	128595
		}, {
			"file":	"src/configfile.c",
			"line":	357,
			"primary_score":	999864,
			"second_score":	128588
		}, {
			"file":	"src/configfile.c",
			"line":	359,
			"primary_score":	999864,
			"second_score":	128580
		}, {
			"file":	"src/configfile.c",
			"line":	361,
			"primary_score":	999864,
			"second_score":	128573
		}, {
			"file":	"src/configfile.c",
			"line":	363,
			"primary_score":	999864,
			"second_score":	128566
		}, {
			"file":	"src/configfile.c",
			"line":	365,
			"primary_score":	999864,
			"second_score":	128559
		}, {
			"file":	"src/configfile.c",
			"line":	367,
			"primary_score":	999864,
			"second_score":	128552
		}, {
			"file":	"src/configfile.c",
			"line":	369,
			"primary_score":	999864,
			"second_score":	128545
		}, {
			"file":	"src/configfile.c",
			"line":	377,
			"primary_score":	999857,
			"second_score":	119766
		}, {
			"file":	"src/configfile.c",
			"line":	487,
			"primary_score":	999839,
			"second_score":	644131
		}, {
			"file":	"src/configfile.c",
			"line":	488,
			"primary_score":	999839,
			"second_score":	644130
		}, {
			"file":	"src/configfile.c",
			"line":	490,
			"primary_score":	999839,
			"second_score":	644129
		}, {
			"file":	"src/configfile.c",
			"line":	492,
			"primary_score":	999839,
			"second_score":	644112
		}, {
			"file":	"src/configfile.c",
			"line":	520,
			"primary_score":	999840,
			"second_score":	648864
		}, {
			"file":	"src/configfile.c",
			"line":	526,
			"primary_score":	999840,
			"second_score":	648863
		}, {
			"file":	"src/configfile.c",
			"line":	527,
			"primary_score":	999840,
			"second_score":	648862
		}, {
			"file":	"src/configfile.c",
			"line":	529,
			"primary_score":	999840,
			"second_score":	648861
		}, {
			"file":	"src/configfile.c",
			"line":	531,
			"primary_score":	999840,
			"second_score":	648844
		}, {
			"file":	"src/configfile.c",
			"line":	539,
			"primary_score":	999840,
			"second_score":	648843
		}, {
			"file":	"src/configfile.c",
			"line":	540,
			"primary_score":	999840,
			"second_score":	648842
		}, {
			"file":	"src/configfile.c",
			"line":	549,
			"primary_score":	999840,
			"second_score":	648841
		}, {
			"file":	"src/configfile.c",
			"line":	721,
			"primary_score":	999831,
			"second_score":	849708
		}, {
			"file":	"src/configfile.c",
			"line":	768,
			"primary_score":	999839,
			"second_score":	860937
		}, {
			"file":	"src/configparser.c",
			"line":	1050,
			"primary_score":	999827,
			"second_score":	845366
		}, {
			"file":	"src/configparser.c",
			"line":	1051,
			"primary_score":	999827,
			"second_score":	845365
		}, {
			"file":	"src/configparser.c",
			"line":	1054,
			"primary_score":	999827,
			"second_score":	845364
		}, {
			"file":	"src/configparser.c",
			"line":	1055,
			"primary_score":	999827,
			"second_score":	845357
		}, {
			"file":	"src/configparser.c",
			"line":	1180,
			"primary_score":	999840,
			"second_score":	648304
		}, {
			"file":	"src/configparser.c",
			"line":	1183,
			"primary_score":	999839,
			"second_score":	643620
		}, {
			"file":	"src/configparser.c",
			"line":	1255,
			"primary_score":	999839,
			"second_score":	643076
		}, {
			"file":	"src/configparser.c",
			"line":	1256,
			"primary_score":	999839,
			"second_score":	643075
		}, {
			"file":	"src/configparser.c",
			"line":	1258,
			"primary_score":	999839,
			"second_score":	643074
		}, {
			"file":	"src/configparser.c",
			"line":	1267,
			"primary_score":	999839,
			"second_score":	643073
		}, {
			"file":	"src/configparser.c",
			"line":	1274,
			"primary_score":	999839,
			"second_score":	643072
		}, {
			"file":	"src/configparser.c",
			"line":	1282,
			"primary_score":	999839,
			"second_score":	643043
		}, {
			"file":	"src/configparser.c",
			"line":	1320,
			"primary_score":	999839,
			"second_score":	643931
		}, {
			"file":	"src/configparser.c",
			"line":	1323,
			"primary_score":	999839,
			"second_score":	643930
		}, {
			"file":	"src/configparser.c",
			"line":	1324,
			"primary_score":	999839,
			"second_score":	643923
		}, {
			"file":	"src/configparser.c",
			"line":	1336,
			"primary_score":	999840,
			"second_score":	648615
		}, {
			"file":	"src/configparser.c",
			"line":	1339,
			"primary_score":	999840,
			"second_score":	648614
		}, {
			"file":	"src/configparser.c",
			"line":	1340,
			"primary_score":	999840,
			"second_score":	648607
		}, {
			"file":	"src/configparser.c",
			"line":	1364,
			"primary_score":	999839,
			"second_score":	860327
		}, {
			"file":	"src/configparser.c",
			"line":	1365,
			"primary_score":	999839,
			"second_score":	860326
		}, {
			"file":	"src/configparser.c",
			"line":	1368,
			"primary_score":	999839,
			"second_score":	761835
		}, {
			"file":	"src/configparser.c",
			"line":	1369,
			"primary_score":	999839,
			"second_score":	761831
		}, {
			"file":	"src/configparser.c",
			"line":	1373,
			"primary_score":	999839,
			"second_score":	761830
		}, {
			"file":	"src/configparser.c",
			"line":	1374,
			"primary_score":	999839,
			"second_score":	761823
		}, {
			"file":	"src/connections-glue.c",
			"line":	45,
			"primary_score":	999823,
			"second_score":	111608
		}, {
			"file":	"src/connections-glue.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	111607
		}, {
			"file":	"src/connections-glue.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	111606
		}, {
			"file":	"src/connections.c",
			"line":	46,
			"primary_score":	999823,
			"second_score":	133632
		}, {
			"file":	"src/connections.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	133631
		}, {
			"file":	"src/connections.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	133630
		}, {
			"file":	"src/connections.c",
			"line":	56,
			"primary_score":	999823,
			"second_score":	133629
		}, {
			"file":	"src/connections.c",
			"line":	65,
			"primary_score":	999823,
			"second_score":	133628
		}, {
			"file":	"src/connections.c",
			"line":	67,
			"primary_score":	999823,
			"second_score":	133111
		}, {
			"file":	"src/connections.c",
			"line":	68,
			"primary_score":	999823,
			"second_score":	133110
		}, {
			"file":	"src/connections.c",
			"line":	72,
			"primary_score":	999823,
			"second_score":	111619
		}, {
			"file":	"src/connections.c",
			"line":	73,
			"primary_score":	999823,
			"second_score":	111618
		}, {
			"file":	"src/connections.c",
			"line":	74,
			"primary_score":	999823,
			"second_score":	111617
		}, {
			"file":	"src/connections.c",
			"line":	76,
			"primary_score":	999823,
			"second_score":	111616
		}, {
			"file":	"src/connections.c",
			"line":	78,
			"primary_score":	999823,
			"second_score":	111615
		}, {
			"file":	"src/connections.c",
			"line":	80,
			"primary_score":	999823,
			"second_score":	111614
		}, {
			"file":	"src/connections.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	111613
		}, {
			"file":	"src/connections.c",
			"line":	93,
			"primary_score":	999823,
			"second_score":	111612
		}, {
			"file":	"src/connections.c",
			"line":	95,
			"primary_score":	999823,
			"second_score":	111611
		}, {
			"file":	"src/connections.c",
			"line":	97,
			"primary_score":	999823,
			"second_score":	111610
		}, {
			"file":	"src/connections.c",
			"line":	104,
			"primary_score":	999823,
			"second_score":	111638
		}, {
			"file":	"src/connections.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	111637
		}, {
			"file":	"src/connections.c",
			"line":	127,
			"primary_score":	999823,
			"second_score":	111631
		}, {
			"file":	"src/connections.c",
			"line":	129,
			"primary_score":	999823,
			"second_score":	111621
		}, {
			"file":	"src/connections.c",
			"line":	134,
			"primary_score":	999823,
			"second_score":	111620
		}, {
			"file":	"src/connections.c",
			"line":	135,
			"primary_score":	999823,
			"second_score":	111609
		}, {
			"file":	"src/connections.c",
			"line":	137,
			"primary_score":	999823,
			"second_score":	111605
		}, {
			"file":	"src/connections.c",
			"line":	185,
			"primary_score":	999830,
			"second_score":	115000
		}, {
			"file":	"src/connections.c",
			"line":	187,
			"primary_score":	999830,
			"second_score":	114999
		}, {
			"file":	"src/connections.c",
			"line":	235,
			"primary_score":	999830,
			"second_score":	114998
		}, {
			"file":	"src/connections.c",
			"line":	240,
			"primary_score":	999830,
			"second_score":	114997
		}, {
			"file":	"src/connections.c",
			"line":	344,
			"primary_score":	999830,
			"second_score":	114996
		}, {
			"file":	"src/connections.c",
			"line":	352,
			"primary_score":	999830,
			"second_score":	114995
		}, {
			"file":	"src/connections.c",
			"line":	424,
			"primary_score":	999823,
			"second_score":	110738
		}, {
			"file":	"src/connections.c",
			"line":	425,
			"primary_score":	999823,
			"second_score":	110737
		}, {
			"file":	"src/connections.c",
			"line":	427,
			"primary_score":	999823,
			"second_score":	110736
		}, {
			"file":	"src/connections.c",
			"line":	428,
			"primary_score":	999823,
			"second_score":	21767
		}, {
			"file":	"src/connections.c",
			"line":	430,
			"primary_score":	999823,
			"second_score":	21766
		}, {
			"file":	"src/connections.c",
			"line":	431,
			"primary_score":	999823,
			"second_score":	21249
		}, {
			"file":	"src/connections.c",
			"line":	433,
			"primary_score":	999823,
			"second_score":	21245
		}, {
			"file":	"src/connections.c",
			"line":	434,
			"primary_score":	999823,
			"second_score":	21226
		}, {
			"file":	"src/connections.c",
			"line":	435,
			"primary_score":	999823,
			"second_score":	21225
		}, {
			"file":	"src/connections.c",
			"line":	436,
			"primary_score":	999823,
			"second_score":	21220
		}, {
			"file":	"src/connections.c",
			"line":	437,
			"primary_score":	999823,
			"second_score":	21215
		}, {
			"file":	"src/connections.c",
			"line":	438,
			"primary_score":	999823,
			"second_score":	21210
		}, {
			"file":	"src/connections.c",
			"line":	439,
			"primary_score":	999823,
			"second_score":	21202
		}, {
			"file":	"src/connections.c",
			"line":	440,
			"primary_score":	999823,
			"second_score":	21194
		}, {
			"file":	"src/connections.c",
			"line":	445,
			"primary_score":	999823,
			"second_score":	21186
		}, {
			"file":	"src/connections.c",
			"line":	446,
			"primary_score":	999823,
			"second_score":	21181
		}, {
			"file":	"src/connections.c",
			"line":	447,
			"primary_score":	999823,
			"second_score":	21176
		}, {
			"file":	"src/connections.c",
			"line":	448,
			"primary_score":	999823,
			"second_score":	21171
		}, {
			"file":	"src/connections.c",
			"line":	450,
			"primary_score":	999823,
			"second_score":	21166
		}, {
			"file":	"src/connections.c",
			"line":	452,
			"primary_score":	999823,
			"second_score":	21161
		}, {
			"file":	"src/connections.c",
			"line":	453,
			"primary_score":	999823,
			"second_score":	21156
		}, {
			"file":	"src/connections.c",
			"line":	454,
			"primary_score":	999823,
			"second_score":	21151
		}, {
			"file":	"src/connections.c",
			"line":	455,
			"primary_score":	999823,
			"second_score":	21146
		}, {
			"file":	"src/connections.c",
			"line":	456,
			"primary_score":	999823,
			"second_score":	21141
		}, {
			"file":	"src/connections.c",
			"line":	458,
			"primary_score":	999823,
			"second_score":	21136
		}, {
			"file":	"src/connections.c",
			"line":	459,
			"primary_score":	999823,
			"second_score":	21131
		}, {
			"file":	"src/connections.c",
			"line":	460,
			"primary_score":	999823,
			"second_score":	21126
		}, {
			"file":	"src/connections.c",
			"line":	461,
			"primary_score":	999823,
			"second_score":	21121
		}, {
			"file":	"src/connections.c",
			"line":	462,
			"primary_score":	999823,
			"second_score":	21116
		}, {
			"file":	"src/connections.c",
			"line":	463,
			"primary_score":	999823,
			"second_score":	21111
		}, {
			"file":	"src/connections.c",
			"line":	465,
			"primary_score":	999823,
			"second_score":	21106
		}, {
			"file":	"src/connections.c",
			"line":	466,
			"primary_score":	999823,
			"second_score":	21101
		}, {
			"file":	"src/connections.c",
			"line":	467,
			"primary_score":	999823,
			"second_score":	21096
		}, {
			"file":	"src/connections.c",
			"line":	468,
			"primary_score":	999823,
			"second_score":	21091
		}, {
			"file":	"src/connections.c",
			"line":	470,
			"primary_score":	999823,
			"second_score":	21086
		}, {
			"file":	"src/connections.c",
			"line":	471,
			"primary_score":	999823,
			"second_score":	21085
		}, {
			"file":	"src/connections.c",
			"line":	473,
			"primary_score":	999823,
			"second_score":	21084
		}, {
			"file":	"src/connections.c",
			"line":	475,
			"primary_score":	999823,
			"second_score":	21069
		}, {
			"file":	"src/connections.c",
			"line":	478,
			"primary_score":	999823,
			"second_score":	21068
		}, {
			"file":	"src/connections.c",
			"line":	483,
			"primary_score":	999823,
			"second_score":	21765
		}, {
			"file":	"src/connections.c",
			"line":	485,
			"primary_score":	999823,
			"second_score":	21764
		}, {
			"file":	"src/connections.c",
			"line":	487,
			"primary_score":	999823,
			"second_score":	21717
		}, {
			"file":	"src/connections.c",
			"line":	488,
			"primary_score":	999823,
			"second_score":	21716
		}, {
			"file":	"src/connections.c",
			"line":	489,
			"primary_score":	999823,
			"second_score":	21715
		}, {
			"file":	"src/connections.c",
			"line":	490,
			"primary_score":	999823,
			"second_score":	21714
		}, {
			"file":	"src/connections.c",
			"line":	491,
			"primary_score":	999823,
			"second_score":	21713
		}, {
			"file":	"src/connections.c",
			"line":	493,
			"primary_score":	999823,
			"second_score":	21712
		}, {
			"file":	"src/connections.c",
			"line":	494,
			"primary_score":	999823,
			"second_score":	21711
		}, {
			"file":	"src/connections.c",
			"line":	495,
			"primary_score":	999823,
			"second_score":	21710
		}, {
			"file":	"src/connections.c",
			"line":	496,
			"primary_score":	999823,
			"second_score":	21709
		}, {
			"file":	"src/connections.c",
			"line":	497,
			"primary_score":	999823,
			"second_score":	21708
		}, {
			"file":	"src/connections.c",
			"line":	499,
			"primary_score":	999823,
			"second_score":	21707
		}, {
			"file":	"src/connections.c",
			"line":	500,
			"primary_score":	999823,
			"second_score":	21706
		}, {
			"file":	"src/connections.c",
			"line":	501,
			"primary_score":	999823,
			"second_score":	21705
		}, {
			"file":	"src/connections.c",
			"line":	503,
			"primary_score":	999823,
			"second_score":	21704
		}, {
			"file":	"src/connections.c",
			"line":	504,
			"primary_score":	999823,
			"second_score":	21703
		}, {
			"file":	"src/connections.c",
			"line":	505,
			"primary_score":	999823,
			"second_score":	21702
		}, {
			"file":	"src/connections.c",
			"line":	507,
			"primary_score":	999823,
			"second_score":	21701
		}, {
			"file":	"src/connections.c",
			"line":	512,
			"primary_score":	999823,
			"second_score":	21700
		}, {
			"file":	"src/connections.c",
			"line":	513,
			"primary_score":	999823,
			"second_score":	21694
		}, {
			"file":	"src/connections.c",
			"line":	514,
			"primary_score":	999823,
			"second_score":	21688
		}, {
			"file":	"src/connections.c",
			"line":	515,
			"primary_score":	999823,
			"second_score":	21682
		}, {
			"file":	"src/connections.c",
			"line":	517,
			"primary_score":	999823,
			"second_score":	21676
		}, {
			"file":	"src/connections.c",
			"line":	519,
			"primary_score":	999823,
			"second_score":	21670
		}, {
			"file":	"src/connections.c",
			"line":	520,
			"primary_score":	999823,
			"second_score":	21664
		}, {
			"file":	"src/connections.c",
			"line":	521,
			"primary_score":	999823,
			"second_score":	21658
		}, {
			"file":	"src/connections.c",
			"line":	522,
			"primary_score":	999823,
			"second_score":	21652
		}, {
			"file":	"src/connections.c",
			"line":	523,
			"primary_score":	999823,
			"second_score":	21646
		}, {
			"file":	"src/connections.c",
			"line":	525,
			"primary_score":	999823,
			"second_score":	21640
		}, {
			"file":	"src/connections.c",
			"line":	526,
			"primary_score":	999823,
			"second_score":	21634
		}, {
			"file":	"src/connections.c",
			"line":	527,
			"primary_score":	999823,
			"second_score":	21628
		}, {
			"file":	"src/connections.c",
			"line":	528,
			"primary_score":	999823,
			"second_score":	21622
		}, {
			"file":	"src/connections.c",
			"line":	529,
			"primary_score":	999823,
			"second_score":	21616
		}, {
			"file":	"src/connections.c",
			"line":	531,
			"primary_score":	999823,
			"second_score":	21610
		}, {
			"file":	"src/connections.c",
			"line":	533,
			"primary_score":	999823,
			"second_score":	21604
		}, {
			"file":	"src/connections.c",
			"line":	534,
			"primary_score":	999823,
			"second_score":	21598
		}, {
			"file":	"src/connections.c",
			"line":	535,
			"primary_score":	999823,
			"second_score":	21592
		}, {
			"file":	"src/connections.c",
			"line":	543,
			"primary_score":	999823,
			"second_score":	21586
		}, {
			"file":	"src/connections.c",
			"line":	544,
			"primary_score":	999823,
			"second_score":	21580
		}, {
			"file":	"src/connections.c",
			"line":	545,
			"primary_score":	999823,
			"second_score":	21574
		}, {
			"file":	"src/connections.c",
			"line":	547,
			"primary_score":	999823,
			"second_score":	21568
		}, {
			"file":	"src/connections.c",
			"line":	548,
			"primary_score":	999823,
			"second_score":	21550
		}, {
			"file":	"src/connections.c",
			"line":	549,
			"primary_score":	999823,
			"second_score":	21549
		}, {
			"file":	"src/connections.c",
			"line":	550,
			"primary_score":	999823,
			"second_score":	21539
		}, {
			"file":	"src/connections.c",
			"line":	552,
			"primary_score":	999823,
			"second_score":	21529
		}, {
			"file":	"src/connections.c",
			"line":	555,
			"primary_score":	999823,
			"second_score":	21517
		}, {
			"file":	"src/connections.c",
			"line":	556,
			"primary_score":	999823,
			"second_score":	21421
		}, {
			"file":	"src/connections.c",
			"line":	557,
			"primary_score":	999823,
			"second_score":	21420
		}, {
			"file":	"src/connections.c",
			"line":	559,
			"primary_score":	999823,
			"second_score":	21419
		}, {
			"file":	"src/connections.c",
			"line":	561,
			"primary_score":	999823,
			"second_score":	21418
		}, {
			"file":	"src/connections.c",
			"line":	565,
			"primary_score":	999823,
			"second_score":	21417
		}, {
			"file":	"src/connections.c",
			"line":	568,
			"primary_score":	999823,
			"second_score":	21416
		}, {
			"file":	"src/connections.c",
			"line":	570,
			"primary_score":	999823,
			"second_score":	21297
		}, {
			"file":	"src/connections.c",
			"line":	571,
			"primary_score":	999823,
			"second_score":	21296
		}, {
			"file":	"src/connections.c",
			"line":	573,
			"primary_score":	999823,
			"second_score":	21295
		}, {
			"file":	"src/connections.c",
			"line":	575,
			"primary_score":	999823,
			"second_score":	21250
		}, {
			"file":	"src/connections.c",
			"line":	585,
			"primary_score":	999823,
			"second_score":	133011
		}, {
			"file":	"src/connections.c",
			"line":	587,
			"primary_score":	999823,
			"second_score":	133005
		}, {
			"file":	"src/connections.c",
			"line":	590,
			"primary_score":	999823,
			"second_score":	133004
		}, {
			"file":	"src/connections.c",
			"line":	607,
			"primary_score":	999823,
			"second_score":	132928
		}, {
			"file":	"src/connections.c",
			"line":	622,
			"primary_score":	999830,
			"second_score":	130458
		}, {
			"file":	"src/connections.c",
			"line":	629,
			"primary_score":	999830,
			"second_score":	130457
		}, {
			"file":	"src/connections.c",
			"line":	852,
			"primary_score":	999823,
			"second_score":	133052
		}, {
			"file":	"src/connections.c",
			"line":	853,
			"primary_score":	999823,
			"second_score":	133051
		}, {
			"file":	"src/connections.c",
			"line":	854,
			"primary_score":	999823,
			"second_score":	133050
		}, {
			"file":	"src/connections.c",
			"line":	857,
			"primary_score":	999823,
			"second_score":	133049
		}, {
			"file":	"src/connections.c",
			"line":	859,
			"primary_score":	999823,
			"second_score":	133048
		}, {
			"file":	"src/connections.c",
			"line":	863,
			"primary_score":	999823,
			"second_score":	133047
		}, {
			"file":	"src/connections.c",
			"line":	881,
			"primary_score":	999823,
			"second_score":	133046
		}, {
			"file":	"src/connections.c",
			"line":	883,
			"primary_score":	999823,
			"second_score":	133635
		}, {
			"file":	"src/connections.c",
			"line":	890,
			"primary_score":	999823,
			"second_score":	133634
		}, {
			"file":	"src/connections.c",
			"line":	892,
			"primary_score":	999823,
			"second_score":	133633
		}, {
			"file":	"src/connections.c",
			"line":	893,
			"primary_score":	999823,
			"second_score":	133109
		}, {
			"file":	"src/connections.c",
			"line":	894,
			"primary_score":	999823,
			"second_score":	133108
		}, {
			"file":	"src/connections.c",
			"line":	898,
			"primary_score":	999823,
			"second_score":	133107
		}, {
			"file":	"src/connections.c",
			"line":	900,
			"primary_score":	999823,
			"second_score":	133093
		}, {
			"file":	"src/connections.c",
			"line":	902,
			"primary_score":	999823,
			"second_score":	133089
		}, {
			"file":	"src/connections.c",
			"line":	903,
			"primary_score":	999823,
			"second_score":	133088
		}, {
			"file":	"src/connections.c",
			"line":	904,
			"primary_score":	999823,
			"second_score":	133087
		}, {
			"file":	"src/connections.c",
			"line":	905,
			"primary_score":	999823,
			"second_score":	133067
		}, {
			"file":	"src/connections.c",
			"line":	907,
			"primary_score":	999823,
			"second_score":	133066
		}, {
			"file":	"src/connections.c",
			"line":	915,
			"primary_score":	999823,
			"second_score":	133062
		}, {
			"file":	"src/connections.c",
			"line":	934,
			"primary_score":	999823,
			"second_score":	133061
		}, {
			"file":	"src/connections.c",
			"line":	939,
			"primary_score":	999823,
			"second_score":	110855
		}, {
			"file":	"src/connections.c",
			"line":	940,
			"primary_score":	999823,
			"second_score":	110854
		}, {
			"file":	"src/connections.c",
			"line":	942,
			"primary_score":	999823,
			"second_score":	110853
		}, {
			"file":	"src/connections.c",
			"line":	945,
			"primary_score":	999823,
			"second_score":	110852
		}, {
			"file":	"src/connections.c",
			"line":	952,
			"primary_score":	999823,
			"second_score":	110851
		}, {
			"file":	"src/connections.c",
			"line":	953,
			"primary_score":	999823,
			"second_score":	110850
		}, {
			"file":	"src/connections.c",
			"line":	954,
			"primary_score":	999823,
			"second_score":	110849
		}, {
			"file":	"src/connections.c",
			"line":	956,
			"primary_score":	999823,
			"second_score":	110848
		}, {
			"file":	"src/connections.c",
			"line":	963,
			"primary_score":	999823,
			"second_score":	110847
		}, {
			"file":	"src/connections.c",
			"line":	965,
			"primary_score":	999823,
			"second_score":	110837
		}, {
			"file":	"src/connections.c",
			"line":	967,
			"primary_score":	999823,
			"second_score":	110836
		}, {
			"file":	"src/connections.c",
			"line":	975,
			"primary_score":	999823,
			"second_score":	133027
		}, {
			"file":	"src/connections.c",
			"line":	976,
			"primary_score":	999823,
			"second_score":	133026
		}, {
			"file":	"src/connections.c",
			"line":	978,
			"primary_score":	999823,
			"second_score":	133025
		}, {
			"file":	"src/connections.c",
			"line":	979,
			"primary_score":	999823,
			"second_score":	133024
		}, {
			"file":	"src/connections.c",
			"line":	982,
			"primary_score":	999823,
			"second_score":	133023
		}, {
			"file":	"src/connections.c",
			"line":	1011,
			"primary_score":	999823,
			"second_score":	133022
		}, {
			"file":	"src/connections.c",
			"line":	1014,
			"primary_score":	999823,
			"second_score":	133018
		}, {
			"file":	"src/connections.c",
			"line":	1021,
			"primary_score":	999823,
			"second_score":	133012
		}, {
			"file":	"src/connections.c",
			"line":	1024,
			"primary_score":	999830,
			"second_score":	130456
		}, {
			"file":	"src/connections.c",
			"line":	1026,
			"primary_score":	999823,
			"second_score":	130452
		}, {
			"file":	"src/connections.c",
			"line":	1041,
			"primary_score":	999823,
			"second_score":	130451
		}, {
			"file":	"src/connections.c",
			"line":	1047,
			"primary_score":	999830,
			"second_score":	129640
		}, {
			"file":	"src/connections.c",
			"line":	1052,
			"primary_score":	999857,
			"second_score":	129639
		}, {
			"file":	"src/connections.c",
			"line":	1061,
			"primary_score":	999857,
			"second_score":	129580
		}, {
			"file":	"src/connections.c",
			"line":	1064,
			"primary_score":	999830,
			"second_score":	129576
		}, {
			"file":	"src/connections.c",
			"line":	1074,
			"primary_score":	999857,
			"second_score":	120445
		}, {
			"file":	"src/connections.c",
			"line":	1090,
			"primary_score":	999889,
			"second_score":	120538
		}, {
			"file":	"src/connections.c",
			"line":	1101,
			"primary_score":	999889,
			"second_score":	120536
		}, {
			"file":	"src/connections.c",
			"line":	1103,
			"primary_score":	999857,
			"second_score":	117682
		}, {
			"file":	"src/connections.c",
			"line":	1143,
			"primary_score":	999881,
			"second_score":	117681
		}, {
			"file":	"src/connections.c",
			"line":	1149,
			"primary_score":	999916,
			"second_score":	117679
		}, {
			"file":	"src/connections.c",
			"line":	1152,
			"primary_score":	999857,
			"second_score":	117678
		}, {
			"file":	"src/connections.c",
			"line":	1154,
			"primary_score":	999857,
			"second_score":	117674
		}, {
			"file":	"src/connections.c",
			"line":	1160,
			"primary_score":	999858,
			"second_score":	117344
		}, {
			"file":	"src/connections.c",
			"line":	1163,
			"primary_score":	999857,
			"second_score":	117343
		}, {
			"file":	"src/connections.c",
			"line":	1186,
			"primary_score":	999857,
			"second_score":	117342
		}, {
			"file":	"src/connections.c",
			"line":	1193,
			"primary_score":	999857,
			"second_score":	117338
		}, {
			"file":	"src/connections.c",
			"line":	1211,
			"primary_score":	999857,
			"second_score":	115017
		}, {
			"file":	"src/connections.c",
			"line":	1214,
			"primary_score":	999857,
			"second_score":	115013
		}, {
			"file":	"src/connections.c",
			"line":	1219,
			"primary_score":	999857,
			"second_score":	115012
		}, {
			"file":	"src/connections.c",
			"line":	1221,
			"primary_score":	999857,
			"second_score":	115011
		}, {
			"file":	"src/connections.c",
			"line":	1224,
			"primary_score":	999857,
			"second_score":	115010
		}, {
			"file":	"src/connections.c",
			"line":	1227,
			"primary_score":	999857,
			"second_score":	115006
		}, {
			"file":	"src/connections.c",
			"line":	1238,
			"primary_score":	999830,
			"second_score":	114994
		}, {
			"file":	"src/connections.c",
			"line":	1254,
			"primary_score":	999830,
			"second_score":	114312
		}, {
			"file":	"src/connections.c",
			"line":	1256,
			"primary_score":	999830,
			"second_score":	114308
		}, {
			"file":	"src/connections.c",
			"line":	1261,
			"primary_score":	999823,
			"second_score":	113248
		}, {
			"file":	"src/connections.c",
			"line":	1263,
			"primary_score":	999823,
			"second_score":	113244
		}, {
			"file":	"src/connections.c",
			"line":	1270,
			"primary_score":	999823,
			"second_score":	113243
		}, {
			"file":	"src/connections.c",
			"line":	1274,
			"primary_score":	999823,
			"second_score":	113232
		}, {
			"file":	"src/connections.c",
			"line":	1277,
			"primary_score":	999823,
			"second_score":	113231
		}, {
			"file":	"src/connections.c",
			"line":	1299,
			"primary_score":	999823,
			"second_score":	112953
		}, {
			"file":	"src/connections.c",
			"line":	1314,
			"primary_score":	999823,
			"second_score":	112933
		}, {
			"file":	"src/connections.c",
			"line":	1319,
			"primary_score":	999823,
			"second_score":	112804
		}, {
			"file":	"src/connections.c",
			"line":	1320,
			"primary_score":	999823,
			"second_score":	112803
		}, {
			"file":	"src/connections.c",
			"line":	1322,
			"primary_score":	999823,
			"second_score":	112802
		}, {
			"file":	"src/connections.c",
			"line":	1325,
			"primary_score":	999823,
			"second_score":	112801
		}, {
			"file":	"src/connections.c",
			"line":	1327,
			"primary_score":	999823,
			"second_score":	112800
		}, {
			"file":	"src/connections.c",
			"line":	1329,
			"primary_score":	999823,
			"second_score":	112795
		}, {
			"file":	"src/connections.c",
			"line":	1337,
			"primary_score":	999823,
			"second_score":	112794
		}, {
			"file":	"src/connections.c",
			"line":	1342,
			"primary_score":	999823,
			"second_score":	112793
		}, {
			"file":	"src/connections.c",
			"line":	1347,
			"primary_score":	999823,
			"second_score":	112792
		}, {
			"file":	"src/connections.c",
			"line":	1351,
			"primary_score":	999823,
			"second_score":	112646
		}, {
			"file":	"src/connections.c",
			"line":	1361,
			"primary_score":	999823,
			"second_score":	112645
		}, {
			"file":	"src/connections.c",
			"line":	1368,
			"primary_score":	999823,
			"second_score":	112641
		}, {
			"file":	"src/connections.c",
			"line":	1395,
			"primary_score":	999823,
			"second_score":	112640
		}, {
			"file":	"src/connections.c",
			"line":	1404,
			"primary_score":	999823,
			"second_score":	112634
		}, {
			"file":	"src/connections.c",
			"line":	1406,
			"primary_score":	999823,
			"second_score":	111656
		}, {
			"file":	"src/connections.c",
			"line":	1408,
			"primary_score":	999823,
			"second_score":	111655
		}, {
			"file":	"src/connections.c",
			"line":	1416,
			"primary_score":	999823,
			"second_score":	111654
		}, {
			"file":	"src/connections.c",
			"line":	1425,
			"primary_score":	999823,
			"second_score":	111639
		}, {
			"file":	"src/connections.c",
			"line":	1427,
			"primary_score":	999823,
			"second_score":	111604
		}, {
			"file":	"src/connections.c",
			"line":	1430,
			"primary_score":	999823,
			"second_score":	111603
		}, {
			"file":	"src/connections.c",
			"line":	1432,
			"primary_score":	999823,
			"second_score":	110973
		}, {
			"file":	"src/connections.c",
			"line":	1457,
			"primary_score":	999823,
			"second_score":	134079
		}, {
			"file":	"src/connections.c",
			"line":	1460,
			"primary_score":	999823,
			"second_score":	134078
		}, {
			"file":	"src/connections.c",
			"line":	1461,
			"primary_score":	999823,
			"second_score":	134077
		}, {
			"file":	"src/connections.c",
			"line":	1463,
			"primary_score":	999823,
			"second_score":	134042
		}, {
			"file":	"src/connections.c",
			"line":	1469,
			"primary_score":	999823,
			"second_score":	134041
		}, {
			"file":	"src/connections.c",
			"line":	1542,
			"primary_score":	999823,
			"second_score":	110835
		}, {
			"file":	"src/connections.c",
			"line":	1544,
			"primary_score":	999823,
			"second_score":	110834
		}, {
			"file":	"src/connections.c",
			"line":	1545,
			"primary_score":	999823,
			"second_score":	110833
		}, {
			"file":	"src/connections.c",
			"line":	1549,
			"primary_score":	999823,
			"second_score":	110832
		}, {
			"file":	"src/connections.c",
			"line":	1556,
			"primary_score":	999823,
			"second_score":	110831
		}, {
			"file":	"src/data_config.c",
			"line":	19,
			"primary_score":	999823,
			"second_score":	1280
		}, {
			"file":	"src/data_config.c",
			"line":	21,
			"primary_score":	999823,
			"second_score":	1279
		}, {
			"file":	"src/data_config.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	1275
		}, {
			"file":	"src/data_config.c",
			"line":	23,
			"primary_score":	999823,
			"second_score":	1271
		}, {
			"file":	"src/data_config.c",
			"line":	25,
			"primary_score":	999823,
			"second_score":	1267
		}, {
			"file":	"src/data_config.c",
			"line":	26,
			"primary_score":	999823,
			"second_score":	1197
		}, {
			"file":	"src/data_config.c",
			"line":	28,
			"primary_score":	999823,
			"second_score":	1190
		}, {
			"file":	"src/data_config.c",
			"line":	30,
			"primary_score":	999839,
			"second_score":	1286
		}, {
			"file":	"src/data_config.c",
			"line":	31,
			"primary_score":	999839,
			"second_score":	1284
		}, {
			"file":	"src/data_config.c",
			"line":	34,
			"primary_score":	999823,
			"second_score":	1183
		}, {
			"file":	"src/data_integer.c",
			"line":	18,
			"primary_score":	999823,
			"second_score":	18
		}, {
			"file":	"src/data_integer.c",
			"line":	20,
			"primary_score":	999823,
			"second_score":	17
		}, {
			"file":	"src/data_integer.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	13
		}, {
			"file":	"src/data_string.c",
			"line":	36,
			"primary_score":	999835,
			"second_score":	256986
		}, {
			"file":	"src/data_string.c",
			"line":	37,
			"primary_score":	999835,
			"second_score":	256985
		}, {
			"file":	"src/data_string.c",
			"line":	39,
			"primary_score":	999835,
			"second_score":	256984
		}, {
			"file":	"src/data_string.c",
			"line":	40,
			"primary_score":	999835,
			"second_score":	256983
		}, {
			"file":	"src/data_string.c",
			"line":	41,
			"primary_score":	999835,
			"second_score":	256970
		}, {
			"file":	"src/data_string.c",
			"line":	46,
			"primary_score":	999835,
			"second_score":	256963
		}, {
			"file":	"src/data_string.c",
			"line":	48,
			"primary_score":	999835,
			"second_score":	256952
		}, {
			"file":	"src/data_string.c",
			"line":	79,
			"primary_score":	999823,
			"second_score":	114076
		}, {
			"file":	"src/data_string.c",
			"line":	81,
			"primary_score":	999823,
			"second_score":	114075
		}, {
			"file":	"src/data_string.c",
			"line":	82,
			"primary_score":	999823,
			"second_score":	114074
		}, {
			"file":	"src/data_string.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	114073
		}, {
			"file":	"src/data_string.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	114065
		}, {
			"file":	"src/data_string.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	114057
		}, {
			"file":	"src/data_string.c",
			"line":	88,
			"primary_score":	999823,
			"second_score":	114056
		}, {
			"file":	"src/data_string.c",
			"line":	89,
			"primary_score":	999823,
			"second_score":	114055
		}, {
			"file":	"src/data_string.c",
			"line":	90,
			"primary_score":	999823,
			"second_score":	114054
		}, {
			"file":	"src/data_string.c",
			"line":	91,
			"primary_score":	999823,
			"second_score":	114053
		}, {
			"file":	"src/data_string.c",
			"line":	92,
			"primary_score":	999823,
			"second_score":	114052
		}, {
			"file":	"src/data_string.c",
			"line":	94,
			"primary_score":	999823,
			"second_score":	114051
		}, {
			"file":	"src/data_string.c",
			"line":	98,
			"primary_score":	999823,
			"second_score":	114078
		}, {
			"file":	"src/data_string.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	114077
		}, {
			"file":	"src/data_string.c",
			"line":	101,
			"primary_score":	999823,
			"second_score":	114050
		}, {
			"file":	"src/data_string.c",
			"line":	103,
			"primary_score":	999823,
			"second_score":	114049
		}, {
			"file":	"src/etag.c",
			"line":	13,
			"primary_score":	999887,
			"second_score":	120181
		}, {
			"file":	"src/etag.c",
			"line":	14,
			"primary_score":	999887,
			"second_score":	120125
		}, {
			"file":	"src/etag.c",
			"line":	15,
			"primary_score":	999887,
			"second_score":	120112
		}, {
			"file":	"src/etag.c",
			"line":	16,
			"primary_score":	999887,
			"second_score":	120082
		}, {
			"file":	"src/etag.c",
			"line":	17,
			"primary_score":	999887,
			"second_score":	120069
		}, {
			"file":	"src/etag.c",
			"line":	19,
			"primary_score":	999887,
			"second_score":	120005
		}, {
			"file":	"src/fdevent.c",
			"line":	152,
			"primary_score":	999823,
			"second_score":	110816
		}, {
			"file":	"src/fdevent.c",
			"line":	154,
			"primary_score":	999823,
			"second_score":	110815
		}, {
			"file":	"src/fdevent.c",
			"line":	164,
			"primary_score":	999823,
			"second_score":	117411
		}, {
			"file":	"src/fdevent.c",
			"line":	166,
			"primary_score":	999823,
			"second_score":	117410
		}, {
			"file":	"src/fdevent.c",
			"line":	170,
			"primary_score":	999823,
			"second_score":	117401
		}, {
			"file":	"src/fdevent.c",
			"line":	172,
			"primary_score":	999823,
			"second_score":	117400
		}, {
			"file":	"src/fdevent.c",
			"line":	178,
			"primary_score":	999823,
			"second_score":	117399
		}, {
			"file":	"src/fdevent.c",
			"line":	179,
			"primary_score":	999823,
			"second_score":	117398
		}, {
			"file":	"src/fdevent.c",
			"line":	180,
			"primary_score":	999823,
			"second_score":	117397
		}, {
			"file":	"src/fdevent.c",
			"line":	184,
			"primary_score":	999823,
			"second_score":	110821
		}, {
			"file":	"src/fdevent.c",
			"line":	186,
			"primary_score":	999823,
			"second_score":	110820
		}, {
			"file":	"src/fdevent.c",
			"line":	188,
			"primary_score":	999823,
			"second_score":	110819
		}, {
			"file":	"src/fdevent.c",
			"line":	189,
			"primary_score":	999823,
			"second_score":	110818
		}, {
			"file":	"src/fdevent.c",
			"line":	190,
			"primary_score":	999823,
			"second_score":	110817
		}, {
			"file":	"src/fdevent.c",
			"line":	193,
			"primary_score":	999823,
			"second_score":	110814
		}, {
			"file":	"src/fdevent.c",
			"line":	195,
			"primary_score":	999823,
			"second_score":	110813
		}, {
			"file":	"src/fdevent.c",
			"line":	230,
			"primary_score":	999823,
			"second_score":	10204
		}, {
			"file":	"src/fdevent.c",
			"line":	231,
			"primary_score":	999823,
			"second_score":	10203
		}, {
			"file":	"src/fdevent.c",
			"line":	233,
			"primary_score":	999823,
			"second_score":	10202
		}, {
			"file":	"src/fdevent.c",
			"line":	235,
			"primary_score":	999823,
			"second_score":	10197
		}, {
			"file":	"src/fdevent.c",
			"line":	236,
			"primary_score":	999823,
			"second_score":	6101
		}, {
			"file":	"src/fdevent.c",
			"line":	239,
			"primary_score":	999823,
			"second_score":	6100
		}, {
			"file":	"src/fdevent.c",
			"line":	240,
			"primary_score":	999823,
			"second_score":	6099
		}, {
			"file":	"src/fdevent.c",
			"line":	250,
			"primary_score":	999823,
			"second_score":	117842
		}, {
			"file":	"src/fdevent.c",
			"line":	252,
			"primary_score":	999823,
			"second_score":	117841
		}, {
			"file":	"src/fdevent.c",
			"line":	253,
			"primary_score":	999823,
			"second_score":	117840
		}, {
			"file":	"src/fdevent.c",
			"line":	255,
			"primary_score":	999823,
			"second_score":	117839
		}, {
			"file":	"src/fdevent.c",
			"line":	259,
			"primary_score":	999823,
			"second_score":	110757
		}, {
			"file":	"src/fdevent.c",
			"line":	300,
			"primary_score":	999823,
			"second_score":	117846
		}, {
			"file":	"src/fdevent.c",
			"line":	301,
			"primary_score":	999823,
			"second_score":	117845
		}, {
			"file":	"src/fdevent.c",
			"line":	303,
			"primary_score":	999823,
			"second_score":	117844
		}, {
			"file":	"src/fdevent.c",
			"line":	305,
			"primary_score":	999823,
			"second_score":	117843
		}, {
			"file":	"src/fdevent.c",
			"line":	306,
			"primary_score":	999823,
			"second_score":	117838
		}, {
			"file":	"src/fdevent.c",
			"line":	307,
			"primary_score":	999823,
			"second_score":	117837
		}, {
			"file":	"src/fdevent.c",
			"line":	308,
			"primary_score":	999823,
			"second_score":	117836
		}, {
			"file":	"src/fdevent.c",
			"line":	310,
			"primary_score":	999823,
			"second_score":	117835
		}, {
			"file":	"src/fdevent.c",
			"line":	312,
			"primary_score":	999823,
			"second_score":	117834
		}, {
			"file":	"src/fdevent.c",
			"line":	316,
			"primary_score":	999823,
			"second_score":	110763
		}, {
			"file":	"src/fdevent.c",
			"line":	317,
			"primary_score":	999823,
			"second_score":	110762
		}, {
			"file":	"src/fdevent.c",
			"line":	318,
			"primary_score":	999823,
			"second_score":	110761
		}, {
			"file":	"src/fdevent.c",
			"line":	319,
			"primary_score":	999823,
			"second_score":	110760
		}, {
			"file":	"src/fdevent.c",
			"line":	321,
			"primary_score":	999823,
			"second_score":	110759
		}, {
			"file":	"src/fdevent.c",
			"line":	323,
			"primary_score":	999823,
			"second_score":	110758
		}, {
			"file":	"src/fdevent.c",
			"line":	325,
			"primary_score":	999823,
			"second_score":	110756
		}, {
			"file":	"src/fdevent.c",
			"line":	327,
			"primary_score":	999823,
			"second_score":	110755
		}, {
			"file":	"src/fdevent.c",
			"line":	331,
			"primary_score":	999823,
			"second_score":	110777
		}, {
			"file":	"src/fdevent.c",
			"line":	333,
			"primary_score":	999823,
			"second_score":	110765
		}, {
			"file":	"src/fdevent.c",
			"line":	337,
			"primary_score":	999823,
			"second_score":	117832
		}, {
			"file":	"src/fdevent.c",
			"line":	339,
			"primary_score":	999823,
			"second_score":	117822
		}, {
			"file":	"src/fdevent.c",
			"line":	343,
			"primary_score":	999823,
			"second_score":	110887
		}, {
			"file":	"src/fdevent.c",
			"line":	344,
			"primary_score":	999823,
			"second_score":	110886
		}, {
			"file":	"src/fdevent.c",
			"line":	348,
			"primary_score":	999823,
			"second_score":	117414
		}, {
			"file":	"src/fdevent.c",
			"line":	350,
			"primary_score":	999823,
			"second_score":	117413
		}, {
			"file":	"src/fdevent.c",
			"line":	352,
			"primary_score":	999823,
			"second_score":	117412
		}, {
			"file":	"src/fdevent.c",
			"line":	354,
			"primary_score":	999823,
			"second_score":	117409
		}, {
			"file":	"src/fdevent.c",
			"line":	355,
			"primary_score":	999823,
			"second_score":	117395
		}, {
			"file":	"src/fdevent.c",
			"line":	358,
			"primary_score":	999823,
			"second_score":	117394
		}, {
			"file":	"src/fdevent.c",
			"line":	359,
			"primary_score":	999823,
			"second_score":	117393
		}, {
			"file":	"src/fdevent.c",
			"line":	360,
			"primary_score":	999823,
			"second_score":	117392
		}, {
			"file":	"src/fdevent.c",
			"line":	362,
			"primary_score":	999823,
			"second_score":	117391
		}, {
			"file":	"src/fdevent.c",
			"line":	364,
			"primary_score":	999823,
			"second_score":	117390
		}, {
			"file":	"src/fdevent.c",
			"line":	365,
			"primary_score":	999823,
			"second_score":	117389
		}, {
			"file":	"src/fdevent.c",
			"line":	368,
			"primary_score":	999823,
			"second_score":	117388
		}, {
			"file":	"src/fdevent.c",
			"line":	377,
			"primary_score":	999823,
			"second_score":	117851
		}, {
			"file":	"src/fdevent.c",
			"line":	379,
			"primary_score":	999823,
			"second_score":	117850
		}, {
			"file":	"src/fdevent.c",
			"line":	381,
			"primary_score":	999823,
			"second_score":	117849
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	17,
			"primary_score":	999823,
			"second_score":	10200
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	18,
			"primary_score":	999823,
			"second_score":	10199
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	111633
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	24,
			"primary_score":	999823,
			"second_score":	110774
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	28,
			"primary_score":	999823,
			"second_score":	110773
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	29,
			"primary_score":	999823,
			"second_score":	110772
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	31,
			"primary_score":	999823,
			"second_score":	110771
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	35,
			"primary_score":	999823,
			"second_score":	110770
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	36,
			"primary_score":	999823,
			"second_score":	113082
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	37,
			"primary_score":	999823,
			"second_score":	113081
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	38,
			"primary_score":	999984,
			"second_score":	110769
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	43,
			"primary_score":	999823,
			"second_score":	110768
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	48,
			"primary_score":	999823,
			"second_score":	110767
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	50,
			"primary_score":	999823,
			"second_score":	110766
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	67,
			"primary_score":	999823,
			"second_score":	117830
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	78,
			"primary_score":	999823,
			"second_score":	117829
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	117828
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	90,
			"primary_score":	999984,
			"second_score":	117827
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	95,
			"primary_score":	999823,
			"second_score":	117826
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	96,
			"primary_score":	999823,
			"second_score":	117825
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	98,
			"primary_score":	999823,
			"second_score":	117824
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	117823
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	107,
			"primary_score":	999823,
			"second_score":	110885
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	111,
			"primary_score":	999823,
			"second_score":	117408
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	113,
			"primary_score":	999823,
			"second_score":	117407
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	115,
			"primary_score":	999823,
			"second_score":	117406
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	116,
			"primary_score":	999823,
			"second_score":	117404
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	117,
			"primary_score":	999823,
			"second_score":	117403
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	122,
			"primary_score":	999823,
			"second_score":	117402
		}, {
			"file":	"src/fdevent_poll.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	117396
		}, {
			"file":	"src/filter.c",
			"line":	21,
			"primary_score":	999823,
			"second_score":	114362
		}, {
			"file":	"src/filter.c",
			"line":	23,
			"primary_score":	999823,
			"second_score":	114361
		}, {
			"file":	"src/filter.c",
			"line":	25,
			"primary_score":	999823,
			"second_score":	114360
		}, {
			"file":	"src/filter.c",
			"line":	26,
			"primary_score":	999823,
			"second_score":	114359
		}, {
			"file":	"src/filter.c",
			"line":	28,
			"primary_score":	999823,
			"second_score":	114358
		}, {
			"file":	"src/filter.c",
			"line":	30,
			"primary_score":	999823,
			"second_score":	114352
		}, {
			"file":	"src/filter.c",
			"line":	37,
			"primary_score":	999823,
			"second_score":	21239
		}, {
			"file":	"src/filter.c",
			"line":	40,
			"primary_score":	999823,
			"second_score":	21238
		}, {
			"file":	"src/filter.c",
			"line":	41,
			"primary_score":	999823,
			"second_score":	21237
		}, {
			"file":	"src/filter.c",
			"line":	45,
			"primary_score":	999823,
			"second_score":	21232
		}, {
			"file":	"src/filter.c",
			"line":	46,
			"primary_score":	999823,
			"second_score":	21231
		}, {
			"file":	"src/filter.c",
			"line":	48,
			"primary_score":	999823,
			"second_score":	21230
		}, {
			"file":	"src/filter.c",
			"line":	51,
			"primary_score":	999823,
			"second_score":	21229
		}, {
			"file":	"src/filter.c",
			"line":	52,
			"primary_score":	999833,
			"second_score":	114316
		}, {
			"file":	"src/filter.c",
			"line":	55,
			"primary_score":	999823,
			"second_score":	21228
		}, {
			"file":	"src/filter.c",
			"line":	63,
			"primary_score":	999823,
			"second_score":	21562
		}, {
			"file":	"src/filter.c",
			"line":	64,
			"primary_score":	999823,
			"second_score":	21561
		}, {
			"file":	"src/filter.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	21244
		}, {
			"file":	"src/filter.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	21243
		}, {
			"file":	"src/filter.c",
			"line":	90,
			"primary_score":	999823,
			"second_score":	21242
		}, {
			"file":	"src/filter.c",
			"line":	91,
			"primary_score":	999823,
			"second_score":	21241
		}, {
			"file":	"src/filter.c",
			"line":	95,
			"primary_score":	999823,
			"second_score":	21240
		}, {
			"file":	"src/filter.c",
			"line":	97,
			"primary_score":	999823,
			"second_score":	21227
		}, {
			"file":	"src/filter.c",
			"line":	101,
			"primary_score":	999823,
			"second_score":	21567
		}, {
			"file":	"src/filter.c",
			"line":	102,
			"primary_score":	999823,
			"second_score":	21566
		}, {
			"file":	"src/filter.c",
			"line":	105,
			"primary_score":	999823,
			"second_score":	21565
		}, {
			"file":	"src/filter.c",
			"line":	106,
			"primary_score":	999823,
			"second_score":	21564
		}, {
			"file":	"src/filter.c",
			"line":	110,
			"primary_score":	999823,
			"second_score":	21563
		}, {
			"file":	"src/filter.c",
			"line":	111,
			"primary_score":	999823,
			"second_score":	21551
		}, {
			"file":	"src/filter.c",
			"line":	115,
			"primary_score":	999823,
			"second_score":	114365
		}, {
			"file":	"src/filter.c",
			"line":	116,
			"primary_score":	999823,
			"second_score":	114364
		}, {
			"file":	"src/filter.c",
			"line":	118,
			"primary_score":	999823,
			"second_score":	114363
		}, {
			"file":	"src/filter.c",
			"line":	119,
			"primary_score":	999823,
			"second_score":	114351
		}, {
			"file":	"src/filter.c",
			"line":	121,
			"primary_score":	999823,
			"second_score":	114350
		}, {
			"file":	"src/filter.c",
			"line":	122,
			"primary_score":	999833,
			"second_score":	114349
		}, {
			"file":	"src/filter.c",
			"line":	124,
			"primary_score":	999823,
			"second_score":	114348
		}, {
			"file":	"src/filter.c",
			"line":	125,
			"primary_score":	999823,
			"second_score":	114347
		}, {
			"file":	"src/filter.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	114346
		}, {
			"file":	"src/filter.c",
			"line":	130,
			"primary_score":	999823,
			"second_score":	114345
		}, {
			"file":	"src/filter.c",
			"line":	134,
			"primary_score":	999833,
			"second_score":	114375
		}, {
			"file":	"src/filter.c",
			"line":	135,
			"primary_score":	999833,
			"second_score":	114374
		}, {
			"file":	"src/filter.c",
			"line":	138,
			"primary_score":	999833,
			"second_score":	114373
		}, {
			"file":	"src/filter.c",
			"line":	139,
			"primary_score":	999833,
			"second_score":	114372
		}, {
			"file":	"src/filter.c",
			"line":	140,
			"primary_score":	999833,
			"second_score":	114371
		}, {
			"file":	"src/filter.c",
			"line":	141,
			"primary_score":	999833,
			"second_score":	114370
		}, {
			"file":	"src/filter.c",
			"line":	144,
			"primary_score":	999833,
			"second_score":	114369
		}, {
			"file":	"src/filter.c",
			"line":	148,
			"primary_score":	999833,
			"second_score":	114332
		}, {
			"file":	"src/filter.c",
			"line":	150,
			"primary_score":	999833,
			"second_score":	114331
		}, {
			"file":	"src/filter.c",
			"line":	153,
			"primary_score":	999833,
			"second_score":	114330
		}, {
			"file":	"src/filter.c",
			"line":	154,
			"primary_score":	999833,
			"second_score":	114329
		}, {
			"file":	"src/filter.c",
			"line":	156,
			"primary_score":	999833,
			"second_score":	114328
		}, {
			"file":	"src/filter.c",
			"line":	163,
			"primary_score":	999823,
			"second_score":	112932
		}, {
			"file":	"src/filter.c",
			"line":	164,
			"primary_score":	999823,
			"second_score":	112931
		}, {
			"file":	"src/filter.c",
			"line":	166,
			"primary_score":	999823,
			"second_score":	112930
		}, {
			"file":	"src/filter.c",
			"line":	167,
			"primary_score":	999823,
			"second_score":	112929
		}, {
			"file":	"src/filter.c",
			"line":	169,
			"primary_score":	999823,
			"second_score":	112928
		}, {
			"file":	"src/filter.c",
			"line":	170,
			"primary_score":	999823,
			"second_score":	112927
		}, {
			"file":	"src/filter.c",
			"line":	171,
			"primary_score":	999823,
			"second_score":	112848
		}, {
			"file":	"src/filter.c",
			"line":	172,
			"primary_score":	999823,
			"second_score":	112847
		}, {
			"file":	"src/filter.c",
			"line":	174,
			"primary_score":	999823,
			"second_score":	112846
		}, {
			"file":	"src/filter.c",
			"line":	176,
			"primary_score":	999823,
			"second_score":	112807
		}, {
			"file":	"src/filter.c",
			"line":	177,
			"primary_score":	999823,
			"second_score":	112806
		}, {
			"file":	"src/filter.c",
			"line":	180,
			"primary_score":	999823,
			"second_score":	112805
		}, {
			"file":	"src/http-header-glue.c",
			"line":	82,
			"primary_score":	999823,
			"second_score":	114088
		}, {
			"file":	"src/http-header-glue.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	114087
		}, {
			"file":	"src/http-header-glue.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	114086
		}, {
			"file":	"src/http-header-glue.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	114079
		}, {
			"file":	"src/http-header-glue.c",
			"line":	89,
			"primary_score":	999823,
			"second_score":	114048
		}, {
			"file":	"src/http-header-glue.c",
			"line":	90,
			"primary_score":	999823,
			"second_score":	114032
		}, {
			"file":	"src/http-header-glue.c",
			"line":	92,
			"primary_score":	999823,
			"second_score":	114016
		}, {
			"file":	"src/http-header-glue.c",
			"line":	94,
			"primary_score":	999823,
			"second_score":	113871
		}, {
			"file":	"src/http-header-glue.c",
			"line":	98,
			"primary_score":	999823,
			"second_score":	114186
		}, {
			"file":	"src/http-header-glue.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	114185
		}, {
			"file":	"src/http-header-glue.c",
			"line":	103,
			"primary_score":	999823,
			"second_score":	114184
		}, {
			"file":	"src/http-header-glue.c",
			"line":	109,
			"primary_score":	999823,
			"second_score":	114089
		}, {
			"file":	"src/http_req.c",
			"line":	41,
			"primary_score":	999823,
			"second_score":	21528
		}, {
			"file":	"src/http_req.c",
			"line":	43,
			"primary_score":	999823,
			"second_score":	21527
		}, {
			"file":	"src/http_req.c",
			"line":	44,
			"primary_score":	999823,
			"second_score":	21523
		}, {
			"file":	"src/http_req.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	21083
		}, {
			"file":	"src/http_req.c",
			"line":	51,
			"primary_score":	999823,
			"second_score":	21082
		}, {
			"file":	"src/http_req.c",
			"line":	52,
			"primary_score":	999823,
			"second_score":	21078
		}, {
			"file":	"src/http_req.c",
			"line":	54,
			"primary_score":	999823,
			"second_score":	21070
		}, {
			"file":	"src/http_req.c",
			"line":	58,
			"primary_score":	999823,
			"second_score":	130983
		}, {
			"file":	"src/http_req.c",
			"line":	62,
			"primary_score":	999823,
			"second_score":	130982
		}, {
			"file":	"src/http_req.c",
			"line":	75,
			"primary_score":	999823,
			"second_score":	130981
		}, {
			"file":	"src/http_req.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	130980
		}, {
			"file":	"src/http_req.c",
			"line":	78,
			"primary_score":	999823,
			"second_score":	130979
		}, {
			"file":	"src/http_req.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	130978
		}, {
			"file":	"src/http_req.c",
			"line":	88,
			"primary_score":	999823,
			"second_score":	130976
		}, {
			"file":	"src/http_req.c",
			"line":	91,
			"primary_score":	999823,
			"second_score":	130975
		}, {
			"file":	"src/http_req.c",
			"line":	105,
			"primary_score":	999823,
			"second_score":	130974
		}, {
			"file":	"src/http_req.c",
			"line":	110,
			"primary_score":	999823,
			"second_score":	130973
		}, {
			"file":	"src/http_req.c",
			"line":	125,
			"primary_score":	999823,
			"second_score":	130986
		}, {
			"file":	"src/http_req.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	130985
		}, {
			"file":	"src/http_req.c",
			"line":	130,
			"primary_score":	999823,
			"second_score":	130984
		}, {
			"file":	"src/http_req.c",
			"line":	131,
			"primary_score":	999823,
			"second_score":	130977
		}, {
			"file":	"src/http_req.c",
			"line":	135,
			"primary_score":	999869,
			"second_score":	131233
		}, {
			"file":	"src/http_req.c",
			"line":	137,
			"primary_score":	999869,
			"second_score":	131232
		}, {
			"file":	"src/http_req.c",
			"line":	147,
			"primary_score":	999824,
			"second_score":	131171
		}, {
			"file":	"src/http_req.c",
			"line":	151,
			"primary_score":	999823,
			"second_score":	130972
		}, {
			"file":	"src/http_req.c",
			"line":	152,
			"primary_score":	999823,
			"second_score":	130971
		}, {
			"file":	"src/http_req.c",
			"line":	154,
			"primary_score":	999823,
			"second_score":	130970
		}, {
			"file":	"src/http_req.c",
			"line":	155,
			"primary_score":	999823,
			"second_score":	130969
		}, {
			"file":	"src/http_req.c",
			"line":	157,
			"primary_score":	999823,
			"second_score":	130968
		}, {
			"file":	"src/http_req.c",
			"line":	158,
			"primary_score":	999823,
			"second_score":	130967
		}, {
			"file":	"src/http_req.c",
			"line":	163,
			"primary_score":	999823,
			"second_score":	130966
		}, {
			"file":	"src/http_req.c",
			"line":	173,
			"primary_score":	999823,
			"second_score":	131135
		}, {
			"file":	"src/http_req.c",
			"line":	174,
			"primary_score":	999824,
			"second_score":	132543
		}, {
			"file":	"src/http_req.c",
			"line":	176,
			"primary_score":	999869,
			"second_score":	131134
		}, {
			"file":	"src/http_req.c",
			"line":	177,
			"primary_score":	999870,
			"second_score":	131575
		}, {
			"file":	"src/http_req.c",
			"line":	178,
			"primary_score":	999869,
			"second_score":	131584
		}, {
			"file":	"src/http_req.c",
			"line":	181,
			"primary_score":	999823,
			"second_score":	131133
		}, {
			"file":	"src/http_req.c",
			"line":	184,
			"primary_score":	999823,
			"second_score":	131128
		}, {
			"file":	"src/http_req.c",
			"line":	191,
			"primary_score":	999823,
			"second_score":	131127
		}, {
			"file":	"src/http_req.c",
			"line":	194,
			"primary_score":	999823,
			"second_score":	131126
		}, {
			"file":	"src/http_req.c",
			"line":	197,
			"primary_score":	999823,
			"second_score":	131125
		}, {
			"file":	"src/http_req.c",
			"line":	198,
			"primary_score":	999823,
			"second_score":	131124
		}, {
			"file":	"src/http_req.c",
			"line":	213,
			"primary_score":	999823,
			"second_score":	131113
		}, {
			"file":	"src/http_req.c",
			"line":	215,
			"primary_score":	999823,
			"second_score":	131112
		}, {
			"file":	"src/http_req.c",
			"line":	219,
			"primary_score":	999823,
			"second_score":	130965
		}, {
			"file":	"src/http_req.c",
			"line":	220,
			"primary_score":	999823,
			"second_score":	130964
		}, {
			"file":	"src/http_req.c",
			"line":	222,
			"primary_score":	999823,
			"second_score":	130963
		}, {
			"file":	"src/http_req.c",
			"line":	229,
			"primary_score":	999823,
			"second_score":	132927
		}, {
			"file":	"src/http_req.c",
			"line":	230,
			"primary_score":	999823,
			"second_score":	132926
		}, {
			"file":	"src/http_req.c",
			"line":	231,
			"primary_score":	999823,
			"second_score":	132925
		}, {
			"file":	"src/http_req.c",
			"line":	232,
			"primary_score":	999823,
			"second_score":	132924
		}, {
			"file":	"src/http_req.c",
			"line":	233,
			"primary_score":	999823,
			"second_score":	132923
		}, {
			"file":	"src/http_req.c",
			"line":	234,
			"primary_score":	999823,
			"second_score":	132922
		}, {
			"file":	"src/http_req.c",
			"line":	235,
			"primary_score":	999823,
			"second_score":	132921
		}, {
			"file":	"src/http_req.c",
			"line":	237,
			"primary_score":	999823,
			"second_score":	132920
		}, {
			"file":	"src/http_req.c",
			"line":	238,
			"primary_score":	999823,
			"second_score":	132919
		}, {
			"file":	"src/http_req.c",
			"line":	239,
			"primary_score":	999823,
			"second_score":	132918
		}, {
			"file":	"src/http_req.c",
			"line":	240,
			"primary_score":	999823,
			"second_score":	132917
		}, {
			"file":	"src/http_req.c",
			"line":	241,
			"primary_score":	999823,
			"second_score":	132916
		}, {
			"file":	"src/http_req.c",
			"line":	242,
			"primary_score":	999823,
			"second_score":	132915
		}, {
			"file":	"src/http_req.c",
			"line":	244,
			"primary_score":	999823,
			"second_score":	132914
		}, {
			"file":	"src/http_req.c",
			"line":	245,
			"primary_score":	999823,
			"second_score":	132913
		}, {
			"file":	"src/http_req.c",
			"line":	246,
			"primary_score":	999823,
			"second_score":	132905
		}, {
			"file":	"src/http_req.c",
			"line":	247,
			"primary_score":	999823,
			"second_score":	132904
		}, {
			"file":	"src/http_req.c",
			"line":	249,
			"primary_score":	999823,
			"second_score":	132900
		}, {
			"file":	"src/http_req.c",
			"line":	250,
			"primary_score":	999823,
			"second_score":	132894
		}, {
			"file":	"src/http_req.c",
			"line":	252,
			"primary_score":	999823,
			"second_score":	132886
		}, {
			"file":	"src/http_req.c",
			"line":	254,
			"primary_score":	999823,
			"second_score":	132880
		}, {
			"file":	"src/http_req.c",
			"line":	255,
			"primary_score":	999823,
			"second_score":	130962
		}, {
			"file":	"src/http_req.c",
			"line":	257,
			"primary_score":	999823,
			"second_score":	130629
		}, {
			"file":	"src/http_req.c",
			"line":	260,
			"primary_score":	999823,
			"second_score":	130620
		}, {
			"file":	"src/http_req.c",
			"line":	261,
			"primary_score":	999830,
			"second_score":	130619
		}, {
			"file":	"src/http_req.c",
			"line":	263,
			"primary_score":	999823,
			"second_score":	130987
		}, {
			"file":	"src/http_req.c",
			"line":	267,
			"primary_score":	999823,
			"second_score":	130618
		}, {
			"file":	"src/http_req.c",
			"line":	290,
			"primary_score":	999823,
			"second_score":	130617
		}, {
			"file":	"src/http_req.c",
			"line":	291,
			"primary_score":	999823,
			"second_score":	130511
		}, {
			"file":	"src/http_req.c",
			"line":	293,
			"primary_score":	999823,
			"second_score":	130506
		}, {
			"file":	"src/http_req.c",
			"line":	304,
			"primary_score":	999830,
			"second_score":	130505
		}, {
			"file":	"src/http_req.c",
			"line":	306,
			"primary_score":	999830,
			"second_score":	130504
		}, {
			"file":	"src/http_req.c",
			"line":	310,
			"primary_score":	999830,
			"second_score":	130503
		}, {
			"file":	"src/http_req.c",
			"line":	312,
			"primary_score":	999830,
			"second_score":	130502
		}, {
			"file":	"src/http_req.c",
			"line":	315,
			"primary_score":	999823,
			"second_score":	130501
		}, {
			"file":	"src/http_req.c",
			"line":	316,
			"primary_score":	999823,
			"second_score":	130496
		}, {
			"file":	"src/http_req.c",
			"line":	317,
			"primary_score":	999823,
			"second_score":	130469
		}, {
			"file":	"src/http_req.c",
			"line":	319,
			"primary_score":	999823,
			"second_score":	130465
		}, {
			"file":	"src/http_req_parser.c",
			"line":	309,
			"primary_score":	999823,
			"second_score":	132899
		}, {
			"file":	"src/http_req_parser.c",
			"line":	310,
			"primary_score":	999823,
			"second_score":	132898
		}, {
			"file":	"src/http_req_parser.c",
			"line":	311,
			"primary_score":	999823,
			"second_score":	132897
		}, {
			"file":	"src/http_req_parser.c",
			"line":	312,
			"primary_score":	999823,
			"second_score":	132896
		}, {
			"file":	"src/http_req_parser.c",
			"line":	314,
			"primary_score":	999823,
			"second_score":	132895
		}, {
			"file":	"src/http_req_parser.c",
			"line":	323,
			"primary_score":	999823,
			"second_score":	130516
		}, {
			"file":	"src/http_req_parser.c",
			"line":	339,
			"primary_score":	999823,
			"second_score":	130547
		}, {
			"file":	"src/http_req_parser.c",
			"line":	341,
			"primary_score":	999823,
			"second_score":	130543
		}, {
			"file":	"src/http_req_parser.c",
			"line":	355,
			"primary_score":	999823,
			"second_score":	130522
		}, {
			"file":	"src/http_req_parser.c",
			"line":	356,
			"primary_score":	999823,
			"second_score":	130521
		}, {
			"file":	"src/http_req_parser.c",
			"line":	358,
			"primary_score":	999823,
			"second_score":	130520
		}, {
			"file":	"src/http_req_parser.c",
			"line":	360,
			"primary_score":	999823,
			"second_score":	130519
		}, {
			"file":	"src/http_req_parser.c",
			"line":	366,
			"primary_score":	999823,
			"second_score":	130518
		}, {
			"file":	"src/http_req_parser.c",
			"line":	367,
			"primary_score":	999823,
			"second_score":	130517
		}, {
			"file":	"src/http_req_parser.c",
			"line":	368,
			"primary_score":	999823,
			"second_score":	130515
		}, {
			"file":	"src/http_req_parser.c",
			"line":	369,
			"primary_score":	999823,
			"second_score":	130514
		}, {
			"file":	"src/http_req_parser.c",
			"line":	388,
			"primary_score":	999823,
			"second_score":	130510
		}, {
			"file":	"src/http_req_parser.c",
			"line":	389,
			"primary_score":	999823,
			"second_score":	130509
		}, {
			"file":	"src/http_req_parser.c",
			"line":	390,
			"primary_score":	999823,
			"second_score":	130508
		}, {
			"file":	"src/http_req_parser.c",
			"line":	391,
			"primary_score":	999823,
			"second_score":	130507
		}, {
			"file":	"src/http_req_parser.c",
			"line":	406,
			"primary_score":	999823,
			"second_score":	130603
		}, {
			"file":	"src/http_req_parser.c",
			"line":	407,
			"primary_score":	999823,
			"second_score":	130602
		}, {
			"file":	"src/http_req_parser.c",
			"line":	410,
			"primary_score":	999823,
			"second_score":	130601
		}, {
			"file":	"src/http_req_parser.c",
			"line":	411,
			"primary_score":	999823,
			"second_score":	130600
		}, {
			"file":	"src/http_req_parser.c",
			"line":	412,
			"primary_score":	999872,
			"second_score":	130688
		}, {
			"file":	"src/http_req_parser.c",
			"line":	414,
			"primary_score":	999823,
			"second_score":	130599
		}, {
			"file":	"src/http_req_parser.c",
			"line":	417,
			"primary_score":	999823,
			"second_score":	130598
		}, {
			"file":	"src/http_req_parser.c",
			"line":	418,
			"primary_score":	999823,
			"second_score":	130597
		}, {
			"file":	"src/http_req_parser.c",
			"line":	432,
			"primary_score":	999866,
			"second_score":	130941
		}, {
			"file":	"src/http_req_parser.c",
			"line":	434,
			"primary_score":	999823,
			"second_score":	130596
		}, {
			"file":	"src/http_req_parser.c",
			"line":	450,
			"primary_score":	999824,
			"second_score":	130536
		}, {
			"file":	"src/http_req_parser.c",
			"line":	451,
			"primary_score":	999824,
			"second_score":	130535
		}, {
			"file":	"src/http_req_parser.c",
			"line":	453,
			"primary_score":	999824,
			"second_score":	130534
		}, {
			"file":	"src/http_req_parser.c",
			"line":	454,
			"primary_score":	999824,
			"second_score":	130533
		}, {
			"file":	"src/http_req_parser.c",
			"line":	457,
			"primary_score":	999824,
			"second_score":	130532
		}, {
			"file":	"src/http_req_parser.c",
			"line":	460,
			"primary_score":	999824,
			"second_score":	130531
		}, {
			"file":	"src/http_req_parser.c",
			"line":	461,
			"primary_score":	999824,
			"second_score":	130530
		}, {
			"file":	"src/http_req_parser.c",
			"line":	464,
			"primary_score":	999824,
			"second_score":	130529
		}, {
			"file":	"src/http_req_parser.c",
			"line":	477,
			"primary_score":	999823,
			"second_score":	130641
		}, {
			"file":	"src/http_req_parser.c",
			"line":	478,
			"primary_score":	999823,
			"second_score":	130640
		}, {
			"file":	"src/http_req_parser.c",
			"line":	479,
			"primary_score":	999823,
			"second_score":	130639
		}, {
			"file":	"src/http_req_parser.c",
			"line":	493,
			"primary_score":	999823,
			"second_score":	130638
		}, {
			"file":	"src/http_req_parser.c",
			"line":	494,
			"primary_score":	999823,
			"second_score":	130637
		}, {
			"file":	"src/http_req_parser.c",
			"line":	495,
			"primary_score":	999823,
			"second_score":	130636
		}, {
			"file":	"src/http_req_parser.c",
			"line":	496,
			"primary_score":	999823,
			"second_score":	130635
		}, {
			"file":	"src/http_req_parser.c",
			"line":	498,
			"primary_score":	999823,
			"second_score":	130634
		}, {
			"file":	"src/http_req_parser.c",
			"line":	540,
			"primary_score":	999824,
			"second_score":	130592
		}, {
			"file":	"src/http_req_parser.c",
			"line":	541,
			"primary_score":	999824,
			"second_score":	130591
		}, {
			"file":	"src/http_req_parser.c",
			"line":	542,
			"primary_score":	999824,
			"second_score":	130590
		}, {
			"file":	"src/http_req_parser.c",
			"line":	543,
			"primary_score":	999824,
			"second_score":	130589
		}, {
			"file":	"src/http_req_parser.c",
			"line":	544,
			"primary_score":	999824,
			"second_score":	130588
		}, {
			"file":	"src/http_req_parser.c",
			"line":	545,
			"primary_score":	999824,
			"second_score":	130587
		}, {
			"file":	"src/http_req_parser.c",
			"line":	546,
			"primary_score":	999824,
			"second_score":	130586
		}, {
			"file":	"src/http_req_parser.c",
			"line":	548,
			"primary_score":	999824,
			"second_score":	130585
		}, {
			"file":	"src/http_req_parser.c",
			"line":	555,
			"primary_score":	999824,
			"second_score":	130584
		}, {
			"file":	"src/http_req_parser.c",
			"line":	567,
			"primary_score":	999872,
			"second_score":	130583
		}, {
			"file":	"src/http_req_parser.c",
			"line":	569,
			"primary_score":	999872,
			"second_score":	130582
		}, {
			"file":	"src/http_req_parser.c",
			"line":	570,
			"primary_score":	999872,
			"second_score":	130581
		}, {
			"file":	"src/http_req_parser.c",
			"line":	571,
			"primary_score":	999872,
			"second_score":	130580
		}, {
			"file":	"src/http_req_parser.c",
			"line":	572,
			"primary_score":	999872,
			"second_score":	130561
		}, {
			"file":	"src/http_req_parser.c",
			"line":	575,
			"primary_score":	999872,
			"second_score":	130556
		}, {
			"file":	"src/http_req_parser.c",
			"line":	577,
			"primary_score":	999872,
			"second_score":	130549
		}, {
			"file":	"src/http_req_parser.c",
			"line":	578,
			"primary_score":	999872,
			"second_score":	130542
		}, {
			"file":	"src/http_req_parser.c",
			"line":	627,
			"primary_score":	999824,
			"second_score":	132483
		}, {
			"file":	"src/http_req_parser.c",
			"line":	629,
			"primary_score":	999824,
			"second_score":	132475
		}, {
			"file":	"src/http_req_parser.c",
			"line":	632,
			"primary_score":	999824,
			"second_score":	132469
		}, {
			"file":	"src/http_req_parser.c",
			"line":	639,
			"primary_score":	999827,
			"second_score":	132210
		}, {
			"file":	"src/http_req_parser.c",
			"line":	641,
			"primary_score":	999827,
			"second_score":	132209
		}, {
			"file":	"src/http_req_parser.c",
			"line":	642,
			"primary_score":	999828,
			"second_score":	132208
		}, {
			"file":	"src/http_req_parser.c",
			"line":	644,
			"primary_score":	999828,
			"second_score":	132207
		}, {
			"file":	"src/http_req_parser.c",
			"line":	646,
			"primary_score":	999828,
			"second_score":	132206
		}, {
			"file":	"src/http_req_parser.c",
			"line":	647,
			"primary_score":	999828,
			"second_score":	132205
		}, {
			"file":	"src/http_req_parser.c",
			"line":	648,
			"primary_score":	999828,
			"second_score":	132204
		}, {
			"file":	"src/http_req_parser.c",
			"line":	649,
			"primary_score":	999828,
			"second_score":	132203
		}, {
			"file":	"src/http_req_parser.c",
			"line":	650,
			"primary_score":	999828,
			"second_score":	132202
		}, {
			"file":	"src/http_req_parser.c",
			"line":	651,
			"primary_score":	999828,
			"second_score":	132201
		}, {
			"file":	"src/http_req_parser.c",
			"line":	652,
			"primary_score":	999828,
			"second_score":	132200
		}, {
			"file":	"src/http_req_parser.c",
			"line":	653,
			"primary_score":	999830,
			"second_score":	132199
		}, {
			"file":	"src/http_req_parser.c",
			"line":	654,
			"primary_score":	999830,
			"second_score":	132198
		}, {
			"file":	"src/http_req_parser.c",
			"line":	655,
			"primary_score":	999830,
			"second_score":	132197
		}, {
			"file":	"src/http_req_parser.c",
			"line":	657,
			"primary_score":	999839,
			"second_score":	132196
		}, {
			"file":	"src/http_req_parser.c",
			"line":	658,
			"primary_score":	999841,
			"second_score":	132195
		}, {
			"file":	"src/http_req_parser.c",
			"line":	665,
			"primary_score":	999827,
			"second_score":	132194
		}, {
			"file":	"src/http_req_parser.c",
			"line":	668,
			"primary_score":	999827,
			"second_score":	132189
		}, {
			"file":	"src/http_req_parser.c",
			"line":	679,
			"primary_score":	999873,
			"second_score":	130877
		}, {
			"file":	"src/http_req_parser.c",
			"line":	681,
			"primary_score":	999873,
			"second_score":	130876
		}, {
			"file":	"src/http_req_parser.c",
			"line":	682,
			"primary_score":	999873,
			"second_score":	130869
		}, {
			"file":	"src/http_req_parser.c",
			"line":	685,
			"primary_score":	999873,
			"second_score":	130842
		}, {
			"file":	"src/http_req_parser.c",
			"line":	686,
			"primary_score":	999873,
			"second_score":	130823
		}, {
			"file":	"src/http_req_parser.c",
			"line":	687,
			"primary_score":	999873,
			"second_score":	130804
		}, {
			"file":	"src/http_req_parser.c",
			"line":	688,
			"primary_score":	999873,
			"second_score":	130799
		}, {
			"file":	"src/http_req_parser.c",
			"line":	690,
			"primary_score":	999873,
			"second_score":	130794
		}, {
			"file":	"src/http_req_parser.c",
			"line":	693,
			"primary_score":	999873,
			"second_score":	130724
		}, {
			"file":	"src/http_req_parser.c",
			"line":	694,
			"primary_score":	999873,
			"second_score":	130717
		}, {
			"file":	"src/http_req_parser.c",
			"line":	716,
			"primary_score":	999873,
			"second_score":	130928
		}, {
			"file":	"src/http_req_parser.c",
			"line":	718,
			"primary_score":	999873,
			"second_score":	130927
		}, {
			"file":	"src/http_req_parser.c",
			"line":	721,
			"primary_score":	999873,
			"second_score":	130926
		}, {
			"file":	"src/http_req_parser.c",
			"line":	722,
			"primary_score":	999873,
			"second_score":	130919
		}, {
			"file":	"src/http_req_parser.c",
			"line":	723,
			"primary_score":	999824,
			"second_score":	130541
		}, {
			"file":	"src/http_req_parser.c",
			"line":	724,
			"primary_score":	999824,
			"second_score":	130540
		}, {
			"file":	"src/http_req_parser.c",
			"line":	725,
			"primary_score":	999824,
			"second_score":	130539
		}, {
			"file":	"src/http_req_parser.c",
			"line":	726,
			"primary_score":	999824,
			"second_score":	130538
		}, {
			"file":	"src/http_req_parser.c",
			"line":	727,
			"primary_score":	999824,
			"second_score":	130537
		}, {
			"file":	"src/http_req_parser.c",
			"line":	728,
			"primary_score":	999824,
			"second_score":	130528
		}, {
			"file":	"src/http_req_parser.c",
			"line":	729,
			"primary_score":	999824,
			"second_score":	130661
		}, {
			"file":	"src/http_req_parser.c",
			"line":	730,
			"primary_score":	999830,
			"second_score":	130527
		}, {
			"file":	"src/http_req_parser.c",
			"line":	731,
			"primary_score":	999830,
			"second_score":	130526
		}, {
			"file":	"src/http_req_parser.c",
			"line":	777,
			"primary_score":	999830,
			"second_score":	130525
		}, {
			"file":	"src/http_req_parser.c",
			"line":	779,
			"primary_score":	999830,
			"second_score":	130524
		}, {
			"file":	"src/http_req_parser.c",
			"line":	783,
			"primary_score":	999830,
			"second_score":	130523
		}, {
			"file":	"src/http_req_parser.c",
			"line":	786,
			"primary_score":	999830,
			"second_score":	130513
		}, {
			"file":	"src/http_req_parser.c",
			"line":	814,
			"primary_score":	999823,
			"second_score":	130616
		}, {
			"file":	"src/http_req_parser.c",
			"line":	815,
			"primary_score":	999823,
			"second_score":	130615
		}, {
			"file":	"src/http_req_parser.c",
			"line":	816,
			"primary_score":	999823,
			"second_score":	130614
		}, {
			"file":	"src/http_req_parser.c",
			"line":	817,
			"primary_score":	999823,
			"second_score":	130613
		}, {
			"file":	"src/http_req_parser.c",
			"line":	818,
			"primary_score":	999823,
			"second_score":	130612
		}, {
			"file":	"src/http_req_parser.c",
			"line":	821,
			"primary_score":	999823,
			"second_score":	130611
		}, {
			"file":	"src/http_req_parser.c",
			"line":	822,
			"primary_score":	999823,
			"second_score":	130610
		}, {
			"file":	"src/http_req_parser.c",
			"line":	823,
			"primary_score":	999823,
			"second_score":	132812
		}, {
			"file":	"src/http_req_parser.c",
			"line":	824,
			"primary_score":	999823,
			"second_score":	132811
		}, {
			"file":	"src/http_req_parser.c",
			"line":	825,
			"primary_score":	999823,
			"second_score":	132810
		}, {
			"file":	"src/http_req_parser.c",
			"line":	826,
			"primary_score":	999823,
			"second_score":	132809
		}, {
			"file":	"src/http_req_parser.c",
			"line":	827,
			"primary_score":	999823,
			"second_score":	132808
		}, {
			"file":	"src/http_req_parser.c",
			"line":	829,
			"primary_score":	999823,
			"second_score":	130609
		}, {
			"file":	"src/http_req_parser.c",
			"line":	830,
			"primary_score":	999823,
			"second_score":	130608
		}, {
			"file":	"src/http_req_parser.c",
			"line":	831,
			"primary_score":	999823,
			"second_score":	130607
		}, {
			"file":	"src/http_req_parser.c",
			"line":	834,
			"primary_score":	999823,
			"second_score":	130606
		}, {
			"file":	"src/http_req_parser.c",
			"line":	839,
			"primary_score":	999823,
			"second_score":	130605
		}, {
			"file":	"src/http_req_parser.c",
			"line":	840,
			"primary_score":	999823,
			"second_score":	130604
		}, {
			"file":	"src/http_req_parser.c",
			"line":	841,
			"primary_score":	999823,
			"second_score":	130595
		}, {
			"file":	"src/http_req_parser.c",
			"line":	842,
			"primary_score":	999823,
			"second_score":	130642
		}, {
			"file":	"src/http_req_parser.c",
			"line":	843,
			"primary_score":	999823,
			"second_score":	130633
		}, {
			"file":	"src/http_req_parser.c",
			"line":	844,
			"primary_score":	999823,
			"second_score":	130632
		}, {
			"file":	"src/http_req_parser.c",
			"line":	847,
			"primary_score":	999823,
			"second_score":	130631
		}, {
			"file":	"src/http_req_parser.c",
			"line":	849,
			"primary_score":	999823,
			"second_score":	130594
		}, {
			"file":	"src/http_req_parser.c",
			"line":	850,
			"primary_score":	999824,
			"second_score":	130593
		}, {
			"file":	"src/http_req_parser.c",
			"line":	936,
			"primary_score":	999823,
			"second_score":	130512
		}, {
			"file":	"src/http_req_range.c",
			"line":	45,
			"primary_score":	999823,
			"second_score":	11165
		}, {
			"file":	"src/http_req_range.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	11166
		}, {
			"file":	"src/http_req_range.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	11163
		}, {
			"file":	"src/http_resp.c",
			"line":	30,
			"primary_score":	999840,
			"second_score":	449221
		}, {
			"file":	"src/http_resp.c",
			"line":	32,
			"primary_score":	999840,
			"second_score":	449220
		}, {
			"file":	"src/http_resp.c",
			"line":	33,
			"primary_score":	999840,
			"second_score":	449212
		}, {
			"file":	"src/http_resp.c",
			"line":	34,
			"primary_score":	999840,
			"second_score":	449206
		}, {
			"file":	"src/http_resp.c",
			"line":	36,
			"primary_score":	999840,
			"second_score":	449205
		}, {
			"file":	"src/http_resp.c",
			"line":	40,
			"primary_score":	999984,
			"second_score":	117230
		}, {
			"file":	"src/http_resp.c",
			"line":	42,
			"primary_score":	999984,
			"second_score":	117229
		}, {
			"file":	"src/http_resp.c",
			"line":	43,
			"primary_score":	999984,
			"second_score":	117225
		}, {
			"file":	"src/http_resp.c",
			"line":	44,
			"primary_score":	999984,
			"second_score":	117219
		}, {
			"file":	"src/http_resp.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	13791
		}, {
			"file":	"src/http_resp.c",
			"line":	51,
			"primary_score":	999840,
			"second_score":	13790
		}, {
			"file":	"src/http_resp.c",
			"line":	52,
			"primary_score":	999840,
			"second_score":	13786
		}, {
			"file":	"src/http_resp.c",
			"line":	54,
			"primary_score":	999840,
			"second_score":	13738
		}, {
			"file":	"src/http_resp.c",
			"line":	58,
			"primary_score":	999984,
			"second_score":	116082
		}, {
			"file":	"src/http_resp.c",
			"line":	67,
			"primary_score":	999984,
			"second_score":	116081
		}, {
			"file":	"src/http_resp.c",
			"line":	69,
			"primary_score":	999984,
			"second_score":	116080
		}, {
			"file":	"src/http_resp.c",
			"line":	70,
			"primary_score":	999984,
			"second_score":	116079
		}, {
			"file":	"src/http_resp.c",
			"line":	76,
			"primary_score":	999984,
			"second_score":	116078
		}, {
			"file":	"src/http_resp.c",
			"line":	80,
			"primary_score":	999984,
			"second_score":	116076
		}, {
			"file":	"src/http_resp.c",
			"line":	89,
			"primary_score":	999984,
			"second_score":	116075
		}, {
			"file":	"src/http_resp.c",
			"line":	94,
			"primary_score":	999984,
			"second_score":	116074
		}, {
			"file":	"src/http_resp.c",
			"line":	103,
			"primary_score":	999984,
			"second_score":	116085
		}, {
			"file":	"src/http_resp.c",
			"line":	104,
			"primary_score":	999984,
			"second_score":	116084
		}, {
			"file":	"src/http_resp.c",
			"line":	108,
			"primary_score":	999984,
			"second_score":	116083
		}, {
			"file":	"src/http_resp.c",
			"line":	109,
			"primary_score":	999984,
			"second_score":	116077
		}, {
			"file":	"src/http_resp.c",
			"line":	113,
			"primary_score":	999985,
			"second_score":	116352
		}, {
			"file":	"src/http_resp.c",
			"line":	115,
			"primary_score":	999985,
			"second_score":	116351
		}, {
			"file":	"src/http_resp.c",
			"line":	124,
			"primary_score":	999984,
			"second_score":	116073
		}, {
			"file":	"src/http_resp.c",
			"line":	125,
			"primary_score":	999984,
			"second_score":	116072
		}, {
			"file":	"src/http_resp.c",
			"line":	127,
			"primary_score":	999984,
			"second_score":	116071
		}, {
			"file":	"src/http_resp.c",
			"line":	128,
			"primary_score":	999984,
			"second_score":	116070
		}, {
			"file":	"src/http_resp.c",
			"line":	130,
			"primary_score":	999984,
			"second_score":	116069
		}, {
			"file":	"src/http_resp.c",
			"line":	131,
			"primary_score":	999984,
			"second_score":	116068
		}, {
			"file":	"src/http_resp.c",
			"line":	136,
			"primary_score":	999984,
			"second_score":	116067
		}, {
			"file":	"src/http_resp.c",
			"line":	146,
			"primary_score":	999984,
			"second_score":	116231
		}, {
			"file":	"src/http_resp.c",
			"line":	147,
			"primary_score":	999985,
			"second_score":	117057
		}, {
			"file":	"src/http_resp.c",
			"line":	148,
			"primary_score":	999984,
			"second_score":	117064
		}, {
			"file":	"src/http_resp.c",
			"line":	150,
			"primary_score":	999985,
			"second_score":	116230
		}, {
			"file":	"src/http_resp.c",
			"line":	151,
			"primary_score":	999988,
			"second_score":	116652
		}, {
			"file":	"src/http_resp.c",
			"line":	154,
			"primary_score":	999984,
			"second_score":	116229
		}, {
			"file":	"src/http_resp.c",
			"line":	157,
			"primary_score":	999984,
			"second_score":	116225
		}, {
			"file":	"src/http_resp.c",
			"line":	164,
			"primary_score":	999984,
			"second_score":	116224
		}, {
			"file":	"src/http_resp.c",
			"line":	167,
			"primary_score":	999984,
			"second_score":	116223
		}, {
			"file":	"src/http_resp.c",
			"line":	170,
			"primary_score":	999984,
			"second_score":	116222
		}, {
			"file":	"src/http_resp.c",
			"line":	171,
			"primary_score":	999984,
			"second_score":	116221
		}, {
			"file":	"src/http_resp.c",
			"line":	186,
			"primary_score":	999984,
			"second_score":	116210
		}, {
			"file":	"src/http_resp.c",
			"line":	188,
			"primary_score":	999984,
			"second_score":	116209
		}, {
			"file":	"src/http_resp.c",
			"line":	192,
			"primary_score":	999984,
			"second_score":	116066
		}, {
			"file":	"src/http_resp.c",
			"line":	193,
			"primary_score":	999984,
			"second_score":	116065
		}, {
			"file":	"src/http_resp.c",
			"line":	195,
			"primary_score":	999984,
			"second_score":	116064
		}, {
			"file":	"src/http_resp.c",
			"line":	202,
			"primary_score":	999984,
			"second_score":	117217
		}, {
			"file":	"src/http_resp.c",
			"line":	203,
			"primary_score":	999984,
			"second_score":	117216
		}, {
			"file":	"src/http_resp.c",
			"line":	204,
			"primary_score":	999984,
			"second_score":	117215
		}, {
			"file":	"src/http_resp.c",
			"line":	205,
			"primary_score":	999984,
			"second_score":	117214
		}, {
			"file":	"src/http_resp.c",
			"line":	206,
			"primary_score":	999984,
			"second_score":	117213
		}, {
			"file":	"src/http_resp.c",
			"line":	207,
			"primary_score":	999984,
			"second_score":	117212
		}, {
			"file":	"src/http_resp.c",
			"line":	208,
			"primary_score":	999984,
			"second_score":	117211
		}, {
			"file":	"src/http_resp.c",
			"line":	210,
			"primary_score":	999984,
			"second_score":	117210
		}, {
			"file":	"src/http_resp.c",
			"line":	211,
			"primary_score":	999984,
			"second_score":	117209
		}, {
			"file":	"src/http_resp.c",
			"line":	212,
			"primary_score":	999984,
			"second_score":	117208
		}, {
			"file":	"src/http_resp.c",
			"line":	213,
			"primary_score":	999984,
			"second_score":	117207
		}, {
			"file":	"src/http_resp.c",
			"line":	214,
			"primary_score":	999984,
			"second_score":	117206
		}, {
			"file":	"src/http_resp.c",
			"line":	215,
			"primary_score":	999984,
			"second_score":	117205
		}, {
			"file":	"src/http_resp.c",
			"line":	217,
			"primary_score":	999984,
			"second_score":	117204
		}, {
			"file":	"src/http_resp.c",
			"line":	218,
			"primary_score":	999984,
			"second_score":	117203
		}, {
			"file":	"src/http_resp.c",
			"line":	219,
			"primary_score":	999984,
			"second_score":	117195
		}, {
			"file":	"src/http_resp.c",
			"line":	220,
			"primary_score":	999984,
			"second_score":	117194
		}, {
			"file":	"src/http_resp.c",
			"line":	222,
			"primary_score":	999984,
			"second_score":	117190
		}, {
			"file":	"src/http_resp.c",
			"line":	224,
			"primary_score":	999984,
			"second_score":	117184
		}, {
			"file":	"src/http_resp.c",
			"line":	225,
			"primary_score":	999984,
			"second_score":	117178
		}, {
			"file":	"src/http_resp.c",
			"line":	230,
			"primary_score":	999984,
			"second_score":	117167
		}, {
			"file":	"src/http_resp.c",
			"line":	231,
			"primary_score":	999984,
			"second_score":	116063
		}, {
			"file":	"src/http_resp.c",
			"line":	233,
			"primary_score":	999984,
			"second_score":	115767
		}, {
			"file":	"src/http_resp.c",
			"line":	236,
			"primary_score":	999984,
			"second_score":	115758
		}, {
			"file":	"src/http_resp.c",
			"line":	237,
			"primary_score":	999984,
			"second_score":	115757
		}, {
			"file":	"src/http_resp.c",
			"line":	239,
			"primary_score":	999984,
			"second_score":	116086
		}, {
			"file":	"src/http_resp.c",
			"line":	243,
			"primary_score":	999984,
			"second_score":	115756
		}, {
			"file":	"src/http_resp.c",
			"line":	253,
			"primary_score":	999984,
			"second_score":	115755
		}, {
			"file":	"src/http_resp.c",
			"line":	254,
			"primary_score":	999984,
			"second_score":	115622
		}, {
			"file":	"src/http_resp.c",
			"line":	256,
			"primary_score":	999984,
			"second_score":	115617
		}, {
			"file":	"src/http_resp.c",
			"line":	259,
			"primary_score":	999984,
			"second_score":	115615
		}, {
			"file":	"src/http_resp.c",
			"line":	270,
			"primary_score":	999985,
			"second_score":	115614
		}, {
			"file":	"src/http_resp.c",
			"line":	272,
			"primary_score":	999985,
			"second_score":	115613
		}, {
			"file":	"src/http_resp.c",
			"line":	277,
			"primary_score":	999985,
			"second_score":	115612
		}, {
			"file":	"src/http_resp.c",
			"line":	278,
			"primary_score":	999985,
			"second_score":	115611
		}, {
			"file":	"src/http_resp.c",
			"line":	280,
			"primary_score":	999985,
			"second_score":	115610
		}, {
			"file":	"src/http_resp.c",
			"line":	283,
			"primary_score":	999984,
			"second_score":	115609
		}, {
			"file":	"src/http_resp.c",
			"line":	284,
			"primary_score":	999984,
			"second_score":	115604
		}, {
			"file":	"src/http_resp.c",
			"line":	285,
			"primary_score":	999984,
			"second_score":	115582
		}, {
			"file":	"src/http_resp.c",
			"line":	287,
			"primary_score":	999984,
			"second_score":	115578
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	304,
			"primary_score":	999984,
			"second_score":	117183
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	305,
			"primary_score":	999984,
			"second_score":	117182
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	306,
			"primary_score":	999984,
			"second_score":	117181
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	307,
			"primary_score":	999984,
			"second_score":	117180
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	309,
			"primary_score":	999984,
			"second_score":	117179
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	318,
			"primary_score":	999984,
			"second_score":	115627
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	333,
			"primary_score":	999984,
			"second_score":	115658
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	335,
			"primary_score":	999984,
			"second_score":	115654
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	354,
			"primary_score":	999984,
			"second_score":	115633
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	355,
			"primary_score":	999984,
			"second_score":	115632
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	357,
			"primary_score":	999984,
			"second_score":	115631
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	359,
			"primary_score":	999984,
			"second_score":	115630
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	365,
			"primary_score":	999984,
			"second_score":	115629
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	366,
			"primary_score":	999984,
			"second_score":	115628
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	367,
			"primary_score":	999984,
			"second_score":	115626
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	368,
			"primary_score":	999984,
			"second_score":	115625
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	387,
			"primary_score":	999984,
			"second_score":	115621
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	388,
			"primary_score":	999984,
			"second_score":	115620
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	389,
			"primary_score":	999984,
			"second_score":	115619
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	390,
			"primary_score":	999984,
			"second_score":	115618
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	405,
			"primary_score":	999984,
			"second_score":	115741
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	406,
			"primary_score":	999984,
			"second_score":	115740
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	409,
			"primary_score":	999984,
			"second_score":	115739
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	410,
			"primary_score":	999984,
			"second_score":	115738
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	411,
			"primary_score":	999984,
			"second_score":	115826
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	413,
			"primary_score":	999984,
			"second_score":	115737
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	416,
			"primary_score":	999984,
			"second_score":	115736
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	417,
			"primary_score":	999984,
			"second_score":	115735
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	433,
			"primary_score":	999984,
			"second_score":	115734
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	449,
			"primary_score":	999984,
			"second_score":	115647
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	450,
			"primary_score":	999984,
			"second_score":	115646
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	452,
			"primary_score":	999984,
			"second_score":	115645
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	453,
			"primary_score":	999984,
			"second_score":	115644
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	456,
			"primary_score":	999984,
			"second_score":	115643
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	459,
			"primary_score":	999984,
			"second_score":	115642
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	460,
			"primary_score":	999984,
			"second_score":	115641
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	463,
			"primary_score":	999984,
			"second_score":	115640
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	476,
			"primary_score":	999984,
			"second_score":	115779
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	477,
			"primary_score":	999984,
			"second_score":	115778
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	478,
			"primary_score":	999984,
			"second_score":	115777
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	492,
			"primary_score":	999984,
			"second_score":	115776
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	493,
			"primary_score":	999984,
			"second_score":	115775
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	494,
			"primary_score":	999984,
			"second_score":	115774
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	495,
			"primary_score":	999984,
			"second_score":	115773
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	497,
			"primary_score":	999984,
			"second_score":	115772
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	538,
			"primary_score":	999984,
			"second_score":	115730
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	539,
			"primary_score":	999984,
			"second_score":	115729
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	540,
			"primary_score":	999984,
			"second_score":	115728
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	541,
			"primary_score":	999984,
			"second_score":	115727
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	542,
			"primary_score":	999984,
			"second_score":	115726
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	543,
			"primary_score":	999984,
			"second_score":	115725
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	544,
			"primary_score":	999984,
			"second_score":	115724
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	546,
			"primary_score":	999984,
			"second_score":	115723
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	553,
			"primary_score":	999984,
			"second_score":	115722
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	565,
			"primary_score":	999985,
			"second_score":	115721
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	566,
			"primary_score":	999985,
			"second_score":	115720
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	568,
			"primary_score":	999985,
			"second_score":	115719
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	570,
			"primary_score":	999985,
			"second_score":	115718
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	572,
			"primary_score":	999985,
			"second_score":	115701
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	573,
			"primary_score":	999985,
			"second_score":	115661
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	589,
			"primary_score":	999985,
			"second_score":	115660
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	590,
			"primary_score":	999985,
			"second_score":	115653
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	682,
			"primary_score":	999985,
			"second_score":	116032
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	684,
			"primary_score":	999985,
			"second_score":	116031
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	685,
			"primary_score":	999985,
			"second_score":	116024
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	688,
			"primary_score":	999985,
			"second_score":	115993
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	689,
			"primary_score":	999985,
			"second_score":	115974
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	690,
			"primary_score":	999985,
			"second_score":	115955
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	691,
			"primary_score":	999985,
			"second_score":	115950
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	693,
			"primary_score":	999985,
			"second_score":	115945
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	696,
			"primary_score":	999985,
			"second_score":	115869
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	697,
			"primary_score":	999985,
			"second_score":	115862
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	698,
			"primary_score":	999985,
			"second_score":	115855
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	718,
			"primary_score":	999984,
			"second_score":	115652
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	719,
			"primary_score":	999984,
			"second_score":	115651
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	720,
			"primary_score":	999984,
			"second_score":	115650
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	721,
			"primary_score":	999984,
			"second_score":	115649
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	722,
			"primary_score":	999984,
			"second_score":	115648
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	723,
			"primary_score":	999984,
			"second_score":	115639
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	724,
			"primary_score":	999984,
			"second_score":	115799
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	725,
			"primary_score":	999985,
			"second_score":	115638
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	726,
			"primary_score":	999985,
			"second_score":	115637
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	772,
			"primary_score":	999985,
			"second_score":	115636
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	774,
			"primary_score":	999985,
			"second_score":	115635
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	778,
			"primary_score":	999985,
			"second_score":	115634
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	781,
			"primary_score":	999985,
			"second_score":	115624
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	809,
			"primary_score":	999984,
			"second_score":	115754
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	810,
			"primary_score":	999984,
			"second_score":	115753
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	811,
			"primary_score":	999984,
			"second_score":	115752
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	812,
			"primary_score":	999984,
			"second_score":	115751
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	813,
			"primary_score":	999984,
			"second_score":	115750
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	816,
			"primary_score":	999984,
			"second_score":	115749
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	817,
			"primary_score":	999984,
			"second_score":	115748
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	818,
			"primary_score":	999984,
			"second_score":	117022
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	819,
			"primary_score":	999984,
			"second_score":	117021
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	820,
			"primary_score":	999984,
			"second_score":	117020
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	821,
			"primary_score":	999984,
			"second_score":	117019
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	822,
			"primary_score":	999984,
			"second_score":	117018
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	824,
			"primary_score":	999984,
			"second_score":	115747
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	825,
			"primary_score":	999984,
			"second_score":	115746
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	826,
			"primary_score":	999984,
			"second_score":	115745
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	829,
			"primary_score":	999984,
			"second_score":	115744
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	834,
			"primary_score":	999984,
			"second_score":	115743
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	835,
			"primary_score":	999984,
			"second_score":	115742
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	836,
			"primary_score":	999984,
			"second_score":	115733
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	837,
			"primary_score":	999984,
			"second_score":	115780
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	838,
			"primary_score":	999984,
			"second_score":	115771
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	839,
			"primary_score":	999984,
			"second_score":	115770
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	842,
			"primary_score":	999984,
			"second_score":	115769
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	844,
			"primary_score":	999984,
			"second_score":	115732
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	845,
			"primary_score":	999984,
			"second_score":	115731
		}, {
			"file":	"src/http_resp_parser.c",
			"line":	931,
			"primary_score":	999984,
			"second_score":	115623
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	12,
			"primary_score":	999823,
			"second_score":	112293
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	13,
			"primary_score":	999823,
			"second_score":	112292
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	14,
			"primary_score":	999823,
			"second_score":	112291
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	15,
			"primary_score":	999823,
			"second_score":	112290
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	19,
			"primary_score":	999823,
			"second_score":	112289
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	112288
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	28,
			"primary_score":	999823,
			"second_score":	112287
		}, {
			"file":	"src/inet_ntop_cache.c",
			"line":	48,
			"primary_score":	999823,
			"second_score":	112286
		}, {
			"file":	"src/iosocket.c",
			"line":	9,
			"primary_score":	999823,
			"second_score":	117878
		}, {
			"file":	"src/iosocket.c",
			"line":	11,
			"primary_score":	999823,
			"second_score":	117876
		}, {
			"file":	"src/iosocket.c",
			"line":	12,
			"primary_score":	999823,
			"second_score":	117875
		}, {
			"file":	"src/iosocket.c",
			"line":	14,
			"primary_score":	999823,
			"second_score":	117874
		}, {
			"file":	"src/iosocket.c",
			"line":	16,
			"primary_score":	999823,
			"second_score":	117873
		}, {
			"file":	"src/iosocket.c",
			"line":	20,
			"primary_score":	999823,
			"second_score":	21248
		}, {
			"file":	"src/iosocket.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	21247
		}, {
			"file":	"src/iosocket.c",
			"line":	23,
			"primary_score":	999823,
			"second_score":	110214
		}, {
			"file":	"src/iosocket.c",
			"line":	26,
			"primary_score":	999823,
			"second_score":	110213
		}, {
			"file":	"src/iosocket.c",
			"line":	29,
			"primary_score":	999984,
			"second_score":	113027
		}, {
			"file":	"src/iosocket.c",
			"line":	35,
			"primary_score":	999823,
			"second_score":	21246
		}, {
			"file":	"src/joblist.c",
			"line":	9,
			"primary_score":	999985,
			"second_score":	113055
		}, {
			"file":	"src/joblist.c",
			"line":	10,
			"primary_score":	999823,
			"second_score":	115037
		}, {
			"file":	"src/joblist.c",
			"line":	12,
			"primary_score":	999823,
			"second_score":	115036
		}, {
			"file":	"src/joblist.c",
			"line":	13,
			"primary_score":	999823,
			"second_score":	133056
		}, {
			"file":	"src/joblist.c",
			"line":	14,
			"primary_score":	999823,
			"second_score":	133055
		}, {
			"file":	"src/joblist.c",
			"line":	15,
			"primary_score":	999888,
			"second_score":	115035
		}, {
			"file":	"src/joblist.c",
			"line":	20,
			"primary_score":	999823,
			"second_score":	115034
		}, {
			"file":	"src/joblist.c",
			"line":	22,
			"primary_score":	999823,
			"second_score":	115033
		}, {
			"file":	"src/joblist.c",
			"line":	26,
			"primary_score":	999823,
			"second_score":	541
		}, {
			"file":	"src/joblist.c",
			"line":	28,
			"primary_score":	999823,
			"second_score":	540
		}, {
			"file":	"src/joblist.c",
			"line":	29,
			"primary_score":	999823,
			"second_score":	539
		}, {
			"file":	"src/joblist.c",
			"line":	61,
			"primary_score":	999823,
			"second_score":	537
		}, {
			"file":	"src/joblist.c",
			"line":	62,
			"primary_score":	999823,
			"second_score":	536
		}, {
			"file":	"src/joblist.c",
			"line":	63,
			"primary_score":	999823,
			"second_score":	535
		}, {
			"file":	"src/keyvalue.c",
			"line":	113,
			"primary_score":	999823,
			"second_score":	111967
		}, {
			"file":	"src/keyvalue.c",
			"line":	114,
			"primary_score":	999823,
			"second_score":	111966
		}, {
			"file":	"src/keyvalue.c",
			"line":	115,
			"primary_score":	999823,
			"second_score":	111964
		}, {
			"file":	"src/keyvalue.c",
			"line":	121,
			"primary_score":	999824,
			"second_score":	132481
		}, {
			"file":	"src/keyvalue.c",
			"line":	122,
			"primary_score":	999824,
			"second_score":	132480
		}, {
			"file":	"src/keyvalue.c",
			"line":	123,
			"primary_score":	999826,
			"second_score":	132476
		}, {
			"file":	"src/keyvalue.c",
			"line":	283,
			"primary_score":	999835,
			"second_score":	111968
		}, {
			"file":	"src/keyvalue.c",
			"line":	287,
			"primary_score":	999823,
			"second_score":	114213
		}, {
			"file":	"src/keyvalue.c",
			"line":	291,
			"primary_score":	999835,
			"second_score":	112032
		}, {
			"file":	"src/keyvalue.c",
			"line":	303,
			"primary_score":	999824,
			"second_score":	132482
		}, {
			"file":	"src/keyvalue.c",
			"line":	310,
			"primary_score":	999827,
			"second_score":	325268
		}, {
			"file":	"src/keyvalue.c",
			"line":	312,
			"primary_score":	999827,
			"second_score":	325267
		}, {
			"file":	"src/keyvalue.c",
			"line":	314,
			"primary_score":	999827,
			"second_score":	325266
		}, {
			"file":	"src/keyvalue.c",
			"line":	319,
			"primary_score":	999835,
			"second_score":	326379
		}, {
			"file":	"src/keyvalue.c",
			"line":	320,
			"primary_score":	999835,
			"second_score":	326378
		}, {
			"file":	"src/keyvalue.c",
			"line":	321,
			"primary_score":	999835,
			"second_score":	326377
		}, {
			"file":	"src/keyvalue.c",
			"line":	322,
			"primary_score":	999835,
			"second_score":	326376
		}, {
			"file":	"src/keyvalue.c",
			"line":	325,
			"primary_score":	999835,
			"second_score":	326375
		}, {
			"file":	"src/keyvalue.c",
			"line":	328,
			"primary_score":	999835,
			"second_score":	326374
		}, {
			"file":	"src/keyvalue.c",
			"line":	329,
			"primary_score":	999835,
			"second_score":	326373
		}, {
			"file":	"src/keyvalue.c",
			"line":	330,
			"primary_score":	999835,
			"second_score":	326372
		}, {
			"file":	"src/keyvalue.c",
			"line":	332,
			"primary_score":	999835,
			"second_score":	326371
		}, {
			"file":	"src/keyvalue.c",
			"line":	334,
			"primary_score":	999835,
			"second_score":	326370
		}, {
			"file":	"src/keyvalue.c",
			"line":	335,
			"primary_score":	999835,
			"second_score":	326366
		}, {
			"file":	"src/keyvalue.c",
			"line":	337,
			"primary_score":	999839,
			"second_score":	439769
		}, {
			"file":	"src/keyvalue.c",
			"line":	347,
			"primary_score":	999835,
			"second_score":	326365
		}, {
			"file":	"src/keyvalue.c",
			"line":	348,
			"primary_score":	999835,
			"second_score":	326364
		}, {
			"file":	"src/keyvalue.c",
			"line":	355,
			"primary_score":	999835,
			"second_score":	326363
		}, {
			"file":	"src/keyvalue.c",
			"line":	360,
			"primary_score":	999835,
			"second_score":	326362
		}, {
			"file":	"src/keyvalue.c",
			"line":	362,
			"primary_score":	999835,
			"second_score":	326335
		}, {
			"file":	"src/keyvalue.c",
			"line":	364,
			"primary_score":	999835,
			"second_score":	326334
		}, {
			"file":	"src/keyvalue.c",
			"line":	375,
			"primary_score":	999827,
			"second_score":	15707
		}, {
			"file":	"src/keyvalue.c",
			"line":	376,
			"primary_score":	999827,
			"second_score":	15706
		}, {
			"file":	"src/keyvalue.c",
			"line":	378,
			"primary_score":	999827,
			"second_score":	15705
		}, {
			"file":	"src/keyvalue.c",
			"line":	379,
			"primary_score":	999835,
			"second_score":	15766
		}, {
			"file":	"src/keyvalue.c",
			"line":	380,
			"primary_score":	999835,
			"second_score":	15785
		}, {
			"file":	"src/keyvalue.c",
			"line":	381,
			"primary_score":	999839,
			"second_score":	15783
		}, {
			"file":	"src/keyvalue.c",
			"line":	382,
			"primary_score":	999835,
			"second_score":	15781
		}, {
			"file":	"src/keyvalue.c",
			"line":	383,
			"primary_score":	999835,
			"second_score":	15762
		}, {
			"file":	"src/keyvalue.c",
			"line":	386,
			"primary_score":	999835,
			"second_score":	15760
		}, {
			"file":	"src/keyvalue.c",
			"line":	389,
			"primary_score":	999827,
			"second_score":	15703
		}, {
			"file":	"src/log.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	173
		}, {
			"file":	"src/log.c",
			"line":	89,
			"primary_score":	999823,
			"second_score":	172
		}, {
			"file":	"src/log.c",
			"line":	91,
			"primary_score":	999823,
			"second_score":	171
		}, {
			"file":	"src/log.c",
			"line":	93,
			"primary_score":	999823,
			"second_score":	118
		}, {
			"file":	"src/log.c",
			"line":	96,
			"primary_score":	999823,
			"second_score":	117
		}, {
			"file":	"src/log.c",
			"line":	106,
			"primary_score":	999823,
			"second_score":	116
		}, {
			"file":	"src/log.c",
			"line":	107,
			"primary_score":	999823,
			"second_score":	112
		}, {
			"file":	"src/log.c",
			"line":	109,
			"primary_score":	999823,
			"second_score":	108
		}, {
			"file":	"src/log.c",
			"line":	111,
			"primary_score":	999823,
			"second_score":	107
		}, {
			"file":	"src/log.c",
			"line":	204,
			"primary_score":	999836,
			"second_score":	113468
		}, {
			"file":	"src/log.c",
			"line":	205,
			"primary_score":	999836,
			"second_score":	113467
		}, {
			"file":	"src/log.c",
			"line":	207,
			"primary_score":	999836,
			"second_score":	113466
		}, {
			"file":	"src/log.c",
			"line":	209,
			"primary_score":	999836,
			"second_score":	113465
		}, {
			"file":	"src/log.c",
			"line":	211,
			"primary_score":	999836,
			"second_score":	113464
		}, {
			"file":	"src/log.c",
			"line":	217,
			"primary_score":	999836,
			"second_score":	113463
		}, {
			"file":	"src/log.c",
			"line":	218,
			"primary_score":	999836,
			"second_score":	113462
		}, {
			"file":	"src/log.c",
			"line":	219,
			"primary_score":	999836,
			"second_score":	113457
		}, {
			"file":	"src/log.c",
			"line":	220,
			"primary_score":	999836,
			"second_score":	113456
		}, {
			"file":	"src/log.c",
			"line":	221,
			"primary_score":	999836,
			"second_score":	113455
		}, {
			"file":	"src/log.c",
			"line":	224,
			"primary_score":	999836,
			"second_score":	113454
		}, {
			"file":	"src/log.c",
			"line":	225,
			"primary_score":	999836,
			"second_score":	113440
		}, {
			"file":	"src/log.c",
			"line":	226,
			"primary_score":	999836,
			"second_score":	113427
		}, {
			"file":	"src/log.c",
			"line":	233,
			"primary_score":	999836,
			"second_score":	113426
		}, {
			"file":	"src/log.c",
			"line":	234,
			"primary_score":	999836,
			"second_score":	113413
		}, {
			"file":	"src/log.c",
			"line":	235,
			"primary_score":	999836,
			"second_score":	113400
		}, {
			"file":	"src/log.c",
			"line":	236,
			"primary_score":	999836,
			"second_score":	113370
		}, {
			"file":	"src/log.c",
			"line":	238,
			"primary_score":	999836,
			"second_score":	113357
		}, {
			"file":	"src/log.c",
			"line":	239,
			"primary_score":	999836,
			"second_score":	113305
		}, {
			"file":	"src/log.c",
			"line":	240,
			"primary_score":	999836,
			"second_score":	113304
		}, {
			"file":	"src/log.c",
			"line":	241,
			"primary_score":	999836,
			"second_score":	113303
		}, {
			"file":	"src/log.c",
			"line":	242,
			"primary_score":	999836,
			"second_score":	113302
		}, {
			"file":	"src/log.c",
			"line":	244,
			"primary_score":	999836,
			"second_score":	113301
		}, {
			"file":	"src/log.c",
			"line":	247,
			"primary_score":	999836,
			"second_score":	113351
		}, {
			"file":	"src/log.c",
			"line":	248,
			"primary_score":	999836,
			"second_score":	113338
		}, {
			"file":	"src/log.c",
			"line":	249,
			"primary_score":	999836,
			"second_score":	113325
		}, {
			"file":	"src/log.c",
			"line":	252,
			"primary_score":	999836,
			"second_score":	113300
		}, {
			"file":	"src/log.c",
			"line":	253,
			"primary_score":	999836,
			"second_score":	113280
		}, {
			"file":	"src/log.c",
			"line":	254,
			"primary_score":	999836,
			"second_score":	113267
		}, {
			"file":	"src/log.c",
			"line":	273,
			"primary_score":	999840,
			"second_score":	113319
		}, {
			"file":	"src/log.c",
			"line":	274,
			"primary_score":	999840,
			"second_score":	113306
		}, {
			"file":	"src/log.c",
			"line":	293,
			"primary_score":	999836,
			"second_score":	113266
		}, {
			"file":	"src/log.c",
			"line":	295,
			"primary_score":	999836,
			"second_score":	113265
		}, {
			"file":	"src/log.c",
			"line":	298,
			"primary_score":	999840,
			"second_score":	113252
		}, {
			"file":	"src/log.c",
			"line":	299,
			"primary_score":	999840,
			"second_score":	113251
		}, {
			"file":	"src/log.c",
			"line":	302,
			"primary_score":	999836,
			"second_score":	187487
		}, {
			"file":	"src/log.c",
			"line":	303,
			"primary_score":	999836,
			"second_score":	187486
		}, {
			"file":	"src/log.c",
			"line":	311,
			"primary_score":	999836,
			"second_score":	113250
		}, {
			"file":	"src/log.c",
			"line":	315,
			"primary_score":	999823,
			"second_score":	991
		}, {
			"file":	"src/log.c",
			"line":	316,
			"primary_score":	999823,
			"second_score":	990
		}, {
			"file":	"src/log.c",
			"line":	317,
			"primary_score":	999823,
			"second_score":	989
		}, {
			"file":	"src/log.c",
			"line":	318,
			"primary_score":	999823,
			"second_score":	988
		}, {
			"file":	"src/log.c",
			"line":	320,
			"primary_score":	999823,
			"second_score":	987
		}, {
			"file":	"src/log.c",
			"line":	321,
			"primary_score":	999823,
			"second_score":	979
		}, {
			"file":	"src/log.c",
			"line":	323,
			"primary_score":	999823,
			"second_score":	969
		}, {
			"file":	"src/log.c",
			"line":	324,
			"primary_score":	999823,
			"second_score":	968
		}, {
			"file":	"src/log.c",
			"line":	325,
			"primary_score":	999823,
			"second_score":	967
		}, {
			"file":	"src/log.c",
			"line":	326,
			"primary_score":	999823,
			"second_score":	966
		}, {
			"file":	"src/log.c",
			"line":	328,
			"primary_score":	999823,
			"second_score":	965
		}, {
			"file":	"src/log.c",
			"line":	329,
			"primary_score":	999823,
			"second_score":	964
		}, {
			"file":	"src/log.c",
			"line":	331,
			"primary_score":	999823,
			"second_score":	963
		}, {
			"file":	"src/log.c",
			"line":	344,
			"primary_score":	999823,
			"second_score":	962
		}, {
			"file":	"src/log.c",
			"line":	347,
			"primary_score":	999823,
			"second_score":	949
		}, {
			"file":	"src/log.c",
			"line":	348,
			"primary_score":	999823,
			"second_score":	948
		}, {
			"file":	"src/log.c",
			"line":	351,
			"primary_score":	999840,
			"second_score":	290924
		}, {
			"file":	"src/log.c",
			"line":	352,
			"primary_score":	999840,
			"second_score":	290923
		}, {
			"file":	"src/log.c",
			"line":	360,
			"primary_score":	999823,
			"second_score":	947
		}, {
			"file":	"src/log.c",
			"line":	362,
			"primary_score":	999823,
			"second_score":	943
		}, {
			"file":	"src/log.c",
			"line":	367,
			"primary_score":	999823,
			"second_score":	994
		}, {
			"file":	"src/log.c",
			"line":	368,
			"primary_score":	999823,
			"second_score":	993
		}, {
			"file":	"src/log.c",
			"line":	371,
			"primary_score":	999823,
			"second_score":	992
		}, {
			"file":	"src/mod_access.c",
			"line":	33,
			"primary_score":	999832,
			"second_score":	451205
		}, {
			"file":	"src/mod_access.c",
			"line":	35,
			"primary_score":	999832,
			"second_score":	451204
		}, {
			"file":	"src/mod_access.c",
			"line":	37,
			"primary_score":	999832,
			"second_score":	451203
		}, {
			"file":	"src/mod_access.c",
			"line":	39,
			"primary_score":	999832,
			"second_score":	451202
		}, {
			"file":	"src/mod_access.c",
			"line":	43,
			"primary_score":	999832,
			"second_score":	19568
		}, {
			"file":	"src/mod_access.c",
			"line":	45,
			"primary_score":	999832,
			"second_score":	19567
		}, {
			"file":	"src/mod_access.c",
			"line":	47,
			"primary_score":	999832,
			"second_score":	19566
		}, {
			"file":	"src/mod_access.c",
			"line":	49,
			"primary_score":	999832,
			"second_score":	19565
		}, {
			"file":	"src/mod_access.c",
			"line":	50,
			"primary_score":	999832,
			"second_score":	19564
		}, {
			"file":	"src/mod_access.c",
			"line":	51,
			"primary_score":	999832,
			"second_score":	19563
		}, {
			"file":	"src/mod_access.c",
			"line":	52,
			"primary_score":	999832,
			"second_score":	19195
		}, {
			"file":	"src/mod_access.c",
			"line":	54,
			"primary_score":	999832,
			"second_score":	19194
		}, {
			"file":	"src/mod_access.c",
			"line":	56,
			"primary_score":	999832,
			"second_score":	19157
		}, {
			"file":	"src/mod_access.c",
			"line":	58,
			"primary_score":	999832,
			"second_score":	19156
		}, {
			"file":	"src/mod_access.c",
			"line":	61,
			"primary_score":	999832,
			"second_score":	19155
		}, {
			"file":	"src/mod_access.c",
			"line":	63,
			"primary_score":	999832,
			"second_score":	19154
		}, {
			"file":	"src/mod_access.c",
			"line":	67,
			"primary_score":	999832,
			"second_score":	418185
		}, {
			"file":	"src/mod_access.c",
			"line":	68,
			"primary_score":	999832,
			"second_score":	418184
		}, {
			"file":	"src/mod_access.c",
			"line":	70,
			"primary_score":	999832,
			"second_score":	418183
		}, {
			"file":	"src/mod_access.c",
			"line":	76,
			"primary_score":	999832,
			"second_score":	418182
		}, {
			"file":	"src/mod_access.c",
			"line":	78,
			"primary_score":	999832,
			"second_score":	418181
		}, {
			"file":	"src/mod_access.c",
			"line":	79,
			"primary_score":	999832,
			"second_score":	412194
		}, {
			"file":	"src/mod_access.c",
			"line":	81,
			"primary_score":	999832,
			"second_score":	412193
		}, {
			"file":	"src/mod_access.c",
			"line":	82,
			"primary_score":	999832,
			"second_score":	412192
		}, {
			"file":	"src/mod_access.c",
			"line":	83,
			"primary_score":	999832,
			"second_score":	412186
		}, {
			"file":	"src/mod_access.c",
			"line":	85,
			"primary_score":	999832,
			"second_score":	412185
		}, {
			"file":	"src/mod_access.c",
			"line":	86,
			"primary_score":	999832,
			"second_score":	412184
		}, {
			"file":	"src/mod_access.c",
			"line":	88,
			"primary_score":	999832,
			"second_score":	412183
		}, {
			"file":	"src/mod_access.c",
			"line":	90,
			"primary_score":	999832,
			"second_score":	412182
		}, {
			"file":	"src/mod_access.c",
			"line":	95,
			"primary_score":	999832,
			"second_score":	411684
		}, {
			"file":	"src/mod_access.c",
			"line":	99,
			"primary_score":	999866,
			"second_score":	119334
		}, {
			"file":	"src/mod_access.c",
			"line":	100,
			"primary_score":	999866,
			"second_score":	119333
		}, {
			"file":	"src/mod_access.c",
			"line":	102,
			"primary_score":	999866,
			"second_score":	119332
		}, {
			"file":	"src/mod_access.c",
			"line":	103,
			"primary_score":	999866,
			"second_score":	119331
		}, {
			"file":	"src/mod_access.c",
			"line":	106,
			"primary_score":	999866,
			"second_score":	119330
		}, {
			"file":	"src/mod_access.c",
			"line":	107,
			"primary_score":	999866,
			"second_score":	119077
		}, {
			"file":	"src/mod_access.c",
			"line":	108,
			"primary_score":	999866,
			"second_score":	119076
		}, {
			"file":	"src/mod_access.c",
			"line":	111,
			"primary_score":	999866,
			"second_score":	119075
		}, {
			"file":	"src/mod_access.c",
			"line":	114,
			"primary_score":	999868,
			"second_score":	119141
		}, {
			"file":	"src/mod_access.c",
			"line":	115,
			"primary_score":	999868,
			"second_score":	119200
		}, {
			"file":	"src/mod_access.c",
			"line":	117,
			"primary_score":	999868,
			"second_score":	119199
		}, {
			"file":	"src/mod_access.c",
			"line":	119,
			"primary_score":	999870,
			"second_score":	119192
		}, {
			"file":	"src/mod_access.c",
			"line":	125,
			"primary_score":	999866,
			"second_score":	119068
		}, {
			"file":	"src/mod_access.c",
			"line":	129,
			"primary_score":	999866,
			"second_score":	125277
		}, {
			"file":	"src/mod_access.c",
			"line":	130,
			"primary_score":	999866,
			"second_score":	125276
		}, {
			"file":	"src/mod_access.c",
			"line":	131,
			"primary_score":	999866,
			"second_score":	125275
		}, {
			"file":	"src/mod_access.c",
			"line":	133,
			"primary_score":	999866,
			"second_score":	125274
		}, {
			"file":	"src/mod_access.c",
			"line":	135,
			"primary_score":	999866,
			"second_score":	125273
		}, {
			"file":	"src/mod_access.c",
			"line":	137,
			"primary_score":	999866,
			"second_score":	124995
		}, {
			"file":	"src/mod_access.c",
			"line":	138,
			"primary_score":	999874,
			"second_score":	124994
		}, {
			"file":	"src/mod_access.c",
			"line":	141,
			"primary_score":	999866,
			"second_score":	124941
		}, {
			"file":	"src/mod_access.c",
			"line":	143,
			"primary_score":	999866,
			"second_score":	124940
		}, {
			"file":	"src/mod_access.c",
			"line":	144,
			"primary_score":	999872,
			"second_score":	124933
		}, {
			"file":	"src/mod_access.c",
			"line":	145,
			"primary_score":	999872,
			"second_score":	124932
		}, {
			"file":	"src/mod_access.c",
			"line":	147,
			"primary_score":	999872,
			"second_score":	124931
		}, {
			"file":	"src/mod_access.c",
			"line":	148,
			"primary_score":	999872,
			"second_score":	124930
		}, {
			"file":	"src/mod_access.c",
			"line":	152,
			"primary_score":	999872,
			"second_score":	124929
		}, {
			"file":	"src/mod_access.c",
			"line":	163,
			"primary_score":	999874,
			"second_score":	124928
		}, {
			"file":	"src/mod_access.c",
			"line":	179,
			"primary_score":	999873,
			"second_score":	124927
		}, {
			"file":	"src/mod_access.c",
			"line":	190,
			"primary_score":	999873,
			"second_score":	124926
		}, {
			"file":	"src/mod_access.c",
			"line":	194,
			"primary_score":	999910,
			"second_score":	119336
		}, {
			"file":	"src/mod_access.c",
			"line":	196,
			"primary_score":	999910,
			"second_score":	119335
		}, {
			"file":	"src/mod_access.c",
			"line":	198,
			"primary_score":	999910,
			"second_score":	119067
		}, {
			"file":	"src/mod_access.c",
			"line":	199,
			"primary_score":	999914,
			"second_score":	119066
		}, {
			"file":	"src/mod_access.c",
			"line":	202,
			"primary_score":	999910,
			"second_score":	119013
		}, {
			"file":	"src/mod_access.c",
			"line":	213,
			"primary_score":	999910,
			"second_score":	119012
		}, {
			"file":	"src/mod_access.c",
			"line":	217,
			"primary_score":	999832,
			"second_score":	454359
		}, {
			"file":	"src/mod_access.c",
			"line":	218,
			"primary_score":	999832,
			"second_score":	454358
		}, {
			"file":	"src/mod_access.c",
			"line":	220,
			"primary_score":	999832,
			"second_score":	454331
		}, {
			"file":	"src/mod_access.c",
			"line":	221,
			"primary_score":	999832,
			"second_score":	454330
		}, {
			"file":	"src/mod_access.c",
			"line":	222,
			"primary_score":	999832,
			"second_score":	454329
		}, {
			"file":	"src/mod_access.c",
			"line":	223,
			"primary_score":	999832,
			"second_score":	454328
		}, {
			"file":	"src/mod_access.c",
			"line":	224,
			"primary_score":	999832,
			"second_score":	454327
		}, {
			"file":	"src/mod_access.c",
			"line":	226,
			"primary_score":	999832,
			"second_score":	454326
		}, {
			"file":	"src/mod_access.c",
			"line":	228,
			"primary_score":	999832,
			"second_score":	454325
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	157,
			"primary_score":	999835,
			"second_score":	448802
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	159,
			"primary_score":	999835,
			"second_score":	448801
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	161,
			"primary_score":	999835,
			"second_score":	448800
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	163,
			"primary_score":	999835,
			"second_score":	448799
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	167,
			"primary_score":	999835,
			"second_score":	238513
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	169,
			"primary_score":	999835,
			"second_score":	238512
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	171,
			"primary_score":	999835,
			"second_score":	237889
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	175,
			"primary_score":	999835,
			"second_score":	238001
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	179,
			"primary_score":	999835,
			"second_score":	238000
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	184,
			"primary_score":	999835,
			"second_score":	237999
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	185,
			"primary_score":	999835,
			"second_score":	237998
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	186,
			"primary_score":	999835,
			"second_score":	237997
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	188,
			"primary_score":	999835,
			"second_score":	237989
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	190,
			"primary_score":	999835,
			"second_score":	237973
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	196,
			"primary_score":	999835,
			"second_score":	237972
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	197,
			"primary_score":	999835,
			"second_score":	238509
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	198,
			"primary_score":	999835,
			"second_score":	238508
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	199,
			"primary_score":	999835,
			"second_score":	238507
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	200,
			"primary_score":	999835,
			"second_score":	237971
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	201,
			"primary_score":	999835,
			"second_score":	237970
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	202,
			"primary_score":	999835,
			"second_score":	237969
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	206,
			"primary_score":	999835,
			"second_score":	237968
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	212,
			"primary_score":	999835,
			"second_score":	238186
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	216,
			"primary_score":	999835,
			"second_score":	238184
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	217,
			"primary_score":	999835,
			"second_score":	238183
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	218,
			"primary_score":	999835,
			"second_score":	238182
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	219,
			"primary_score":	999835,
			"second_score":	238181
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	221,
			"primary_score":	999835,
			"second_score":	238180
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	223,
			"primary_score":	999835,
			"second_score":	238179
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	226,
			"primary_score":	999835,
			"second_score":	238178
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	231,
			"primary_score":	999835,
			"second_score":	238177
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	233,
			"primary_score":	999835,
			"second_score":	238176
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	238,
			"primary_score":	999835,
			"second_score":	237957
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	241,
			"primary_score":	999835,
			"second_score":	237955
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	245,
			"primary_score":	999835,
			"second_score":	237954
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	250,
			"primary_score":	999835,
			"second_score":	237953
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	251,
			"primary_score":	999835,
			"second_score":	237937
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	255,
			"primary_score":	999835,
			"second_score":	237935
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	256,
			"primary_score":	999835,
			"second_score":	237934
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	257,
			"primary_score":	999835,
			"second_score":	237933
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	258,
			"primary_score":	999835,
			"second_score":	237932
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	260,
			"primary_score":	999835,
			"second_score":	237924
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	262,
			"primary_score":	999835,
			"second_score":	237908
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	264,
			"primary_score":	999835,
			"second_score":	237907
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	267,
			"primary_score":	999835,
			"second_score":	237906
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	272,
			"primary_score":	999835,
			"second_score":	237905
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	274,
			"primary_score":	999835,
			"second_score":	237904
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	277,
			"primary_score":	999835,
			"second_score":	238125
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	281,
			"primary_score":	999835,
			"second_score":	238123
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	282,
			"primary_score":	999835,
			"second_score":	238122
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	283,
			"primary_score":	999835,
			"second_score":	238121
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	284,
			"primary_score":	999835,
			"second_score":	238120
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	286,
			"primary_score":	999835,
			"second_score":	238119
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	288,
			"primary_score":	999835,
			"second_score":	238118
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	291,
			"primary_score":	999835,
			"second_score":	238117
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	296,
			"primary_score":	999835,
			"second_score":	238116
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	298,
			"primary_score":	999835,
			"second_score":	238115
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	301,
			"primary_score":	999835,
			"second_score":	237903
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	305,
			"primary_score":	999835,
			"second_score":	237888
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	307,
			"primary_score":	999835,
			"second_score":	237887
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	311,
			"primary_score":	999835,
			"second_score":	237886
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	316,
			"primary_score":	999835,
			"second_score":	237885
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	317,
			"primary_score":	999835,
			"second_score":	237884
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	318,
			"primary_score":	999835,
			"second_score":	237883
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	320,
			"primary_score":	999835,
			"second_score":	237875
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	322,
			"primary_score":	999835,
			"second_score":	237859
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	325,
			"primary_score":	999835,
			"second_score":	237858
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	329,
			"primary_score":	999835,
			"second_score":	12599
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	330,
			"primary_score":	999835,
			"second_score":	12598
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	332,
			"primary_score":	999835,
			"second_score":	12597
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	334,
			"primary_score":	999835,
			"second_score":	12596
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	336,
			"primary_score":	999835,
			"second_score":	12595
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	337,
			"primary_score":	999835,
			"second_score":	11981
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	339,
			"primary_score":	999835,
			"second_score":	11980
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	341,
			"primary_score":	999835,
			"second_score":	11979
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	353,
			"primary_score":	999835,
			"second_score":	12590
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	355,
			"primary_score":	999835,
			"second_score":	11977
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	356,
			"primary_score":	999835,
			"second_score":	11973
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	357,
			"primary_score":	999835,
			"second_score":	11969
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	358,
			"primary_score":	999835,
			"second_score":	11965
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	360,
			"primary_score":	999835,
			"second_score":	11961
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	361,
			"primary_score":	999835,
			"second_score":	12572
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	362,
			"primary_score":	999835,
			"second_score":	12571
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	363,
			"primary_score":	999835,
			"second_score":	12496
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	364,
			"primary_score":	999835,
			"second_score":	12491
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	366,
			"primary_score":	999835,
			"second_score":	12490
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	367,
			"primary_score":	999835,
			"second_score":	12489
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	370,
			"primary_score":	999835,
			"second_score":	11960
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	373,
			"primary_score":	999835,
			"second_score":	11959
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	376,
			"primary_score":	999835,
			"second_score":	11958
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	378,
			"primary_score":	999835,
			"second_score":	11957
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	382,
			"primary_score":	999835,
			"second_score":	239799
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	383,
			"primary_score":	999835,
			"second_score":	239798
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	385,
			"primary_score":	999835,
			"second_score":	239797
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	392,
			"primary_score":	999835,
			"second_score":	239796
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	394,
			"primary_score":	999835,
			"second_score":	239795
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	396,
			"primary_score":	999835,
			"second_score":	239794
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	397,
			"primary_score":	999835,
			"second_score":	230764
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	399,
			"primary_score":	999835,
			"second_score":	230763
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	400,
			"primary_score":	999835,
			"second_score":	230762
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	401,
			"primary_score":	999835,
			"second_score":	230754
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	402,
			"primary_score":	999835,
			"second_score":	230746
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	403,
			"primary_score":	999835,
			"second_score":	230738
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	404,
			"primary_score":	999835,
			"second_score":	230730
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	405,
			"primary_score":	999835,
			"second_score":	230729
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	406,
			"primary_score":	999835,
			"second_score":	230728
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	409,
			"primary_score":	999835,
			"second_score":	230727
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	410,
			"primary_score":	999835,
			"second_score":	230726
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	411,
			"primary_score":	999835,
			"second_score":	230725
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	413,
			"primary_score":	999835,
			"second_score":	230724
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	415,
			"primary_score":	999835,
			"second_score":	230723
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	419,
			"primary_score":	999835,
			"second_score":	230495
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	422,
			"primary_score":	999835,
			"second_score":	238533
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	427,
			"primary_score":	999835,
			"second_score":	230494
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	428,
			"primary_score":	999835,
			"second_score":	238515
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	430,
			"primary_score":	999835,
			"second_score":	238514
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	457,
			"primary_score":	999835,
			"second_score":	230493
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	462,
			"primary_score":	999835,
			"second_score":	230492
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	464,
			"primary_score":	999835,
			"second_score":	237854
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	518,
			"primary_score":	999835,
			"second_score":	237853
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	528,
			"primary_score":	999835,
			"second_score":	237852
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	532,
			"primary_score":	999835,
			"second_score":	230489
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	579,
			"primary_score":	999835,
			"second_score":	112608
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	580,
			"primary_score":	999835,
			"second_score":	112607
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	582,
			"primary_score":	999835,
			"second_score":	112606
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	583,
			"primary_score":	999835,
			"second_score":	112605
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	584,
			"primary_score":	999835,
			"second_score":	112604
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	585,
			"primary_score":	999835,
			"second_score":	112603
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	586,
			"primary_score":	999835,
			"second_score":	112602
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	587,
			"primary_score":	999835,
			"second_score":	112601
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	588,
			"primary_score":	999835,
			"second_score":	112600
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	589,
			"primary_score":	999835,
			"second_score":	112599
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	592,
			"primary_score":	999835,
			"second_score":	112598
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	593,
			"primary_score":	999835,
			"second_score":	112324
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	594,
			"primary_score":	999835,
			"second_score":	112323
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	597,
			"primary_score":	999835,
			"second_score":	112322
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	600,
			"primary_score":	999869,
			"second_score":	112388
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	601,
			"primary_score":	999869,
			"second_score":	112454
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	603,
			"primary_score":	999869,
			"second_score":	112453
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	609,
			"primary_score":	999869,
			"second_score":	112446
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	612,
			"primary_score":	999869,
			"second_score":	112439
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	618,
			"primary_score":	999835,
			"second_score":	112315
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	622,
			"primary_score":	999835,
			"second_score":	112614
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	623,
			"primary_score":	999835,
			"second_score":	112613
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	624,
			"primary_score":	999835,
			"second_score":	112612
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	626,
			"primary_score":	999835,
			"second_score":	112611
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	627,
			"primary_score":	999835,
			"second_score":	112610
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	629,
			"primary_score":	999835,
			"second_score":	112609
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	631,
			"primary_score":	999835,
			"second_score":	112314
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	632,
			"primary_score":	999835,
			"second_score":	112313
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	633,
			"primary_score":	999835,
			"second_score":	112312
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	636,
			"primary_score":	999835,
			"second_score":	112295
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	637,
			"primary_score":	999835,
			"second_score":	111696
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	640,
			"primary_score":	999835,
			"second_score":	111680
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	647,
			"primary_score":	999835,
			"second_score":	112184
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	649,
			"primary_score":	999835,
			"second_score":	112183
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	652,
			"primary_score":	999835,
			"second_score":	112182
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	655,
			"primary_score":	999835,
			"second_score":	112172
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	656,
			"primary_score":	999835,
			"second_score":	112171
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	660,
			"primary_score":	999835,
			"second_score":	112170
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	662,
			"primary_score":	999835,
			"second_score":	112169
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	664,
			"primary_score":	999835,
			"second_score":	112156
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	665,
			"primary_score":	999835,
			"second_score":	112155
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	666,
			"primary_score":	999835,
			"second_score":	112154
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	669,
			"primary_score":	999835,
			"second_score":	112153
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	670,
			"primary_score":	999835,
			"second_score":	112139
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	672,
			"primary_score":	999835,
			"second_score":	112118
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	673,
			"primary_score":	999835,
			"second_score":	112104
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	674,
			"primary_score":	999835,
			"second_score":	112083
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	685,
			"primary_score":	999835,
			"second_score":	112070
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	686,
			"primary_score":	999835,
			"second_score":	112069
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	689,
			"primary_score":	999835,
			"second_score":	112068
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	691,
			"primary_score":	999835,
			"second_score":	112052
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	698,
			"primary_score":	999835,
			"second_score":	112273
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	707,
			"primary_score":	999838,
			"second_score":	112217
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	709,
			"primary_score":	999835,
			"second_score":	112204
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	712,
			"primary_score":	999835,
			"second_score":	112015
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	713,
			"primary_score":	999835,
			"second_score":	112002
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	714,
			"primary_score":	999835,
			"second_score":	111982
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	715,
			"primary_score":	999835,
			"second_score":	111969
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	717,
			"primary_score":	999835,
			"second_score":	111950
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	720,
			"primary_score":	999835,
			"second_score":	111897
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	724,
			"primary_score":	999835,
			"second_score":	111877
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	729,
			"primary_score":	999835,
			"second_score":	111856
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	734,
			"primary_score":	999835,
			"second_score":	111711
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	736,
			"primary_score":	999835,
			"second_score":	111698
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	777,
			"primary_score":	999925,
			"second_score":	112253
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	781,
			"primary_score":	999835,
			"second_score":	112237
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	815,
			"primary_score":	999835,
			"second_score":	111697
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	821,
			"primary_score":	999835,
			"second_score":	111679
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	823,
			"primary_score":	999835,
			"second_score":	111666
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	827,
			"primary_score":	999835,
			"second_score":	111665
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	834,
			"primary_score":	999835,
			"second_score":	111664
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	835,
			"primary_score":	999835,
			"second_score":	111663
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	837,
			"primary_score":	999835,
			"second_score":	111662
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	840,
			"primary_score":	999835,
			"second_score":	111658
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	845,
			"primary_score":	999835,
			"second_score":	452347
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	846,
			"primary_score":	999835,
			"second_score":	452346
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	848,
			"primary_score":	999835,
			"second_score":	452319
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	849,
			"primary_score":	999835,
			"second_score":	452318
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	850,
			"primary_score":	999835,
			"second_score":	452317
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	852,
			"primary_score":	999835,
			"second_score":	452316
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	853,
			"primary_score":	999835,
			"second_score":	452315
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	855,
			"primary_score":	999835,
			"second_score":	452314
		}, {
			"file":	"src/mod_accesslog.c",
			"line":	857,
			"primary_score":	999835,
			"second_score":	452313
		}, {
			"file":	"src/mod_auth.c",
			"line":	34,
			"primary_score":	999832,
			"second_score":	451124
		}, {
			"file":	"src/mod_auth.c",
			"line":	36,
			"primary_score":	999832,
			"second_score":	451123
		}, {
			"file":	"src/mod_auth.c",
			"line":	38,
			"primary_score":	999832,
			"second_score":	451122
		}, {
			"file":	"src/mod_auth.c",
			"line":	40,
			"primary_score":	999832,
			"second_score":	451121
		}, {
			"file":	"src/mod_auth.c",
			"line":	42,
			"primary_score":	999832,
			"second_score":	451113
		}, {
			"file":	"src/mod_auth.c",
			"line":	47,
			"primary_score":	999832,
			"second_score":	451105
		}, {
			"file":	"src/mod_auth.c",
			"line":	51,
			"primary_score":	999832,
			"second_score":	19150
		}, {
			"file":	"src/mod_auth.c",
			"line":	53,
			"primary_score":	999832,
			"second_score":	19149
		}, {
			"file":	"src/mod_auth.c",
			"line":	55,
			"primary_score":	999832,
			"second_score":	19148
		}, {
			"file":	"src/mod_auth.c",
			"line":	57,
			"primary_score":	999832,
			"second_score":	19147
		}, {
			"file":	"src/mod_auth.c",
			"line":	58,
			"primary_score":	999832,
			"second_score":	19143
		}, {
			"file":	"src/mod_auth.c",
			"line":	63,
			"primary_score":	999832,
			"second_score":	19139
		}, {
			"file":	"src/mod_auth.c",
			"line":	64,
			"primary_score":	999832,
			"second_score":	19138
		}, {
			"file":	"src/mod_auth.c",
			"line":	65,
			"primary_score":	999832,
			"second_score":	19137
		}, {
			"file":	"src/mod_auth.c",
			"line":	66,
			"primary_score":	999832,
			"second_score":	17408
		}, {
			"file":	"src/mod_auth.c",
			"line":	68,
			"primary_score":	999832,
			"second_score":	17407
		}, {
			"file":	"src/mod_auth.c",
			"line":	70,
			"primary_score":	999832,
			"second_score":	17406
		}, {
			"file":	"src/mod_auth.c",
			"line":	71,
			"primary_score":	999832,
			"second_score":	17398
		}, {
			"file":	"src/mod_auth.c",
			"line":	72,
			"primary_score":	999832,
			"second_score":	17394
		}, {
			"file":	"src/mod_auth.c",
			"line":	73,
			"primary_score":	999832,
			"second_score":	17390
		}, {
			"file":	"src/mod_auth.c",
			"line":	74,
			"primary_score":	999832,
			"second_score":	17386
		}, {
			"file":	"src/mod_auth.c",
			"line":	75,
			"primary_score":	999832,
			"second_score":	17382
		}, {
			"file":	"src/mod_auth.c",
			"line":	77,
			"primary_score":	999832,
			"second_score":	17378
		}, {
			"file":	"src/mod_auth.c",
			"line":	78,
			"primary_score":	999832,
			"second_score":	17374
		}, {
			"file":	"src/mod_auth.c",
			"line":	79,
			"primary_score":	999832,
			"second_score":	17370
		}, {
			"file":	"src/mod_auth.c",
			"line":	80,
			"primary_score":	999832,
			"second_score":	17366
		}, {
			"file":	"src/mod_auth.c",
			"line":	81,
			"primary_score":	999832,
			"second_score":	17362
		}, {
			"file":	"src/mod_auth.c",
			"line":	82,
			"primary_score":	999832,
			"second_score":	17358
		}, {
			"file":	"src/mod_auth.c",
			"line":	83,
			"primary_score":	999832,
			"second_score":	17354
		}, {
			"file":	"src/mod_auth.c",
			"line":	84,
			"primary_score":	999832,
			"second_score":	17350
		}, {
			"file":	"src/mod_auth.c",
			"line":	93,
			"primary_score":	999832,
			"second_score":	17346
		}, {
			"file":	"src/mod_auth.c",
			"line":	95,
			"primary_score":	999832,
			"second_score":	17345
		}, {
			"file":	"src/mod_auth.c",
			"line":	98,
			"primary_score":	999832,
			"second_score":	17344
		}, {
			"file":	"src/mod_auth.c",
			"line":	100,
			"primary_score":	999832,
			"second_score":	17343
		}, {
			"file":	"src/mod_auth.c",
			"line":	104,
			"primary_score":	999873,
			"second_score":	124915
		}, {
			"file":	"src/mod_auth.c",
			"line":	105,
			"primary_score":	999873,
			"second_score":	124914
		}, {
			"file":	"src/mod_auth.c",
			"line":	107,
			"primary_score":	999873,
			"second_score":	124913
		}, {
			"file":	"src/mod_auth.c",
			"line":	108,
			"primary_score":	999873,
			"second_score":	124912
		}, {
			"file":	"src/mod_auth.c",
			"line":	109,
			"primary_score":	999873,
			"second_score":	124911
		}, {
			"file":	"src/mod_auth.c",
			"line":	110,
			"primary_score":	999873,
			"second_score":	124910
		}, {
			"file":	"src/mod_auth.c",
			"line":	111,
			"primary_score":	999873,
			"second_score":	124909
		}, {
			"file":	"src/mod_auth.c",
			"line":	112,
			"primary_score":	999873,
			"second_score":	124908
		}, {
			"file":	"src/mod_auth.c",
			"line":	113,
			"primary_score":	999873,
			"second_score":	124907
		}, {
			"file":	"src/mod_auth.c",
			"line":	114,
			"primary_score":	999873,
			"second_score":	124906
		}, {
			"file":	"src/mod_auth.c",
			"line":	115,
			"primary_score":	999873,
			"second_score":	124905
		}, {
			"file":	"src/mod_auth.c",
			"line":	116,
			"primary_score":	999873,
			"second_score":	124904
		}, {
			"file":	"src/mod_auth.c",
			"line":	117,
			"primary_score":	999873,
			"second_score":	124903
		}, {
			"file":	"src/mod_auth.c",
			"line":	118,
			"primary_score":	999873,
			"second_score":	124902
		}, {
			"file":	"src/mod_auth.c",
			"line":	119,
			"primary_score":	999873,
			"second_score":	124901
		}, {
			"file":	"src/mod_auth.c",
			"line":	120,
			"primary_score":	999873,
			"second_score":	124900
		}, {
			"file":	"src/mod_auth.c",
			"line":	121,
			"primary_score":	999873,
			"second_score":	124899
		}, {
			"file":	"src/mod_auth.c",
			"line":	122,
			"primary_score":	999873,
			"second_score":	124898
		}, {
			"file":	"src/mod_auth.c",
			"line":	123,
			"primary_score":	999873,
			"second_score":	124897
		}, {
			"file":	"src/mod_auth.c",
			"line":	131,
			"primary_score":	999873,
			"second_score":	124896
		}, {
			"file":	"src/mod_auth.c",
			"line":	132,
			"primary_score":	999873,
			"second_score":	124355
		}, {
			"file":	"src/mod_auth.c",
			"line":	133,
			"primary_score":	999873,
			"second_score":	124354
		}, {
			"file":	"src/mod_auth.c",
			"line":	136,
			"primary_score":	999873,
			"second_score":	124353
		}, {
			"file":	"src/mod_auth.c",
			"line":	139,
			"primary_score":	999875,
			"second_score":	124419
		}, {
			"file":	"src/mod_auth.c",
			"line":	140,
			"primary_score":	999875,
			"second_score":	124571
		}, {
			"file":	"src/mod_auth.c",
			"line":	142,
			"primary_score":	999875,
			"second_score":	124570
		}, {
			"file":	"src/mod_auth.c",
			"line":	144,
			"primary_score":	999875,
			"second_score":	124563
		}, {
			"file":	"src/mod_auth.c",
			"line":	146,
			"primary_score":	999875,
			"second_score":	124556
		}, {
			"file":	"src/mod_auth.c",
			"line":	148,
			"primary_score":	999875,
			"second_score":	124549
		}, {
			"file":	"src/mod_auth.c",
			"line":	150,
			"primary_score":	999875,
			"second_score":	124542
		}, {
			"file":	"src/mod_auth.c",
			"line":	152,
			"primary_score":	999875,
			"second_score":	124535
		}, {
			"file":	"src/mod_auth.c",
			"line":	154,
			"primary_score":	999877,
			"second_score":	124528
		}, {
			"file":	"src/mod_auth.c",
			"line":	156,
			"primary_score":	999877,
			"second_score":	124521
		}, {
			"file":	"src/mod_auth.c",
			"line":	163,
			"primary_score":	999877,
			"second_score":	124514
		}, {
			"file":	"src/mod_auth.c",
			"line":	165,
			"primary_score":	999877,
			"second_score":	124506
		}, {
			"file":	"src/mod_auth.c",
			"line":	167,
			"primary_score":	999877,
			"second_score":	124499
		}, {
			"file":	"src/mod_auth.c",
			"line":	169,
			"primary_score":	999877,
			"second_score":	124491
		}, {
			"file":	"src/mod_auth.c",
			"line":	171,
			"primary_score":	999877,
			"second_score":	124484
		}, {
			"file":	"src/mod_auth.c",
			"line":	173,
			"primary_score":	999877,
			"second_score":	124477
		}, {
			"file":	"src/mod_auth.c",
			"line":	175,
			"primary_score":	999877,
			"second_score":	124470
		}, {
			"file":	"src/mod_auth.c",
			"line":	181,
			"primary_score":	999873,
			"second_score":	124346
		}, {
			"file":	"src/mod_auth.c",
			"line":	185,
			"primary_score":	999873,
			"second_score":	124922
		}, {
			"file":	"src/mod_auth.c",
			"line":	186,
			"primary_score":	999873,
			"second_score":	124921
		}, {
			"file":	"src/mod_auth.c",
			"line":	187,
			"primary_score":	999873,
			"second_score":	124920
		}, {
			"file":	"src/mod_auth.c",
			"line":	188,
			"primary_score":	999873,
			"second_score":	124919
		}, {
			"file":	"src/mod_auth.c",
			"line":	189,
			"primary_score":	999873,
			"second_score":	124918
		}, {
			"file":	"src/mod_auth.c",
			"line":	190,
			"primary_score":	999873,
			"second_score":	124917
		}, {
			"file":	"src/mod_auth.c",
			"line":	193,
			"primary_score":	999873,
			"second_score":	124916
		}, {
			"file":	"src/mod_auth.c",
			"line":	195,
			"primary_score":	999873,
			"second_score":	124345
		}, {
			"file":	"src/mod_auth.c",
			"line":	204,
			"primary_score":	999873,
			"second_score":	124344
		}, {
			"file":	"src/mod_auth.c",
			"line":	205,
			"primary_score":	999873,
			"second_score":	124343
		}, {
			"file":	"src/mod_auth.c",
			"line":	208,
			"primary_score":	999873,
			"second_score":	124342
		}, {
			"file":	"src/mod_auth.c",
			"line":	209,
			"primary_score":	999877,
			"second_score":	124331
		}, {
			"file":	"src/mod_auth.c",
			"line":	211,
			"primary_score":	999877,
			"second_score":	124330
		}, {
			"file":	"src/mod_auth.c",
			"line":	212,
			"primary_score":	999877,
			"second_score":	124329
		}, {
			"file":	"src/mod_auth.c",
			"line":	216,
			"primary_score":	999912,
			"second_score":	124328
		}, {
			"file":	"src/mod_auth.c",
			"line":	222,
			"primary_score":	999914,
			"second_score":	124327
		}, {
			"file":	"src/mod_auth.c",
			"line":	230,
			"primary_score":	999886,
			"second_score":	124325
		}, {
			"file":	"src/mod_auth.c",
			"line":	313,
			"primary_score":	999832,
			"second_score":	411680
		}, {
			"file":	"src/mod_auth.c",
			"line":	314,
			"primary_score":	999832,
			"second_score":	411679
		}, {
			"file":	"src/mod_auth.c",
			"line":	316,
			"primary_score":	999832,
			"second_score":	411678
		}, {
			"file":	"src/mod_auth.c",
			"line":	337,
			"primary_score":	999832,
			"second_score":	411677
		}, {
			"file":	"src/mod_auth.c",
			"line":	339,
			"primary_score":	999832,
			"second_score":	411676
		}, {
			"file":	"src/mod_auth.c",
			"line":	340,
			"primary_score":	999832,
			"second_score":	359951
		}, {
			"file":	"src/mod_auth.c",
			"line":	341,
			"primary_score":	999832,
			"second_score":	359950
		}, {
			"file":	"src/mod_auth.c",
			"line":	342,
			"primary_score":	999832,
			"second_score":	359949
		}, {
			"file":	"src/mod_auth.c",
			"line":	343,
			"primary_score":	999832,
			"second_score":	359948
		}, {
			"file":	"src/mod_auth.c",
			"line":	345,
			"primary_score":	999832,
			"second_score":	359947
		}, {
			"file":	"src/mod_auth.c",
			"line":	346,
			"primary_score":	999832,
			"second_score":	359946
		}, {
			"file":	"src/mod_auth.c",
			"line":	347,
			"primary_score":	999832,
			"second_score":	359938
		}, {
			"file":	"src/mod_auth.c",
			"line":	348,
			"primary_score":	999832,
			"second_score":	359930
		}, {
			"file":	"src/mod_auth.c",
			"line":	349,
			"primary_score":	999832,
			"second_score":	359922
		}, {
			"file":	"src/mod_auth.c",
			"line":	350,
			"primary_score":	999832,
			"second_score":	359914
		}, {
			"file":	"src/mod_auth.c",
			"line":	352,
			"primary_score":	999832,
			"second_score":	359906
		}, {
			"file":	"src/mod_auth.c",
			"line":	353,
			"primary_score":	999832,
			"second_score":	359898
		}, {
			"file":	"src/mod_auth.c",
			"line":	354,
			"primary_score":	999832,
			"second_score":	359890
		}, {
			"file":	"src/mod_auth.c",
			"line":	355,
			"primary_score":	999832,
			"second_score":	359882
		}, {
			"file":	"src/mod_auth.c",
			"line":	356,
			"primary_score":	999832,
			"second_score":	359874
		}, {
			"file":	"src/mod_auth.c",
			"line":	357,
			"primary_score":	999832,
			"second_score":	359866
		}, {
			"file":	"src/mod_auth.c",
			"line":	358,
			"primary_score":	999832,
			"second_score":	359858
		}, {
			"file":	"src/mod_auth.c",
			"line":	359,
			"primary_score":	999832,
			"second_score":	359850
		}, {
			"file":	"src/mod_auth.c",
			"line":	360,
			"primary_score":	999832,
			"second_score":	359842
		}, {
			"file":	"src/mod_auth.c",
			"line":	361,
			"primary_score":	999832,
			"second_score":	359841
		}, {
			"file":	"src/mod_auth.c",
			"line":	363,
			"primary_score":	999832,
			"second_score":	359840
		}, {
			"file":	"src/mod_auth.c",
			"line":	371,
			"primary_score":	999832,
			"second_score":	359834
		}, {
			"file":	"src/mod_auth.c",
			"line":	372,
			"primary_score":	999832,
			"second_score":	359833
		}, {
			"file":	"src/mod_auth.c",
			"line":	373,
			"primary_score":	999832,
			"second_score":	359832
		}, {
			"file":	"src/mod_auth.c",
			"line":	374,
			"primary_score":	999832,
			"second_score":	359831
		}, {
			"file":	"src/mod_auth.c",
			"line":	375,
			"primary_score":	999832,
			"second_score":	359830
		}, {
			"file":	"src/mod_auth.c",
			"line":	376,
			"primary_score":	999832,
			"second_score":	359829
		}, {
			"file":	"src/mod_auth.c",
			"line":	377,
			"primary_score":	999832,
			"second_score":	359828
		}, {
			"file":	"src/mod_auth.c",
			"line":	378,
			"primary_score":	999832,
			"second_score":	359827
		}, {
			"file":	"src/mod_auth.c",
			"line":	379,
			"primary_score":	999832,
			"second_score":	359826
		}, {
			"file":	"src/mod_auth.c",
			"line":	380,
			"primary_score":	999832,
			"second_score":	359825
		}, {
			"file":	"src/mod_auth.c",
			"line":	381,
			"primary_score":	999832,
			"second_score":	359824
		}, {
			"file":	"src/mod_auth.c",
			"line":	382,
			"primary_score":	999832,
			"second_score":	359823
		}, {
			"file":	"src/mod_auth.c",
			"line":	383,
			"primary_score":	999832,
			"second_score":	359822
		}, {
			"file":	"src/mod_auth.c",
			"line":	384,
			"primary_score":	999832,
			"second_score":	359821
		}, {
			"file":	"src/mod_auth.c",
			"line":	385,
			"primary_score":	999832,
			"second_score":	359820
		}, {
			"file":	"src/mod_auth.c",
			"line":	386,
			"primary_score":	999832,
			"second_score":	359819
		}, {
			"file":	"src/mod_auth.c",
			"line":	387,
			"primary_score":	999832,
			"second_score":	359818
		}, {
			"file":	"src/mod_auth.c",
			"line":	389,
			"primary_score":	999832,
			"second_score":	359817
		}, {
			"file":	"src/mod_auth.c",
			"line":	390,
			"primary_score":	999832,
			"second_score":	359816
		}, {
			"file":	"src/mod_auth.c",
			"line":	392,
			"primary_score":	999832,
			"second_score":	359815
		}, {
			"file":	"src/mod_auth.c",
			"line":	396,
			"primary_score":	999832,
			"second_score":	358533
		}, {
			"file":	"src/mod_auth.c",
			"line":	397,
			"primary_score":	999832,
			"second_score":	388661
		}, {
			"file":	"src/mod_auth.c",
			"line":	398,
			"primary_score":	999840,
			"second_score":	388653
		}, {
			"file":	"src/mod_auth.c",
			"line":	399,
			"primary_score":	999832,
			"second_score":	400541
		}, {
			"file":	"src/mod_auth.c",
			"line":	401,
			"primary_score":	999832,
			"second_score":	400534
		}, {
			"file":	"src/mod_auth.c",
			"line":	402,
			"primary_score":	999832,
			"second_score":	400526
		}, {
			"file":	"src/mod_auth.c",
			"line":	413,
			"primary_score":	999832,
			"second_score":	358531
		}, {
			"file":	"src/mod_auth.c",
			"line":	415,
			"primary_score":	999832,
			"second_score":	400397
		}, {
			"file":	"src/mod_auth.c",
			"line":	417,
			"primary_score":	999832,
			"second_score":	400396
		}, {
			"file":	"src/mod_auth.c",
			"line":	418,
			"primary_score":	999832,
			"second_score":	399337
		}, {
			"file":	"src/mod_auth.c",
			"line":	419,
			"primary_score":	999832,
			"second_score":	399336
		}, {
			"file":	"src/mod_auth.c",
			"line":	420,
			"primary_score":	999832,
			"second_score":	399335
		}, {
			"file":	"src/mod_auth.c",
			"line":	422,
			"primary_score":	999832,
			"second_score":	399334
		}, {
			"file":	"src/mod_auth.c",
			"line":	430,
			"primary_score":	999832,
			"second_score":	399333
		}, {
			"file":	"src/mod_auth.c",
			"line":	432,
			"primary_score":	999832,
			"second_score":	399332
		}, {
			"file":	"src/mod_auth.c",
			"line":	433,
			"primary_score":	999832,
			"second_score":	399302
		}, {
			"file":	"src/mod_auth.c",
			"line":	435,
			"primary_score":	999832,
			"second_score":	399301
		}, {
			"file":	"src/mod_auth.c",
			"line":	445,
			"primary_score":	999832,
			"second_score":	399300
		}, {
			"file":	"src/mod_auth.c",
			"line":	446,
			"primary_score":	999832,
			"second_score":	399321
		}, {
			"file":	"src/mod_auth.c",
			"line":	447,
			"primary_score":	999832,
			"second_score":	399293
		}, {
			"file":	"src/mod_auth.c",
			"line":	448,
			"primary_score":	999832,
			"second_score":	399303
		}, {
			"file":	"src/mod_auth.c",
			"line":	449,
			"primary_score":	999832,
			"second_score":	399286
		}, {
			"file":	"src/mod_auth.c",
			"line":	450,
			"primary_score":	999832,
			"second_score":	399278
		}, {
			"file":	"src/mod_auth.c",
			"line":	463,
			"primary_score":	999832,
			"second_score":	399277
		}, {
			"file":	"src/mod_auth.c",
			"line":	469,
			"primary_score":	999832,
			"second_score":	399276
		}, {
			"file":	"src/mod_auth.c",
			"line":	477,
			"primary_score":	999832,
			"second_score":	399268
		}, {
			"file":	"src/mod_auth.c",
			"line":	484,
			"primary_score":	999832,
			"second_score":	399267
		}, {
			"file":	"src/mod_auth.c",
			"line":	491,
			"primary_score":	999832,
			"second_score":	399266
		}, {
			"file":	"src/mod_auth.c",
			"line":	492,
			"primary_score":	999832,
			"second_score":	399265
		}, {
			"file":	"src/mod_auth.c",
			"line":	493,
			"primary_score":	999832,
			"second_score":	399264
		}, {
			"file":	"src/mod_auth.c",
			"line":	495,
			"primary_score":	999832,
			"second_score":	399263
		}, {
			"file":	"src/mod_auth.c",
			"line":	496,
			"primary_score":	999832,
			"second_score":	399239
		}, {
			"file":	"src/mod_auth.c",
			"line":	498,
			"primary_score":	999832,
			"second_score":	399220
		}, {
			"file":	"src/mod_auth.c",
			"line":	500,
			"primary_score":	999832,
			"second_score":	399193
		}, {
			"file":	"src/mod_auth.c",
			"line":	501,
			"primary_score":	999832,
			"second_score":	399176
		}, {
			"file":	"src/mod_auth.c",
			"line":	503,
			"primary_score":	999832,
			"second_score":	399157
		}, {
			"file":	"src/mod_auth.c",
			"line":	505,
			"primary_score":	999832,
			"second_score":	399123
		}, {
			"file":	"src/mod_auth.c",
			"line":	507,
			"primary_score":	999832,
			"second_score":	399096
		}, {
			"file":	"src/mod_auth.c",
			"line":	508,
			"primary_score":	999832,
			"second_score":	399079
		}, {
			"file":	"src/mod_auth.c",
			"line":	510,
			"primary_score":	999832,
			"second_score":	399060
		}, {
			"file":	"src/mod_auth.c",
			"line":	512,
			"primary_score":	999832,
			"second_score":	398990
		}, {
			"file":	"src/mod_auth.c",
			"line":	514,
			"primary_score":	999832,
			"second_score":	398963
		}, {
			"file":	"src/mod_auth.c",
			"line":	515,
			"primary_score":	999832,
			"second_score":	398946
		}, {
			"file":	"src/mod_auth.c",
			"line":	517,
			"primary_score":	999832,
			"second_score":	398927
		}, {
			"file":	"src/mod_auth.c",
			"line":	519,
			"primary_score":	999832,
			"second_score":	398867
		}, {
			"file":	"src/mod_auth.c",
			"line":	523,
			"primary_score":	999832,
			"second_score":	398759
		}, {
			"file":	"src/mod_auth.c",
			"line":	526,
			"primary_score":	999840,
			"second_score":	398758
		}, {
			"file":	"src/mod_auth.c",
			"line":	528,
			"primary_score":	999840,
			"second_score":	398757
		}, {
			"file":	"src/mod_auth.c",
			"line":	534,
			"primary_score":	999840,
			"second_score":	398756
		}, {
			"file":	"src/mod_auth.c",
			"line":	536,
			"primary_score":	999840,
			"second_score":	398755
		}, {
			"file":	"src/mod_auth.c",
			"line":	574,
			"primary_score":	999832,
			"second_score":	358495
		}, {
			"file":	"src/mod_auth.c",
			"line":	682,
			"primary_score":	999832,
			"second_score":	454217
		}, {
			"file":	"src/mod_auth.c",
			"line":	683,
			"primary_score":	999832,
			"second_score":	454216
		}, {
			"file":	"src/mod_auth.c",
			"line":	684,
			"primary_score":	999832,
			"second_score":	454189
		}, {
			"file":	"src/mod_auth.c",
			"line":	685,
			"primary_score":	999832,
			"second_score":	454188
		}, {
			"file":	"src/mod_auth.c",
			"line":	686,
			"primary_score":	999832,
			"second_score":	454187
		}, {
			"file":	"src/mod_auth.c",
			"line":	687,
			"primary_score":	999832,
			"second_score":	454186
		}, {
			"file":	"src/mod_auth.c",
			"line":	689,
			"primary_score":	999832,
			"second_score":	454185
		}, {
			"file":	"src/mod_auth.c",
			"line":	691,
			"primary_score":	999832,
			"second_score":	454184
		}, {
			"file":	"src/mod_cgi.c",
			"line":	91,
			"primary_score":	999984,
			"second_score":	117888
		}, {
			"file":	"src/mod_cgi.c",
			"line":	92,
			"primary_score":	999984,
			"second_score":	117887
		}, {
			"file":	"src/mod_cgi.c",
			"line":	94,
			"primary_score":	999984,
			"second_score":	117886
		}, {
			"file":	"src/mod_cgi.c",
			"line":	95,
			"primary_score":	999984,
			"second_score":	117879
		}, {
			"file":	"src/mod_cgi.c",
			"line":	96,
			"primary_score":	999984,
			"second_score":	117872
		}, {
			"file":	"src/mod_cgi.c",
			"line":	97,
			"primary_score":	999984,
			"second_score":	117866
		}, {
			"file":	"src/mod_cgi.c",
			"line":	99,
			"primary_score":	999984,
			"second_score":	117860
		}, {
			"file":	"src/mod_cgi.c",
			"line":	103,
			"primary_score":	999984,
			"second_score":	113032
		}, {
			"file":	"src/mod_cgi.c",
			"line":	105,
			"primary_score":	999984,
			"second_score":	113031
		}, {
			"file":	"src/mod_cgi.c",
			"line":	106,
			"primary_score":	999984,
			"second_score":	113025
		}, {
			"file":	"src/mod_cgi.c",
			"line":	108,
			"primary_score":	999984,
			"second_score":	113021
		}, {
			"file":	"src/mod_cgi.c",
			"line":	109,
			"primary_score":	999984,
			"second_score":	113016
		}, {
			"file":	"src/mod_cgi.c",
			"line":	111,
			"primary_score":	999984,
			"second_score":	113011
		}, {
			"file":	"src/mod_cgi.c",
			"line":	115,
			"primary_score":	999840,
			"second_score":	449234
		}, {
			"file":	"src/mod_cgi.c",
			"line":	117,
			"primary_score":	999840,
			"second_score":	449233
		}, {
			"file":	"src/mod_cgi.c",
			"line":	119,
			"primary_score":	999840,
			"second_score":	449232
		}, {
			"file":	"src/mod_cgi.c",
			"line":	121,
			"primary_score":	999840,
			"second_score":	449231
		}, {
			"file":	"src/mod_cgi.c",
			"line":	123,
			"primary_score":	999840,
			"second_score":	449230
		}, {
			"file":	"src/mod_cgi.c",
			"line":	124,
			"primary_score":	999840,
			"second_score":	449222
		}, {
			"file":	"src/mod_cgi.c",
			"line":	126,
			"primary_score":	999840,
			"second_score":	449204
		}, {
			"file":	"src/mod_cgi.c",
			"line":	131,
			"primary_score":	999840,
			"second_score":	14105
		}, {
			"file":	"src/mod_cgi.c",
			"line":	132,
			"primary_score":	999840,
			"second_score":	14104
		}, {
			"file":	"src/mod_cgi.c",
			"line":	134,
			"primary_score":	999840,
			"second_score":	14103
		}, {
			"file":	"src/mod_cgi.c",
			"line":	136,
			"primary_score":	999840,
			"second_score":	14102
		}, {
			"file":	"src/mod_cgi.c",
			"line":	137,
			"primary_score":	999840,
			"second_score":	14101
		}, {
			"file":	"src/mod_cgi.c",
			"line":	138,
			"primary_score":	999840,
			"second_score":	14100
		}, {
			"file":	"src/mod_cgi.c",
			"line":	139,
			"primary_score":	999840,
			"second_score":	13808
		}, {
			"file":	"src/mod_cgi.c",
			"line":	141,
			"primary_score":	999840,
			"second_score":	13807
		}, {
			"file":	"src/mod_cgi.c",
			"line":	143,
			"primary_score":	999840,
			"second_score":	13799
		}, {
			"file":	"src/mod_cgi.c",
			"line":	145,
			"primary_score":	999840,
			"second_score":	13798
		}, {
			"file":	"src/mod_cgi.c",
			"line":	149,
			"primary_score":	999840,
			"second_score":	13797
		}, {
			"file":	"src/mod_cgi.c",
			"line":	151,
			"primary_score":	999840,
			"second_score":	13796
		}, {
			"file":	"src/mod_cgi.c",
			"line":	152,
			"primary_score":	999840,
			"second_score":	13792
		}, {
			"file":	"src/mod_cgi.c",
			"line":	154,
			"primary_score":	999840,
			"second_score":	13737
		}, {
			"file":	"src/mod_cgi.c",
			"line":	156,
			"primary_score":	999840,
			"second_score":	13736
		}, {
			"file":	"src/mod_cgi.c",
			"line":	164,
			"primary_score":	999840,
			"second_score":	265482
		}, {
			"file":	"src/mod_cgi.c",
			"line":	165,
			"primary_score":	999840,
			"second_score":	265481
		}, {
			"file":	"src/mod_cgi.c",
			"line":	167,
			"primary_score":	999840,
			"second_score":	265480
		}, {
			"file":	"src/mod_cgi.c",
			"line":	173,
			"primary_score":	999840,
			"second_score":	265479
		}, {
			"file":	"src/mod_cgi.c",
			"line":	175,
			"primary_score":	999840,
			"second_score":	265478
		}, {
			"file":	"src/mod_cgi.c",
			"line":	177,
			"primary_score":	999840,
			"second_score":	265477
		}, {
			"file":	"src/mod_cgi.c",
			"line":	178,
			"primary_score":	999840,
			"second_score":	259608
		}, {
			"file":	"src/mod_cgi.c",
			"line":	180,
			"primary_score":	999840,
			"second_score":	259607
		}, {
			"file":	"src/mod_cgi.c",
			"line":	181,
			"primary_score":	999840,
			"second_score":	259606
		}, {
			"file":	"src/mod_cgi.c",
			"line":	183,
			"primary_score":	999840,
			"second_score":	259605
		}, {
			"file":	"src/mod_cgi.c",
			"line":	184,
			"primary_score":	999840,
			"second_score":	259599
		}, {
			"file":	"src/mod_cgi.c",
			"line":	186,
			"primary_score":	999840,
			"second_score":	259598
		}, {
			"file":	"src/mod_cgi.c",
			"line":	187,
			"primary_score":	999840,
			"second_score":	259597
		}, {
			"file":	"src/mod_cgi.c",
			"line":	189,
			"primary_score":	999840,
			"second_score":	259596
		}, {
			"file":	"src/mod_cgi.c",
			"line":	191,
			"primary_score":	999840,
			"second_score":	259595
		}, {
			"file":	"src/mod_cgi.c",
			"line":	196,
			"primary_score":	999840,
			"second_score":	259440
		}, {
			"file":	"src/mod_cgi.c",
			"line":	250,
			"primary_score":	999985,
			"second_score":	113072
		}, {
			"file":	"src/mod_cgi.c",
			"line":	251,
			"primary_score":	999985,
			"second_score":	113071
		}, {
			"file":	"src/mod_cgi.c",
			"line":	253,
			"primary_score":	999985,
			"second_score":	113070
		}, {
			"file":	"src/mod_cgi.c",
			"line":	255,
			"primary_score":	999985,
			"second_score":	113069
		}, {
			"file":	"src/mod_cgi.c",
			"line":	257,
			"primary_score":	999985,
			"second_score":	113065
		}, {
			"file":	"src/mod_cgi.c",
			"line":	258,
			"primary_score":	999985,
			"second_score":	115146
		}, {
			"file":	"src/mod_cgi.c",
			"line":	260,
			"primary_score":	999985,
			"second_score":	115145
		}, {
			"file":	"src/mod_cgi.c",
			"line":	261,
			"primary_score":	999985,
			"second_score":	115144
		}, {
			"file":	"src/mod_cgi.c",
			"line":	262,
			"primary_score":	999985,
			"second_score":	115143
		}, {
			"file":	"src/mod_cgi.c",
			"line":	263,
			"primary_score":	999985,
			"second_score":	115142
		}, {
			"file":	"src/mod_cgi.c",
			"line":	268,
			"primary_score":	999985,
			"second_score":	115141
		}, {
			"file":	"src/mod_cgi.c",
			"line":	270,
			"primary_score":	999985,
			"second_score":	115084
		}, {
			"file":	"src/mod_cgi.c",
			"line":	273,
			"primary_score":	999985,
			"second_score":	113064
		}, {
			"file":	"src/mod_cgi.c",
			"line":	275,
			"primary_score":	999985,
			"second_score":	113060
		}, {
			"file":	"src/mod_cgi.c",
			"line":	276,
			"primary_score":	999985,
			"second_score":	113059
		}, {
			"file":	"src/mod_cgi.c",
			"line":	278,
			"primary_score":	999985,
			"second_score":	113058
		}, {
			"file":	"src/mod_cgi.c",
			"line":	283,
			"primary_score":	999984,
			"second_score":	113208
		}, {
			"file":	"src/mod_cgi.c",
			"line":	285,
			"primary_score":	999984,
			"second_score":	113207
		}, {
			"file":	"src/mod_cgi.c",
			"line":	290,
			"primary_score":	999985,
			"second_score":	113076
		}, {
			"file":	"src/mod_cgi.c",
			"line":	291,
			"primary_score":	999985,
			"second_score":	113075
		}, {
			"file":	"src/mod_cgi.c",
			"line":	307,
			"primary_score":	999984,
			"second_score":	113074
		}, {
			"file":	"src/mod_cgi.c",
			"line":	308,
			"primary_score":	999984,
			"second_score":	117233
		}, {
			"file":	"src/mod_cgi.c",
			"line":	309,
			"primary_score":	999984,
			"second_score":	117232
		}, {
			"file":	"src/mod_cgi.c",
			"line":	311,
			"primary_score":	999984,
			"second_score":	117231
		}, {
			"file":	"src/mod_cgi.c",
			"line":	317,
			"primary_score":	999984,
			"second_score":	117218
		}, {
			"file":	"src/mod_cgi.c",
			"line":	331,
			"primary_score":	999985,
			"second_score":	115577
		}, {
			"file":	"src/mod_cgi.c",
			"line":	334,
			"primary_score":	999985,
			"second_score":	115570
		}, {
			"file":	"src/mod_cgi.c",
			"line":	335,
			"primary_score":	999985,
			"second_score":	115357
		}, {
			"file":	"src/mod_cgi.c",
			"line":	336,
			"primary_score":	999985,
			"second_score":	115356
		}, {
			"file":	"src/mod_cgi.c",
			"line":	337,
			"primary_score":	999985,
			"second_score":	115355
		}, {
			"file":	"src/mod_cgi.c",
			"line":	339,
			"primary_score":	999985,
			"second_score":	115354
		}, {
			"file":	"src/mod_cgi.c",
			"line":	342,
			"primary_score":	999985,
			"second_score":	115353
		}, {
			"file":	"src/mod_cgi.c",
			"line":	343,
			"primary_score":	999985,
			"second_score":	115351
		}, {
			"file":	"src/mod_cgi.c",
			"line":	345,
			"primary_score":	999985,
			"second_score":	115350
		}, {
			"file":	"src/mod_cgi.c",
			"line":	347,
			"primary_score":	999985,
			"second_score":	115349
		}, {
			"file":	"src/mod_cgi.c",
			"line":	350,
			"primary_score":	999985,
			"second_score":	115332
		}, {
			"file":	"src/mod_cgi.c",
			"line":	351,
			"primary_score":	999988,
			"second_score":	115504
		}, {
			"file":	"src/mod_cgi.c",
			"line":	354,
			"primary_score":	999985,
			"second_score":	115299
		}, {
			"file":	"src/mod_cgi.c",
			"line":	355,
			"primary_score":	999985,
			"second_score":	115292
		}, {
			"file":	"src/mod_cgi.c",
			"line":	357,
			"primary_score":	999985,
			"second_score":	115261
		}, {
			"file":	"src/mod_cgi.c",
			"line":	358,
			"primary_score":	999985,
			"second_score":	115242
		}, {
			"file":	"src/mod_cgi.c",
			"line":	360,
			"primary_score":	999985,
			"second_score":	115223
		}, {
			"file":	"src/mod_cgi.c",
			"line":	363,
			"primary_score":	999985,
			"second_score":	115164
		}, {
			"file":	"src/mod_cgi.c",
			"line":	365,
			"primary_score":	999985,
			"second_score":	115163
		}, {
			"file":	"src/mod_cgi.c",
			"line":	366,
			"primary_score":	999985,
			"second_score":	115161
		}, {
			"file":	"src/mod_cgi.c",
			"line":	368,
			"primary_score":	999985,
			"second_score":	115160
		}, {
			"file":	"src/mod_cgi.c",
			"line":	373,
			"primary_score":	999985,
			"second_score":	115159
		}, {
			"file":	"src/mod_cgi.c",
			"line":	384,
			"primary_score":	999985,
			"second_score":	113073
		}, {
			"file":	"src/mod_cgi.c",
			"line":	386,
			"primary_score":	999985,
			"second_score":	113057
		}, {
			"file":	"src/mod_cgi.c",
			"line":	388,
			"primary_score":	999985,
			"second_score":	113054
		}, {
			"file":	"src/mod_cgi.c",
			"line":	392,
			"primary_score":	999840,
			"second_score":	21731
		}, {
			"file":	"src/mod_cgi.c",
			"line":	393,
			"primary_score":	999840,
			"second_score":	21730
		}, {
			"file":	"src/mod_cgi.c",
			"line":	394,
			"primary_score":	999840,
			"second_score":	21729
		}, {
			"file":	"src/mod_cgi.c",
			"line":	396,
			"primary_score":	999840,
			"second_score":	21728
		}, {
			"file":	"src/mod_cgi.c",
			"line":	487,
			"primary_score":	999840,
			"second_score":	21733
		}, {
			"file":	"src/mod_cgi.c",
			"line":	489,
			"primary_score":	999840,
			"second_score":	21732
		}, {
			"file":	"src/mod_cgi.c",
			"line":	493,
			"primary_score":	999984,
			"second_score":	117382
		}, {
			"file":	"src/mod_cgi.c",
			"line":	494,
			"primary_score":	999984,
			"second_score":	117381
		}, {
			"file":	"src/mod_cgi.c",
			"line":	495,
			"primary_score":	999984,
			"second_score":	117380
		}, {
			"file":	"src/mod_cgi.c",
			"line":	497,
			"primary_score":	999984,
			"second_score":	117379
		}, {
			"file":	"src/mod_cgi.c",
			"line":	498,
			"primary_score":	999984,
			"second_score":	117378
		}, {
			"file":	"src/mod_cgi.c",
			"line":	503,
			"primary_score":	999984,
			"second_score":	117371
		}, {
			"file":	"src/mod_cgi.c",
			"line":	537,
			"primary_score":	999984,
			"second_score":	117370
		}, {
			"file":	"src/mod_cgi.c",
			"line":	542,
			"primary_score":	999984,
			"second_score":	117369
		}, {
			"file":	"src/mod_cgi.c",
			"line":	548,
			"primary_score":	999984,
			"second_score":	117368
		}, {
			"file":	"src/mod_cgi.c",
			"line":	555,
			"primary_score":	999984,
			"second_score":	117367
		}, {
			"file":	"src/mod_cgi.c",
			"line":	560,
			"primary_score":	999984,
			"second_score":	277
		}, {
			"file":	"src/mod_cgi.c",
			"line":	562,
			"primary_score":	999984,
			"second_score":	276
		}, {
			"file":	"src/mod_cgi.c",
			"line":	564,
			"primary_score":	999984,
			"second_score":	275
		}, {
			"file":	"src/mod_cgi.c",
			"line":	565,
			"primary_score":	999984,
			"second_score":	274
		}, {
			"file":	"src/mod_cgi.c",
			"line":	566,
			"primary_score":	999984,
			"second_score":	273
		}, {
			"file":	"src/mod_cgi.c",
			"line":	568,
			"primary_score":	999984,
			"second_score":	272
		}, {
			"file":	"src/mod_cgi.c",
			"line":	570,
			"primary_score":	999984,
			"second_score":	271
		}, {
			"file":	"src/mod_cgi.c",
			"line":	571,
			"primary_score":	999984,
			"second_score":	894
		}, {
			"file":	"src/mod_cgi.c",
			"line":	572,
			"primary_score":	999984,
			"second_score":	893
		}, {
			"file":	"src/mod_cgi.c",
			"line":	573,
			"primary_score":	999984,
			"second_score":	270
		}, {
			"file":	"src/mod_cgi.c",
			"line":	574,
			"primary_score":	999984,
			"second_score":	548
		}, {
			"file":	"src/mod_cgi.c",
			"line":	575,
			"primary_score":	999984,
			"second_score":	547
		}, {
			"file":	"src/mod_cgi.c",
			"line":	578,
			"primary_score":	999984,
			"second_score":	269
		}, {
			"file":	"src/mod_cgi.c",
			"line":	580,
			"primary_score":	999984,
			"second_score":	268
		}, {
			"file":	"src/mod_cgi.c",
			"line":	584,
			"primary_score":	999984,
			"second_score":	117908
		}, {
			"file":	"src/mod_cgi.c",
			"line":	587,
			"primary_score":	999984,
			"second_score":	117907
		}, {
			"file":	"src/mod_cgi.c",
			"line":	590,
			"primary_score":	999984,
			"second_score":	117906
		}, {
			"file":	"src/mod_cgi.c",
			"line":	591,
			"primary_score":	999984,
			"second_score":	117905
		}, {
			"file":	"src/mod_cgi.c",
			"line":	592,
			"primary_score":	999984,
			"second_score":	117904
		}, {
			"file":	"src/mod_cgi.c",
			"line":	596,
			"primary_score":	999984,
			"second_score":	117903
		}, {
			"file":	"src/mod_cgi.c",
			"line":	598,
			"primary_score":	999984,
			"second_score":	117902
		}, {
			"file":	"src/mod_cgi.c",
			"line":	606,
			"primary_score":	999984,
			"second_score":	117900
		}, {
			"file":	"src/mod_cgi.c",
			"line":	611,
			"primary_score":	999984,
			"second_score":	117899
		}, {
			"file":	"src/mod_cgi.c",
			"line":	617,
			"primary_score":	999984,
			"second_score":	117898
		}, {
			"file":	"src/mod_cgi.c",
			"line":	620,
			"primary_score":	999984,
			"second_score":	923
		}, {
			"file":	"src/mod_cgi.c",
			"line":	621,
			"primary_score":	999984,
			"second_score":	922
		}, {
			"file":	"src/mod_cgi.c",
			"line":	622,
			"primary_score":	999984,
			"second_score":	921
		}, {
			"file":	"src/mod_cgi.c",
			"line":	623,
			"primary_score":	999984,
			"second_score":	920
		}, {
			"file":	"src/mod_cgi.c",
			"line":	624,
			"primary_score":	999984,
			"second_score":	919
		}, {
			"file":	"src/mod_cgi.c",
			"line":	625,
			"primary_score":	999984,
			"second_score":	918
		}, {
			"file":	"src/mod_cgi.c",
			"line":	626,
			"primary_score":	999984,
			"second_score":	917
		}, {
			"file":	"src/mod_cgi.c",
			"line":	627,
			"primary_score":	999984,
			"second_score":	916
		}, {
			"file":	"src/mod_cgi.c",
			"line":	628,
			"primary_score":	999984,
			"second_score":	915
		}, {
			"file":	"src/mod_cgi.c",
			"line":	631,
			"primary_score":	999984,
			"second_score":	914
		}, {
			"file":	"src/mod_cgi.c",
			"line":	632,
			"primary_score":	999984,
			"second_score":	913
		}, {
			"file":	"src/mod_cgi.c",
			"line":	633,
			"primary_score":	999984,
			"second_score":	912
		}, {
			"file":	"src/mod_cgi.c",
			"line":	635,
			"primary_score":	999984,
			"second_score":	911
		}, {
			"file":	"src/mod_cgi.c",
			"line":	638,
			"primary_score":	999984,
			"second_score":	910
		}, {
			"file":	"src/mod_cgi.c",
			"line":	639,
			"primary_score":	999984,
			"second_score":	909
		}, {
			"file":	"src/mod_cgi.c",
			"line":	640,
			"primary_score":	999984,
			"second_score":	908
		}, {
			"file":	"src/mod_cgi.c",
			"line":	642,
			"primary_score":	999984,
			"second_score":	907
		}, {
			"file":	"src/mod_cgi.c",
			"line":	648,
			"primary_score":	999984,
			"second_score":	906
		}, {
			"file":	"src/mod_cgi.c",
			"line":	651,
			"primary_score":	999984,
			"second_score":	905
		}, {
			"file":	"src/mod_cgi.c",
			"line":	652,
			"primary_score":	999984,
			"second_score":	904
		}, {
			"file":	"src/mod_cgi.c",
			"line":	653,
			"primary_score":	999984,
			"second_score":	903
		}, {
			"file":	"src/mod_cgi.c",
			"line":	655,
			"primary_score":	999984,
			"second_score":	902
		}, {
			"file":	"src/mod_cgi.c",
			"line":	657,
			"primary_score":	999984,
			"second_score":	890
		}, {
			"file":	"src/mod_cgi.c",
			"line":	658,
			"primary_score":	999984,
			"second_score":	888
		}, {
			"file":	"src/mod_cgi.c",
			"line":	671,
			"primary_score":	999984,
			"second_score":	877
		}, {
			"file":	"src/mod_cgi.c",
			"line":	673,
			"primary_score":	999984,
			"second_score":	866
		}, {
			"file":	"src/mod_cgi.c",
			"line":	675,
			"primary_score":	999984,
			"second_score":	859
		}, {
			"file":	"src/mod_cgi.c",
			"line":	677,
			"primary_score":	999984,
			"second_score":	848
		}, {
			"file":	"src/mod_cgi.c",
			"line":	679,
			"primary_score":	999984,
			"second_score":	847
		}, {
			"file":	"src/mod_cgi.c",
			"line":	684,
			"primary_score":	999984,
			"second_score":	816
		}, {
			"file":	"src/mod_cgi.c",
			"line":	687,
			"primary_score":	999984,
			"second_score":	805
		}, {
			"file":	"src/mod_cgi.c",
			"line":	695,
			"primary_score":	999984,
			"second_score":	804
		}, {
			"file":	"src/mod_cgi.c",
			"line":	697,
			"primary_score":	999984,
			"second_score":	793
		}, {
			"file":	"src/mod_cgi.c",
			"line":	698,
			"primary_score":	999984,
			"second_score":	787
		}, {
			"file":	"src/mod_cgi.c",
			"line":	700,
			"primary_score":	999984,
			"second_score":	776
		}, {
			"file":	"src/mod_cgi.c",
			"line":	703,
			"primary_score":	999984,
			"second_score":	774
		}, {
			"file":	"src/mod_cgi.c",
			"line":	704,
			"primary_score":	999984,
			"second_score":	763
		}, {
			"file":	"src/mod_cgi.c",
			"line":	705,
			"primary_score":	999987,
			"second_score":	761
		}, {
			"file":	"src/mod_cgi.c",
			"line":	710,
			"primary_score":	999984,
			"second_score":	750
		}, {
			"file":	"src/mod_cgi.c",
			"line":	711,
			"primary_score":	999984,
			"second_score":	748
		}, {
			"file":	"src/mod_cgi.c",
			"line":	716,
			"primary_score":	999984,
			"second_score":	737
		}, {
			"file":	"src/mod_cgi.c",
			"line":	724,
			"primary_score":	999984,
			"second_score":	736
		}, {
			"file":	"src/mod_cgi.c",
			"line":	726,
			"primary_score":	999984,
			"second_score":	725
		}, {
			"file":	"src/mod_cgi.c",
			"line":	728,
			"primary_score":	999984,
			"second_score":	724
		}, {
			"file":	"src/mod_cgi.c",
			"line":	733,
			"primary_score":	999984,
			"second_score":	691
		}, {
			"file":	"src/mod_cgi.c",
			"line":	735,
			"primary_score":	999984,
			"second_score":	680
		}, {
			"file":	"src/mod_cgi.c",
			"line":	741,
			"primary_score":	999984,
			"second_score":	678
		}, {
			"file":	"src/mod_cgi.c",
			"line":	747,
			"primary_score":	999984,
			"second_score":	677
		}, {
			"file":	"src/mod_cgi.c",
			"line":	748,
			"primary_score":	999989,
			"second_score":	129790
		}, {
			"file":	"src/mod_cgi.c",
			"line":	749,
			"primary_score":	999984,
			"second_score":	651
		}, {
			"file":	"src/mod_cgi.c",
			"line":	750,
			"primary_score":	999984,
			"second_score":	640
		}, {
			"file":	"src/mod_cgi.c",
			"line":	751,
			"primary_score":	999984,
			"second_score":	629
		}, {
			"file":	"src/mod_cgi.c",
			"line":	754,
			"primary_score":	999984,
			"second_score":	618
		}, {
			"file":	"src/mod_cgi.c",
			"line":	758,
			"primary_score":	999984,
			"second_score":	617
		}, {
			"file":	"src/mod_cgi.c",
			"line":	768,
			"primary_score":	999984,
			"second_score":	616
		}, {
			"file":	"src/mod_cgi.c",
			"line":	769,
			"primary_score":	999984,
			"second_score":	444
		}, {
			"file":	"src/mod_cgi.c",
			"line":	771,
			"primary_score":	999984,
			"second_score":	443
		}, {
			"file":	"src/mod_cgi.c",
			"line":	773,
			"primary_score":	999984,
			"second_score":	442
		}, {
			"file":	"src/mod_cgi.c",
			"line":	774,
			"primary_score":	999984,
			"second_score":	441
		}, {
			"file":	"src/mod_cgi.c",
			"line":	776,
			"primary_score":	999984,
			"second_score":	440
		}, {
			"file":	"src/mod_cgi.c",
			"line":	778,
			"primary_score":	999984,
			"second_score":	436
		}, {
			"file":	"src/mod_cgi.c",
			"line":	779,
			"primary_score":	999984,
			"second_score":	435
		}, {
			"file":	"src/mod_cgi.c",
			"line":	780,
			"primary_score":	999984,
			"second_score":	423
		}, {
			"file":	"src/mod_cgi.c",
			"line":	783,
			"primary_score":	999984,
			"second_score":	422
		}, {
			"file":	"src/mod_cgi.c",
			"line":	785,
			"primary_score":	999984,
			"second_score":	417
		}, {
			"file":	"src/mod_cgi.c",
			"line":	786,
			"primary_score":	999984,
			"second_score":	404
		}, {
			"file":	"src/mod_cgi.c",
			"line":	787,
			"primary_score":	999984,
			"second_score":	403
		}, {
			"file":	"src/mod_cgi.c",
			"line":	789,
			"primary_score":	999984,
			"second_score":	400
		}, {
			"file":	"src/mod_cgi.c",
			"line":	794,
			"primary_score":	999984,
			"second_score":	399
		}, {
			"file":	"src/mod_cgi.c",
			"line":	796,
			"primary_score":	999984,
			"second_score":	398
		}, {
			"file":	"src/mod_cgi.c",
			"line":	798,
			"primary_score":	999984,
			"second_score":	397
		}, {
			"file":	"src/mod_cgi.c",
			"line":	802,
			"primary_score":	999984,
			"second_score":	386
		}, {
			"file":	"src/mod_cgi.c",
			"line":	803,
			"primary_score":	999984,
			"second_score":	323
		}, {
			"file":	"src/mod_cgi.c",
			"line":	805,
			"primary_score":	999984,
			"second_score":	322
		}, {
			"file":	"src/mod_cgi.c",
			"line":	807,
			"primary_score":	999984,
			"second_score":	321
		}, {
			"file":	"src/mod_cgi.c",
			"line":	808,
			"primary_score":	999984,
			"second_score":	320
		}, {
			"file":	"src/mod_cgi.c",
			"line":	810,
			"primary_score":	999984,
			"second_score":	319
		}, {
			"file":	"src/mod_cgi.c",
			"line":	812,
			"primary_score":	999984,
			"second_score":	315
		}, {
			"file":	"src/mod_cgi.c",
			"line":	814,
			"primary_score":	999984,
			"second_score":	310
		}, {
			"file":	"src/mod_cgi.c",
			"line":	815,
			"primary_score":	999984,
			"second_score":	284
		}, {
			"file":	"src/mod_cgi.c",
			"line":	817,
			"primary_score":	999984,
			"second_score":	283
		}, {
			"file":	"src/mod_cgi.c",
			"line":	819,
			"primary_score":	999984,
			"second_score":	279
		}, {
			"file":	"src/mod_cgi.c",
			"line":	821,
			"primary_score":	999984,
			"second_score":	278
		}, {
			"file":	"src/mod_cgi.c",
			"line":	825,
			"primary_score":	999984,
			"second_score":	267
		}, {
			"file":	"src/mod_cgi.c",
			"line":	830,
			"primary_score":	999984,
			"second_score":	266
		}, {
			"file":	"src/mod_cgi.c",
			"line":	833,
			"primary_score":	999984,
			"second_score":	265
		}, {
			"file":	"src/mod_cgi.c",
			"line":	834,
			"primary_score":	999984,
			"second_score":	264
		}, {
			"file":	"src/mod_cgi.c",
			"line":	835,
			"primary_score":	999984,
			"second_score":	263
		}, {
			"file":	"src/mod_cgi.c",
			"line":	837,
			"primary_score":	999984,
			"second_score":	262
		}, {
			"file":	"src/mod_cgi.c",
			"line":	838,
			"primary_score":	999984,
			"second_score":	261
		}, {
			"file":	"src/mod_cgi.c",
			"line":	840,
			"primary_score":	999984,
			"second_score":	260
		}, {
			"file":	"src/mod_cgi.c",
			"line":	841,
			"primary_score":	999984,
			"second_score":	259
		}, {
			"file":	"src/mod_cgi.c",
			"line":	844,
			"primary_score":	999984,
			"second_score":	258
		}, {
			"file":	"src/mod_cgi.c",
			"line":	845,
			"primary_score":	999984,
			"second_score":	257
		}, {
			"file":	"src/mod_cgi.c",
			"line":	848,
			"primary_score":	999984,
			"second_score":	256
		}, {
			"file":	"src/mod_cgi.c",
			"line":	851,
			"primary_score":	999984,
			"second_score":	255
		}, {
			"file":	"src/mod_cgi.c",
			"line":	855,
			"primary_score":	999984,
			"second_score":	254
		}, {
			"file":	"src/mod_cgi.c",
			"line":	856,
			"primary_score":	999984,
			"second_score":	1
		}, {
			"file":	"src/mod_cgi.c",
			"line":	871,
			"primary_score":	999984,
			"second_score":	117897
		}, {
			"file":	"src/mod_cgi.c",
			"line":	874,
			"primary_score":	999984,
			"second_score":	117896
		}, {
			"file":	"src/mod_cgi.c",
			"line":	875,
			"primary_score":	999984,
			"second_score":	117895
		}, {
			"file":	"src/mod_cgi.c",
			"line":	878,
			"primary_score":	999984,
			"second_score":	117894
		}, {
			"file":	"src/mod_cgi.c",
			"line":	879,
			"primary_score":	999984,
			"second_score":	117893
		}, {
			"file":	"src/mod_cgi.c",
			"line":	881,
			"primary_score":	999984,
			"second_score":	117889
		}, {
			"file":	"src/mod_cgi.c",
			"line":	883,
			"primary_score":	999984,
			"second_score":	117859
		}, {
			"file":	"src/mod_cgi.c",
			"line":	884,
			"primary_score":	999984,
			"second_score":	117858
		}, {
			"file":	"src/mod_cgi.c",
			"line":	886,
			"primary_score":	999984,
			"second_score":	117857
		}, {
			"file":	"src/mod_cgi.c",
			"line":	888,
			"primary_score":	999984,
			"second_score":	117856
		}, {
			"file":	"src/mod_cgi.c",
			"line":	889,
			"primary_score":	999984,
			"second_score":	117855
		}, {
			"file":	"src/mod_cgi.c",
			"line":	890,
			"primary_score":	999984,
			"second_score":	117854
		}, {
			"file":	"src/mod_cgi.c",
			"line":	891,
			"primary_score":	999984,
			"second_score":	117853
		}, {
			"file":	"src/mod_cgi.c",
			"line":	893,
			"primary_score":	999984,
			"second_score":	117852
		}, {
			"file":	"src/mod_cgi.c",
			"line":	901,
			"primary_score":	999984,
			"second_score":	117848
		}, {
			"file":	"src/mod_cgi.c",
			"line":	903,
			"primary_score":	999984,
			"second_score":	117847
		}, {
			"file":	"src/mod_cgi.c",
			"line":	904,
			"primary_score":	999984,
			"second_score":	117833
		}, {
			"file":	"src/mod_cgi.c",
			"line":	906,
			"primary_score":	999984,
			"second_score":	117821
		}, {
			"file":	"src/mod_cgi.c",
			"line":	908,
			"primary_score":	999984,
			"second_score":	117820
		}, {
			"file":	"src/mod_cgi.c",
			"line":	912,
			"primary_score":	999984,
			"second_score":	117819
		}, {
			"file":	"src/mod_cgi.c",
			"line":	919,
			"primary_score":	999916,
			"second_score":	118238
		}, {
			"file":	"src/mod_cgi.c",
			"line":	920,
			"primary_score":	999916,
			"second_score":	118237
		}, {
			"file":	"src/mod_cgi.c",
			"line":	922,
			"primary_score":	999916,
			"second_score":	118236
		}, {
			"file":	"src/mod_cgi.c",
			"line":	923,
			"primary_score":	999916,
			"second_score":	118235
		}, {
			"file":	"src/mod_cgi.c",
			"line":	926,
			"primary_score":	999916,
			"second_score":	118234
		}, {
			"file":	"src/mod_cgi.c",
			"line":	927,
			"primary_score":	999916,
			"second_score":	117981
		}, {
			"file":	"src/mod_cgi.c",
			"line":	928,
			"primary_score":	999916,
			"second_score":	117980
		}, {
			"file":	"src/mod_cgi.c",
			"line":	931,
			"primary_score":	999916,
			"second_score":	117979
		}, {
			"file":	"src/mod_cgi.c",
			"line":	934,
			"primary_score":	999916,
			"second_score":	118045
		}, {
			"file":	"src/mod_cgi.c",
			"line":	935,
			"primary_score":	999916,
			"second_score":	118104
		}, {
			"file":	"src/mod_cgi.c",
			"line":	937,
			"primary_score":	999916,
			"second_score":	118103
		}, {
			"file":	"src/mod_cgi.c",
			"line":	939,
			"primary_score":	999916,
			"second_score":	118096
		}, {
			"file":	"src/mod_cgi.c",
			"line":	945,
			"primary_score":	999916,
			"second_score":	117972
		}, {
			"file":	"src/mod_cgi.c",
			"line":	949,
			"primary_score":	999916,
			"second_score":	118243
		}, {
			"file":	"src/mod_cgi.c",
			"line":	950,
			"primary_score":	999916,
			"second_score":	118242
		}, {
			"file":	"src/mod_cgi.c",
			"line":	951,
			"primary_score":	999916,
			"second_score":	118241
		}, {
			"file":	"src/mod_cgi.c",
			"line":	953,
			"primary_score":	999916,
			"second_score":	118240
		}, {
			"file":	"src/mod_cgi.c",
			"line":	955,
			"primary_score":	999916,
			"second_score":	118239
		}, {
			"file":	"src/mod_cgi.c",
			"line":	957,
			"primary_score":	999916,
			"second_score":	117971
		}, {
			"file":	"src/mod_cgi.c",
			"line":	961,
			"primary_score":	999916,
			"second_score":	117970
		}, {
			"file":	"src/mod_cgi.c",
			"line":	962,
			"primary_score":	999916,
			"second_score":	117969
		}, {
			"file":	"src/mod_cgi.c",
			"line":	965,
			"primary_score":	999916,
			"second_score":	117916
		}, {
			"file":	"src/mod_cgi.c",
			"line":	967,
			"primary_score":	999916,
			"second_score":	117915
		}, {
			"file":	"src/mod_cgi.c",
			"line":	968,
			"primary_score":	999916,
			"second_score":	117914
		}, {
			"file":	"src/mod_cgi.c",
			"line":	969,
			"primary_score":	999916,
			"second_score":	117913
		}, {
			"file":	"src/mod_cgi.c",
			"line":	971,
			"primary_score":	999916,
			"second_score":	117912
		}, {
			"file":	"src/mod_cgi.c",
			"line":	972,
			"primary_score":	999916,
			"second_score":	117911
		}, {
			"file":	"src/mod_cgi.c",
			"line":	974,
			"primary_score":	999916,
			"second_score":	117910
		}, {
			"file":	"src/mod_cgi.c",
			"line":	975,
			"primary_score":	999984,
			"second_score":	117909
		}, {
			"file":	"src/mod_cgi.c",
			"line":	982,
			"primary_score":	999984,
			"second_score":	117818
		}, {
			"file":	"src/mod_cgi.c",
			"line":	986,
			"primary_score":	999916,
			"second_score":	117817
		}, {
			"file":	"src/mod_cgi.c",
			"line":	995,
			"primary_score":	999916,
			"second_score":	117816
		}, {
			"file":	"src/mod_cgi.c",
			"line":	999,
			"primary_score":	999988,
			"second_score":	133726
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1000,
			"primary_score":	999988,
			"second_score":	133725
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1004,
			"primary_score":	999988,
			"second_score":	133724
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1037,
			"primary_score":	999988,
			"second_score":	133723
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1041,
			"primary_score":	999840,
			"second_score":	113214
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1042,
			"primary_score":	999840,
			"second_score":	113213
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1043,
			"primary_score":	999840,
			"second_score":	113212
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1045,
			"primary_score":	999840,
			"second_score":	113211
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1046,
			"primary_score":	999984,
			"second_score":	113210
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1048,
			"primary_score":	999984,
			"second_score":	113209
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1068,
			"primary_score":	999984,
			"second_score":	113053
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1070,
			"primary_score":	999984,
			"second_score":	113052
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1075,
			"primary_score":	999984,
			"second_score":	117513
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1076,
			"primary_score":	999985,
			"second_score":	115029
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1078,
			"primary_score":	999985,
			"second_score":	115028
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1107,
			"primary_score":	999985,
			"second_score":	113051
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1117,
			"primary_score":	999985,
			"second_score":	113050
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1119,
			"primary_score":	999985,
			"second_score":	113049
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1120,
			"primary_score":	999985,
			"second_score":	113043
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1122,
			"primary_score":	999985,
			"second_score":	113033
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1123,
			"primary_score":	999985,
			"second_score":	113010
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1125,
			"primary_score":	999985,
			"second_score":	113009
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1126,
			"primary_score":	999985,
			"second_score":	113008
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1134,
			"primary_score":	999874,
			"second_score":	117322
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1135,
			"primary_score":	999874,
			"second_score":	117321
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1137,
			"primary_score":	999874,
			"second_score":	117320
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1139,
			"primary_score":	999984,
			"second_score":	117319
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1158,
			"primary_score":	999984,
			"second_score":	117318
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1160,
			"primary_score":	999984,
			"second_score":	117317
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1161,
			"primary_score":	999984,
			"second_score":	117316
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1167,
			"primary_score":	999984,
			"second_score":	117315
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1172,
			"primary_score":	999840,
			"second_score":	452774
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1173,
			"primary_score":	999840,
			"second_score":	452773
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1175,
			"primary_score":	999840,
			"second_score":	452746
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1176,
			"primary_score":	999840,
			"second_score":	452745
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1177,
			"primary_score":	999840,
			"second_score":	452744
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1178,
			"primary_score":	999840,
			"second_score":	452743
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1180,
			"primary_score":	999840,
			"second_score":	452742
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1181,
			"primary_score":	999840,
			"second_score":	452741
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1182,
			"primary_score":	999840,
			"second_score":	452740
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1183,
			"primary_score":	999840,
			"second_score":	452739
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1185,
			"primary_score":	999840,
			"second_score":	452738
		}, {
			"file":	"src/mod_cgi.c",
			"line":	1187,
			"primary_score":	999840,
			"second_score":	452737
		}, {
			"file":	"src/mod_chunked.c",
			"line":	74,
			"primary_score":	999823,
			"second_score":	11157
		}, {
			"file":	"src/mod_chunked.c",
			"line":	76,
			"primary_score":	999823,
			"second_score":	11156
		}, {
			"file":	"src/mod_chunked.c",
			"line":	78,
			"primary_score":	999823,
			"second_score":	11155
		}, {
			"file":	"src/mod_chunked.c",
			"line":	80,
			"primary_score":	999823,
			"second_score":	11154
		}, {
			"file":	"src/mod_chunked.c",
			"line":	81,
			"primary_score":	999823,
			"second_score":	11153
		}, {
			"file":	"src/mod_chunked.c",
			"line":	83,
			"primary_score":	999823,
			"second_score":	11152
		}, {
			"file":	"src/mod_chunked.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	11079
		}, {
			"file":	"src/mod_chunked.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	11078
		}, {
			"file":	"src/mod_chunked.c",
			"line":	88,
			"primary_score":	999823,
			"second_score":	11077
		}, {
			"file":	"src/mod_chunked.c",
			"line":	90,
			"primary_score":	999823,
			"second_score":	11076
		}, {
			"file":	"src/mod_chunked.c",
			"line":	93,
			"primary_score":	999823,
			"second_score":	11075
		}, {
			"file":	"src/mod_chunked.c",
			"line":	95,
			"primary_score":	999823,
			"second_score":	11074
		}, {
			"file":	"src/mod_chunked.c",
			"line":	135,
			"primary_score":	999823,
			"second_score":	21723
		}, {
			"file":	"src/mod_chunked.c",
			"line":	136,
			"primary_score":	999823,
			"second_score":	21722
		}, {
			"file":	"src/mod_chunked.c",
			"line":	138,
			"primary_score":	999823,
			"second_score":	21721
		}, {
			"file":	"src/mod_chunked.c",
			"line":	140,
			"primary_score":	999823,
			"second_score":	21720
		}, {
			"file":	"src/mod_chunked.c",
			"line":	149,
			"primary_score":	999833,
			"second_score":	114643
		}, {
			"file":	"src/mod_chunked.c",
			"line":	150,
			"primary_score":	999833,
			"second_score":	114642
		}, {
			"file":	"src/mod_chunked.c",
			"line":	152,
			"primary_score":	999833,
			"second_score":	114641
		}, {
			"file":	"src/mod_chunked.c",
			"line":	153,
			"primary_score":	999833,
			"second_score":	114640
		}, {
			"file":	"src/mod_chunked.c",
			"line":	156,
			"primary_score":	999833,
			"second_score":	114639
		}, {
			"file":	"src/mod_chunked.c",
			"line":	157,
			"primary_score":	999833,
			"second_score":	114386
		}, {
			"file":	"src/mod_chunked.c",
			"line":	158,
			"primary_score":	999833,
			"second_score":	114385
		}, {
			"file":	"src/mod_chunked.c",
			"line":	161,
			"primary_score":	999833,
			"second_score":	114384
		}, {
			"file":	"src/mod_chunked.c",
			"line":	164,
			"primary_score":	999863,
			"second_score":	114450
		}, {
			"file":	"src/mod_chunked.c",
			"line":	165,
			"primary_score":	999863,
			"second_score":	114509
		}, {
			"file":	"src/mod_chunked.c",
			"line":	167,
			"primary_score":	999863,
			"second_score":	114508
		}, {
			"file":	"src/mod_chunked.c",
			"line":	169,
			"primary_score":	999863,
			"second_score":	114501
		}, {
			"file":	"src/mod_chunked.c",
			"line":	175,
			"primary_score":	999833,
			"second_score":	114377
		}, {
			"file":	"src/mod_chunked.c",
			"line":	179,
			"primary_score":	999833,
			"second_score":	114649
		}, {
			"file":	"src/mod_chunked.c",
			"line":	180,
			"primary_score":	999833,
			"second_score":	114648
		}, {
			"file":	"src/mod_chunked.c",
			"line":	181,
			"primary_score":	999833,
			"second_score":	114647
		}, {
			"file":	"src/mod_chunked.c",
			"line":	182,
			"primary_score":	999833,
			"second_score":	114646
		}, {
			"file":	"src/mod_chunked.c",
			"line":	183,
			"primary_score":	999833,
			"second_score":	114645
		}, {
			"file":	"src/mod_chunked.c",
			"line":	185,
			"primary_score":	999833,
			"second_score":	114644
		}, {
			"file":	"src/mod_chunked.c",
			"line":	188,
			"primary_score":	999833,
			"second_score":	114376
		}, {
			"file":	"src/mod_chunked.c",
			"line":	189,
			"primary_score":	999833,
			"second_score":	114368
		}, {
			"file":	"src/mod_chunked.c",
			"line":	190,
			"primary_score":	999833,
			"second_score":	114367
		}, {
			"file":	"src/mod_chunked.c",
			"line":	191,
			"primary_score":	999833,
			"second_score":	114366
		}, {
			"file":	"src/mod_chunked.c",
			"line":	194,
			"primary_score":	999833,
			"second_score":	114344
		}, {
			"file":	"src/mod_chunked.c",
			"line":	198,
			"primary_score":	999833,
			"second_score":	114343
		}, {
			"file":	"src/mod_chunked.c",
			"line":	201,
			"primary_score":	999833,
			"second_score":	114342
		}, {
			"file":	"src/mod_chunked.c",
			"line":	204,
			"primary_score":	999833,
			"second_score":	114341
		}, {
			"file":	"src/mod_chunked.c",
			"line":	207,
			"primary_score":	999985,
			"second_score":	114340
		}, {
			"file":	"src/mod_chunked.c",
			"line":	215,
			"primary_score":	999985,
			"second_score":	114339
		}, {
			"file":	"src/mod_chunked.c",
			"line":	218,
			"primary_score":	999985,
			"second_score":	114338
		}, {
			"file":	"src/mod_chunked.c",
			"line":	220,
			"primary_score":	999985,
			"second_score":	114337
		}, {
			"file":	"src/mod_chunked.c",
			"line":	221,
			"primary_score":	999985,
			"second_score":	114336
		}, {
			"file":	"src/mod_chunked.c",
			"line":	225,
			"primary_score":	999833,
			"second_score":	114335
		}, {
			"file":	"src/mod_chunked.c",
			"line":	227,
			"primary_score":	999833,
			"second_score":	114334
		}, {
			"file":	"src/mod_chunked.c",
			"line":	228,
			"primary_score":	999833,
			"second_score":	114333
		}, {
			"file":	"src/mod_chunked.c",
			"line":	229,
			"primary_score":	999833,
			"second_score":	114314
		}, {
			"file":	"src/mod_chunked.c",
			"line":	282,
			"primary_score":	999823,
			"second_score":	112943
		}, {
			"file":	"src/mod_chunked.c",
			"line":	283,
			"primary_score":	999823,
			"second_score":	112942
		}, {
			"file":	"src/mod_chunked.c",
			"line":	284,
			"primary_score":	999823,
			"second_score":	112941
		}, {
			"file":	"src/mod_chunked.c",
			"line":	285,
			"primary_score":	999823,
			"second_score":	112940
		}, {
			"file":	"src/mod_chunked.c",
			"line":	286,
			"primary_score":	999823,
			"second_score":	112939
		}, {
			"file":	"src/mod_chunked.c",
			"line":	287,
			"primary_score":	999823,
			"second_score":	112938
		}, {
			"file":	"src/mod_chunked.c",
			"line":	289,
			"primary_score":	999823,
			"second_score":	112937
		}, {
			"file":	"src/mod_chunked.c",
			"line":	292,
			"primary_score":	999823,
			"second_score":	112936
		}, {
			"file":	"src/mod_compress.c",
			"line":	64,
			"primary_score":	999836,
			"second_score":	449090
		}, {
			"file":	"src/mod_compress.c",
			"line":	66,
			"primary_score":	999836,
			"second_score":	449089
		}, {
			"file":	"src/mod_compress.c",
			"line":	68,
			"primary_score":	999836,
			"second_score":	449088
		}, {
			"file":	"src/mod_compress.c",
			"line":	70,
			"primary_score":	999836,
			"second_score":	449087
		}, {
			"file":	"src/mod_compress.c",
			"line":	71,
			"primary_score":	999836,
			"second_score":	449079
		}, {
			"file":	"src/mod_compress.c",
			"line":	73,
			"primary_score":	999836,
			"second_score":	449071
		}, {
			"file":	"src/mod_compress.c",
			"line":	77,
			"primary_score":	999836,
			"second_score":	13732
		}, {
			"file":	"src/mod_compress.c",
			"line":	79,
			"primary_score":	999836,
			"second_score":	13731
		}, {
			"file":	"src/mod_compress.c",
			"line":	81,
			"primary_score":	999836,
			"second_score":	13730
		}, {
			"file":	"src/mod_compress.c",
			"line":	83,
			"primary_score":	999836,
			"second_score":	13729
		}, {
			"file":	"src/mod_compress.c",
			"line":	84,
			"primary_score":	999836,
			"second_score":	13725
		}, {
			"file":	"src/mod_compress.c",
			"line":	86,
			"primary_score":	999836,
			"second_score":	13721
		}, {
			"file":	"src/mod_compress.c",
			"line":	87,
			"primary_score":	999836,
			"second_score":	13720
		}, {
			"file":	"src/mod_compress.c",
			"line":	88,
			"primary_score":	999836,
			"second_score":	13719
		}, {
			"file":	"src/mod_compress.c",
			"line":	89,
			"primary_score":	999836,
			"second_score":	13318
		}, {
			"file":	"src/mod_compress.c",
			"line":	91,
			"primary_score":	999836,
			"second_score":	13317
		}, {
			"file":	"src/mod_compress.c",
			"line":	93,
			"primary_score":	999836,
			"second_score":	13316
		}, {
			"file":	"src/mod_compress.c",
			"line":	94,
			"primary_score":	999836,
			"second_score":	13308
		}, {
			"file":	"src/mod_compress.c",
			"line":	96,
			"primary_score":	999836,
			"second_score":	13304
		}, {
			"file":	"src/mod_compress.c",
			"line":	98,
			"primary_score":	999836,
			"second_score":	13303
		}, {
			"file":	"src/mod_compress.c",
			"line":	102,
			"primary_score":	999836,
			"second_score":	13302
		}, {
			"file":	"src/mod_compress.c",
			"line":	104,
			"primary_score":	999836,
			"second_score":	13301
		}, {
			"file":	"src/mod_compress.c",
			"line":	130,
			"primary_score":	999836,
			"second_score":	259436
		}, {
			"file":	"src/mod_compress.c",
			"line":	131,
			"primary_score":	999836,
			"second_score":	259435
		}, {
			"file":	"src/mod_compress.c",
			"line":	133,
			"primary_score":	999836,
			"second_score":	259434
		}, {
			"file":	"src/mod_compress.c",
			"line":	140,
			"primary_score":	999836,
			"second_score":	259433
		}, {
			"file":	"src/mod_compress.c",
			"line":	142,
			"primary_score":	999836,
			"second_score":	259432
		}, {
			"file":	"src/mod_compress.c",
			"line":	143,
			"primary_score":	999836,
			"second_score":	250186
		}, {
			"file":	"src/mod_compress.c",
			"line":	145,
			"primary_score":	999836,
			"second_score":	250185
		}, {
			"file":	"src/mod_compress.c",
			"line":	146,
			"primary_score":	999836,
			"second_score":	250184
		}, {
			"file":	"src/mod_compress.c",
			"line":	147,
			"primary_score":	999836,
			"second_score":	250176
		}, {
			"file":	"src/mod_compress.c",
			"line":	148,
			"primary_score":	999836,
			"second_score":	250170
		}, {
			"file":	"src/mod_compress.c",
			"line":	150,
			"primary_score":	999836,
			"second_score":	250169
		}, {
			"file":	"src/mod_compress.c",
			"line":	151,
			"primary_score":	999836,
			"second_score":	250168
		}, {
			"file":	"src/mod_compress.c",
			"line":	152,
			"primary_score":	999836,
			"second_score":	250167
		}, {
			"file":	"src/mod_compress.c",
			"line":	154,
			"primary_score":	999836,
			"second_score":	250166
		}, {
			"file":	"src/mod_compress.c",
			"line":	156,
			"primary_score":	999836,
			"second_score":	250165
		}, {
			"file":	"src/mod_compress.c",
			"line":	160,
			"primary_score":	999836,
			"second_score":	249929
		}, {
			"file":	"src/mod_compress.c",
			"line":	161,
			"primary_score":	999836,
			"second_score":	256661
		}, {
			"file":	"src/mod_compress.c",
			"line":	162,
			"primary_score":	999836,
			"second_score":	256660
		}, {
			"file":	"src/mod_compress.c",
			"line":	179,
			"primary_score":	999836,
			"second_score":	249927
		}, {
			"file":	"src/mod_compress.c",
			"line":	612,
			"primary_score":	999843,
			"second_score":	114728
		}, {
			"file":	"src/mod_compress.c",
			"line":	613,
			"primary_score":	999843,
			"second_score":	114727
		}, {
			"file":	"src/mod_compress.c",
			"line":	614,
			"primary_score":	999843,
			"second_score":	114726
		}, {
			"file":	"src/mod_compress.c",
			"line":	615,
			"primary_score":	999843,
			"second_score":	114725
		}, {
			"file":	"src/mod_compress.c",
			"line":	616,
			"primary_score":	999843,
			"second_score":	114724
		}, {
			"file":	"src/mod_compress.c",
			"line":	617,
			"primary_score":	999843,
			"second_score":	114723
		}, {
			"file":	"src/mod_compress.c",
			"line":	618,
			"primary_score":	999843,
			"second_score":	114722
		}, {
			"file":	"src/mod_compress.c",
			"line":	619,
			"primary_score":	999843,
			"second_score":	114721
		}, {
			"file":	"src/mod_compress.c",
			"line":	620,
			"primary_score":	999843,
			"second_score":	114720
		}, {
			"file":	"src/mod_compress.c",
			"line":	621,
			"primary_score":	999843,
			"second_score":	114719
		}, {
			"file":	"src/mod_compress.c",
			"line":	622,
			"primary_score":	999843,
			"second_score":	114718
		}, {
			"file":	"src/mod_compress.c",
			"line":	623,
			"primary_score":	999843,
			"second_score":	114717
		}, {
			"file":	"src/mod_compress.c",
			"line":	625,
			"primary_score":	999843,
			"second_score":	114716
		}, {
			"file":	"src/mod_compress.c",
			"line":	626,
			"primary_score":	999843,
			"second_score":	114715
		}, {
			"file":	"src/mod_compress.c",
			"line":	627,
			"primary_score":	999843,
			"second_score":	114714
		}, {
			"file":	"src/mod_compress.c",
			"line":	629,
			"primary_score":	999843,
			"second_score":	114713
		}, {
			"file":	"src/mod_compress.c",
			"line":	632,
			"primary_score":	999843,
			"second_score":	114656
		}, {
			"file":	"src/mod_compress.c",
			"line":	637,
			"primary_score":	999857,
			"second_score":	114655
		}, {
			"file":	"src/mod_compress.c",
			"line":	638,
			"primary_score":	999923,
			"second_score":	114653
		}, {
			"file":	"src/mod_compress.c",
			"line":	790,
			"primary_score":	999836,
			"second_score":	452629
		}, {
			"file":	"src/mod_compress.c",
			"line":	791,
			"primary_score":	999836,
			"second_score":	452628
		}, {
			"file":	"src/mod_compress.c",
			"line":	793,
			"primary_score":	999836,
			"second_score":	452601
		}, {
			"file":	"src/mod_compress.c",
			"line":	794,
			"primary_score":	999836,
			"second_score":	452600
		}, {
			"file":	"src/mod_compress.c",
			"line":	797,
			"primary_score":	999836,
			"second_score":	452599
		}, {
			"file":	"src/mod_compress.c",
			"line":	799,
			"primary_score":	999836,
			"second_score":	452598
		}, {
			"file":	"src/mod_compress.c",
			"line":	801,
			"primary_score":	999836,
			"second_score":	452597
		}, {
			"file":	"src/mod_compress.c",
			"line":	803,
			"primary_score":	999836,
			"second_score":	452596
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	138,
			"primary_score":	999823,
			"second_score":	11464
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	140,
			"primary_score":	999823,
			"second_score":	11463
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	146,
			"primary_score":	999823,
			"second_score":	11462
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	149,
			"primary_score":	999823,
			"second_score":	11461
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	169,
			"primary_score":	999823,
			"second_score":	11953
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	171,
			"primary_score":	999823,
			"second_score":	11952
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	173,
			"primary_score":	999823,
			"second_score":	11951
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	175,
			"primary_score":	999823,
			"second_score":	11950
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	176,
			"primary_score":	999823,
			"second_score":	11949
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	177,
			"primary_score":	999823,
			"second_score":	11948
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	178,
			"primary_score":	999823,
			"second_score":	11467
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	180,
			"primary_score":	999823,
			"second_score":	11466
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	182,
			"primary_score":	999823,
			"second_score":	11465
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	183,
			"primary_score":	999823,
			"second_score":	11460
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	184,
			"primary_score":	999823,
			"second_score":	11456
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	185,
			"primary_score":	999823,
			"second_score":	11452
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	187,
			"primary_score":	999823,
			"second_score":	11448
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	189,
			"primary_score":	999823,
			"second_score":	11447
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	192,
			"primary_score":	999823,
			"second_score":	11446
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	193,
			"primary_score":	999823,
			"second_score":	11442
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	194,
			"primary_score":	999823,
			"second_score":	11438
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	196,
			"primary_score":	999823,
			"second_score":	11434
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	198,
			"primary_score":	999823,
			"second_score":	11433
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	878,
			"primary_score":	999908,
			"second_score":	117812
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	879,
			"primary_score":	999908,
			"second_score":	117811
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	880,
			"primary_score":	999908,
			"second_score":	117810
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	881,
			"primary_score":	999908,
			"second_score":	117809
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	883,
			"primary_score":	999908,
			"second_score":	117808
		}, {
			"file":	"src/mod_dirlisting.c",
			"line":	884,
			"primary_score":	999909,
			"second_score":	117806
		}, {
			"file":	"src/mod_expire.c",
			"line":	40,
			"primary_score":	999832,
			"second_score":	450899
		}, {
			"file":	"src/mod_expire.c",
			"line":	42,
			"primary_score":	999832,
			"second_score":	450898
		}, {
			"file":	"src/mod_expire.c",
			"line":	44,
			"primary_score":	999832,
			"second_score":	450897
		}, {
			"file":	"src/mod_expire.c",
			"line":	46,
			"primary_score":	999832,
			"second_score":	450896
		}, {
			"file":	"src/mod_expire.c",
			"line":	48,
			"primary_score":	999832,
			"second_score":	450888
		}, {
			"file":	"src/mod_expire.c",
			"line":	50,
			"primary_score":	999832,
			"second_score":	450878
		}, {
			"file":	"src/mod_expire.c",
			"line":	55,
			"primary_score":	999832,
			"second_score":	16973
		}, {
			"file":	"src/mod_expire.c",
			"line":	57,
			"primary_score":	999832,
			"second_score":	16972
		}, {
			"file":	"src/mod_expire.c",
			"line":	59,
			"primary_score":	999832,
			"second_score":	16971
		}, {
			"file":	"src/mod_expire.c",
			"line":	61,
			"primary_score":	999832,
			"second_score":	16970
		}, {
			"file":	"src/mod_expire.c",
			"line":	63,
			"primary_score":	999832,
			"second_score":	16966
		}, {
			"file":	"src/mod_expire.c",
			"line":	64,
			"primary_score":	999832,
			"second_score":	16965
		}, {
			"file":	"src/mod_expire.c",
			"line":	65,
			"primary_score":	999832,
			"second_score":	16964
		}, {
			"file":	"src/mod_expire.c",
			"line":	66,
			"primary_score":	999832,
			"second_score":	16723
		}, {
			"file":	"src/mod_expire.c",
			"line":	68,
			"primary_score":	999832,
			"second_score":	16722
		}, {
			"file":	"src/mod_expire.c",
			"line":	70,
			"primary_score":	999832,
			"second_score":	16714
		}, {
			"file":	"src/mod_expire.c",
			"line":	72,
			"primary_score":	999832,
			"second_score":	16713
		}, {
			"file":	"src/mod_expire.c",
			"line":	75,
			"primary_score":	999832,
			"second_score":	16712
		}, {
			"file":	"src/mod_expire.c",
			"line":	77,
			"primary_score":	999832,
			"second_score":	16711
		}, {
			"file":	"src/mod_expire.c",
			"line":	216,
			"primary_score":	999832,
			"second_score":	347932
		}, {
			"file":	"src/mod_expire.c",
			"line":	217,
			"primary_score":	999832,
			"second_score":	347931
		}, {
			"file":	"src/mod_expire.c",
			"line":	219,
			"primary_score":	999832,
			"second_score":	347930
		}, {
			"file":	"src/mod_expire.c",
			"line":	224,
			"primary_score":	999832,
			"second_score":	347929
		}, {
			"file":	"src/mod_expire.c",
			"line":	226,
			"primary_score":	999832,
			"second_score":	347928
		}, {
			"file":	"src/mod_expire.c",
			"line":	228,
			"primary_score":	999832,
			"second_score":	347927
		}, {
			"file":	"src/mod_expire.c",
			"line":	229,
			"primary_score":	999832,
			"second_score":	345156
		}, {
			"file":	"src/mod_expire.c",
			"line":	231,
			"primary_score":	999832,
			"second_score":	345155
		}, {
			"file":	"src/mod_expire.c",
			"line":	232,
			"primary_score":	999832,
			"second_score":	345154
		}, {
			"file":	"src/mod_expire.c",
			"line":	234,
			"primary_score":	999832,
			"second_score":	345148
		}, {
			"file":	"src/mod_expire.c",
			"line":	236,
			"primary_score":	999832,
			"second_score":	345147
		}, {
			"file":	"src/mod_expire.c",
			"line":	238,
			"primary_score":	999832,
			"second_score":	345146
		}, {
			"file":	"src/mod_expire.c",
			"line":	242,
			"primary_score":	999832,
			"second_score":	345064
		}, {
			"file":	"src/mod_expire.c",
			"line":	255,
			"primary_score":	999832,
			"second_score":	345063
		}, {
			"file":	"src/mod_expire.c",
			"line":	259,
			"primary_score":	999866,
			"second_score":	114979
		}, {
			"file":	"src/mod_expire.c",
			"line":	260,
			"primary_score":	999866,
			"second_score":	114978
		}, {
			"file":	"src/mod_expire.c",
			"line":	262,
			"primary_score":	999866,
			"second_score":	114977
		}, {
			"file":	"src/mod_expire.c",
			"line":	265,
			"primary_score":	999866,
			"second_score":	114976
		}, {
			"file":	"src/mod_expire.c",
			"line":	266,
			"primary_score":	999866,
			"second_score":	114744
		}, {
			"file":	"src/mod_expire.c",
			"line":	267,
			"primary_score":	999866,
			"second_score":	114743
		}, {
			"file":	"src/mod_expire.c",
			"line":	270,
			"primary_score":	999866,
			"second_score":	114742
		}, {
			"file":	"src/mod_expire.c",
			"line":	273,
			"primary_score":	999868,
			"second_score":	114808
		}, {
			"file":	"src/mod_expire.c",
			"line":	274,
			"primary_score":	999868,
			"second_score":	114860
		}, {
			"file":	"src/mod_expire.c",
			"line":	276,
			"primary_score":	999868,
			"second_score":	114859
		}, {
			"file":	"src/mod_expire.c",
			"line":	282,
			"primary_score":	999866,
			"second_score":	114735
		}, {
			"file":	"src/mod_expire.c",
			"line":	286,
			"primary_score":	999839,
			"second_score":	114984
		}, {
			"file":	"src/mod_expire.c",
			"line":	287,
			"primary_score":	999839,
			"second_score":	114983
		}, {
			"file":	"src/mod_expire.c",
			"line":	288,
			"primary_score":	999839,
			"second_score":	114982
		}, {
			"file":	"src/mod_expire.c",
			"line":	290,
			"primary_score":	999839,
			"second_score":	114981
		}, {
			"file":	"src/mod_expire.c",
			"line":	292,
			"primary_score":	999866,
			"second_score":	114980
		}, {
			"file":	"src/mod_expire.c",
			"line":	294,
			"primary_score":	999866,
			"second_score":	114734
		}, {
			"file":	"src/mod_expire.c",
			"line":	296,
			"primary_score":	999866,
			"second_score":	114733
		}, {
			"file":	"src/mod_expire.c",
			"line":	356,
			"primary_score":	999866,
			"second_score":	114732
		}, {
			"file":	"src/mod_expire.c",
			"line":	362,
			"primary_score":	999832,
			"second_score":	453931
		}, {
			"file":	"src/mod_expire.c",
			"line":	363,
			"primary_score":	999832,
			"second_score":	453930
		}, {
			"file":	"src/mod_expire.c",
			"line":	365,
			"primary_score":	999832,
			"second_score":	453903
		}, {
			"file":	"src/mod_expire.c",
			"line":	366,
			"primary_score":	999832,
			"second_score":	453902
		}, {
			"file":	"src/mod_expire.c",
			"line":	367,
			"primary_score":	999832,
			"second_score":	453901
		}, {
			"file":	"src/mod_expire.c",
			"line":	368,
			"primary_score":	999832,
			"second_score":	453900
		}, {
			"file":	"src/mod_expire.c",
			"line":	370,
			"primary_score":	999832,
			"second_score":	453899
		}, {
			"file":	"src/mod_expire.c",
			"line":	372,
			"primary_score":	999832,
			"second_score":	453898
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	52,
			"primary_score":	999823,
			"second_score":	21055
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	54,
			"primary_score":	999823,
			"second_score":	21054
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	56,
			"primary_score":	999823,
			"second_score":	21053
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	58,
			"primary_score":	999823,
			"second_score":	21052
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	59,
			"primary_score":	999823,
			"second_score":	21051
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	60,
			"primary_score":	999823,
			"second_score":	21050
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	61,
			"primary_score":	999823,
			"second_score":	20723
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	63,
			"primary_score":	999823,
			"second_score":	20722
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	65,
			"primary_score":	999823,
			"second_score":	20721
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	67,
			"primary_score":	999823,
			"second_score":	20713
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	69,
			"primary_score":	999823,
			"second_score":	20712
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	72,
			"primary_score":	999823,
			"second_score":	20711
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	74,
			"primary_score":	999823,
			"second_score":	20707
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	76,
			"primary_score":	999823,
			"second_score":	20706
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	144,
			"primary_score":	999906,
			"second_score":	119648
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	145,
			"primary_score":	999906,
			"second_score":	119647
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	146,
			"primary_score":	999906,
			"second_score":	119646
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	148,
			"primary_score":	999906,
			"second_score":	119645
		}, {
			"file":	"src/mod_indexfile.c",
			"line":	149,
			"primary_score":	999933,
			"second_score":	119643
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	756,
			"primary_score":	999840,
			"second_score":	449586
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	757,
			"primary_score":	999840,
			"second_score":	449585
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	760,
			"primary_score":	999840,
			"second_score":	449584
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	761,
			"primary_score":	999840,
			"second_score":	449483
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	763,
			"primary_score":	999840,
			"second_score":	449482
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	766,
			"primary_score":	999840,
			"second_score":	449481
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	768,
			"primary_score":	999840,
			"second_score":	449395
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	769,
			"primary_score":	999840,
			"second_score":	449394
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	770,
			"primary_score":	999840,
			"second_score":	449393
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	771,
			"primary_score":	999840,
			"second_score":	449392
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	772,
			"primary_score":	999840,
			"second_score":	449391
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	774,
			"primary_score":	999840,
			"second_score":	449390
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	778,
			"primary_score":	999840,
			"second_score":	14113
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	780,
			"primary_score":	999840,
			"second_score":	14112
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	782,
			"primary_score":	999840,
			"second_score":	14111
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	784,
			"primary_score":	999840,
			"second_score":	14110
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	786,
			"primary_score":	999840,
			"second_score":	14109
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	790,
			"primary_score":	999840,
			"second_score":	453077
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	792,
			"primary_score":	999840,
			"second_score":	453076
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	793,
			"primary_score":	999840,
			"second_score":	453075
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	795,
			"primary_score":	999840,
			"second_score":	453048
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	796,
			"primary_score":	999840,
			"second_score":	453047
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	798,
			"primary_score":	999840,
			"second_score":	453046
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	800,
			"primary_score":	999840,
			"second_score":	453045
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	801,
			"primary_score":	999840,
			"second_score":	453018
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	802,
			"primary_score":	999840,
			"second_score":	453001
		}, {
			"file":	"src/mod_proxy_backend_fastcgi.c",
			"line":	804,
			"primary_score":	999840,
			"second_score":	452937
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	47,
			"primary_score":	999840,
			"second_score":	449899
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	449898
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	50,
			"primary_score":	999840,
			"second_score":	449891
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	53,
			"primary_score":	999840,
			"second_score":	449872
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	54,
			"primary_score":	999840,
			"second_score":	449855
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	55,
			"primary_score":	999840,
			"second_score":	449854
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	57,
			"primary_score":	999840,
			"second_score":	449792
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	61,
			"primary_score":	999840,
			"second_score":	449480
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	63,
			"primary_score":	999840,
			"second_score":	449476
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	65,
			"primary_score":	999840,
			"second_score":	449449
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	66,
			"primary_score":	999840,
			"second_score":	449396
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	70,
			"primary_score":	999840,
			"second_score":	450260
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	72,
			"primary_score":	999840,
			"second_score":	450259
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	74,
			"primary_score":	999840,
			"second_score":	450258
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	76,
			"primary_score":	999840,
			"second_score":	450247
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	80,
			"primary_score":	999840,
			"second_score":	450246
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	81,
			"primary_score":	999840,
			"second_score":	450240
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	82,
			"primary_score":	999840,
			"second_score":	450161
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	83,
			"primary_score":	999840,
			"second_score":	450044
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	84,
			"primary_score":	999840,
			"second_score":	449900
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	86,
			"primary_score":	999840,
			"second_score":	449791
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	89,
			"primary_score":	999840,
			"second_score":	449790
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	91,
			"primary_score":	999840,
			"second_score":	449694
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	92,
			"primary_score":	999840,
			"second_score":	449686
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	93,
			"primary_score":	999840,
			"second_score":	449678
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	94,
			"primary_score":	999840,
			"second_score":	449670
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	96,
			"primary_score":	999840,
			"second_score":	449664
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	110,
			"primary_score":	999840,
			"second_score":	449656
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	114,
			"primary_score":	999840,
			"second_score":	15005
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	116,
			"primary_score":	999840,
			"second_score":	15004
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	118,
			"primary_score":	999840,
			"second_score":	15003
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	119,
			"primary_score":	999840,
			"second_score":	15002
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	120,
			"primary_score":	999840,
			"second_score":	15001
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	121,
			"primary_score":	999840,
			"second_score":	14275
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	123,
			"primary_score":	999840,
			"second_score":	14274
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	125,
			"primary_score":	999840,
			"second_score":	14273
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	126,
			"primary_score":	999840,
			"second_score":	14267
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	128,
			"primary_score":	999840,
			"second_score":	14264
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	129,
			"primary_score":	999840,
			"second_score":	14257
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	131,
			"primary_score":	999840,
			"second_score":	14250
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	133,
			"primary_score":	999840,
			"second_score":	14249
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	136,
			"primary_score":	999840,
			"second_score":	14248
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	137,
			"primary_score":	999840,
			"second_score":	14194
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	139,
			"primary_score":	999840,
			"second_score":	14157
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	140,
			"primary_score":	999840,
			"second_score":	14153
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	141,
			"primary_score":	999840,
			"second_score":	14149
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	142,
			"primary_score":	999840,
			"second_score":	14145
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	148,
			"primary_score":	999840,
			"second_score":	14141
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	150,
			"primary_score":	999840,
			"second_score":	14140
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	152,
			"primary_score":	999840,
			"second_score":	14117
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	156,
			"primary_score":	999840,
			"second_score":	265532
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	157,
			"primary_score":	999840,
			"second_score":	265531
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	159,
			"primary_score":	999840,
			"second_score":	265530
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	160,
			"primary_score":	999840,
			"second_score":	288654
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	162,
			"primary_score":	999840,
			"second_score":	288653
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	175,
			"primary_score":	999840,
			"second_score":	288652
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	176,
			"primary_score":	999840,
			"second_score":	288547
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	177,
			"primary_score":	999840,
			"second_score":	288546
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	180,
			"primary_score":	999840,
			"second_score":	288545
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	188,
			"primary_score":	999840,
			"second_score":	288544
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	197,
			"primary_score":	999840,
			"second_score":	288543
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	198,
			"primary_score":	999840,
			"second_score":	288542
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	199,
			"primary_score":	999840,
			"second_score":	288541
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	202,
			"primary_score":	999840,
			"second_score":	288540
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	211,
			"primary_score":	999840,
			"second_score":	288539
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	213,
			"primary_score":	999840,
			"second_score":	288511
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	216,
			"primary_score":	999840,
			"second_score":	288506
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	217,
			"primary_score":	999840,
			"second_score":	288487
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	218,
			"primary_score":	999840,
			"second_score":	288468
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	220,
			"primary_score":	999840,
			"second_score":	288449
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	225,
			"primary_score":	999840,
			"second_score":	265491
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	236,
			"primary_score":	999840,
			"second_score":	290901
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	237,
			"primary_score":	999840,
			"second_score":	290844
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	240,
			"primary_score":	999840,
			"second_score":	290502
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	241,
			"primary_score":	999840,
			"second_score":	290445
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	244,
			"primary_score":	999840,
			"second_score":	290050
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	245,
			"primary_score":	999840,
			"second_score":	289993
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	247,
			"primary_score":	999840,
			"second_score":	289424
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	248,
			"primary_score":	999840,
			"second_score":	289367
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	253,
			"primary_score":	999840,
			"second_score":	309129
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	254,
			"primary_score":	999840,
			"second_score":	309128
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	255,
			"primary_score":	999840,
			"second_score":	309127
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	256,
			"primary_score":	999840,
			"second_score":	309126
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	258,
			"primary_score":	999840,
			"second_score":	309125
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	275,
			"primary_score":	999840,
			"second_score":	309124
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	277,
			"primary_score":	999840,
			"second_score":	309116
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	279,
			"primary_score":	999840,
			"second_score":	309115
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	280,
			"primary_score":	999840,
			"second_score":	266541
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	281,
			"primary_score":	999840,
			"second_score":	266540
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	282,
			"primary_score":	999840,
			"second_score":	266539
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	284,
			"primary_score":	999840,
			"second_score":	266538
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	285,
			"primary_score":	999840,
			"second_score":	266532
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	286,
			"primary_score":	999840,
			"second_score":	266528
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	288,
			"primary_score":	999840,
			"second_score":	266524
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	289,
			"primary_score":	999840,
			"second_score":	266523
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	290,
			"primary_score":	999840,
			"second_score":	266522
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	291,
			"primary_score":	999840,
			"second_score":	266521
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	292,
			"primary_score":	999840,
			"second_score":	266520
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	293,
			"primary_score":	999840,
			"second_score":	266516
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	294,
			"primary_score":	999840,
			"second_score":	266512
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	295,
			"primary_score":	999840,
			"second_score":	266508
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	296,
			"primary_score":	999840,
			"second_score":	266504
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	297,
			"primary_score":	999840,
			"second_score":	266503
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	298,
			"primary_score":	999840,
			"second_score":	266502
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	300,
			"primary_score":	999840,
			"second_score":	266501
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	301,
			"primary_score":	999840,
			"second_score":	266500
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	302,
			"primary_score":	999840,
			"second_score":	266499
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	303,
			"primary_score":	999840,
			"second_score":	266498
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	304,
			"primary_score":	999840,
			"second_score":	266497
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	305,
			"primary_score":	999840,
			"second_score":	266496
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	306,
			"primary_score":	999840,
			"second_score":	266495
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	307,
			"primary_score":	999840,
			"second_score":	266494
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	308,
			"primary_score":	999840,
			"second_score":	266493
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	310,
			"primary_score":	999840,
			"second_score":	266492
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	312,
			"primary_score":	999840,
			"second_score":	266488
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	313,
			"primary_score":	999840,
			"second_score":	266487
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	315,
			"primary_score":	999840,
			"second_score":	266486
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	319,
			"primary_score":	999840,
			"second_score":	265577
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	330,
			"primary_score":	999840,
			"second_score":	265575
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	331,
			"primary_score":	999840,
			"second_score":	291597
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	332,
			"primary_score":	999840,
			"second_score":	291596
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	340,
			"primary_score":	999840,
			"second_score":	291585
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	343,
			"primary_score":	999840,
			"second_score":	265573
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	345,
			"primary_score":	999840,
			"second_score":	291583
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	346,
			"primary_score":	999840,
			"second_score":	291572
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	349,
			"primary_score":	999840,
			"second_score":	291551
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	350,
			"primary_score":	999840,
			"second_score":	291537
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	351,
			"primary_score":	999840,
			"second_score":	291524
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	354,
			"primary_score":	999840,
			"second_score":	291243
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	357,
			"primary_score":	999840,
			"second_score":	291230
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	358,
			"primary_score":	999840,
			"second_score":	291229
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	359,
			"primary_score":	999840,
			"second_score":	291228
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	362,
			"primary_score":	999840,
			"second_score":	291205
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	364,
			"primary_score":	999840,
			"second_score":	291186
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	368,
			"primary_score":	999840,
			"second_score":	290910
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	373,
			"primary_score":	999840,
			"second_score":	290909
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	376,
			"primary_score":	999840,
			"second_score":	290903
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	411,
			"primary_score":	999840,
			"second_score":	290902
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	415,
			"primary_score":	999840,
			"second_score":	288791
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	418,
			"primary_score":	999840,
			"second_score":	265572
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	422,
			"primary_score":	999840,
			"second_score":	265533
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	427,
			"primary_score":	999840,
			"second_score":	265490
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	429,
			"primary_score":	999840,
			"second_score":	265486
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2031,
			"primary_score":	999895,
			"second_score":	118741
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2032,
			"primary_score":	999895,
			"second_score":	118740
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2035,
			"primary_score":	999895,
			"second_score":	118739
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2036,
			"primary_score":	999895,
			"second_score":	118738
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2037,
			"primary_score":	999895,
			"second_score":	118737
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2038,
			"primary_score":	999895,
			"second_score":	118736
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2039,
			"primary_score":	999895,
			"second_score":	118735
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2040,
			"primary_score":	999895,
			"second_score":	118734
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2041,
			"primary_score":	999895,
			"second_score":	118733
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2042,
			"primary_score":	999895,
			"second_score":	118732
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2043,
			"primary_score":	999895,
			"second_score":	118731
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2044,
			"primary_score":	999895,
			"second_score":	118730
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2045,
			"primary_score":	999895,
			"second_score":	118729
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2046,
			"primary_score":	999895,
			"second_score":	118728
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2047,
			"primary_score":	999895,
			"second_score":	118727
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2048,
			"primary_score":	999895,
			"second_score":	118726
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2051,
			"primary_score":	999895,
			"second_score":	118725
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2052,
			"primary_score":	999895,
			"second_score":	118258
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2053,
			"primary_score":	999895,
			"second_score":	118257
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2056,
			"primary_score":	999895,
			"second_score":	118256
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2059,
			"primary_score":	999895,
			"second_score":	118322
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2060,
			"primary_score":	999895,
			"second_score":	118451
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2062,
			"primary_score":	999895,
			"second_score":	118450
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2066,
			"primary_score":	999895,
			"second_score":	118443
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2068,
			"primary_score":	999895,
			"second_score":	118436
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2070,
			"primary_score":	999895,
			"second_score":	118429
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2072,
			"primary_score":	999895,
			"second_score":	118422
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2074,
			"primary_score":	999895,
			"second_score":	118415
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2076,
			"primary_score":	999895,
			"second_score":	118408
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2078,
			"primary_score":	999895,
			"second_score":	118401
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2080,
			"primary_score":	999895,
			"second_score":	118394
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2082,
			"primary_score":	999895,
			"second_score":	118387
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2084,
			"primary_score":	999895,
			"second_score":	118380
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2086,
			"primary_score":	999895,
			"second_score":	118373
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2092,
			"primary_score":	999895,
			"second_score":	118249
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2096,
			"primary_score":	999895,
			"second_score":	118745
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2097,
			"primary_score":	999895,
			"second_score":	118744
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2099,
			"primary_score":	999895,
			"second_score":	118743
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2105,
			"primary_score":	999895,
			"second_score":	118742
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2108,
			"primary_score":	999895,
			"second_score":	118248
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2189,
			"primary_score":	999895,
			"second_score":	121972
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2193,
			"primary_score":	999916,
			"second_score":	118746
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2200,
			"primary_score":	999840,
			"second_score":	21740
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2201,
			"primary_score":	999840,
			"second_score":	21739
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2203,
			"primary_score":	999840,
			"second_score":	21738
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2228,
			"primary_score":	999840,
			"second_score":	113221
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2229,
			"primary_score":	999840,
			"second_score":	113220
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2231,
			"primary_score":	999840,
			"second_score":	113219
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2435,
			"primary_score":	999874,
			"second_score":	117328
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2437,
			"primary_score":	999874,
			"second_score":	117327
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2455,
			"primary_score":	999988,
			"second_score":	133737
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2456,
			"primary_score":	999988,
			"second_score":	133736
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2457,
			"primary_score":	999988,
			"second_score":	133735
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2458,
			"primary_score":	999988,
			"second_score":	133734
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2460,
			"primary_score":	999988,
			"second_score":	133733
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2461,
			"primary_score":	999988,
			"second_score":	133913
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2462,
			"primary_score":	999988,
			"second_score":	133912
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2463,
			"primary_score":	999988,
			"second_score":	133911
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2464,
			"primary_score":	999988,
			"second_score":	133910
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2465,
			"primary_score":	999988,
			"second_score":	133909
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2467,
			"primary_score":	999988,
			"second_score":	133908
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2468,
			"primary_score":	999988,
			"second_score":	133907
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2521,
			"primary_score":	999988,
			"second_score":	133906
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2522,
			"primary_score":	999988,
			"second_score":	133905
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2524,
			"primary_score":	999988,
			"second_score":	133904
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2534,
			"primary_score":	999988,
			"second_score":	133902
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2535,
			"primary_score":	999988,
			"second_score":	133901
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2537,
			"primary_score":	999988,
			"second_score":	133900
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2540,
			"primary_score":	999988,
			"second_score":	133899
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2544,
			"primary_score":	999988,
			"second_score":	133898
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2545,
			"primary_score":	999988,
			"second_score":	133897
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2550,
			"primary_score":	999988,
			"second_score":	133732
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2552,
			"primary_score":	999988,
			"second_score":	133731
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2556,
			"primary_score":	999988,
			"second_score":	133895
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2566,
			"primary_score":	999988,
			"second_score":	133891
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2570,
			"primary_score":	999988,
			"second_score":	133975
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2571,
			"primary_score":	999988,
			"second_score":	133974
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2578,
			"primary_score":	999988,
			"second_score":	133973
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2579,
			"primary_score":	999988,
			"second_score":	133738
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2582,
			"primary_score":	999988,
			"second_score":	133730
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2586,
			"primary_score":	999840,
			"second_score":	453224
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2587,
			"primary_score":	999840,
			"second_score":	453223
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2589,
			"primary_score":	999840,
			"second_score":	453196
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2590,
			"primary_score":	999840,
			"second_score":	453195
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2591,
			"primary_score":	999840,
			"second_score":	453194
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2592,
			"primary_score":	999840,
			"second_score":	453193
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2593,
			"primary_score":	999840,
			"second_score":	453192
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2594,
			"primary_score":	999840,
			"second_score":	453191
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2595,
			"primary_score":	999840,
			"second_score":	453190
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2596,
			"primary_score":	999840,
			"second_score":	453189
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2597,
			"primary_score":	999840,
			"second_score":	453188
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2598,
			"primary_score":	999840,
			"second_score":	453187
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2600,
			"primary_score":	999840,
			"second_score":	453186
		}, {
			"file":	"src/mod_proxy_core.c",
			"line":	2602,
			"primary_score":	999840,
			"second_score":	453185
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	9,
			"primary_score":	999840,
			"second_score":	291055
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	11,
			"primary_score":	999840,
			"second_score":	291054
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	13,
			"primary_score":	999840,
			"second_score":	291053
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	14,
			"primary_score":	999840,
			"second_score":	291045
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	16,
			"primary_score":	999840,
			"second_score":	291044
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	20,
			"primary_score":	999840,
			"second_score":	14842
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	22,
			"primary_score":	999840,
			"second_score":	14841
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	24,
			"primary_score":	999840,
			"second_score":	14837
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	29,
			"primary_score":	999840,
			"second_score":	291219
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	31,
			"primary_score":	999840,
			"second_score":	291218
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	33,
			"primary_score":	999840,
			"second_score":	291217
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	37,
			"primary_score":	999840,
			"second_score":	14848
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	39,
			"primary_score":	999840,
			"second_score":	14847
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	41,
			"primary_score":	999840,
			"second_score":	14835
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	43,
			"primary_score":	999840,
			"second_score":	14833
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	47,
			"primary_score":	999840,
			"second_score":	290972
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	51,
			"primary_score":	999840,
			"second_score":	290971
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	63,
			"primary_score":	999840,
			"second_score":	290970
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	65,
			"primary_score":	999840,
			"second_score":	290917
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	67,
			"primary_score":	999840,
			"second_score":	290913
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	71,
			"primary_score":	999840,
			"second_score":	291185
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	72,
			"primary_score":	999840,
			"second_score":	291184
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	73,
			"primary_score":	999840,
			"second_score":	291183
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	74,
			"primary_score":	999840,
			"second_score":	291182
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	76,
			"primary_score":	999840,
			"second_score":	291181
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	77,
			"primary_score":	999840,
			"second_score":	291180
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	78,
			"primary_score":	999840,
			"second_score":	291179
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	79,
			"primary_score":	999840,
			"second_score":	291178
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	80,
			"primary_score":	999840,
			"second_score":	291177
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	81,
			"primary_score":	999840,
			"second_score":	291176
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	82,
			"primary_score":	999840,
			"second_score":	291175
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	83,
			"primary_score":	999840,
			"second_score":	291174
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	96,
			"primary_score":	999840,
			"second_score":	291173
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	98,
			"primary_score":	999840,
			"second_score":	291171
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	124,
			"primary_score":	999840,
			"second_score":	291170
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	144,
			"primary_score":	999840,
			"second_score":	291169
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	147,
			"primary_score":	999840,
			"second_score":	291168
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	148,
			"primary_score":	999840,
			"second_score":	291160
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	149,
			"primary_score":	999840,
			"second_score":	291144
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	150,
			"primary_score":	999840,
			"second_score":	291136
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	158,
			"primary_score":	999840,
			"second_score":	291119
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	160,
			"primary_score":	999840,
			"second_score":	291066
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	169,
			"primary_score":	999840,
			"second_score":	291065
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	170,
			"primary_score":	999840,
			"second_score":	291061
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	172,
			"primary_score":	999840,
			"second_score":	291057
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	173,
			"primary_score":	999840,
			"second_score":	291056
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	175,
			"primary_score":	999840,
			"second_score":	291043
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	176,
			"primary_score":	999840,
			"second_score":	291042
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	178,
			"primary_score":	999840,
			"second_score":	291041
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	179,
			"primary_score":	999840,
			"second_score":	291040
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	181,
			"primary_score":	999840,
			"second_score":	291030
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	193,
			"primary_score":	999840,
			"second_score":	291029
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	195,
			"primary_score":	999840,
			"second_score":	291028
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	196,
			"primary_score":	999840,
			"second_score":	291015
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	197,
			"primary_score":	999840,
			"second_score":	290974
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	204,
			"primary_score":	999840,
			"second_score":	290973
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	207,
			"primary_score":	999840,
			"second_score":	290912
		}, {
			"file":	"src/mod_proxy_core_address.c",
			"line":	209,
			"primary_score":	999840,
			"second_score":	290911
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	8,
			"primary_score":	999840,
			"second_score":	291227
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	10,
			"primary_score":	999840,
			"second_score":	291226
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	11,
			"primary_score":	999840,
			"second_score":	291225
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	12,
			"primary_score":	999840,
			"second_score":	291220
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	13,
			"primary_score":	999840,
			"second_score":	291216
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	14,
			"primary_score":	999840,
			"second_score":	291215
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	15,
			"primary_score":	999840,
			"second_score":	291207
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	17,
			"primary_score":	999840,
			"second_score":	291206
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	21,
			"primary_score":	999840,
			"second_score":	14856
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	23,
			"primary_score":	999840,
			"second_score":	14855
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	24,
			"primary_score":	999840,
			"second_score":	14849
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	25,
			"primary_score":	999840,
			"second_score":	14832
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	27,
			"primary_score":	999840,
			"second_score":	14828
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	31,
			"primary_score":	999840,
			"second_score":	266519
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	33,
			"primary_score":	999840,
			"second_score":	266518
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	35,
			"primary_score":	999840,
			"second_score":	266517
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	39,
			"primary_score":	999840,
			"second_score":	14858
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	41,
			"primary_score":	999840,
			"second_score":	14826
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	43,
			"primary_score":	999840,
			"second_score":	14268
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	47,
			"primary_score":	999840,
			"second_score":	290908
		}, {
			"file":	"src/mod_proxy_core_backend.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	290904
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	7,
			"primary_score":	999840,
			"second_score":	266515
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	9,
			"primary_score":	999840,
			"second_score":	266513
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	13,
			"primary_score":	999840,
			"second_score":	14266
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	15,
			"primary_score":	999840,
			"second_score":	14265
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	35,
			"primary_score":	999988,
			"second_score":	133894
		}, {
			"file":	"src/mod_proxy_core_backlog.c",
			"line":	37,
			"primary_score":	999988,
			"second_score":	133893
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	36,
			"primary_score":	999840,
			"second_score":	291224
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	38,
			"primary_score":	999840,
			"second_score":	291223
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	45,
			"primary_score":	999840,
			"second_score":	291222
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	47,
			"primary_score":	999840,
			"second_score":	291221
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	51,
			"primary_score":	999840,
			"second_score":	14854
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	53,
			"primary_score":	999840,
			"second_score":	14853
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	55,
			"primary_score":	999840,
			"second_score":	14852
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	59,
			"primary_score":	999840,
			"second_score":	14851
		}, {
			"file":	"src/mod_proxy_core_pool.c",
			"line":	61,
			"primary_score":	999840,
			"second_score":	14850
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	10,
			"primary_score":	999840,
			"second_score":	449479
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	12,
			"primary_score":	999840,
			"second_score":	449478
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	14,
			"primary_score":	999840,
			"second_score":	449477
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	18,
			"primary_score":	999840,
			"second_score":	14133
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	20,
			"primary_score":	999840,
			"second_score":	14132
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	22,
			"primary_score":	999840,
			"second_score":	14128
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	26,
			"primary_score":	999840,
			"second_score":	450257
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	27,
			"primary_score":	999840,
			"second_score":	450256
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	28,
			"primary_score":	999840,
			"second_score":	450255
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	32,
			"primary_score":	999840,
			"second_score":	14139
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	33,
			"primary_score":	999840,
			"second_score":	14138
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	35,
			"primary_score":	999840,
			"second_score":	14122
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	36,
			"primary_score":	999840,
			"second_score":	14121
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	40,
			"primary_score":	999840,
			"second_score":	449448
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	41,
			"primary_score":	999840,
			"second_score":	449447
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	43,
			"primary_score":	999840,
			"second_score":	449443
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	46,
			"primary_score":	999840,
			"second_score":	449442
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	449440
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	51,
			"primary_score":	999840,
			"second_score":	449422
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	52,
			"primary_score":	999840,
			"second_score":	449409
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	56,
			"primary_score":	999840,
			"second_score":	291595
		}, {
			"file":	"src/mod_proxy_core_protocol.c",
			"line":	58,
			"primary_score":	999840,
			"second_score":	291594
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	9,
			"primary_score":	999840,
			"second_score":	288538
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	11,
			"primary_score":	999840,
			"second_score":	288536
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	12,
			"primary_score":	999840,
			"second_score":	288528
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	13,
			"primary_score":	999840,
			"second_score":	288520
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	15,
			"primary_score":	999840,
			"second_score":	288512
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	19,
			"primary_score":	999840,
			"second_score":	14796
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	21,
			"primary_score":	999840,
			"second_score":	14795
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	24,
			"primary_score":	999840,
			"second_score":	14793
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	25,
			"primary_score":	999840,
			"second_score":	14789
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	26,
			"primary_score":	999840,
			"second_score":	14785
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	28,
			"primary_score":	999840,
			"second_score":	14781
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	32,
			"primary_score":	999840,
			"second_score":	288510
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	33,
			"primary_score":	999840,
			"second_score":	288509
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	36,
			"primary_score":	999840,
			"second_score":	288508
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	45,
			"primary_score":	999840,
			"second_score":	288507
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	50,
			"primary_score":	999840,
			"second_score":	266507
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	52,
			"primary_score":	999840,
			"second_score":	266505
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	56,
			"primary_score":	999840,
			"second_score":	288550
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	58,
			"primary_score":	999840,
			"second_score":	288445
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	62,
			"primary_score":	999840,
			"second_score":	14256
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	64,
			"primary_score":	999840,
			"second_score":	14798
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	66,
			"primary_score":	999840,
			"second_score":	14779
		}, {
			"file":	"src/mod_proxy_core_rewrites.c",
			"line":	68,
			"primary_score":	999840,
			"second_score":	14251
		}, {
			"file":	"src/mod_redirect.c",
			"line":	34,
			"primary_score":	999827,
			"second_score":	450681
		}, {
			"file":	"src/mod_redirect.c",
			"line":	36,
			"primary_score":	999827,
			"second_score":	450680
		}, {
			"file":	"src/mod_redirect.c",
			"line":	38,
			"primary_score":	999827,
			"second_score":	450679
		}, {
			"file":	"src/mod_redirect.c",
			"line":	40,
			"primary_score":	999827,
			"second_score":	450678
		}, {
			"file":	"src/mod_redirect.c",
			"line":	41,
			"primary_score":	999827,
			"second_score":	450670
		}, {
			"file":	"src/mod_redirect.c",
			"line":	43,
			"primary_score":	999827,
			"second_score":	450662
		}, {
			"file":	"src/mod_redirect.c",
			"line":	47,
			"primary_score":	999827,
			"second_score":	16041
		}, {
			"file":	"src/mod_redirect.c",
			"line":	49,
			"primary_score":	999827,
			"second_score":	16040
		}, {
			"file":	"src/mod_redirect.c",
			"line":	51,
			"primary_score":	999827,
			"second_score":	16039
		}, {
			"file":	"src/mod_redirect.c",
			"line":	52,
			"primary_score":	999827,
			"second_score":	16038
		}, {
			"file":	"src/mod_redirect.c",
			"line":	53,
			"primary_score":	999827,
			"second_score":	16037
		}, {
			"file":	"src/mod_redirect.c",
			"line":	54,
			"primary_score":	999827,
			"second_score":	15709
		}, {
			"file":	"src/mod_redirect.c",
			"line":	56,
			"primary_score":	999827,
			"second_score":	15708
		}, {
			"file":	"src/mod_redirect.c",
			"line":	58,
			"primary_score":	999827,
			"second_score":	15702
		}, {
			"file":	"src/mod_redirect.c",
			"line":	60,
			"primary_score":	999827,
			"second_score":	15701
		}, {
			"file":	"src/mod_redirect.c",
			"line":	64,
			"primary_score":	999827,
			"second_score":	15700
		}, {
			"file":	"src/mod_redirect.c",
			"line":	65,
			"primary_score":	999827,
			"second_score":	15696
		}, {
			"file":	"src/mod_redirect.c",
			"line":	67,
			"primary_score":	999827,
			"second_score":	15692
		}, {
			"file":	"src/mod_redirect.c",
			"line":	69,
			"primary_score":	999827,
			"second_score":	15691
		}, {
			"file":	"src/mod_redirect.c",
			"line":	73,
			"primary_score":	999827,
			"second_score":	333239
		}, {
			"file":	"src/mod_redirect.c",
			"line":	74,
			"primary_score":	999827,
			"second_score":	333238
		}, {
			"file":	"src/mod_redirect.c",
			"line":	75,
			"primary_score":	999827,
			"second_score":	333237
		}, {
			"file":	"src/mod_redirect.c",
			"line":	77,
			"primary_score":	999827,
			"second_score":	333236
		}, {
			"file":	"src/mod_redirect.c",
			"line":	83,
			"primary_score":	999827,
			"second_score":	333235
		}, {
			"file":	"src/mod_redirect.c",
			"line":	86,
			"primary_score":	999827,
			"second_score":	333234
		}, {
			"file":	"src/mod_redirect.c",
			"line":	88,
			"primary_score":	999827,
			"second_score":	333233
		}, {
			"file":	"src/mod_redirect.c",
			"line":	89,
			"primary_score":	999827,
			"second_score":	325274
		}, {
			"file":	"src/mod_redirect.c",
			"line":	90,
			"primary_score":	999827,
			"second_score":	325273
		}, {
			"file":	"src/mod_redirect.c",
			"line":	91,
			"primary_score":	999827,
			"second_score":	325272
		}, {
			"file":	"src/mod_redirect.c",
			"line":	92,
			"primary_score":	999827,
			"second_score":	325271
		}, {
			"file":	"src/mod_redirect.c",
			"line":	94,
			"primary_score":	999827,
			"second_score":	325270
		}, {
			"file":	"src/mod_redirect.c",
			"line":	95,
			"primary_score":	999827,
			"second_score":	325269
		}, {
			"file":	"src/mod_redirect.c",
			"line":	97,
			"primary_score":	999827,
			"second_score":	325265
		}, {
			"file":	"src/mod_redirect.c",
			"line":	98,
			"primary_score":	999827,
			"second_score":	325264
		}, {
			"file":	"src/mod_redirect.c",
			"line":	100,
			"primary_score":	999827,
			"second_score":	325263
		}, {
			"file":	"src/mod_redirect.c",
			"line":	101,
			"primary_score":	999827,
			"second_score":	325262
		}, {
			"file":	"src/mod_redirect.c",
			"line":	103,
			"primary_score":	999827,
			"second_score":	325261
		}, {
			"file":	"src/mod_redirect.c",
			"line":	107,
			"primary_score":	999827,
			"second_score":	325074
		}, {
			"file":	"src/mod_redirect.c",
			"line":	109,
			"primary_score":	999831,
			"second_score":	325031
		}, {
			"file":	"src/mod_redirect.c",
			"line":	112,
			"primary_score":	999835,
			"second_score":	326384
		}, {
			"file":	"src/mod_redirect.c",
			"line":	119,
			"primary_score":	999835,
			"second_score":	326383
		}, {
			"file":	"src/mod_redirect.c",
			"line":	121,
			"primary_score":	999835,
			"second_score":	326382
		}, {
			"file":	"src/mod_redirect.c",
			"line":	122,
			"primary_score":	999835,
			"second_score":	326381
		}, {
			"file":	"src/mod_redirect.c",
			"line":	131,
			"primary_score":	999835,
			"second_score":	326380
		}, {
			"file":	"src/mod_redirect.c",
			"line":	141,
			"primary_score":	999827,
			"second_score":	325030
		}, {
			"file":	"src/mod_redirect.c",
			"line":	145,
			"primary_score":	999881,
			"second_score":	123979
		}, {
			"file":	"src/mod_redirect.c",
			"line":	146,
			"primary_score":	999881,
			"second_score":	123978
		}, {
			"file":	"src/mod_redirect.c",
			"line":	148,
			"primary_score":	999881,
			"second_score":	123977
		}, {
			"file":	"src/mod_redirect.c",
			"line":	149,
			"primary_score":	999881,
			"second_score":	123976
		}, {
			"file":	"src/mod_redirect.c",
			"line":	152,
			"primary_score":	999881,
			"second_score":	123975
		}, {
			"file":	"src/mod_redirect.c",
			"line":	153,
			"primary_score":	999881,
			"second_score":	123712
		}, {
			"file":	"src/mod_redirect.c",
			"line":	154,
			"primary_score":	999881,
			"second_score":	123711
		}, {
			"file":	"src/mod_redirect.c",
			"line":	157,
			"primary_score":	999881,
			"second_score":	123710
		}, {
			"file":	"src/mod_redirect.c",
			"line":	160,
			"primary_score":	999883,
			"second_score":	123776
		}, {
			"file":	"src/mod_redirect.c",
			"line":	161,
			"primary_score":	999883,
			"second_score":	123835
		}, {
			"file":	"src/mod_redirect.c",
			"line":	163,
			"primary_score":	999883,
			"second_score":	123834
		}, {
			"file":	"src/mod_redirect.c",
			"line":	166,
			"primary_score":	999883,
			"second_score":	123827
		}, {
			"file":	"src/mod_redirect.c",
			"line":	172,
			"primary_score":	999881,
			"second_score":	123703
		}, {
			"file":	"src/mod_redirect.c",
			"line":	177,
			"primary_score":	999881,
			"second_score":	123982
		}, {
			"file":	"src/mod_redirect.c",
			"line":	178,
			"primary_score":	999881,
			"second_score":	123981
		}, {
			"file":	"src/mod_redirect.c",
			"line":	187,
			"primary_score":	999881,
			"second_score":	123980
		}, {
			"file":	"src/mod_redirect.c",
			"line":	189,
			"primary_score":	999881,
			"second_score":	123702
		}, {
			"file":	"src/mod_redirect.c",
			"line":	190,
			"primary_score":	999881,
			"second_score":	123683
		}, {
			"file":	"src/mod_redirect.c",
			"line":	192,
			"primary_score":	999881,
			"second_score":	123665
		}, {
			"file":	"src/mod_redirect.c",
			"line":	200,
			"primary_score":	999890,
			"second_score":	123664
		}, {
			"file":	"src/mod_redirect.c",
			"line":	212,
			"primary_score":	999890,
			"second_score":	123663
		}, {
			"file":	"src/mod_redirect.c",
			"line":	217,
			"primary_score":	999827,
			"second_score":	453649
		}, {
			"file":	"src/mod_redirect.c",
			"line":	218,
			"primary_score":	999827,
			"second_score":	453648
		}, {
			"file":	"src/mod_redirect.c",
			"line":	220,
			"primary_score":	999827,
			"second_score":	453621
		}, {
			"file":	"src/mod_redirect.c",
			"line":	221,
			"primary_score":	999827,
			"second_score":	453620
		}, {
			"file":	"src/mod_redirect.c",
			"line":	222,
			"primary_score":	999827,
			"second_score":	453619
		}, {
			"file":	"src/mod_redirect.c",
			"line":	223,
			"primary_score":	999827,
			"second_score":	453618
		}, {
			"file":	"src/mod_redirect.c",
			"line":	225,
			"primary_score":	999827,
			"second_score":	453617
		}, {
			"file":	"src/mod_redirect.c",
			"line":	227,
			"primary_score":	999827,
			"second_score":	453616
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	52,
			"primary_score":	999832,
			"second_score":	451385
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	54,
			"primary_score":	999832,
			"second_score":	451384
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	56,
			"primary_score":	999832,
			"second_score":	451383
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	58,
			"primary_score":	999832,
			"second_score":	451382
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	60,
			"primary_score":	999832,
			"second_score":	451374
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	64,
			"primary_score":	999832,
			"second_score":	20702
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	66,
			"primary_score":	999832,
			"second_score":	20701
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	68,
			"primary_score":	999832,
			"second_score":	20700
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	70,
			"primary_score":	999832,
			"second_score":	20699
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	71,
			"primary_score":	999832,
			"second_score":	20695
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	72,
			"primary_score":	999832,
			"second_score":	20694
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	73,
			"primary_score":	999832,
			"second_score":	20693
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	74,
			"primary_score":	999832,
			"second_score":	20347
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	76,
			"primary_score":	999832,
			"second_score":	20346
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	78,
			"primary_score":	999832,
			"second_score":	20345
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	79,
			"primary_score":	999832,
			"second_score":	20339
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	81,
			"primary_score":	999832,
			"second_score":	20335
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	83,
			"primary_score":	999832,
			"second_score":	20334
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	86,
			"primary_score":	999832,
			"second_score":	20333
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	88,
			"primary_score":	999832,
			"second_score":	20332
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	92,
			"primary_score":	999832,
			"second_score":	427379
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	94,
			"primary_score":	999832,
			"second_score":	427378
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	95,
			"primary_score":	999840,
			"second_score":	439849
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	96,
			"primary_score":	999840,
			"second_score":	439848
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	98,
			"primary_score":	999840,
			"second_score":	439847
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	105,
			"primary_score":	999840,
			"second_score":	439846
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	107,
			"primary_score":	999840,
			"second_score":	439845
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	108,
			"primary_score":	999840,
			"second_score":	439777
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	116,
			"primary_score":	999840,
			"second_score":	439776
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	126,
			"primary_score":	999840,
			"second_score":	439736
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	127,
			"primary_score":	999840,
			"second_score":	439735
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	134,
			"primary_score":	999832,
			"second_score":	427335
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	138,
			"primary_score":	999832,
			"second_score":	441704
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	139,
			"primary_score":	999832,
			"second_score":	441703
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	141,
			"primary_score":	999832,
			"second_score":	441702
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	156,
			"primary_score":	999832,
			"second_score":	441701
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	159,
			"primary_score":	999832,
			"second_score":	441700
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	161,
			"primary_score":	999832,
			"second_score":	441699
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	162,
			"primary_score":	999832,
			"second_score":	427900
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	163,
			"primary_score":	999832,
			"second_score":	427899
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	165,
			"primary_score":	999832,
			"second_score":	427898
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	166,
			"primary_score":	999832,
			"second_score":	427897
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	167,
			"primary_score":	999832,
			"second_score":	427893
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	169,
			"primary_score":	999832,
			"second_score":	427885
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	170,
			"primary_score":	999832,
			"second_score":	427884
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	172,
			"primary_score":	999832,
			"second_score":	427883
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	176,
			"primary_score":	999832,
			"second_score":	427518
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	177,
			"primary_score":	999832,
			"second_score":	427472
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	178,
			"primary_score":	999832,
			"second_score":	427426
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	179,
			"primary_score":	999832,
			"second_score":	427380
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	182,
			"primary_score":	999832,
			"second_score":	427334
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	186,
			"primary_score":	999866,
			"second_score":	127159
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	187,
			"primary_score":	999866,
			"second_score":	127158
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	188,
			"primary_score":	999866,
			"second_score":	127157
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	189,
			"primary_score":	999866,
			"second_score":	127156
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	192,
			"primary_score":	999866,
			"second_score":	127155
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	193,
			"primary_score":	999866,
			"second_score":	126809
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	194,
			"primary_score":	999866,
			"second_score":	126808
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	196,
			"primary_score":	999874,
			"second_score":	127117
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	199,
			"primary_score":	999866,
			"second_score":	126806
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	202,
			"primary_score":	999868,
			"second_score":	126910
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	203,
			"primary_score":	999868,
			"second_score":	126988
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	205,
			"primary_score":	999868,
			"second_score":	126987
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	209,
			"primary_score":	999868,
			"second_score":	126980
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	213,
			"primary_score":	999868,
			"second_score":	126973
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	217,
			"primary_score":	999868,
			"second_score":	126966
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	225,
			"primary_score":	999866,
			"second_score":	126787
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	229,
			"primary_score":	999832,
			"second_score":	21754
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	231,
			"primary_score":	999832,
			"second_score":	21753
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	233,
			"primary_score":	999832,
			"second_score":	21752
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	238,
			"primary_score":	999832,
			"second_score":	21751
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	243,
			"primary_score":	999866,
			"second_score":	127164
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	244,
			"primary_score":	999866,
			"second_score":	127163
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	245,
			"primary_score":	999866,
			"second_score":	127162
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	254,
			"primary_score":	999866,
			"second_score":	127161
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	269,
			"primary_score":	999866,
			"second_score":	127160
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	271,
			"primary_score":	999866,
			"second_score":	126786
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	273,
			"primary_score":	999866,
			"second_score":	126785
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	274,
			"primary_score":	999866,
			"second_score":	126766
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	276,
			"primary_score":	999866,
			"second_score":	126741
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	302,
			"primary_score":	999866,
			"second_score":	126740
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	317,
			"primary_score":	999866,
			"second_score":	126739
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	321,
			"primary_score":	999832,
			"second_score":	454644
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	322,
			"primary_score":	999832,
			"second_score":	454643
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	324,
			"primary_score":	999832,
			"second_score":	454616
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	328,
			"primary_score":	999832,
			"second_score":	454615
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	329,
			"primary_score":	999832,
			"second_score":	454614
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	330,
			"primary_score":	999832,
			"second_score":	454613
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	331,
			"primary_score":	999832,
			"second_score":	454612
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	333,
			"primary_score":	999832,
			"second_score":	454611
		}, {
			"file":	"src/mod_rewrite.c",
			"line":	335,
			"primary_score":	999832,
			"second_score":	454610
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	55,
			"primary_score":	999832,
			"second_score":	450566
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	57,
			"primary_score":	999832,
			"second_score":	450565
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	59,
			"primary_score":	999832,
			"second_score":	450564
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	61,
			"primary_score":	999832,
			"second_score":	450563
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	63,
			"primary_score":	999832,
			"second_score":	450555
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	68,
			"primary_score":	999832,
			"second_score":	15687
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	69,
			"primary_score":	999832,
			"second_score":	15686
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	71,
			"primary_score":	999832,
			"second_score":	15685
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	73,
			"primary_score":	999832,
			"second_score":	15684
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	74,
			"primary_score":	999832,
			"second_score":	15683
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	75,
			"primary_score":	999832,
			"second_score":	15682
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	76,
			"primary_score":	999832,
			"second_score":	15345
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	78,
			"primary_score":	999832,
			"second_score":	15344
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	79,
			"primary_score":	999832,
			"second_score":	15340
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	80,
			"primary_score":	999832,
			"second_score":	15336
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	82,
			"primary_score":	999832,
			"second_score":	15332
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	84,
			"primary_score":	999832,
			"second_score":	15331
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	87,
			"primary_score":	999832,
			"second_score":	15330
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	89,
			"primary_score":	999832,
			"second_score":	15326
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	91,
			"primary_score":	999832,
			"second_score":	15325
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	97,
			"primary_score":	999832,
			"second_score":	325026
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	98,
			"primary_score":	999832,
			"second_score":	325025
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	100,
			"primary_score":	999832,
			"second_score":	325024
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	108,
			"primary_score":	999832,
			"second_score":	325023
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	110,
			"primary_score":	999832,
			"second_score":	325022
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	112,
			"primary_score":	999832,
			"second_score":	325021
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	113,
			"primary_score":	999832,
			"second_score":	312479
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	115,
			"primary_score":	999832,
			"second_score":	312478
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	116,
			"primary_score":	999832,
			"second_score":	312477
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	117,
			"primary_score":	999832,
			"second_score":	312469
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	118,
			"primary_score":	999832,
			"second_score":	312461
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	119,
			"primary_score":	999832,
			"second_score":	312453
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	121,
			"primary_score":	999832,
			"second_score":	312452
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	122,
			"primary_score":	999832,
			"second_score":	312451
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	123,
			"primary_score":	999832,
			"second_score":	312450
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	124,
			"primary_score":	999832,
			"second_score":	312449
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	126,
			"primary_score":	999832,
			"second_score":	312448
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	128,
			"primary_score":	999832,
			"second_score":	312447
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	133,
			"primary_score":	999832,
			"second_score":	312146
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	162,
			"primary_score":	999891,
			"second_score":	122300
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	163,
			"primary_score":	999891,
			"second_score":	122299
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	165,
			"primary_score":	999891,
			"second_score":	122298
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	166,
			"primary_score":	999891,
			"second_score":	122297
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	167,
			"primary_score":	999891,
			"second_score":	122296
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	168,
			"primary_score":	999891,
			"second_score":	122295
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	171,
			"primary_score":	999891,
			"second_score":	122294
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	172,
			"primary_score":	999891,
			"second_score":	121988
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	173,
			"primary_score":	999891,
			"second_score":	121987
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	176,
			"primary_score":	999891,
			"second_score":	121986
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	179,
			"primary_score":	999893,
			"second_score":	122052
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	180,
			"primary_score":	999893,
			"second_score":	122126
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	182,
			"primary_score":	999893,
			"second_score":	122125
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	184,
			"primary_score":	999893,
			"second_score":	122118
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	186,
			"primary_score":	999893,
			"second_score":	122110
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	188,
			"primary_score":	999893,
			"second_score":	122103
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	194,
			"primary_score":	999891,
			"second_score":	121979
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	198,
			"primary_score":	999891,
			"second_score":	122308
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	199,
			"primary_score":	999891,
			"second_score":	122307
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	200,
			"primary_score":	999891,
			"second_score":	122306
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	201,
			"primary_score":	999891,
			"second_score":	122305
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	202,
			"primary_score":	999891,
			"second_score":	122304
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	203,
			"primary_score":	999891,
			"second_score":	122303
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	205,
			"primary_score":	999891,
			"second_score":	122302
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	207,
			"primary_score":	999891,
			"second_score":	122301
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	209,
			"primary_score":	999894,
			"second_score":	121976
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	332,
			"primary_score":	999832,
			"second_score":	453506
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	333,
			"primary_score":	999832,
			"second_score":	453505
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	335,
			"primary_score":	999832,
			"second_score":	453478
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	336,
			"primary_score":	999832,
			"second_score":	453477
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	337,
			"primary_score":	999832,
			"second_score":	453476
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	338,
			"primary_score":	999832,
			"second_score":	453475
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	340,
			"primary_score":	999832,
			"second_score":	453474
		}, {
			"file":	"src/mod_secure_download.c",
			"line":	342,
			"primary_score":	999832,
			"second_score":	453473
		}, {
			"file":	"src/mod_setenv.c",
			"line":	34,
			"primary_score":	999874,
			"second_score":	125819
		}, {
			"file":	"src/mod_setenv.c",
			"line":	36,
			"primary_score":	999874,
			"second_score":	125818
		}, {
			"file":	"src/mod_setenv.c",
			"line":	38,
			"primary_score":	999874,
			"second_score":	125817
		}, {
			"file":	"src/mod_setenv.c",
			"line":	40,
			"primary_score":	999874,
			"second_score":	125816
		}, {
			"file":	"src/mod_setenv.c",
			"line":	44,
			"primary_score":	999874,
			"second_score":	111580
		}, {
			"file":	"src/mod_setenv.c",
			"line":	50,
			"primary_score":	999832,
			"second_score":	451290
		}, {
			"file":	"src/mod_setenv.c",
			"line":	52,
			"primary_score":	999832,
			"second_score":	451289
		}, {
			"file":	"src/mod_setenv.c",
			"line":	54,
			"primary_score":	999832,
			"second_score":	451288
		}, {
			"file":	"src/mod_setenv.c",
			"line":	56,
			"primary_score":	999832,
			"second_score":	451287
		}, {
			"file":	"src/mod_setenv.c",
			"line":	61,
			"primary_score":	999832,
			"second_score":	20328
		}, {
			"file":	"src/mod_setenv.c",
			"line":	63,
			"primary_score":	999832,
			"second_score":	20327
		}, {
			"file":	"src/mod_setenv.c",
			"line":	65,
			"primary_score":	999832,
			"second_score":	20326
		}, {
			"file":	"src/mod_setenv.c",
			"line":	67,
			"primary_score":	999832,
			"second_score":	20325
		}, {
			"file":	"src/mod_setenv.c",
			"line":	68,
			"primary_score":	999832,
			"second_score":	20324
		}, {
			"file":	"src/mod_setenv.c",
			"line":	69,
			"primary_score":	999832,
			"second_score":	20323
		}, {
			"file":	"src/mod_setenv.c",
			"line":	70,
			"primary_score":	999832,
			"second_score":	19600
		}, {
			"file":	"src/mod_setenv.c",
			"line":	72,
			"primary_score":	999832,
			"second_score":	19599
		}, {
			"file":	"src/mod_setenv.c",
			"line":	73,
			"primary_score":	999832,
			"second_score":	19591
		}, {
			"file":	"src/mod_setenv.c",
			"line":	74,
			"primary_score":	999832,
			"second_score":	19583
		}, {
			"file":	"src/mod_setenv.c",
			"line":	76,
			"primary_score":	999832,
			"second_score":	19575
		}, {
			"file":	"src/mod_setenv.c",
			"line":	78,
			"primary_score":	999832,
			"second_score":	19574
		}, {
			"file":	"src/mod_setenv.c",
			"line":	81,
			"primary_score":	999832,
			"second_score":	19573
		}, {
			"file":	"src/mod_setenv.c",
			"line":	83,
			"primary_score":	999832,
			"second_score":	19572
		}, {
			"file":	"src/mod_setenv.c",
			"line":	89,
			"primary_score":	999832,
			"second_score":	427330
		}, {
			"file":	"src/mod_setenv.c",
			"line":	90,
			"primary_score":	999832,
			"second_score":	427329
		}, {
			"file":	"src/mod_setenv.c",
			"line":	92,
			"primary_score":	999832,
			"second_score":	427328
		}, {
			"file":	"src/mod_setenv.c",
			"line":	99,
			"primary_score":	999832,
			"second_score":	427327
		}, {
			"file":	"src/mod_setenv.c",
			"line":	101,
			"primary_score":	999832,
			"second_score":	427326
		}, {
			"file":	"src/mod_setenv.c",
			"line":	103,
			"primary_score":	999832,
			"second_score":	427325
		}, {
			"file":	"src/mod_setenv.c",
			"line":	104,
			"primary_score":	999832,
			"second_score":	418441
		}, {
			"file":	"src/mod_setenv.c",
			"line":	106,
			"primary_score":	999832,
			"second_score":	418440
		}, {
			"file":	"src/mod_setenv.c",
			"line":	107,
			"primary_score":	999832,
			"second_score":	418439
		}, {
			"file":	"src/mod_setenv.c",
			"line":	108,
			"primary_score":	999832,
			"second_score":	418433
		}, {
			"file":	"src/mod_setenv.c",
			"line":	109,
			"primary_score":	999832,
			"second_score":	418427
		}, {
			"file":	"src/mod_setenv.c",
			"line":	111,
			"primary_score":	999832,
			"second_score":	418421
		}, {
			"file":	"src/mod_setenv.c",
			"line":	112,
			"primary_score":	999832,
			"second_score":	418420
		}, {
			"file":	"src/mod_setenv.c",
			"line":	113,
			"primary_score":	999832,
			"second_score":	418419
		}, {
			"file":	"src/mod_setenv.c",
			"line":	115,
			"primary_score":	999832,
			"second_score":	418418
		}, {
			"file":	"src/mod_setenv.c",
			"line":	117,
			"primary_score":	999832,
			"second_score":	418417
		}, {
			"file":	"src/mod_setenv.c",
			"line":	122,
			"primary_score":	999832,
			"second_score":	418189
		}, {
			"file":	"src/mod_setenv.c",
			"line":	126,
			"primary_score":	999866,
			"second_score":	119635
		}, {
			"file":	"src/mod_setenv.c",
			"line":	127,
			"primary_score":	999866,
			"second_score":	119634
		}, {
			"file":	"src/mod_setenv.c",
			"line":	129,
			"primary_score":	999866,
			"second_score":	119633
		}, {
			"file":	"src/mod_setenv.c",
			"line":	130,
			"primary_score":	999866,
			"second_score":	119632
		}, {
			"file":	"src/mod_setenv.c",
			"line":	131,
			"primary_score":	999866,
			"second_score":	119631
		}, {
			"file":	"src/mod_setenv.c",
			"line":	134,
			"primary_score":	999866,
			"second_score":	119630
		}, {
			"file":	"src/mod_setenv.c",
			"line":	135,
			"primary_score":	999866,
			"second_score":	119354
		}, {
			"file":	"src/mod_setenv.c",
			"line":	136,
			"primary_score":	999866,
			"second_score":	119353
		}, {
			"file":	"src/mod_setenv.c",
			"line":	139,
			"primary_score":	999866,
			"second_score":	119352
		}, {
			"file":	"src/mod_setenv.c",
			"line":	142,
			"primary_score":	999868,
			"second_score":	119418
		}, {
			"file":	"src/mod_setenv.c",
			"line":	143,
			"primary_score":	999868,
			"second_score":	119485
		}, {
			"file":	"src/mod_setenv.c",
			"line":	145,
			"primary_score":	999868,
			"second_score":	119484
		}, {
			"file":	"src/mod_setenv.c",
			"line":	147,
			"primary_score":	999868,
			"second_score":	119476
		}, {
			"file":	"src/mod_setenv.c",
			"line":	149,
			"primary_score":	999868,
			"second_score":	119469
		}, {
			"file":	"src/mod_setenv.c",
			"line":	155,
			"primary_score":	999866,
			"second_score":	119345
		}, {
			"file":	"src/mod_setenv.c",
			"line":	159,
			"primary_score":	999866,
			"second_score":	119639
		}, {
			"file":	"src/mod_setenv.c",
			"line":	160,
			"primary_score":	999866,
			"second_score":	119638
		}, {
			"file":	"src/mod_setenv.c",
			"line":	161,
			"primary_score":	999866,
			"second_score":	119637
		}, {
			"file":	"src/mod_setenv.c",
			"line":	163,
			"primary_score":	999866,
			"second_score":	119636
		}, {
			"file":	"src/mod_setenv.c",
			"line":	165,
			"primary_score":	999866,
			"second_score":	119344
		}, {
			"file":	"src/mod_setenv.c",
			"line":	171,
			"primary_score":	999874,
			"second_score":	119343
		}, {
			"file":	"src/mod_setenv.c",
			"line":	172,
			"primary_score":	999914,
			"second_score":	119342
		}, {
			"file":	"src/mod_setenv.c",
			"line":	174,
			"primary_score":	999874,
			"second_score":	125820
		}, {
			"file":	"src/mod_setenv.c",
			"line":	176,
			"primary_score":	999874,
			"second_score":	125815
		}, {
			"file":	"src/mod_setenv.c",
			"line":	179,
			"primary_score":	999874,
			"second_score":	119341
		}, {
			"file":	"src/mod_setenv.c",
			"line":	180,
			"primary_score":	999914,
			"second_score":	119340
		}, {
			"file":	"src/mod_setenv.c",
			"line":	183,
			"primary_score":	999874,
			"second_score":	125813
		}, {
			"file":	"src/mod_setenv.c",
			"line":	185,
			"primary_score":	999874,
			"second_score":	125812
		}, {
			"file":	"src/mod_setenv.c",
			"line":	186,
			"primary_score":	999874,
			"second_score":	125811
		}, {
			"file":	"src/mod_setenv.c",
			"line":	187,
			"primary_score":	999874,
			"second_score":	125810
		}, {
			"file":	"src/mod_setenv.c",
			"line":	189,
			"primary_score":	999874,
			"second_score":	125809
		}, {
			"file":	"src/mod_setenv.c",
			"line":	190,
			"primary_score":	999874,
			"second_score":	125802
		}, {
			"file":	"src/mod_setenv.c",
			"line":	193,
			"primary_score":	999874,
			"second_score":	125775
		}, {
			"file":	"src/mod_setenv.c",
			"line":	194,
			"primary_score":	999874,
			"second_score":	125756
		}, {
			"file":	"src/mod_setenv.c",
			"line":	196,
			"primary_score":	999874,
			"second_score":	125737
		}, {
			"file":	"src/mod_setenv.c",
			"line":	199,
			"primary_score":	999874,
			"second_score":	125640
		}, {
			"file":	"src/mod_setenv.c",
			"line":	200,
			"primary_score":	999874,
			"second_score":	125533
		}, {
			"file":	"src/mod_setenv.c",
			"line":	201,
			"primary_score":	999874,
			"second_score":	125532
		}, {
			"file":	"src/mod_setenv.c",
			"line":	203,
			"primary_score":	999874,
			"second_score":	125531
		}, {
			"file":	"src/mod_setenv.c",
			"line":	204,
			"primary_score":	999874,
			"second_score":	125524
		}, {
			"file":	"src/mod_setenv.c",
			"line":	207,
			"primary_score":	999874,
			"second_score":	125497
		}, {
			"file":	"src/mod_setenv.c",
			"line":	208,
			"primary_score":	999874,
			"second_score":	125478
		}, {
			"file":	"src/mod_setenv.c",
			"line":	210,
			"primary_score":	999874,
			"second_score":	125459
		}, {
			"file":	"src/mod_setenv.c",
			"line":	213,
			"primary_score":	999874,
			"second_score":	125389
		}, {
			"file":	"src/mod_setenv.c",
			"line":	214,
			"primary_score":	999874,
			"second_score":	125388
		}, {
			"file":	"src/mod_setenv.c",
			"line":	216,
			"primary_score":	999874,
			"second_score":	125387
		}, {
			"file":	"src/mod_setenv.c",
			"line":	220,
			"primary_score":	999874,
			"second_score":	125281
		}, {
			"file":	"src/mod_setenv.c",
			"line":	224,
			"primary_score":	999832,
			"second_score":	21747
		}, {
			"file":	"src/mod_setenv.c",
			"line":	226,
			"primary_score":	999832,
			"second_score":	21746
		}, {
			"file":	"src/mod_setenv.c",
			"line":	228,
			"primary_score":	999832,
			"second_score":	21745
		}, {
			"file":	"src/mod_setenv.c",
			"line":	229,
			"primary_score":	999874,
			"second_score":	111581
		}, {
			"file":	"src/mod_setenv.c",
			"line":	230,
			"primary_score":	999874,
			"second_score":	111579
		}, {
			"file":	"src/mod_setenv.c",
			"line":	233,
			"primary_score":	999832,
			"second_score":	21744
		}, {
			"file":	"src/mod_setenv.c",
			"line":	239,
			"primary_score":	999832,
			"second_score":	454502
		}, {
			"file":	"src/mod_setenv.c",
			"line":	240,
			"primary_score":	999832,
			"second_score":	454501
		}, {
			"file":	"src/mod_setenv.c",
			"line":	242,
			"primary_score":	999832,
			"second_score":	454474
		}, {
			"file":	"src/mod_setenv.c",
			"line":	243,
			"primary_score":	999832,
			"second_score":	454473
		}, {
			"file":	"src/mod_setenv.c",
			"line":	244,
			"primary_score":	999832,
			"second_score":	454472
		}, {
			"file":	"src/mod_setenv.c",
			"line":	245,
			"primary_score":	999832,
			"second_score":	454471
		}, {
			"file":	"src/mod_setenv.c",
			"line":	246,
			"primary_score":	999832,
			"second_score":	454470
		}, {
			"file":	"src/mod_setenv.c",
			"line":	248,
			"primary_score":	999832,
			"second_score":	454469
		}, {
			"file":	"src/mod_setenv.c",
			"line":	250,
			"primary_score":	999832,
			"second_score":	454468
		}, {
			"file":	"src/mod_setenv.c",
			"line":	252,
			"primary_score":	999832,
			"second_score":	454467
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	41,
			"primary_score":	999840,
			"second_score":	450790
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	43,
			"primary_score":	999840,
			"second_score":	450789
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	45,
			"primary_score":	999840,
			"second_score":	450788
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	47,
			"primary_score":	999840,
			"second_score":	450787
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	450779
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	53,
			"primary_score":	999840,
			"second_score":	16707
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	55,
			"primary_score":	999840,
			"second_score":	16706
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	57,
			"primary_score":	999840,
			"second_score":	16705
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	59,
			"primary_score":	999840,
			"second_score":	16704
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	60,
			"primary_score":	999840,
			"second_score":	16703
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	61,
			"primary_score":	999840,
			"second_score":	16702
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	62,
			"primary_score":	999840,
			"second_score":	16077
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	64,
			"primary_score":	999840,
			"second_score":	16076
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	65,
			"primary_score":	999840,
			"second_score":	16072
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	66,
			"primary_score":	999840,
			"second_score":	16068
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	68,
			"primary_score":	999840,
			"second_score":	16064
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	69,
			"primary_score":	999840,
			"second_score":	16060
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	70,
			"primary_score":	999840,
			"second_score":	16056
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	72,
			"primary_score":	999840,
			"second_score":	16052
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	75,
			"primary_score":	999840,
			"second_score":	16051
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	78,
			"primary_score":	999840,
			"second_score":	16050
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	80,
			"primary_score":	999840,
			"second_score":	16046
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	82,
			"primary_score":	999840,
			"second_score":	16045
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	86,
			"primary_score":	999840,
			"second_score":	345059
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	87,
			"primary_score":	999840,
			"second_score":	345058
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	89,
			"primary_score":	999840,
			"second_score":	345057
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	97,
			"primary_score":	999840,
			"second_score":	345056
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	99,
			"primary_score":	999840,
			"second_score":	345055
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	101,
			"primary_score":	999840,
			"second_score":	345054
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	102,
			"primary_score":	999840,
			"second_score":	333600
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	104,
			"primary_score":	999840,
			"second_score":	333599
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	106,
			"primary_score":	999840,
			"second_score":	333598
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	107,
			"primary_score":	999840,
			"second_score":	333590
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	108,
			"primary_score":	999840,
			"second_score":	333582
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	110,
			"primary_score":	999840,
			"second_score":	333574
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	111,
			"primary_score":	999840,
			"second_score":	333566
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	112,
			"primary_score":	999840,
			"second_score":	333558
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	114,
			"primary_score":	999840,
			"second_score":	333550
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	116,
			"primary_score":	999840,
			"second_score":	333549
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	117,
			"primary_score":	999840,
			"second_score":	333548
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	118,
			"primary_score":	999840,
			"second_score":	333547
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	119,
			"primary_score":	999840,
			"second_score":	333546
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	122,
			"primary_score":	999840,
			"second_score":	333545
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	124,
			"primary_score":	999840,
			"second_score":	333544
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	129,
			"primary_score":	999840,
			"second_score":	333243
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	133,
			"primary_score":	999895,
			"second_score":	123103
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	135,
			"primary_score":	999895,
			"second_score":	123102
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	137,
			"primary_score":	999895,
			"second_score":	123092
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	138,
			"primary_score":	999896,
			"second_score":	123091
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	140,
			"primary_score":	999896,
			"second_score":	123077
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	144,
			"primary_score":	999896,
			"second_score":	123076
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	146,
			"primary_score":	999896,
			"second_score":	123075
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	148,
			"primary_score":	999896,
			"second_score":	123073
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	149,
			"primary_score":	999897,
			"second_score":	123072
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	154,
			"primary_score":	999896,
			"second_score":	123056
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	156,
			"primary_score":	999896,
			"second_score":	123040
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	159,
			"primary_score":	999896,
			"second_score":	123039
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	160,
			"primary_score":	999896,
			"second_score":	123023
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	167,
			"primary_score":	999895,
			"second_score":	123007
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	173,
			"primary_score":	999895,
			"second_score":	122678
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	177,
			"primary_score":	999895,
			"second_score":	122677
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	181,
			"primary_score":	999895,
			"second_score":	123396
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	182,
			"primary_score":	999895,
			"second_score":	123395
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	184,
			"primary_score":	999895,
			"second_score":	123394
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	185,
			"primary_score":	999895,
			"second_score":	123393
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	186,
			"primary_score":	999895,
			"second_score":	123392
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	188,
			"primary_score":	999895,
			"second_score":	123391
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	189,
			"primary_score":	999895,
			"second_score":	123390
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	190,
			"primary_score":	999895,
			"second_score":	123389
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	192,
			"primary_score":	999895,
			"second_score":	123388
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	195,
			"primary_score":	999895,
			"second_score":	123387
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	196,
			"primary_score":	999895,
			"second_score":	123115
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	197,
			"primary_score":	999895,
			"second_score":	123114
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	200,
			"primary_score":	999895,
			"second_score":	123113
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	203,
			"primary_score":	999895,
			"second_score":	123179
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	204,
			"primary_score":	999895,
			"second_score":	123240
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	206,
			"primary_score":	999895,
			"second_score":	123239
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	207,
			"primary_score":	999896,
			"second_score":	123244
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	208,
			"primary_score":	999896,
			"second_score":	123243
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	209,
			"primary_score":	999896,
			"second_score":	123242
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	210,
			"primary_score":	999896,
			"second_score":	123241
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	211,
			"primary_score":	999895,
			"second_score":	123232
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	212,
			"primary_score":	999896,
			"second_score":	123224
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	213,
			"primary_score":	999895,
			"second_score":	123262
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	214,
			"primary_score":	999896,
			"second_score":	123254
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	221,
			"primary_score":	999895,
			"second_score":	123106
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	225,
			"primary_score":	999895,
			"second_score":	123398
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	233,
			"primary_score":	999895,
			"second_score":	123397
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	235,
			"primary_score":	999895,
			"second_score":	123105
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	243,
			"primary_score":	999895,
			"second_score":	123104
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	254,
			"primary_score":	999959,
			"second_score":	122676
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	258,
			"primary_score":	999895,
			"second_score":	122662
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	259,
			"primary_score":	999895,
			"second_score":	122643
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	260,
			"primary_score":	999895,
			"second_score":	122624
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	262,
			"primary_score":	999895,
			"second_score":	122605
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	265,
			"primary_score":	999895,
			"second_score":	122591
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	270,
			"primary_score":	999840,
			"second_score":	453790
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	271,
			"primary_score":	999840,
			"second_score":	453789
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	273,
			"primary_score":	999840,
			"second_score":	453762
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	274,
			"primary_score":	999840,
			"second_score":	453761
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	275,
			"primary_score":	999840,
			"second_score":	453760
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	276,
			"primary_score":	999840,
			"second_score":	453759
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	278,
			"primary_score":	999840,
			"second_score":	453758
		}, {
			"file":	"src/mod_simple_vhost.c",
			"line":	280,
			"primary_score":	999840,
			"second_score":	453757
		}, {
			"file":	"src/mod_ssi.c",
			"line":	42,
			"primary_score":	999840,
			"second_score":	450451
		}, {
			"file":	"src/mod_ssi.c",
			"line":	44,
			"primary_score":	999840,
			"second_score":	450450
		}, {
			"file":	"src/mod_ssi.c",
			"line":	46,
			"primary_score":	999840,
			"second_score":	450449
		}, {
			"file":	"src/mod_ssi.c",
			"line":	48,
			"primary_score":	999840,
			"second_score":	450448
		}, {
			"file":	"src/mod_ssi.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	450440
		}, {
			"file":	"src/mod_ssi.c",
			"line":	51,
			"primary_score":	999840,
			"second_score":	450432
		}, {
			"file":	"src/mod_ssi.c",
			"line":	52,
			"primary_score":	999840,
			"second_score":	450426
		}, {
			"file":	"src/mod_ssi.c",
			"line":	54,
			"primary_score":	999840,
			"second_score":	450420
		}, {
			"file":	"src/mod_ssi.c",
			"line":	59,
			"primary_score":	999840,
			"second_score":	15321
		}, {
			"file":	"src/mod_ssi.c",
			"line":	60,
			"primary_score":	999840,
			"second_score":	15320
		}, {
			"file":	"src/mod_ssi.c",
			"line":	62,
			"primary_score":	999840,
			"second_score":	15319
		}, {
			"file":	"src/mod_ssi.c",
			"line":	64,
			"primary_score":	999840,
			"second_score":	15318
		}, {
			"file":	"src/mod_ssi.c",
			"line":	65,
			"primary_score":	999840,
			"second_score":	15317
		}, {
			"file":	"src/mod_ssi.c",
			"line":	66,
			"primary_score":	999840,
			"second_score":	15316
		}, {
			"file":	"src/mod_ssi.c",
			"line":	67,
			"primary_score":	999840,
			"second_score":	15046
		}, {
			"file":	"src/mod_ssi.c",
			"line":	69,
			"primary_score":	999840,
			"second_score":	15045
		}, {
			"file":	"src/mod_ssi.c",
			"line":	71,
			"primary_score":	999840,
			"second_score":	15037
		}, {
			"file":	"src/mod_ssi.c",
			"line":	73,
			"primary_score":	999840,
			"second_score":	15036
		}, {
			"file":	"src/mod_ssi.c",
			"line":	76,
			"primary_score":	999840,
			"second_score":	15035
		}, {
			"file":	"src/mod_ssi.c",
			"line":	77,
			"primary_score":	999840,
			"second_score":	15027
		}, {
			"file":	"src/mod_ssi.c",
			"line":	79,
			"primary_score":	999840,
			"second_score":	15019
		}, {
			"file":	"src/mod_ssi.c",
			"line":	81,
			"primary_score":	999840,
			"second_score":	15018
		}, {
			"file":	"src/mod_ssi.c",
			"line":	82,
			"primary_score":	999840,
			"second_score":	15014
		}, {
			"file":	"src/mod_ssi.c",
			"line":	84,
			"primary_score":	999840,
			"second_score":	15010
		}, {
			"file":	"src/mod_ssi.c",
			"line":	86,
			"primary_score":	999840,
			"second_score":	15009
		}, {
			"file":	"src/mod_ssi.c",
			"line":	92,
			"primary_score":	999840,
			"second_score":	312142
		}, {
			"file":	"src/mod_ssi.c",
			"line":	93,
			"primary_score":	999840,
			"second_score":	312141
		}, {
			"file":	"src/mod_ssi.c",
			"line":	95,
			"primary_score":	999840,
			"second_score":	312140
		}, {
			"file":	"src/mod_ssi.c",
			"line":	96,
			"primary_score":	999840,
			"second_score":	312139
		}, {
			"file":	"src/mod_ssi.c",
			"line":	99,
			"primary_score":	999840,
			"second_score":	312138
		}, {
			"file":	"src/mod_ssi.c",
			"line":	104,
			"primary_score":	999840,
			"second_score":	312137
		}, {
			"file":	"src/mod_ssi.c",
			"line":	106,
			"primary_score":	999840,
			"second_score":	312136
		}, {
			"file":	"src/mod_ssi.c",
			"line":	108,
			"primary_score":	999840,
			"second_score":	312135
		}, {
			"file":	"src/mod_ssi.c",
			"line":	109,
			"primary_score":	999840,
			"second_score":	309226
		}, {
			"file":	"src/mod_ssi.c",
			"line":	111,
			"primary_score":	999840,
			"second_score":	309225
		}, {
			"file":	"src/mod_ssi.c",
			"line":	112,
			"primary_score":	999840,
			"second_score":	309224
		}, {
			"file":	"src/mod_ssi.c",
			"line":	114,
			"primary_score":	999840,
			"second_score":	309218
		}, {
			"file":	"src/mod_ssi.c",
			"line":	116,
			"primary_score":	999840,
			"second_score":	309217
		}, {
			"file":	"src/mod_ssi.c",
			"line":	118,
			"primary_score":	999840,
			"second_score":	309216
		}, {
			"file":	"src/mod_ssi.c",
			"line":	125,
			"primary_score":	999840,
			"second_score":	309134
		}, {
			"file":	"src/mod_ssi.c",
			"line":	137,
			"primary_score":	999840,
			"second_score":	309133
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1014,
			"primary_score":	999914,
			"second_score":	119004
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1015,
			"primary_score":	999914,
			"second_score":	119003
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1017,
			"primary_score":	999914,
			"second_score":	119002
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1020,
			"primary_score":	999914,
			"second_score":	119001
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1021,
			"primary_score":	999914,
			"second_score":	118769
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1022,
			"primary_score":	999914,
			"second_score":	118768
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1025,
			"primary_score":	999914,
			"second_score":	118767
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1028,
			"primary_score":	999914,
			"second_score":	118833
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1029,
			"primary_score":	999914,
			"second_score":	118885
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1031,
			"primary_score":	999914,
			"second_score":	118884
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1037,
			"primary_score":	999914,
			"second_score":	118760
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1041,
			"primary_score":	999914,
			"second_score":	119008
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1042,
			"primary_score":	999914,
			"second_score":	119007
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1044,
			"primary_score":	999914,
			"second_score":	119006
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1046,
			"primary_score":	999914,
			"second_score":	119005
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1048,
			"primary_score":	999914,
			"second_score":	118759
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1049,
			"primary_score":	999914,
			"second_score":	118758
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1051,
			"primary_score":	999914,
			"second_score":	118757
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1053,
			"primary_score":	999914,
			"second_score":	118756
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1066,
			"primary_score":	999916,
			"second_score":	118750
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1072,
			"primary_score":	999840,
			"second_score":	453365
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1073,
			"primary_score":	999840,
			"second_score":	453364
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1075,
			"primary_score":	999840,
			"second_score":	453337
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1076,
			"primary_score":	999840,
			"second_score":	453336
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1077,
			"primary_score":	999840,
			"second_score":	453335
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1078,
			"primary_score":	999840,
			"second_score":	453334
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1080,
			"primary_score":	999840,
			"second_score":	453333
		}, {
			"file":	"src/mod_ssi.c",
			"line":	1082,
			"primary_score":	999840,
			"second_score":	453332
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	62,
			"primary_score":	999823,
			"second_score":	11429
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	64,
			"primary_score":	999823,
			"second_score":	11428
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	66,
			"primary_score":	999823,
			"second_score":	11427
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	68,
			"primary_score":	999823,
			"second_score":	11426
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	69,
			"primary_score":	999823,
			"second_score":	11425
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	70,
			"primary_score":	999823,
			"second_score":	11424
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	71,
			"primary_score":	999823,
			"second_score":	11183
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	73,
			"primary_score":	999823,
			"second_score":	11182
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	75,
			"primary_score":	999823,
			"second_score":	11174
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	11173
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	79,
			"primary_score":	999823,
			"second_score":	11172
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	81,
			"primary_score":	999823,
			"second_score":	11168
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	83,
			"primary_score":	999823,
			"second_score":	11162
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	11161
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	319,
			"primary_score":	999909,
			"second_score":	117802
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	320,
			"primary_score":	999909,
			"second_score":	117801
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	321,
			"primary_score":	999909,
			"second_score":	117800
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	322,
			"primary_score":	999909,
			"second_score":	117799
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	323,
			"primary_score":	999909,
			"second_score":	117798
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	324,
			"primary_score":	999909,
			"second_score":	117797
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	326,
			"primary_score":	999909,
			"second_score":	117796
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	327,
			"primary_score":	999913,
			"second_score":	117795
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	332,
			"primary_score":	999909,
			"second_score":	117742
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	333,
			"primary_score":	999909,
			"second_score":	117741
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	334,
			"primary_score":	999984,
			"second_score":	117739
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	486,
			"primary_score":	999858,
			"second_score":	115024
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	487,
			"primary_score":	999858,
			"second_score":	115023
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	489,
			"primary_score":	999858,
			"second_score":	115022
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	490,
			"primary_score":	999858,
			"second_score":	115021
		}, {
			"file":	"src/mod_staticfile.c",
			"line":	492,
			"primary_score":	999985,
			"second_score":	115019
		}, {
			"file":	"src/mod_status.c",
			"line":	62,
			"primary_score":	999832,
			"second_score":	451005
		}, {
			"file":	"src/mod_status.c",
			"line":	63,
			"primary_score":	999832,
			"second_score":	451004
		}, {
			"file":	"src/mod_status.c",
			"line":	65,
			"primary_score":	999832,
			"second_score":	451003
		}, {
			"file":	"src/mod_status.c",
			"line":	67,
			"primary_score":	999832,
			"second_score":	451002
		}, {
			"file":	"src/mod_status.c",
			"line":	69,
			"primary_score":	999832,
			"second_score":	451001
		}, {
			"file":	"src/mod_status.c",
			"line":	70,
			"primary_score":	999832,
			"second_score":	451000
		}, {
			"file":	"src/mod_status.c",
			"line":	71,
			"primary_score":	999832,
			"second_score":	450999
		}, {
			"file":	"src/mod_status.c",
			"line":	72,
			"primary_score":	999832,
			"second_score":	450998
		}, {
			"file":	"src/mod_status.c",
			"line":	73,
			"primary_score":	999832,
			"second_score":	450997
		}, {
			"file":	"src/mod_status.c",
			"line":	75,
			"primary_score":	999832,
			"second_score":	450989
		}, {
			"file":	"src/mod_status.c",
			"line":	76,
			"primary_score":	999832,
			"second_score":	450984
		}, {
			"file":	"src/mod_status.c",
			"line":	79,
			"primary_score":	999832,
			"second_score":	450983
		}, {
			"file":	"src/mod_status.c",
			"line":	83,
			"primary_score":	999832,
			"second_score":	17339
		}, {
			"file":	"src/mod_status.c",
			"line":	85,
			"primary_score":	999832,
			"second_score":	17338
		}, {
			"file":	"src/mod_status.c",
			"line":	87,
			"primary_score":	999832,
			"second_score":	17337
		}, {
			"file":	"src/mod_status.c",
			"line":	89,
			"primary_score":	999832,
			"second_score":	17336
		}, {
			"file":	"src/mod_status.c",
			"line":	91,
			"primary_score":	999832,
			"second_score":	17332
		}, {
			"file":	"src/mod_status.c",
			"line":	92,
			"primary_score":	999832,
			"second_score":	17331
		}, {
			"file":	"src/mod_status.c",
			"line":	93,
			"primary_score":	999832,
			"second_score":	17330
		}, {
			"file":	"src/mod_status.c",
			"line":	94,
			"primary_score":	999832,
			"second_score":	16993
		}, {
			"file":	"src/mod_status.c",
			"line":	96,
			"primary_score":	999832,
			"second_score":	16992
		}, {
			"file":	"src/mod_status.c",
			"line":	97,
			"primary_score":	999832,
			"second_score":	16988
		}, {
			"file":	"src/mod_status.c",
			"line":	98,
			"primary_score":	999832,
			"second_score":	16984
		}, {
			"file":	"src/mod_status.c",
			"line":	100,
			"primary_score":	999832,
			"second_score":	16980
		}, {
			"file":	"src/mod_status.c",
			"line":	102,
			"primary_score":	999832,
			"second_score":	16979
		}, {
			"file":	"src/mod_status.c",
			"line":	106,
			"primary_score":	999832,
			"second_score":	16978
		}, {
			"file":	"src/mod_status.c",
			"line":	108,
			"primary_score":	999832,
			"second_score":	16977
		}, {
			"file":	"src/mod_status.c",
			"line":	112,
			"primary_score":	999832,
			"second_score":	358491
		}, {
			"file":	"src/mod_status.c",
			"line":	113,
			"primary_score":	999832,
			"second_score":	358490
		}, {
			"file":	"src/mod_status.c",
			"line":	115,
			"primary_score":	999832,
			"second_score":	358489
		}, {
			"file":	"src/mod_status.c",
			"line":	123,
			"primary_score":	999832,
			"second_score":	358488
		}, {
			"file":	"src/mod_status.c",
			"line":	125,
			"primary_score":	999832,
			"second_score":	358487
		}, {
			"file":	"src/mod_status.c",
			"line":	127,
			"primary_score":	999832,
			"second_score":	358486
		}, {
			"file":	"src/mod_status.c",
			"line":	128,
			"primary_score":	999832,
			"second_score":	348277
		}, {
			"file":	"src/mod_status.c",
			"line":	130,
			"primary_score":	999832,
			"second_score":	348276
		}, {
			"file":	"src/mod_status.c",
			"line":	131,
			"primary_score":	999832,
			"second_score":	348275
		}, {
			"file":	"src/mod_status.c",
			"line":	132,
			"primary_score":	999832,
			"second_score":	348267
		}, {
			"file":	"src/mod_status.c",
			"line":	133,
			"primary_score":	999832,
			"second_score":	348259
		}, {
			"file":	"src/mod_status.c",
			"line":	134,
			"primary_score":	999832,
			"second_score":	348258
		}, {
			"file":	"src/mod_status.c",
			"line":	136,
			"primary_score":	999832,
			"second_score":	348250
		}, {
			"file":	"src/mod_status.c",
			"line":	137,
			"primary_score":	999832,
			"second_score":	348249
		}, {
			"file":	"src/mod_status.c",
			"line":	138,
			"primary_score":	999832,
			"second_score":	348248
		}, {
			"file":	"src/mod_status.c",
			"line":	139,
			"primary_score":	999832,
			"second_score":	348247
		}, {
			"file":	"src/mod_status.c",
			"line":	141,
			"primary_score":	999832,
			"second_score":	348246
		}, {
			"file":	"src/mod_status.c",
			"line":	143,
			"primary_score":	999832,
			"second_score":	348245
		}, {
			"file":	"src/mod_status.c",
			"line":	148,
			"primary_score":	999832,
			"second_score":	347936
		}, {
			"file":	"src/mod_status.c",
			"line":	769,
			"primary_score":	999883,
			"second_score":	124319
		}, {
			"file":	"src/mod_status.c",
			"line":	770,
			"primary_score":	999883,
			"second_score":	124318
		}, {
			"file":	"src/mod_status.c",
			"line":	772,
			"primary_score":	999883,
			"second_score":	124317
		}, {
			"file":	"src/mod_status.c",
			"line":	773,
			"primary_score":	999883,
			"second_score":	124316
		}, {
			"file":	"src/mod_status.c",
			"line":	774,
			"primary_score":	999883,
			"second_score":	124315
		}, {
			"file":	"src/mod_status.c",
			"line":	775,
			"primary_score":	999883,
			"second_score":	124314
		}, {
			"file":	"src/mod_status.c",
			"line":	778,
			"primary_score":	999883,
			"second_score":	124313
		}, {
			"file":	"src/mod_status.c",
			"line":	779,
			"primary_score":	999883,
			"second_score":	124008
		}, {
			"file":	"src/mod_status.c",
			"line":	780,
			"primary_score":	999883,
			"second_score":	124007
		}, {
			"file":	"src/mod_status.c",
			"line":	783,
			"primary_score":	999883,
			"second_score":	124006
		}, {
			"file":	"src/mod_status.c",
			"line":	786,
			"primary_score":	999885,
			"second_score":	124072
		}, {
			"file":	"src/mod_status.c",
			"line":	787,
			"primary_score":	999885,
			"second_score":	124145
		}, {
			"file":	"src/mod_status.c",
			"line":	789,
			"primary_score":	999885,
			"second_score":	124144
		}, {
			"file":	"src/mod_status.c",
			"line":	791,
			"primary_score":	999885,
			"second_score":	124137
		}, {
			"file":	"src/mod_status.c",
			"line":	793,
			"primary_score":	999885,
			"second_score":	124130
		}, {
			"file":	"src/mod_status.c",
			"line":	795,
			"primary_score":	999885,
			"second_score":	124123
		}, {
			"file":	"src/mod_status.c",
			"line":	801,
			"primary_score":	999883,
			"second_score":	123999
		}, {
			"file":	"src/mod_status.c",
			"line":	805,
			"primary_score":	999883,
			"second_score":	124321
		}, {
			"file":	"src/mod_status.c",
			"line":	807,
			"primary_score":	999883,
			"second_score":	124320
		}, {
			"file":	"src/mod_status.c",
			"line":	809,
			"primary_score":	999883,
			"second_score":	123998
		}, {
			"file":	"src/mod_status.c",
			"line":	812,
			"primary_score":	999883,
			"second_score":	123993
		}, {
			"file":	"src/mod_status.c",
			"line":	815,
			"primary_score":	999886,
			"second_score":	123988
		}, {
			"file":	"src/mod_status.c",
			"line":	820,
			"primary_score":	999886,
			"second_score":	123986
		}, {
			"file":	"src/mod_status.c",
			"line":	824,
			"primary_score":	999987,
			"second_score":	133990
		}, {
			"file":	"src/mod_status.c",
			"line":	825,
			"primary_score":	999987,
			"second_score":	133989
		}, {
			"file":	"src/mod_status.c",
			"line":	828,
			"primary_score":	999987,
			"second_score":	133988
		}, {
			"file":	"src/mod_status.c",
			"line":	835,
			"primary_score":	999987,
			"second_score":	133987
		}, {
			"file":	"src/mod_status.c",
			"line":	836,
			"primary_score":	999987,
			"second_score":	133986
		}, {
			"file":	"src/mod_status.c",
			"line":	838,
			"primary_score":	999987,
			"second_score":	133985
		}, {
			"file":	"src/mod_status.c",
			"line":	840,
			"primary_score":	999987,
			"second_score":	133984
		}, {
			"file":	"src/mod_status.c",
			"line":	841,
			"primary_score":	999987,
			"second_score":	133983
		}, {
			"file":	"src/mod_status.c",
			"line":	843,
			"primary_score":	999987,
			"second_score":	133982
		}, {
			"file":	"src/mod_status.c",
			"line":	846,
			"primary_score":	999987,
			"second_score":	133981
		}, {
			"file":	"src/mod_status.c",
			"line":	847,
			"primary_score":	999987,
			"second_score":	133980
		}, {
			"file":	"src/mod_status.c",
			"line":	849,
			"primary_score":	999987,
			"second_score":	133979
		}, {
			"file":	"src/mod_status.c",
			"line":	853,
			"primary_score":	999832,
			"second_score":	112624
		}, {
			"file":	"src/mod_status.c",
			"line":	855,
			"primary_score":	999832,
			"second_score":	112623
		}, {
			"file":	"src/mod_status.c",
			"line":	857,
			"primary_score":	999832,
			"second_score":	112622
		}, {
			"file":	"src/mod_status.c",
			"line":	858,
			"primary_score":	999832,
			"second_score":	112621
		}, {
			"file":	"src/mod_status.c",
			"line":	859,
			"primary_score":	999832,
			"second_score":	112620
		}, {
			"file":	"src/mod_status.c",
			"line":	861,
			"primary_score":	999832,
			"second_score":	112619
		}, {
			"file":	"src/mod_status.c",
			"line":	863,
			"primary_score":	999832,
			"second_score":	112618
		}, {
			"file":	"src/mod_status.c",
			"line":	867,
			"primary_score":	999832,
			"second_score":	454074
		}, {
			"file":	"src/mod_status.c",
			"line":	868,
			"primary_score":	999832,
			"second_score":	454073
		}, {
			"file":	"src/mod_status.c",
			"line":	870,
			"primary_score":	999832,
			"second_score":	454046
		}, {
			"file":	"src/mod_status.c",
			"line":	871,
			"primary_score":	999832,
			"second_score":	454045
		}, {
			"file":	"src/mod_status.c",
			"line":	872,
			"primary_score":	999832,
			"second_score":	454044
		}, {
			"file":	"src/mod_status.c",
			"line":	874,
			"primary_score":	999832,
			"second_score":	454043
		}, {
			"file":	"src/mod_status.c",
			"line":	875,
			"primary_score":	999832,
			"second_score":	454042
		}, {
			"file":	"src/mod_status.c",
			"line":	876,
			"primary_score":	999832,
			"second_score":	454041
		}, {
			"file":	"src/mod_status.c",
			"line":	878,
			"primary_score":	999832,
			"second_score":	454040
		}, {
			"file":	"src/mod_status.c",
			"line":	880,
			"primary_score":	999832,
			"second_score":	454039
		}, {
			"file":	"src/mod_userdir.c",
			"line":	40,
			"primary_score":	999840,
			"second_score":	448951
		}, {
			"file":	"src/mod_userdir.c",
			"line":	42,
			"primary_score":	999840,
			"second_score":	448950
		}, {
			"file":	"src/mod_userdir.c",
			"line":	44,
			"primary_score":	999840,
			"second_score":	448949
		}, {
			"file":	"src/mod_userdir.c",
			"line":	46,
			"primary_score":	999840,
			"second_score":	448948
		}, {
			"file":	"src/mod_userdir.c",
			"line":	47,
			"primary_score":	999840,
			"second_score":	448940
		}, {
			"file":	"src/mod_userdir.c",
			"line":	49,
			"primary_score":	999840,
			"second_score":	448932
		}, {
			"file":	"src/mod_userdir.c",
			"line":	54,
			"primary_score":	999840,
			"second_score":	13297
		}, {
			"file":	"src/mod_userdir.c",
			"line":	56,
			"primary_score":	999840,
			"second_score":	13296
		}, {
			"file":	"src/mod_userdir.c",
			"line":	58,
			"primary_score":	999840,
			"second_score":	13295
		}, {
			"file":	"src/mod_userdir.c",
			"line":	59,
			"primary_score":	999840,
			"second_score":	13294
		}, {
			"file":	"src/mod_userdir.c",
			"line":	61,
			"primary_score":	999840,
			"second_score":	13293
		}, {
			"file":	"src/mod_userdir.c",
			"line":	62,
			"primary_score":	999840,
			"second_score":	12639
		}, {
			"file":	"src/mod_userdir.c",
			"line":	64,
			"primary_score":	999840,
			"second_score":	12638
		}, {
			"file":	"src/mod_userdir.c",
			"line":	65,
			"primary_score":	999840,
			"second_score":	12630
		}, {
			"file":	"src/mod_userdir.c",
			"line":	66,
			"primary_score":	999840,
			"second_score":	12622
		}, {
			"file":	"src/mod_userdir.c",
			"line":	67,
			"primary_score":	999840,
			"second_score":	12618
		}, {
			"file":	"src/mod_userdir.c",
			"line":	69,
			"primary_score":	999840,
			"second_score":	12614
		}, {
			"file":	"src/mod_userdir.c",
			"line":	71,
			"primary_score":	999840,
			"second_score":	12613
		}, {
			"file":	"src/mod_userdir.c",
			"line":	74,
			"primary_score":	999840,
			"second_score":	12612
		}, {
			"file":	"src/mod_userdir.c",
			"line":	75,
			"primary_score":	999840,
			"second_score":	12608
		}, {
			"file":	"src/mod_userdir.c",
			"line":	77,
			"primary_score":	999840,
			"second_score":	12604
		}, {
			"file":	"src/mod_userdir.c",
			"line":	79,
			"primary_score":	999840,
			"second_score":	12603
		}, {
			"file":	"src/mod_userdir.c",
			"line":	85,
			"primary_score":	999840,
			"second_score":	249923
		}, {
			"file":	"src/mod_userdir.c",
			"line":	86,
			"primary_score":	999840,
			"second_score":	249922
		}, {
			"file":	"src/mod_userdir.c",
			"line":	88,
			"primary_score":	999840,
			"second_score":	249921
		}, {
			"file":	"src/mod_userdir.c",
			"line":	96,
			"primary_score":	999840,
			"second_score":	249920
		}, {
			"file":	"src/mod_userdir.c",
			"line":	98,
			"primary_score":	999840,
			"second_score":	249919
		}, {
			"file":	"src/mod_userdir.c",
			"line":	100,
			"primary_score":	999840,
			"second_score":	249918
		}, {
			"file":	"src/mod_userdir.c",
			"line":	101,
			"primary_score":	999840,
			"second_score":	240163
		}, {
			"file":	"src/mod_userdir.c",
			"line":	103,
			"primary_score":	999840,
			"second_score":	240162
		}, {
			"file":	"src/mod_userdir.c",
			"line":	104,
			"primary_score":	999840,
			"second_score":	240161
		}, {
			"file":	"src/mod_userdir.c",
			"line":	105,
			"primary_score":	999840,
			"second_score":	240155
		}, {
			"file":	"src/mod_userdir.c",
			"line":	106,
			"primary_score":	999840,
			"second_score":	240149
		}, {
			"file":	"src/mod_userdir.c",
			"line":	107,
			"primary_score":	999840,
			"second_score":	240141
		}, {
			"file":	"src/mod_userdir.c",
			"line":	109,
			"primary_score":	999840,
			"second_score":	240133
		}, {
			"file":	"src/mod_userdir.c",
			"line":	110,
			"primary_score":	999840,
			"second_score":	240132
		}, {
			"file":	"src/mod_userdir.c",
			"line":	111,
			"primary_score":	999840,
			"second_score":	240131
		}, {
			"file":	"src/mod_userdir.c",
			"line":	112,
			"primary_score":	999840,
			"second_score":	240130
		}, {
			"file":	"src/mod_userdir.c",
			"line":	114,
			"primary_score":	999840,
			"second_score":	240129
		}, {
			"file":	"src/mod_userdir.c",
			"line":	116,
			"primary_score":	999840,
			"second_score":	240128
		}, {
			"file":	"src/mod_userdir.c",
			"line":	121,
			"primary_score":	999840,
			"second_score":	239803
		}, {
			"file":	"src/mod_userdir.c",
			"line":	125,
			"primary_score":	999895,
			"second_score":	121452
		}, {
			"file":	"src/mod_userdir.c",
			"line":	126,
			"primary_score":	999895,
			"second_score":	121451
		}, {
			"file":	"src/mod_userdir.c",
			"line":	128,
			"primary_score":	999895,
			"second_score":	121450
		}, {
			"file":	"src/mod_userdir.c",
			"line":	129,
			"primary_score":	999895,
			"second_score":	121449
		}, {
			"file":	"src/mod_userdir.c",
			"line":	130,
			"primary_score":	999895,
			"second_score":	121448
		}, {
			"file":	"src/mod_userdir.c",
			"line":	131,
			"primary_score":	999895,
			"second_score":	121447
		}, {
			"file":	"src/mod_userdir.c",
			"line":	134,
			"primary_score":	999895,
			"second_score":	121446
		}, {
			"file":	"src/mod_userdir.c",
			"line":	135,
			"primary_score":	999895,
			"second_score":	121141
		}, {
			"file":	"src/mod_userdir.c",
			"line":	136,
			"primary_score":	999895,
			"second_score":	121140
		}, {
			"file":	"src/mod_userdir.c",
			"line":	139,
			"primary_score":	999895,
			"second_score":	121139
		}, {
			"file":	"src/mod_userdir.c",
			"line":	142,
			"primary_score":	999895,
			"second_score":	121205
		}, {
			"file":	"src/mod_userdir.c",
			"line":	143,
			"primary_score":	999895,
			"second_score":	121278
		}, {
			"file":	"src/mod_userdir.c",
			"line":	145,
			"primary_score":	999895,
			"second_score":	121277
		}, {
			"file":	"src/mod_userdir.c",
			"line":	147,
			"primary_score":	999895,
			"second_score":	121270
		}, {
			"file":	"src/mod_userdir.c",
			"line":	149,
			"primary_score":	999895,
			"second_score":	121263
		}, {
			"file":	"src/mod_userdir.c",
			"line":	151,
			"primary_score":	999895,
			"second_score":	121256
		}, {
			"file":	"src/mod_userdir.c",
			"line":	157,
			"primary_score":	999895,
			"second_score":	121132
		}, {
			"file":	"src/mod_userdir.c",
			"line":	161,
			"primary_score":	999895,
			"second_score":	121459
		}, {
			"file":	"src/mod_userdir.c",
			"line":	162,
			"primary_score":	999895,
			"second_score":	121458
		}, {
			"file":	"src/mod_userdir.c",
			"line":	163,
			"primary_score":	999895,
			"second_score":	121457
		}, {
			"file":	"src/mod_userdir.c",
			"line":	164,
			"primary_score":	999895,
			"second_score":	121456
		}, {
			"file":	"src/mod_userdir.c",
			"line":	166,
			"primary_score":	999895,
			"second_score":	121455
		}, {
			"file":	"src/mod_userdir.c",
			"line":	169,
			"primary_score":	999895,
			"second_score":	121454
		}, {
			"file":	"src/mod_userdir.c",
			"line":	171,
			"primary_score":	999895,
			"second_score":	121453
		}, {
			"file":	"src/mod_userdir.c",
			"line":	173,
			"primary_score":	999895,
			"second_score":	121131
		}, {
			"file":	"src/mod_userdir.c",
			"line":	177,
			"primary_score":	999895,
			"second_score":	121130
		}, {
			"file":	"src/mod_userdir.c",
			"line":	178,
			"primary_score":	999898,
			"second_score":	121129
		}, {
			"file":	"src/mod_userdir.c",
			"line":	283,
			"primary_score":	999840,
			"second_score":	452488
		}, {
			"file":	"src/mod_userdir.c",
			"line":	284,
			"primary_score":	999840,
			"second_score":	452487
		}, {
			"file":	"src/mod_userdir.c",
			"line":	286,
			"primary_score":	999840,
			"second_score":	452460
		}, {
			"file":	"src/mod_userdir.c",
			"line":	287,
			"primary_score":	999840,
			"second_score":	452459
		}, {
			"file":	"src/mod_userdir.c",
			"line":	288,
			"primary_score":	999840,
			"second_score":	452458
		}, {
			"file":	"src/mod_userdir.c",
			"line":	289,
			"primary_score":	999840,
			"second_score":	452457
		}, {
			"file":	"src/mod_userdir.c",
			"line":	291,
			"primary_score":	999840,
			"second_score":	452456
		}, {
			"file":	"src/mod_userdir.c",
			"line":	293,
			"primary_score":	999840,
			"second_score":	452455
		}, {
			"file":	"src/network.c",
			"line":	198,
			"primary_score":	999823,
			"second_score":	133647
		}, {
			"file":	"src/network.c",
			"line":	199,
			"primary_score":	999823,
			"second_score":	133646
		}, {
			"file":	"src/network.c",
			"line":	200,
			"primary_score":	999823,
			"second_score":	133645
		}, {
			"file":	"src/network.c",
			"line":	201,
			"primary_score":	999823,
			"second_score":	133644
		}, {
			"file":	"src/network.c",
			"line":	203,
			"primary_score":	999823,
			"second_score":	133643
		}, {
			"file":	"src/network.c",
			"line":	205,
			"primary_score":	999823,
			"second_score":	133642
		}, {
			"file":	"src/network.c",
			"line":	216,
			"primary_score":	999823,
			"second_score":	133641
		}, {
			"file":	"src/network.c",
			"line":	217,
			"primary_score":	999823,
			"second_score":	133060
		}, {
			"file":	"src/network.c",
			"line":	219,
			"primary_score":	999823,
			"second_score":	133045
		}, {
			"file":	"src/network.c",
			"line":	293,
			"primary_score":	999840,
			"second_score":	451713
		}, {
			"file":	"src/network.c",
			"line":	374,
			"primary_score":	999840,
			"second_score":	451702
		}, {
			"file":	"src/network.c",
			"line":	568,
			"primary_score":	999823,
			"second_score":	110783
		}, {
			"file":	"src/network.c",
			"line":	569,
			"primary_score":	999823,
			"second_score":	110782
		}, {
			"file":	"src/network.c",
			"line":	570,
			"primary_score":	999823,
			"second_score":	110781
		}, {
			"file":	"src/network.c",
			"line":	572,
			"primary_score":	999823,
			"second_score":	110780
		}, {
			"file":	"src/network.c",
			"line":	574,
			"primary_score":	999823,
			"second_score":	110779
		}, {
			"file":	"src/network.c",
			"line":	575,
			"primary_score":	999823,
			"second_score":	110778
		}, {
			"file":	"src/network.c",
			"line":	576,
			"primary_score":	999823,
			"second_score":	110764
		}, {
			"file":	"src/network.c",
			"line":	580,
			"primary_score":	999823,
			"second_score":	110754
		}, {
			"file":	"src/network.c",
			"line":	586,
			"primary_score":	999823,
			"second_score":	110753
		}, {
			"file":	"src/network.c",
			"line":	588,
			"primary_score":	999823,
			"second_score":	110747
		}, {
			"file":	"src/network.c",
			"line":	590,
			"primary_score":	999823,
			"second_score":	110743
		}, {
			"file":	"src/network.c",
			"line":	594,
			"primary_score":	999823,
			"second_score":	110742
		}, {
			"file":	"src/network.c",
			"line":	596,
			"primary_score":	999823,
			"second_score":	110741
		}, {
			"file":	"src/network.c",
			"line":	598,
			"primary_score":	999823,
			"second_score":	110740
		}, {
			"file":	"src/network.c",
			"line":	677,
			"primary_score":	999823,
			"second_score":	133003
		}, {
			"file":	"src/network.c",
			"line":	679,
			"primary_score":	999823,
			"second_score":	133002
		}, {
			"file":	"src/network.c",
			"line":	686,
			"primary_score":	999823,
			"second_score":	133001
		}, {
			"file":	"src/network.c",
			"line":	691,
			"primary_score":	999823,
			"second_score":	112791
		}, {
			"file":	"src/network.c",
			"line":	692,
			"primary_score":	999823,
			"second_score":	112790
		}, {
			"file":	"src/network.c",
			"line":	694,
			"primary_score":	999823,
			"second_score":	112789
		}, {
			"file":	"src/network.c",
			"line":	696,
			"primary_score":	999823,
			"second_score":	112788
		}, {
			"file":	"src/network.c",
			"line":	698,
			"primary_score":	999823,
			"second_score":	112787
		}, {
			"file":	"src/network.c",
			"line":	708,
			"primary_score":	999823,
			"second_score":	112786
		}, {
			"file":	"src/network.c",
			"line":	714,
			"primary_score":	999823,
			"second_score":	112785
		}, {
			"file":	"src/network.c",
			"line":	715,
			"primary_score":	999865,
			"second_score":	112784
		}, {
			"file":	"src/network.c",
			"line":	716,
			"primary_score":	999865,
			"second_score":	112783
		}, {
			"file":	"src/network.c",
			"line":	720,
			"primary_score":	999823,
			"second_score":	112782
		}, {
			"file":	"src/network.c",
			"line":	725,
			"primary_score":	999823,
			"second_score":	112781
		}, {
			"file":	"src/network.c",
			"line":	728,
			"primary_score":	999823,
			"second_score":	112729
		}, {
			"file":	"src/network.c",
			"line":	735,
			"primary_score":	999823,
			"second_score":	112656
		}, {
			"file":	"src/network.c",
			"line":	741,
			"primary_score":	999823,
			"second_score":	112655
		}, {
			"file":	"src/network.c",
			"line":	742,
			"primary_score":	999865,
			"second_score":	112654
		}, {
			"file":	"src/network.c",
			"line":	743,
			"primary_score":	999865,
			"second_score":	112653
		}, {
			"file":	"src/network.c",
			"line":	747,
			"primary_score":	999823,
			"second_score":	112652
		}, {
			"file":	"src/network.c",
			"line":	748,
			"primary_score":	999823,
			"second_score":	112651
		}, {
			"file":	"src/network.c",
			"line":	749,
			"primary_score":	999823,
			"second_score":	112650
		}, {
			"file":	"src/network.c",
			"line":	751,
			"primary_score":	999823,
			"second_score":	112649
		}, {
			"file":	"src/network.c",
			"line":	753,
			"primary_score":	999823,
			"second_score":	112648
		}, {
			"file":	"src/network.c",
			"line":	760,
			"primary_score":	999823,
			"second_score":	112647
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	35,
			"primary_score":	999823,
			"second_score":	112780
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	36,
			"primary_score":	999823,
			"second_score":	112779
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	38,
			"primary_score":	999823,
			"second_score":	112778
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	39,
			"primary_score":	999823,
			"second_score":	112777
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	40,
			"primary_score":	999823,
			"second_score":	112776
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	42,
			"primary_score":	999823,
			"second_score":	112775
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	112740
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	112736
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	51,
			"primary_score":	999823,
			"second_score":	112735
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	52,
			"primary_score":	999912,
			"second_score":	112734
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	54,
			"primary_score":	999823,
			"second_score":	112737
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	61,
			"primary_score":	999823,
			"second_score":	112733
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	65,
			"primary_score":	999823,
			"second_score":	112732
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	182,
			"primary_score":	999823,
			"second_score":	112731
		}, {
			"file":	"src/network_linux_sendfile.c",
			"line":	189,
			"primary_score":	999823,
			"second_score":	112730
		}, {
			"file":	"src/network_write.c",
			"line":	38,
			"primary_score":	999823,
			"second_score":	113206
		}, {
			"file":	"src/network_write.c",
			"line":	39,
			"primary_score":	999823,
			"second_score":	113205
		}, {
			"file":	"src/network_write.c",
			"line":	40,
			"primary_score":	999823,
			"second_score":	113204
		}, {
			"file":	"src/network_write.c",
			"line":	41,
			"primary_score":	999823,
			"second_score":	113203
		}, {
			"file":	"src/network_write.c",
			"line":	46,
			"primary_score":	999823,
			"second_score":	113202
		}, {
			"file":	"src/network_write.c",
			"line":	48,
			"primary_score":	999823,
			"second_score":	113201
		}, {
			"file":	"src/network_write.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	113200
		}, {
			"file":	"src/network_write.c",
			"line":	51,
			"primary_score":	999823,
			"second_score":	113199
		}, {
			"file":	"src/network_write.c",
			"line":	54,
			"primary_score":	999823,
			"second_score":	113198
		}, {
			"file":	"src/network_write.c",
			"line":	55,
			"primary_score":	999823,
			"second_score":	113197
		}, {
			"file":	"src/network_write.c",
			"line":	57,
			"primary_score":	999823,
			"second_score":	113196
		}, {
			"file":	"src/network_write.c",
			"line":	59,
			"primary_score":	999823,
			"second_score":	113152
		}, {
			"file":	"src/network_write.c",
			"line":	61,
			"primary_score":	999823,
			"second_score":	113142
		}, {
			"file":	"src/network_write.c",
			"line":	62,
			"primary_score":	999984,
			"second_score":	117565
		}, {
			"file":	"src/network_write.c",
			"line":	66,
			"primary_score":	999984,
			"second_score":	117516
		}, {
			"file":	"src/network_write.c",
			"line":	76,
			"primary_score":	999823,
			"second_score":	113141
		}, {
			"file":	"src/network_write.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	113140
		}, {
			"file":	"src/network_write.c",
			"line":	78,
			"primary_score":	999823,
			"second_score":	113091
		}, {
			"file":	"src/network_write.c",
			"line":	81,
			"primary_score":	999823,
			"second_score":	117240
		}, {
			"file":	"src/network_write.c",
			"line":	83,
			"primary_score":	999823,
			"second_score":	117239
		}, {
			"file":	"src/network_write.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	117238
		}, {
			"file":	"src/network_write.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	117237
		}, {
			"file":	"src/network_write.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	117236
		}, {
			"file":	"src/network_write.c",
			"line":	90,
			"primary_score":	999823,
			"second_score":	117235
		}, {
			"file":	"src/network_writev.c",
			"line":	60,
			"primary_score":	999823,
			"second_score":	112774
		}, {
			"file":	"src/network_writev.c",
			"line":	61,
			"primary_score":	999823,
			"second_score":	112773
		}, {
			"file":	"src/network_writev.c",
			"line":	62,
			"primary_score":	999823,
			"second_score":	112772
		}, {
			"file":	"src/network_writev.c",
			"line":	64,
			"primary_score":	999823,
			"second_score":	112771
		}, {
			"file":	"src/network_writev.c",
			"line":	65,
			"primary_score":	999823,
			"second_score":	112770
		}, {
			"file":	"src/network_writev.c",
			"line":	66,
			"primary_score":	999823,
			"second_score":	112769
		}, {
			"file":	"src/network_writev.c",
			"line":	67,
			"primary_score":	999823,
			"second_score":	112768
		}, {
			"file":	"src/network_writev.c",
			"line":	69,
			"primary_score":	999823,
			"second_score":	112767
		}, {
			"file":	"src/network_writev.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	112766
		}, {
			"file":	"src/network_writev.c",
			"line":	79,
			"primary_score":	999823,
			"second_score":	112765
		}, {
			"file":	"src/network_writev.c",
			"line":	80,
			"primary_score":	999823,
			"second_score":	112757
		}, {
			"file":	"src/network_writev.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	112756
		}, {
			"file":	"src/network_writev.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	112755
		}, {
			"file":	"src/network_writev.c",
			"line":	87,
			"primary_score":	999823,
			"second_score":	112754
		}, {
			"file":	"src/network_writev.c",
			"line":	90,
			"primary_score":	999823,
			"second_score":	112753
		}, {
			"file":	"src/network_writev.c",
			"line":	97,
			"primary_score":	999823,
			"second_score":	112752
		}, {
			"file":	"src/network_writev.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	112751
		}, {
			"file":	"src/network_writev.c",
			"line":	104,
			"primary_score":	999823,
			"second_score":	112750
		}, {
			"file":	"src/network_writev.c",
			"line":	121,
			"primary_score":	999823,
			"second_score":	112749
		}, {
			"file":	"src/network_writev.c",
			"line":	125,
			"primary_score":	999823,
			"second_score":	112748
		}, {
			"file":	"src/network_writev.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	112744
		}, {
			"file":	"src/network_writev.c",
			"line":	128,
			"primary_score":	999823,
			"second_score":	112743
		}, {
			"file":	"src/network_writev.c",
			"line":	129,
			"primary_score":	999823,
			"second_score":	112742
		}, {
			"file":	"src/network_writev.c",
			"line":	140,
			"primary_score":	999823,
			"second_score":	112741
		}, {
			"file":	"src/plugin.c",
			"line":	66,
			"primary_score":	999823,
			"second_score":	10451
		}, {
			"file":	"src/plugin.c",
			"line":	68,
			"primary_score":	999823,
			"second_score":	10450
		}, {
			"file":	"src/plugin.c",
			"line":	70,
			"primary_score":	999823,
			"second_score":	10445
		}, {
			"file":	"src/plugin.c",
			"line":	74,
			"primary_score":	999823,
			"second_score":	10437
		}, {
			"file":	"src/plugin.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	10425
		}, {
			"file":	"src/plugin.c",
			"line":	81,
			"primary_score":	999823,
			"second_score":	10424
		}, {
			"file":	"src/plugin.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	10423
		}, {
			"file":	"src/plugin.c",
			"line":	323,
			"primary_score":	999840,
			"second_score":	452935
		}, {
			"file":	"src/plugin.c",
			"line":	325,
			"primary_score":	999840,
			"second_score":	452934
		}, {
			"file":	"src/plugin.c",
			"line":	326,
			"primary_score":	999840,
			"second_score":	452889
		}, {
			"file":	"src/plugin.c",
			"line":	328,
			"primary_score":	999840,
			"second_score":	452888
		}, {
			"file":	"src/plugin.c",
			"line":	331,
			"primary_score":	999840,
			"second_score":	452883
		}, {
			"file":	"src/plugin.c",
			"line":	382,
			"primary_score":	999890,
			"second_score":	123662
		}, {
			"file":	"src/plugin.c",
			"line":	383,
			"primary_score":	999866,
			"second_score":	127168
		}, {
			"file":	"src/plugin.c",
			"line":	384,
			"primary_score":	999895,
			"second_score":	123402
		}, {
			"file":	"src/plugin.c",
			"line":	385,
			"primary_score":	999893,
			"second_score":	121128
		}, {
			"file":	"src/plugin.c",
			"line":	386,
			"primary_score":	999981,
			"second_score":	117738
		}, {
			"file":	"src/plugin.c",
			"line":	387,
			"primary_score":	999984,
			"second_score":	117512
		}, {
			"file":	"src/plugin.c",
			"line":	388,
			"primary_score":	999833,
			"second_score":	114313
		}, {
			"file":	"src/plugin.c",
			"line":	389,
			"primary_score":	999985,
			"second_score":	113007
		}, {
			"file":	"src/plugin.c",
			"line":	390,
			"primary_score":	999823,
			"second_score":	112952
		}, {
			"file":	"src/plugin.c",
			"line":	391,
			"primary_score":	999840,
			"second_score":	111648
		}, {
			"file":	"src/plugin.c",
			"line":	392,
			"primary_score":	999827,
			"second_score":	112628
		}, {
			"file":	"src/plugin.c",
			"line":	393,
			"primary_score":	999823,
			"second_score":	110829
		}, {
			"file":	"src/plugin.c",
			"line":	394,
			"primary_score":	999823,
			"second_score":	21763
		}, {
			"file":	"src/plugin.c",
			"line":	432,
			"primary_score":	999987,
			"second_score":	133999
		}, {
			"file":	"src/plugin.c",
			"line":	434,
			"primary_score":	999823,
			"second_score":	21064
		}, {
			"file":	"src/plugin.c",
			"line":	512,
			"primary_score":	999832,
			"second_score":	450763
		}, {
			"file":	"src/plugin.c",
			"line":	513,
			"primary_score":	999832,
			"second_score":	451449
		}, {
			"file":	"src/plugin.c",
			"line":	514,
			"primary_score":	999840,
			"second_score":	450868
		}, {
			"file":	"src/plugin.c",
			"line":	515,
			"primary_score":	999840,
			"second_score":	449053
		}, {
			"file":	"src/plugin.c",
			"line":	517,
			"primary_score":	999840,
			"second_score":	448594
		}, {
			"file":	"src/plugin.c",
			"line":	518,
			"primary_score":	999828,
			"second_score":	448444
		}, {
			"file":	"src/plugin.c",
			"line":	519,
			"primary_score":	999840,
			"second_score":	450368
		}, {
			"file":	"src/plugin.c",
			"line":	521,
			"primary_score":	999840,
			"second_score":	448905
		}, {
			"file":	"src/plugin.c",
			"line":	522,
			"primary_score":	999840,
			"second_score":	450357
		}, {
			"file":	"src/plugin.c",
			"line":	525,
			"primary_score":	999832,
			"second_score":	448411
		}, {
			"file":	"src/plugin.c",
			"line":	528,
			"primary_score":	999840,
			"second_score":	449243
		}, {
			"file":	"src/plugin.c",
			"line":	529,
			"primary_score":	999835,
			"second_score":	448813
		}, {
			"file":	"src/plugin.c",
			"line":	559,
			"primary_score":	999840,
			"second_score":	449583
		}, {
			"file":	"src/plugin.c",
			"line":	561,
			"primary_score":	999840,
			"second_score":	449582
		}, {
			"file":	"src/plugin.c",
			"line":	562,
			"primary_score":	999840,
			"second_score":	449493
		}, {
			"file":	"src/plugin.c",
			"line":	564,
			"primary_score":	999840,
			"second_score":	449492
		}, {
			"file":	"src/plugin.c",
			"line":	565,
			"primary_score":	999840,
			"second_score":	449484
		}, {
			"file":	"src/plugin.c",
			"line":	573,
			"primary_score":	999823,
			"second_score":	21066
		}, {
			"file":	"src/plugin.c",
			"line":	574,
			"primary_score":	999823,
			"second_score":	21065
		}, {
			"file":	"src/plugin.c",
			"line":	576,
			"primary_score":	999823,
			"second_score":	11072
		}, {
			"file":	"src/plugin.c",
			"line":	577,
			"primary_score":	999823,
			"second_score":	10453
		}, {
			"file":	"src/plugin.c",
			"line":	579,
			"primary_score":	999823,
			"second_score":	10452
		}, {
			"file":	"src/plugin.c",
			"line":	582,
			"primary_score":	999823,
			"second_score":	10422
		}, {
			"file":	"src/plugin.c",
			"line":	583,
			"primary_score":	999823,
			"second_score":	10370
		}, {
			"file":	"src/plugin.c",
			"line":	585,
			"primary_score":	999823,
			"second_score":	10369
		}, {
			"file":	"src/plugin.c",
			"line":	588,
			"primary_score":	999823,
			"second_score":	10367
		}, {
			"file":	"src/plugin.c",
			"line":	589,
			"primary_score":	999823,
			"second_score":	10366
		}, {
			"file":	"src/plugin.c",
			"line":	591,
			"primary_score":	999823,
			"second_score":	10365
		}, {
			"file":	"src/plugin.c",
			"line":	592,
			"primary_score":	999823,
			"second_score":	10364
		}, {
			"file":	"src/plugin.c",
			"line":	593,
			"primary_score":	999823,
			"second_score":	10363
		}, {
			"file":	"src/request.c",
			"line":	18,
			"primary_score":	999905,
			"second_score":	130320
		}, {
			"file":	"src/request.c",
			"line":	19,
			"primary_score":	999905,
			"second_score":	130319
		}, {
			"file":	"src/request.c",
			"line":	20,
			"primary_score":	999905,
			"second_score":	130318
		}, {
			"file":	"src/request.c",
			"line":	21,
			"primary_score":	999905,
			"second_score":	130317
		}, {
			"file":	"src/request.c",
			"line":	22,
			"primary_score":	999905,
			"second_score":	130316
		}, {
			"file":	"src/request.c",
			"line":	23,
			"primary_score":	999905,
			"second_score":	130315
		}, {
			"file":	"src/request.c",
			"line":	24,
			"primary_score":	999905,
			"second_score":	130314
		}, {
			"file":	"src/request.c",
			"line":	38,
			"primary_score":	999905,
			"second_score":	130313
		}, {
			"file":	"src/request.c",
			"line":	39,
			"primary_score":	999905,
			"second_score":	130311
		}, {
			"file":	"src/request.c",
			"line":	41,
			"primary_score":	999905,
			"second_score":	130310
		}, {
			"file":	"src/request.c",
			"line":	44,
			"primary_score":	999905,
			"second_score":	130309
		}, {
			"file":	"src/request.c",
			"line":	75,
			"primary_score":	999907,
			"second_score":	130308
		}, {
			"file":	"src/request.c",
			"line":	88,
			"primary_score":	999910,
			"second_score":	130307
		}, {
			"file":	"src/request.c",
			"line":	91,
			"primary_score":	999910,
			"second_score":	130306
		}, {
			"file":	"src/request.c",
			"line":	92,
			"primary_score":	999910,
			"second_score":	130150
		}, {
			"file":	"src/request.c",
			"line":	94,
			"primary_score":	999910,
			"second_score":	130149
		}, {
			"file":	"src/request.c",
			"line":	98,
			"primary_score":	999917,
			"second_score":	130267
		}, {
			"file":	"src/request.c",
			"line":	99,
			"primary_score":	999918,
			"second_score":	130266
		}, {
			"file":	"src/request.c",
			"line":	104,
			"primary_score":	999918,
			"second_score":	130265
		}, {
			"file":	"src/request.c",
			"line":	105,
			"primary_score":	999922,
			"second_score":	130264
		}, {
			"file":	"src/request.c",
			"line":	117,
			"primary_score":	999918,
			"second_score":	130261
		}, {
			"file":	"src/request.c",
			"line":	119,
			"primary_score":	999918,
			"second_score":	130260
		}, {
			"file":	"src/request.c",
			"line":	120,
			"primary_score":	999918,
			"second_score":	130259
		}, {
			"file":	"src/request.c",
			"line":	125,
			"primary_score":	999911,
			"second_score":	130278
		}, {
			"file":	"src/request.c",
			"line":	132,
			"primary_score":	999911,
			"second_score":	130277
		}, {
			"file":	"src/request.c",
			"line":	135,
			"primary_score":	999911,
			"second_score":	130272
		}, {
			"file":	"src/request.c",
			"line":	136,
			"primary_score":	999915,
			"second_score":	130294
		}, {
			"file":	"src/request.c",
			"line":	138,
			"primary_score":	999911,
			"second_score":	130271
		}, {
			"file":	"src/request.c",
			"line":	141,
			"primary_score":	999911,
			"second_score":	130258
		}, {
			"file":	"src/request.c",
			"line":	157,
			"primary_score":	999922,
			"second_score":	130148
		}, {
			"file":	"src/request.c",
			"line":	158,
			"primary_score":	999924,
			"second_score":	130177
		}, {
			"file":	"src/request.c",
			"line":	163,
			"primary_score":	999924,
			"second_score":	130176
		}, {
			"file":	"src/request.c",
			"line":	167,
			"primary_score":	999924,
			"second_score":	130175
		}, {
			"file":	"src/request.c",
			"line":	168,
			"primary_score":	999924,
			"second_score":	130174
		}, {
			"file":	"src/request.c",
			"line":	169,
			"primary_score":	999922,
			"second_score":	130147
		}, {
			"file":	"src/request.c",
			"line":	170,
			"primary_score":	999927,
			"second_score":	130146
		}, {
			"file":	"src/request.c",
			"line":	173,
			"primary_score":	999928,
			"second_score":	130141
		}, {
			"file":	"src/request.c",
			"line":	175,
			"primary_score":	999922,
			"second_score":	130157
		}, {
			"file":	"src/request.c",
			"line":	178,
			"primary_score":	999922,
			"second_score":	130152
		}, {
			"file":	"src/request.c",
			"line":	182,
			"primary_score":	999918,
			"second_score":	130140
		}, {
			"file":	"src/request.c",
			"line":	187,
			"primary_score":	999916,
			"second_score":	130139
		}, {
			"file":	"src/request.c",
			"line":	191,
			"primary_score":	999917,
			"second_score":	130138
		}, {
			"file":	"src/request.c",
			"line":	195,
			"primary_score":	999919,
			"second_score":	130137
		}, {
			"file":	"src/request.c",
			"line":	203,
			"primary_score":	999988,
			"second_score":	129966
		}, {
			"file":	"src/request.c",
			"line":	204,
			"primary_score":	999988,
			"second_score":	129965
		}, {
			"file":	"src/request.c",
			"line":	205,
			"primary_score":	999988,
			"second_score":	129964
		}, {
			"file":	"src/request.c",
			"line":	214,
			"primary_score":	999988,
			"second_score":	129963
		}, {
			"file":	"src/request.c",
			"line":	216,
			"primary_score":	999988,
			"second_score":	129962
		}, {
			"file":	"src/request.c",
			"line":	218,
			"primary_score":	999988,
			"second_score":	129961
		}, {
			"file":	"src/request.c",
			"line":	219,
			"primary_score":	999988,
			"second_score":	129955
		}, {
			"file":	"src/request.c",
			"line":	220,
			"primary_score":	999988,
			"second_score":	129954
		}, {
			"file":	"src/request.c",
			"line":	222,
			"primary_score":	999988,
			"second_score":	129953
		}, {
			"file":	"src/request.c",
			"line":	229,
			"primary_score":	999988,
			"second_score":	129957
		}, {
			"file":	"src/request.c",
			"line":	230,
			"primary_score":	999988,
			"second_score":	129956
		}, {
			"file":	"src/request.c",
			"line":	234,
			"primary_score":	999988,
			"second_score":	129952
		}, {
			"file":	"src/request.c",
			"line":	235,
			"primary_score":	999988,
			"second_score":	129951
		}, {
			"file":	"src/request.c",
			"line":	237,
			"primary_score":	999988,
			"second_score":	129950
		}, {
			"file":	"src/request.c",
			"line":	239,
			"primary_score":	999988,
			"second_score":	129949
		}, {
			"file":	"src/request.c",
			"line":	240,
			"primary_score":	999988,
			"second_score":	129944
		}, {
			"file":	"src/request.c",
			"line":	243,
			"primary_score":	999988,
			"second_score":	129917
		}, {
			"file":	"src/request.c",
			"line":	244,
			"primary_score":	999988,
			"second_score":	129901
		}, {
			"file":	"src/request.c",
			"line":	246,
			"primary_score":	999988,
			"second_score":	129837
		}, {
			"file":	"src/request.c",
			"line":	253,
			"primary_score":	999988,
			"second_score":	129836
		}, {
			"file":	"src/request.c",
			"line":	255,
			"primary_score":	999988,
			"second_score":	129835
		}, {
			"file":	"src/request.c",
			"line":	261,
			"primary_score":	999988,
			"second_score":	129834
		}, {
			"file":	"src/request.c",
			"line":	273,
			"primary_score":	999830,
			"second_score":	130445
		}, {
			"file":	"src/request.c",
			"line":	274,
			"primary_score":	999830,
			"second_score":	130444
		}, {
			"file":	"src/request.c",
			"line":	276,
			"primary_score":	999830,
			"second_score":	130443
		}, {
			"file":	"src/request.c",
			"line":	281,
			"primary_score":	999835,
			"second_score":	130442
		}, {
			"file":	"src/request.c",
			"line":	286,
			"primary_score":	999836,
			"second_score":	130441
		}, {
			"file":	"src/request.c",
			"line":	294,
			"primary_score":	999836,
			"second_score":	130439
		}, {
			"file":	"src/request.c",
			"line":	295,
			"primary_score":	999836,
			"second_score":	130420
		}, {
			"file":	"src/request.c",
			"line":	296,
			"primary_score":	999839,
			"second_score":	130419
		}, {
			"file":	"src/request.c",
			"line":	333,
			"primary_score":	999836,
			"second_score":	130400
		}, {
			"file":	"src/request.c",
			"line":	334,
			"primary_score":	999836,
			"second_score":	130399
		}, {
			"file":	"src/request.c",
			"line":	336,
			"primary_score":	999836,
			"second_score":	130398
		}, {
			"file":	"src/request.c",
			"line":	337,
			"primary_score":	999874,
			"second_score":	130011
		}, {
			"file":	"src/request.c",
			"line":	338,
			"primary_score":	999874,
			"second_score":	130010
		}, {
			"file":	"src/request.c",
			"line":	339,
			"primary_score":	999874,
			"second_score":	130009
		}, {
			"file":	"src/request.c",
			"line":	342,
			"primary_score":	999874,
			"second_score":	130008
		}, {
			"file":	"src/request.c",
			"line":	343,
			"primary_score":	999988,
			"second_score":	129976
		}, {
			"file":	"src/request.c",
			"line":	344,
			"primary_score":	999988,
			"second_score":	129975
		}, {
			"file":	"src/request.c",
			"line":	347,
			"primary_score":	999988,
			"second_score":	129974
		}, {
			"file":	"src/request.c",
			"line":	349,
			"primary_score":	999988,
			"second_score":	129973
		}, {
			"file":	"src/request.c",
			"line":	350,
			"primary_score":	999988,
			"second_score":	129967
		}, {
			"file":	"src/request.c",
			"line":	352,
			"primary_score":	999988,
			"second_score":	129833
		}, {
			"file":	"src/request.c",
			"line":	353,
			"primary_score":	999988,
			"second_score":	129832
		}, {
			"file":	"src/request.c",
			"line":	355,
			"primary_score":	999988,
			"second_score":	129831
		}, {
			"file":	"src/request.c",
			"line":	359,
			"primary_score":	999989,
			"second_score":	129814
		}, {
			"file":	"src/request.c",
			"line":	360,
			"primary_score":	999989,
			"second_score":	129792
		}, {
			"file":	"src/request.c",
			"line":	362,
			"primary_score":	999989,
			"second_score":	129791
		}, {
			"file":	"src/request.c",
			"line":	365,
			"primary_score":	999875,
			"second_score":	130377
		}, {
			"file":	"src/request.c",
			"line":	407,
			"primary_score":	999880,
			"second_score":	130358
		}, {
			"file":	"src/request.c",
			"line":	428,
			"primary_score":	999880,
			"second_score":	130341
		}, {
			"file":	"src/request.c",
			"line":	429,
			"primary_score":	999907,
			"second_score":	130321
		}, {
			"file":	"src/request.c",
			"line":	437,
			"primary_score":	999919,
			"second_score":	130136
		}, {
			"file":	"src/request.c",
			"line":	444,
			"primary_score":	999919,
			"second_score":	130134
		}, {
			"file":	"src/request.c",
			"line":	484,
			"primary_score":	999888,
			"second_score":	129790
		}, {
			"file":	"src/request.c",
			"line":	485,
			"primary_score":	999889,
			"second_score":	129783
		}, {
			"file":	"src/request.c",
			"line":	488,
			"primary_score":	999888,
			"second_score":	129756
		}, {
			"file":	"src/request.c",
			"line":	489,
			"primary_score":	999888,
			"second_score":	129737
		}, {
			"file":	"src/request.c",
			"line":	491,
			"primary_score":	999888,
			"second_score":	129718
		}, {
			"file":	"src/request.c",
			"line":	495,
			"primary_score":	999850,
			"second_score":	129648
		}, {
			"file":	"src/request.c",
			"line":	499,
			"primary_score":	999850,
			"second_score":	129647
		}, {
			"file":	"src/request.c",
			"line":	524,
			"primary_score":	999859,
			"second_score":	129646
		}, {
			"file":	"src/request.c",
			"line":	530,
			"primary_score":	999859,
			"second_score":	129645
		}, {
			"file":	"src/request.c",
			"line":	534,
			"primary_score":	999852,
			"second_score":	129644
		}, {
			"file":	"src/request.c",
			"line":	548,
			"primary_score":	999861,
			"second_score":	129643
		}, {
			"file":	"src/request.c",
			"line":	571,
			"primary_score":	999856,
			"second_score":	129642
		}, {
			"file":	"src/request.c",
			"line":	588,
			"primary_score":	999857,
			"second_score":	129641
		}, {
			"file":	"src/response.c",
			"line":	32,
			"primary_score":	999823,
			"second_score":	114302
		}, {
			"file":	"src/response.c",
			"line":	33,
			"primary_score":	999823,
			"second_score":	114301
		}, {
			"file":	"src/response.c",
			"line":	34,
			"primary_score":	999823,
			"second_score":	114300
		}, {
			"file":	"src/response.c",
			"line":	35,
			"primary_score":	999823,
			"second_score":	114299
		}, {
			"file":	"src/response.c",
			"line":	36,
			"primary_score":	999823,
			"second_score":	114298
		}, {
			"file":	"src/response.c",
			"line":	38,
			"primary_score":	999823,
			"second_score":	114297
		}, {
			"file":	"src/response.c",
			"line":	40,
			"primary_score":	999823,
			"second_score":	114274
		}, {
			"file":	"src/response.c",
			"line":	43,
			"primary_score":	999832,
			"second_score":	114273
		}, {
			"file":	"src/response.c",
			"line":	45,
			"primary_score":	999823,
			"second_score":	114257
		}, {
			"file":	"src/response.c",
			"line":	46,
			"primary_score":	999823,
			"second_score":	114227
		}, {
			"file":	"src/response.c",
			"line":	47,
			"primary_score":	999823,
			"second_score":	114214
		}, {
			"file":	"src/response.c",
			"line":	49,
			"primary_score":	999823,
			"second_score":	114193
		}, {
			"file":	"src/response.c",
			"line":	52,
			"primary_score":	999823,
			"second_score":	114192
		}, {
			"file":	"src/response.c",
			"line":	60,
			"primary_score":	999973,
			"second_score":	114190
		}, {
			"file":	"src/response.c",
			"line":	62,
			"primary_score":	999823,
			"second_score":	114189
		}, {
			"file":	"src/response.c",
			"line":	63,
			"primary_score":	999823,
			"second_score":	114188
		}, {
			"file":	"src/response.c",
			"line":	66,
			"primary_score":	999823,
			"second_score":	114187
		}, {
			"file":	"src/response.c",
			"line":	72,
			"primary_score":	999823,
			"second_score":	113870
		}, {
			"file":	"src/response.c",
			"line":	73,
			"primary_score":	999823,
			"second_score":	113640
		}, {
			"file":	"src/response.c",
			"line":	75,
			"primary_score":	999823,
			"second_score":	113639
		}, {
			"file":	"src/response.c",
			"line":	77,
			"primary_score":	999823,
			"second_score":	113638
		}, {
			"file":	"src/response.c",
			"line":	80,
			"primary_score":	999823,
			"second_score":	113637
		}, {
			"file":	"src/response.c",
			"line":	81,
			"primary_score":	999823,
			"second_score":	113630
		}, {
			"file":	"src/response.c",
			"line":	83,
			"primary_score":	999823,
			"second_score":	113623
		}, {
			"file":	"src/response.c",
			"line":	84,
			"primary_score":	999823,
			"second_score":	113610
		}, {
			"file":	"src/response.c",
			"line":	85,
			"primary_score":	999823,
			"second_score":	113594
		}, {
			"file":	"src/response.c",
			"line":	86,
			"primary_score":	999823,
			"second_score":	113581
		}, {
			"file":	"src/response.c",
			"line":	94,
			"primary_score":	999823,
			"second_score":	113565
		}, {
			"file":	"src/response.c",
			"line":	96,
			"primary_score":	999823,
			"second_score":	113564
		}, {
			"file":	"src/response.c",
			"line":	99,
			"primary_score":	999823,
			"second_score":	113551
		}, {
			"file":	"src/response.c",
			"line":	100,
			"primary_score":	999823,
			"second_score":	113550
		}, {
			"file":	"src/response.c",
			"line":	102,
			"primary_score":	999823,
			"second_score":	113540
		}, {
			"file":	"src/response.c",
			"line":	105,
			"primary_score":	999823,
			"second_score":	113539
		}, {
			"file":	"src/response.c",
			"line":	107,
			"primary_score":	999823,
			"second_score":	113538
		}, {
			"file":	"src/response.c",
			"line":	110,
			"primary_score":	999823,
			"second_score":	113537
		}, {
			"file":	"src/response.c",
			"line":	113,
			"primary_score":	999823,
			"second_score":	113521
		}, {
			"file":	"src/response.c",
			"line":	114,
			"primary_score":	999823,
			"second_score":	113520
		}, {
			"file":	"src/response.c",
			"line":	117,
			"primary_score":	999835,
			"second_score":	113518
		}, {
			"file":	"src/response.c",
			"line":	118,
			"primary_score":	999835,
			"second_score":	113501
		}, {
			"file":	"src/response.c",
			"line":	122,
			"primary_score":	999823,
			"second_score":	113485
		}, {
			"file":	"src/response.c",
			"line":	125,
			"primary_score":	999823,
			"second_score":	113472
		}, {
			"file":	"src/response.c",
			"line":	126,
			"primary_score":	999823,
			"second_score":	113471
		}, {
			"file":	"src/response.c",
			"line":	128,
			"primary_score":	999823,
			"second_score":	113470
		}, {
			"file":	"src/response.c",
			"line":	129,
			"primary_score":	999840,
			"second_score":	113469
		}, {
			"file":	"src/response.c",
			"line":	132,
			"primary_score":	999823,
			"second_score":	113249
		}, {
			"file":	"src/response.c",
			"line":	138,
			"primary_score":	999857,
			"second_score":	120444
		}, {
			"file":	"src/response.c",
			"line":	141,
			"primary_score":	999857,
			"second_score":	120443
		}, {
			"file":	"src/response.c",
			"line":	149,
			"primary_score":	999857,
			"second_score":	120442
		}, {
			"file":	"src/response.c",
			"line":	150,
			"primary_score":	999857,
			"second_score":	129566
		}, {
			"file":	"src/response.c",
			"line":	164,
			"primary_score":	999857,
			"second_score":	129565
		}, {
			"file":	"src/response.c",
			"line":	167,
			"primary_score":	999857,
			"second_score":	129564
		}, {
			"file":	"src/response.c",
			"line":	191,
			"primary_score":	999857,
			"second_score":	129463
		}, {
			"file":	"src/response.c",
			"line":	192,
			"primary_score":	999857,
			"second_score":	129446
		}, {
			"file":	"src/response.c",
			"line":	193,
			"primary_score":	999857,
			"second_score":	129427
		}, {
			"file":	"src/response.c",
			"line":	195,
			"primary_score":	999857,
			"second_score":	129407
		}, {
			"file":	"src/response.c",
			"line":	196,
			"primary_score":	999857,
			"second_score":	128307
		}, {
			"file":	"src/response.c",
			"line":	197,
			"primary_score":	999857,
			"second_score":	128139
		}, {
			"file":	"src/response.c",
			"line":	198,
			"primary_score":	999857,
			"second_score":	127923
		}, {
			"file":	"src/response.c",
			"line":	199,
			"primary_score":	999857,
			"second_score":	127822
		}, {
			"file":	"src/response.c",
			"line":	200,
			"primary_score":	999857,
			"second_score":	127631
		}, {
			"file":	"src/response.c",
			"line":	203,
			"primary_score":	999857,
			"second_score":	127530
		}, {
			"file":	"src/response.c",
			"line":	209,
			"primary_score":	999857,
			"second_score":	127529
		}, {
			"file":	"src/response.c",
			"line":	210,
			"primary_score":	999984,
			"second_score":	127528
		}, {
			"file":	"src/response.c",
			"line":	211,
			"primary_score":	999984,
			"second_score":	127511
		}, {
			"file":	"src/response.c",
			"line":	217,
			"primary_score":	999857,
			"second_score":	127495
		}, {
			"file":	"src/response.c",
			"line":	218,
			"primary_score":	999865,
			"second_score":	127494
		}, {
			"file":	"src/response.c",
			"line":	219,
			"primary_score":	999865,
			"second_score":	127441
		}, {
			"file":	"src/response.c",
			"line":	220,
			"primary_score":	999865,
			"second_score":	127388
		}, {
			"file":	"src/response.c",
			"line":	221,
			"primary_score":	999865,
			"second_score":	127335
		}, {
			"file":	"src/response.c",
			"line":	222,
			"primary_score":	999865,
			"second_score":	127282
		}, {
			"file":	"src/response.c",
			"line":	223,
			"primary_score":	999865,
			"second_score":	127229
		}, {
			"file":	"src/response.c",
			"line":	228,
			"primary_score":	999857,
			"second_score":	127176
		}, {
			"file":	"src/response.c",
			"line":	232,
			"primary_score":	999857,
			"second_score":	127175
		}, {
			"file":	"src/response.c",
			"line":	245,
			"primary_score":	999857,
			"second_score":	127174
		}, {
			"file":	"src/response.c",
			"line":	266,
			"primary_score":	999857,
			"second_score":	126737
		}, {
			"file":	"src/response.c",
			"line":	271,
			"primary_score":	999858,
			"second_score":	126736
		}, {
			"file":	"src/response.c",
			"line":	272,
			"primary_score":	999858,
			"second_score":	126722
		}, {
			"file":	"src/response.c",
			"line":	273,
			"primary_score":	999858,
			"second_score":	126640
		}, {
			"file":	"src/response.c",
			"line":	276,
			"primary_score":	999857,
			"second_score":	126497
		}, {
			"file":	"src/response.c",
			"line":	277,
			"primary_score":	999865,
			"second_score":	126496
		}, {
			"file":	"src/response.c",
			"line":	278,
			"primary_score":	999865,
			"second_score":	126443
		}, {
			"file":	"src/response.c",
			"line":	289,
			"primary_score":	999857,
			"second_score":	126390
		}, {
			"file":	"src/response.c",
			"line":	290,
			"primary_score":	999857,
			"second_score":	126239
		}, {
			"file":	"src/response.c",
			"line":	293,
			"primary_score":	999857,
			"second_score":	126138
		}, {
			"file":	"src/response.c",
			"line":	297,
			"primary_score":	999857,
			"second_score":	126137
		}, {
			"file":	"src/response.c",
			"line":	310,
			"primary_score":	999886,
			"second_score":	123661
		}, {
			"file":	"src/response.c",
			"line":	353,
			"primary_score":	999887,
			"second_score":	123660
		}, {
			"file":	"src/response.c",
			"line":	354,
			"primary_score":	999887,
			"second_score":	123641
		}, {
			"file":	"src/response.c",
			"line":	356,
			"primary_score":	999887,
			"second_score":	123622
		}, {
			"file":	"src/response.c",
			"line":	393,
			"primary_score":	999887,
			"second_score":	123621
		}, {
			"file":	"src/response.c",
			"line":	394,
			"primary_score":	999891,
			"second_score":	123620
		}, {
			"file":	"src/response.c",
			"line":	395,
			"primary_score":	999891,
			"second_score":	123567
		}, {
			"file":	"src/response.c",
			"line":	396,
			"primary_score":	999891,
			"second_score":	123514
		}, {
			"file":	"src/response.c",
			"line":	397,
			"primary_score":	999891,
			"second_score":	123461
		}, {
			"file":	"src/response.c",
			"line":	402,
			"primary_score":	999887,
			"second_score":	123408
		}, {
			"file":	"src/response.c",
			"line":	418,
			"primary_score":	999887,
			"second_score":	122589
		}, {
			"file":	"src/response.c",
			"line":	423,
			"primary_score":	999887,
			"second_score":	122588
		}, {
			"file":	"src/response.c",
			"line":	433,
			"primary_score":	999887,
			"second_score":	122586
		}, {
			"file":	"src/response.c",
			"line":	434,
			"primary_score":	999887,
			"second_score":	122567
		}, {
			"file":	"src/response.c",
			"line":	435,
			"primary_score":	999887,
			"second_score":	122565
		}, {
			"file":	"src/response.c",
			"line":	436,
			"primary_score":	999887,
			"second_score":	122546
		}, {
			"file":	"src/response.c",
			"line":	438,
			"primary_score":	999887,
			"second_score":	122545
		}, {
			"file":	"src/response.c",
			"line":	444,
			"primary_score":	999887,
			"second_score":	122532
		}, {
			"file":	"src/response.c",
			"line":	449,
			"primary_score":	999887,
			"second_score":	122531
		}, {
			"file":	"src/response.c",
			"line":	450,
			"primary_score":	999891,
			"second_score":	122530
		}, {
			"file":	"src/response.c",
			"line":	451,
			"primary_score":	999891,
			"second_score":	122477
		}, {
			"file":	"src/response.c",
			"line":	452,
			"primary_score":	999891,
			"second_score":	122424
		}, {
			"file":	"src/response.c",
			"line":	453,
			"primary_score":	999891,
			"second_score":	122371
		}, {
			"file":	"src/response.c",
			"line":	456,
			"primary_score":	999887,
			"second_score":	122318
		}, {
			"file":	"src/response.c",
			"line":	469,
			"primary_score":	999889,
			"second_score":	121127
		}, {
			"file":	"src/response.c",
			"line":	471,
			"primary_score":	999889,
			"second_score":	121026
		}, {
			"file":	"src/response.c",
			"line":	472,
			"primary_score":	999893,
			"second_score":	121025
		}, {
			"file":	"src/response.c",
			"line":	473,
			"primary_score":	999893,
			"second_score":	120972
		}, {
			"file":	"src/response.c",
			"line":	474,
			"primary_score":	999893,
			"second_score":	120919
		}, {
			"file":	"src/response.c",
			"line":	475,
			"primary_score":	999893,
			"second_score":	120866
		}, {
			"file":	"src/response.c",
			"line":	486,
			"primary_score":	999889,
			"second_score":	120441
		}, {
			"file":	"src/response.c",
			"line":	487,
			"primary_score":	999889,
			"second_score":	120440
		}, {
			"file":	"src/response.c",
			"line":	488,
			"primary_score":	999889,
			"second_score":	120439
		}, {
			"file":	"src/response.c",
			"line":	489,
			"primary_score":	999889,
			"second_score":	120438
		}, {
			"file":	"src/response.c",
			"line":	490,
			"primary_score":	999889,
			"second_score":	120437
		}, {
			"file":	"src/response.c",
			"line":	492,
			"primary_score":	999889,
			"second_score":	120436
		}, {
			"file":	"src/response.c",
			"line":	493,
			"primary_score":	999893,
			"second_score":	120435
		}, {
			"file":	"src/response.c",
			"line":	494,
			"primary_score":	999893,
			"second_score":	120382
		}, {
			"file":	"src/response.c",
			"line":	497,
			"primary_score":	999889,
			"second_score":	120329
		}, {
			"file":	"src/response.c",
			"line":	502,
			"primary_score":	999907,
			"second_score":	120002
		}, {
			"file":	"src/response.c",
			"line":	503,
			"primary_score":	999907,
			"second_score":	119949
		}, {
			"file":	"src/response.c",
			"line":	507,
			"primary_score":	999903,
			"second_score":	119896
		}, {
			"file":	"src/response.c",
			"line":	517,
			"primary_score":	999906,
			"second_score":	119895
		}, {
			"file":	"src/response.c",
			"line":	520,
			"primary_score":	999906,
			"second_score":	119894
		}, {
			"file":	"src/response.c",
			"line":	529,
			"primary_score":	999935,
			"second_score":	119893
		}, {
			"file":	"src/response.c",
			"line":	537,
			"primary_score":	999908,
			"second_score":	119892
		}, {
			"file":	"src/response.c",
			"line":	652,
			"primary_score":	999906,
			"second_score":	119891
		}, {
			"file":	"src/response.c",
			"line":	654,
			"primary_score":	999906,
			"second_score":	119765
		}, {
			"file":	"src/response.c",
			"line":	655,
			"primary_score":	999910,
			"second_score":	119764
		}, {
			"file":	"src/response.c",
			"line":	656,
			"primary_score":	999910,
			"second_score":	119711
		}, {
			"file":	"src/response.c",
			"line":	660,
			"primary_score":	999906,
			"second_score":	119658
		}, {
			"file":	"src/response.c",
			"line":	667,
			"primary_score":	999910,
			"second_score":	117737
		}, {
			"file":	"src/response.c",
			"line":	671,
			"primary_score":	999906,
			"second_score":	117684
		}, {
			"file":	"src/server.c",
			"line":	109,
			"primary_score":	999823,
			"second_score":	110880
		}, {
			"file":	"src/server.c",
			"line":	110,
			"primary_score":	999823,
			"second_score":	110879
		}, {
			"file":	"src/server.c",
			"line":	112,
			"primary_score":	999823,
			"second_score":	110878
		}, {
			"file":	"src/server.c",
			"line":	113,
			"primary_score":	999823,
			"second_score":	110877
		}, {
			"file":	"src/server.c",
			"line":	238,
			"primary_score":	999823,
			"second_score":	10361
		}, {
			"file":	"src/server.c",
			"line":	240,
			"primary_score":	999823,
			"second_score":	10360
		}, {
			"file":	"src/server.c",
			"line":	241,
			"primary_score":	999823,
			"second_score":	10299
		}, {
			"file":	"src/server.c",
			"line":	254,
			"primary_score":	999823,
			"second_score":	10295
		}, {
			"file":	"src/server.c",
			"line":	255,
			"primary_score":	999823,
			"second_score":	10290
		}, {
			"file":	"src/server.c",
			"line":	256,
			"primary_score":	999823,
			"second_score":	10285
		}, {
			"file":	"src/server.c",
			"line":	257,
			"primary_score":	999823,
			"second_score":	10280
		}, {
			"file":	"src/server.c",
			"line":	258,
			"primary_score":	999823,
			"second_score":	10275
		}, {
			"file":	"src/server.c",
			"line":	259,
			"primary_score":	999823,
			"second_score":	10270
		}, {
			"file":	"src/server.c",
			"line":	260,
			"primary_score":	999823,
			"second_score":	10265
		}, {
			"file":	"src/server.c",
			"line":	261,
			"primary_score":	999823,
			"second_score":	10260
		}, {
			"file":	"src/server.c",
			"line":	263,
			"primary_score":	999823,
			"second_score":	10255
		}, {
			"file":	"src/server.c",
			"line":	264,
			"primary_score":	999823,
			"second_score":	10250
		}, {
			"file":	"src/server.c",
			"line":	265,
			"primary_score":	999823,
			"second_score":	10245
		}, {
			"file":	"src/server.c",
			"line":	266,
			"primary_score":	999823,
			"second_score":	10240
		}, {
			"file":	"src/server.c",
			"line":	267,
			"primary_score":	999823,
			"second_score":	10235
		}, {
			"file":	"src/server.c",
			"line":	268,
			"primary_score":	999823,
			"second_score":	10230
		}, {
			"file":	"src/server.c",
			"line":	269,
			"primary_score":	999823,
			"second_score":	10225
		}, {
			"file":	"src/server.c",
			"line":	270,
			"primary_score":	999823,
			"second_score":	10220
		}, {
			"file":	"src/server.c",
			"line":	271,
			"primary_score":	999823,
			"second_score":	10215
		}, {
			"file":	"src/server.c",
			"line":	273,
			"primary_score":	999823,
			"second_score":	10210
		}, {
			"file":	"src/server.c",
			"line":	279,
			"primary_score":	999823,
			"second_score":	10205
		}, {
			"file":	"src/server.c",
			"line":	281,
			"primary_score":	999823,
			"second_score":	6098
		}, {
			"file":	"src/server.c",
			"line":	283,
			"primary_score":	999823,
			"second_score":	6097
		}, {
			"file":	"src/server.c",
			"line":	284,
			"primary_score":	999823,
			"second_score":	6096
		}, {
			"file":	"src/server.c",
			"line":	285,
			"primary_score":	999823,
			"second_score":	4976
		}, {
			"file":	"src/server.c",
			"line":	287,
			"primary_score":	999823,
			"second_score":	4975
		}, {
			"file":	"src/server.c",
			"line":	289,
			"primary_score":	999823,
			"second_score":	4974
		}, {
			"file":	"src/server.c",
			"line":	290,
			"primary_score":	999823,
			"second_score":	4970
		}, {
			"file":	"src/server.c",
			"line":	291,
			"primary_score":	999823,
			"second_score":	4966
		}, {
			"file":	"src/server.c",
			"line":	292,
			"primary_score":	999823,
			"second_score":	4962
		}, {
			"file":	"src/server.c",
			"line":	293,
			"primary_score":	999823,
			"second_score":	4958
		}, {
			"file":	"src/server.c",
			"line":	294,
			"primary_score":	999823,
			"second_score":	4954
		}, {
			"file":	"src/server.c",
			"line":	295,
			"primary_score":	999823,
			"second_score":	4950
		}, {
			"file":	"src/server.c",
			"line":	296,
			"primary_score":	999823,
			"second_score":	4946
		}, {
			"file":	"src/server.c",
			"line":	298,
			"primary_score":	999823,
			"second_score":	4938
		}, {
			"file":	"src/server.c",
			"line":	300,
			"primary_score":	999823,
			"second_score":	4937
		}, {
			"file":	"src/server.c",
			"line":	301,
			"primary_score":	999823,
			"second_score":	4936
		}, {
			"file":	"src/server.c",
			"line":	307,
			"primary_score":	999823,
			"second_score":	4935
		}, {
			"file":	"src/server.c",
			"line":	308,
			"primary_score":	999823,
			"second_score":	1169
		}, {
			"file":	"src/server.c",
			"line":	309,
			"primary_score":	999823,
			"second_score":	555
		}, {
			"file":	"src/server.c",
			"line":	312,
			"primary_score":	999823,
			"second_score":	546
		}, {
			"file":	"src/server.c",
			"line":	313,
			"primary_score":	999823,
			"second_score":	542
		}, {
			"file":	"src/server.c",
			"line":	314,
			"primary_score":	999823,
			"second_score":	538
		}, {
			"file":	"src/server.c",
			"line":	316,
			"primary_score":	999823,
			"second_score":	534
		}, {
			"file":	"src/server.c",
			"line":	317,
			"primary_score":	999823,
			"second_score":	533
		}, {
			"file":	"src/server.c",
			"line":	320,
			"primary_score":	999823,
			"second_score":	475
		}, {
			"file":	"src/server.c",
			"line":	321,
			"primary_score":	999823,
			"second_score":	213
		}, {
			"file":	"src/server.c",
			"line":	323,
			"primary_score":	999823,
			"second_score":	176
		}, {
			"file":	"src/server.c",
			"line":	330,
			"primary_score":	999823,
			"second_score":	175
		}, {
			"file":	"src/server.c",
			"line":	513,
			"primary_score":	999823,
			"second_score":	117420
		}, {
			"file":	"src/server.c",
			"line":	514,
			"primary_score":	999823,
			"second_score":	117419
		}, {
			"file":	"src/server.c",
			"line":	516,
			"primary_score":	999823,
			"second_score":	117418
		}, {
			"file":	"src/server.c",
			"line":	519,
			"primary_score":	999823,
			"second_score":	110884
		}, {
			"file":	"src/server.c",
			"line":	526,
			"primary_score":	999823,
			"second_score":	110883
		}, {
			"file":	"src/server.c",
			"line":	527,
			"primary_score":	999823,
			"second_score":	110882
		}, {
			"file":	"src/server.c",
			"line":	531,
			"primary_score":	999823,
			"second_score":	110881
		}, {
			"file":	"src/server.c",
			"line":	532,
			"primary_score":	999823,
			"second_score":	110872
		}, {
			"file":	"src/server.c",
			"line":	533,
			"primary_score":	999823,
			"second_score":	110871
		}, {
			"file":	"src/server.c",
			"line":	534,
			"primary_score":	999823,
			"second_score":	110870
		}, {
			"file":	"src/server.c",
			"line":	538,
			"primary_score":	999889,
			"second_score":	120483
		}, {
			"file":	"src/server.c",
			"line":	539,
			"primary_score":	999889,
			"second_score":	120482
		}, {
			"file":	"src/server.c",
			"line":	544,
			"primary_score":	999889,
			"second_score":	120474
		}, {
			"file":	"src/server.c",
			"line":	547,
			"primary_score":	999823,
			"second_score":	110868
		}, {
			"file":	"src/server.c",
			"line":	550,
			"primary_score":	999823,
			"second_score":	110867
		}, {
			"file":	"src/server.c",
			"line":	580,
			"primary_score":	999823,
			"second_score":	110901
		}, {
			"file":	"src/server.c",
			"line":	581,
			"primary_score":	999823,
			"second_score":	110900
		}, {
			"file":	"src/server.c",
			"line":	582,
			"primary_score":	999823,
			"second_score":	110899
		}, {
			"file":	"src/server.c",
			"line":	584,
			"primary_score":	999823,
			"second_score":	110898
		}, {
			"file":	"src/server.c",
			"line":	633,
			"primary_score":	999823,
			"second_score":	110897
		}, {
			"file":	"src/server.c",
			"line":	642,
			"primary_score":	999823,
			"second_score":	110896
		}, {
			"file":	"src/server.c",
			"line":	644,
			"primary_score":	999823,
			"second_score":	110895
		}, {
			"file":	"src/server.c",
			"line":	645,
			"primary_score":	999987,
			"second_score":	134003
		}, {
			"file":	"src/server.c",
			"line":	646,
			"primary_score":	999987,
			"second_score":	134002
		}, {
			"file":	"src/server.c",
			"line":	647,
			"primary_score":	999987,
			"second_score":	134001
		}, {
			"file":	"src/server.c",
			"line":	649,
			"primary_score":	999987,
			"second_score":	134000
		}, {
			"file":	"src/server.c",
			"line":	661,
			"primary_score":	999987,
			"second_score":	133721
		}, {
			"file":	"src/server.c",
			"line":	664,
			"primary_score":	999987,
			"second_score":	133720
		}, {
			"file":	"src/server.c",
			"line":	669,
			"primary_score":	999987,
			"second_score":	133714
		}, {
			"file":	"src/server.c",
			"line":	767,
			"primary_score":	999987,
			"second_score":	133713
		}, {
			"file":	"src/server.c",
			"line":	771,
			"primary_score":	999823,
			"second_score":	110894
		}, {
			"file":	"src/server.c",
			"line":	789,
			"primary_score":	999823,
			"second_score":	110893
		}, {
			"file":	"src/server.c",
			"line":	847,
			"primary_score":	999823,
			"second_score":	110892
		}, {
			"file":	"src/server.c",
			"line":	854,
			"primary_score":	999823,
			"second_score":	110891
		}, {
			"file":	"src/server.c",
			"line":	885,
			"primary_score":	999823,
			"second_score":	110890
		}, {
			"file":	"src/server.c",
			"line":	886,
			"primary_score":	999823,
			"second_score":	110889
		}, {
			"file":	"src/server.c",
			"line":	888,
			"primary_score":	999823,
			"second_score":	110888
		}, {
			"file":	"src/server.c",
			"line":	889,
			"primary_score":	999823,
			"second_score":	110876
		}, {
			"file":	"src/server.c",
			"line":	892,
			"primary_score":	999823,
			"second_score":	110875
		}, {
			"file":	"src/server.c",
			"line":	899,
			"primary_score":	999823,
			"second_score":	110874
		}, {
			"file":	"src/server.c",
			"line":	901,
			"primary_score":	999823,
			"second_score":	110873
		}, {
			"file":	"src/server.c",
			"line":	904,
			"primary_score":	999823,
			"second_score":	110866
		}, {
			"file":	"src/server.c",
			"line":	906,
			"primary_score":	999823,
			"second_score":	117416
		}, {
			"file":	"src/server.c",
			"line":	907,
			"primary_score":	999823,
			"second_score":	117415
		}, {
			"file":	"src/server.c",
			"line":	919,
			"primary_score":	999823,
			"second_score":	117387
		}, {
			"file":	"src/server.c",
			"line":	920,
			"primary_score":	999823,
			"second_score":	117386
		}, {
			"file":	"src/server.c",
			"line":	921,
			"primary_score":	999823,
			"second_score":	117385
		}, {
			"file":	"src/server.c",
			"line":	924,
			"primary_score":	999823,
			"second_score":	133653
		}, {
			"file":	"src/server.c",
			"line":	926,
			"primary_score":	999984,
			"second_score":	117383
		}, {
			"file":	"src/server.c",
			"line":	943,
			"primary_score":	999823,
			"second_score":	117366
		}, {
			"file":	"src/server.c",
			"line":	944,
			"primary_score":	999823,
			"second_score":	117365
		}, {
			"file":	"src/server.c",
			"line":	945,
			"primary_score":	999823,
			"second_score":	117364
		}, {
			"file":	"src/server.c",
			"line":	948,
			"primary_score":	999984,
			"second_score":	117362
		}, {
			"file":	"src/server.c",
			"line":	950,
			"primary_score":	999823,
			"second_score":	133648
		}, {
			"file":	"src/server.c",
			"line":	967,
			"primary_score":	999823,
			"second_score":	110865
		}, {
			"file":	"src/server.c",
			"line":	975,
			"primary_score":	999823,
			"second_score":	110864
		}, {
			"file":	"src/server.c",
			"line":	976,
			"primary_score":	999823,
			"second_score":	110863
		}, {
			"file":	"src/server.c",
			"line":	978,
			"primary_score":	999823,
			"second_score":	110862
		}, {
			"file":	"src/server.c",
			"line":	979,
			"primary_score":	999823,
			"second_score":	110861
		}, {
			"file":	"src/server.c",
			"line":	981,
			"primary_score":	999823,
			"second_score":	110860
		}, {
			"file":	"src/server.c",
			"line":	982,
			"primary_score":	999823,
			"second_score":	110859
		}, {
			"file":	"src/server.c",
			"line":	983,
			"primary_score":	999823,
			"second_score":	110858
		}, {
			"file":	"src/server.c",
			"line":	985,
			"primary_score":	999823,
			"second_score":	110857
		}, {
			"file":	"src/server.c",
			"line":	986,
			"primary_score":	999823,
			"second_score":	110856
		}, {
			"file":	"src/server.c",
			"line":	988,
			"primary_score":	999823,
			"second_score":	110830
		}, {
			"file":	"src/server.c",
			"line":	998,
			"primary_score":	999823,
			"second_score":	110823
		}, {
			"file":	"src/server.c",
			"line":	1001,
			"primary_score":	999823,
			"second_score":	110822
		}, {
			"file":	"src/server.c",
			"line":	1003,
			"primary_score":	999823,
			"second_score":	110812
		}, {
			"file":	"src/server.c",
			"line":	1445,
			"primary_score":	999836,
			"second_score":	187734
		}, {
			"file":	"src/server.c",
			"line":	1709,
			"primary_score":	999823,
			"second_score":	110811
		}, {
			"file":	"src/server.c",
			"line":	1712,
			"primary_score":	999823,
			"second_score":	110810
		}, {
			"file":	"src/server.c",
			"line":	1725,
			"primary_score":	999823,
			"second_score":	110809
		}, {
			"file":	"src/server.c",
			"line":	1734,
			"primary_score":	999823,
			"second_score":	110808
		}, {
			"file":	"src/server.c",
			"line":	1738,
			"primary_score":	999823,
			"second_score":	110807
		}, {
			"file":	"src/server.c",
			"line":	1745,
			"primary_score":	999823,
			"second_score":	110806
		}, {
			"file":	"src/server.c",
			"line":	1746,
			"primary_score":	999823,
			"second_score":	110792
		}, {
			"file":	"src/server.c",
			"line":	1752,
			"primary_score":	999823,
			"second_score":	110791
		}, {
			"file":	"src/server.c",
			"line":	1753,
			"primary_score":	999823,
			"second_score":	110790
		}, {
			"file":	"src/server.c",
			"line":	1755,
			"primary_score":	999823,
			"second_score":	110789
		}, {
			"file":	"src/server.c",
			"line":	1780,
			"primary_score":	999823,
			"second_score":	110787
		}, {
			"file":	"src/server.c",
			"line":	1781,
			"primary_score":	999823,
			"second_score":	110786
		}, {
			"file":	"src/server.c",
			"line":	1782,
			"primary_score":	999823,
			"second_score":	110785
		}, {
			"file":	"src/server.c",
			"line":	1785,
			"primary_score":	999823,
			"second_score":	110784
		}, {
			"file":	"src/server.c",
			"line":	1786,
			"primary_score":	999823,
			"second_score":	110739
		}, {
			"file":	"src/server.c",
			"line":	1787,
			"primary_score":	999823,
			"second_score":	21067
		}, {
			"file":	"src/server.c",
			"line":	1788,
			"primary_score":	999823,
			"second_score":	10362
		}, {
			"file":	"src/server.c",
			"line":	1789,
			"primary_score":	999823,
			"second_score":	174
		}, {
			"file":	"src/server.c",
			"line":	1790,
			"primary_score":	999823,
			"second_score":	106
		}, {
			"file":	"src/server.c",
			"line":	1793,
			"primary_score":	999823,
			"second_score":	2
		}, {
			"file":	"src/server.c",
			"line":	1796,
			"primary_score":	999823,
			"second_score":	1
		}, {
			"file":	"src/stat_cache.c",
			"line":	83,
			"primary_score":	999889,
			"second_score":	120574
		}, {
			"file":	"src/stat_cache.c",
			"line":	85,
			"primary_score":	999889,
			"second_score":	120573
		}, {
			"file":	"src/stat_cache.c",
			"line":	87,
			"primary_score":	999889,
			"second_score":	120565
		}, {
			"file":	"src/stat_cache.c",
			"line":	91,
			"primary_score":	999889,
			"second_score":	120501
		}, {
			"file":	"src/stat_cache.c",
			"line":	93,
			"primary_score":	999889,
			"second_score":	120500
		}, {
			"file":	"src/stat_cache.c",
			"line":	95,
			"primary_score":	999889,
			"second_score":	120496
		}, {
			"file":	"src/stat_cache.c",
			"line":	115,
			"primary_score":	999823,
			"second_score":	120495
		}, {
			"file":	"src/stat_cache.c",
			"line":	116,
			"primary_score":	999823,
			"second_score":	120494
		}, {
			"file":	"src/stat_cache.c",
			"line":	119,
			"primary_score":	999823,
			"second_score":	120493
		}, {
			"file":	"src/stat_cache.c",
			"line":	120,
			"primary_score":	999823,
			"second_score":	120490
		}, {
			"file":	"src/stat_cache.c",
			"line":	122,
			"primary_score":	999823,
			"second_score":	120489
		}, {
			"file":	"src/stat_cache.c",
			"line":	124,
			"primary_score":	999889,
			"second_score":	120505
		}, {
			"file":	"src/stat_cache.c",
			"line":	126,
			"primary_score":	999889,
			"second_score":	120503
		}, {
			"file":	"src/stat_cache.c",
			"line":	128,
			"primary_score":	999889,
			"second_score":	120502
		}, {
			"file":	"src/stat_cache.c",
			"line":	132,
			"primary_score":	999823,
			"second_score":	110797
		}, {
			"file":	"src/stat_cache.c",
			"line":	133,
			"primary_score":	999823,
			"second_score":	110796
		}, {
			"file":	"src/stat_cache.c",
			"line":	135,
			"primary_score":	999823,
			"second_score":	110795
		}, {
			"file":	"src/stat_cache.c",
			"line":	141,
			"primary_score":	999887,
			"second_score":	120283
		}, {
			"file":	"src/stat_cache.c",
			"line":	143,
			"primary_score":	999887,
			"second_score":	120282
		}, {
			"file":	"src/stat_cache.c",
			"line":	147,
			"primary_score":	999889,
			"second_score":	120281
		}, {
			"file":	"src/stat_cache.c",
			"line":	148,
			"primary_score":	999889,
			"second_score":	120280
		}, {
			"file":	"src/stat_cache.c",
			"line":	150,
			"primary_score":	999889,
			"second_score":	120279
		}, {
			"file":	"src/stat_cache.c",
			"line":	173,
			"primary_score":	999887,
			"second_score":	120651
		}, {
			"file":	"src/stat_cache.c",
			"line":	175,
			"primary_score":	999887,
			"second_score":	120650
		}, {
			"file":	"src/stat_cache.c",
			"line":	177,
			"primary_score":	999887,
			"second_score":	120649
		}, {
			"file":	"src/stat_cache.c",
			"line":	178,
			"primary_score":	999887,
			"second_score":	120641
		}, {
			"file":	"src/stat_cache.c",
			"line":	179,
			"primary_score":	999887,
			"second_score":	120633
		}, {
			"file":	"src/stat_cache.c",
			"line":	181,
			"primary_score":	999887,
			"second_score":	120625
		}, {
			"file":	"src/stat_cache.c",
			"line":	185,
			"primary_score":	999887,
			"second_score":	501
		}, {
			"file":	"src/stat_cache.c",
			"line":	186,
			"primary_score":	999887,
			"second_score":	500
		}, {
			"file":	"src/stat_cache.c",
			"line":	188,
			"primary_score":	999887,
			"second_score":	499
		}, {
			"file":	"src/stat_cache.c",
			"line":	189,
			"primary_score":	999887,
			"second_score":	495
		}, {
			"file":	"src/stat_cache.c",
			"line":	190,
			"primary_score":	999887,
			"second_score":	491
		}, {
			"file":	"src/stat_cache.c",
			"line":	192,
			"primary_score":	999887,
			"second_score":	487
		}, {
			"file":	"src/stat_cache.c",
			"line":	197,
			"primary_score":	999887,
			"second_score":	508
		}, {
			"file":	"src/stat_cache.c",
			"line":	198,
			"primary_score":	999887,
			"second_score":	507
		}, {
			"file":	"src/stat_cache.c",
			"line":	200,
			"primary_score":	999887,
			"second_score":	506
		}, {
			"file":	"src/stat_cache.c",
			"line":	201,
			"primary_score":	999887,
			"second_score":	502
		}, {
			"file":	"src/stat_cache.c",
			"line":	203,
			"primary_score":	999887,
			"second_score":	486
		}, {
			"file":	"src/stat_cache.c",
			"line":	209,
			"primary_score":	999823,
			"second_score":	532
		}, {
			"file":	"src/stat_cache.c",
			"line":	210,
			"primary_score":	999823,
			"second_score":	485
		}, {
			"file":	"src/stat_cache.c",
			"line":	213,
			"primary_score":	999823,
			"second_score":	484
		}, {
			"file":	"src/stat_cache.c",
			"line":	214,
			"primary_score":	999823,
			"second_score":	480
		}, {
			"file":	"src/stat_cache.c",
			"line":	220,
			"primary_score":	999823,
			"second_score":	476
		}, {
			"file":	"src/stat_cache.c",
			"line":	281,
			"primary_score":	999887,
			"second_score":	120327
		}, {
			"file":	"src/stat_cache.c",
			"line":	282,
			"primary_score":	999887,
			"second_score":	120326
		}, {
			"file":	"src/stat_cache.c",
			"line":	283,
			"primary_score":	999887,
			"second_score":	120325
		}, {
			"file":	"src/stat_cache.c",
			"line":	284,
			"primary_score":	999887,
			"second_score":	120324
		}, {
			"file":	"src/stat_cache.c",
			"line":	285,
			"primary_score":	999887,
			"second_score":	120323
		}, {
			"file":	"src/stat_cache.c",
			"line":	286,
			"primary_score":	999887,
			"second_score":	120322
		}, {
			"file":	"src/stat_cache.c",
			"line":	288,
			"primary_score":	999887,
			"second_score":	120321
		}, {
			"file":	"src/stat_cache.c",
			"line":	294,
			"primary_score":	999887,
			"second_score":	120320
		}, {
			"file":	"src/stat_cache.c",
			"line":	296,
			"primary_score":	999887,
			"second_score":	120319
		}, {
			"file":	"src/stat_cache.c",
			"line":	297,
			"primary_score":	999887,
			"second_score":	120305
		}, {
			"file":	"src/stat_cache.c",
			"line":	300,
			"primary_score":	999887,
			"second_score":	120284
		}, {
			"file":	"src/stat_cache.c",
			"line":	303,
			"primary_score":	999889,
			"second_score":	120275
		}, {
			"file":	"src/stat_cache.c",
			"line":	313,
			"primary_score":	999887,
			"second_score":	120274
		}, {
			"file":	"src/stat_cache.c",
			"line":	314,
			"primary_score":	999887,
			"second_score":	120652
		}, {
			"file":	"src/stat_cache.c",
			"line":	316,
			"primary_score":	999887,
			"second_score":	120624
		}, {
			"file":	"src/stat_cache.c",
			"line":	318,
			"primary_score":	999887,
			"second_score":	120605
		}, {
			"file":	"src/stat_cache.c",
			"line":	338,
			"primary_score":	999887,
			"second_score":	120273
		}, {
			"file":	"src/stat_cache.c",
			"line":	341,
			"primary_score":	999889,
			"second_score":	120575
		}, {
			"file":	"src/stat_cache.c",
			"line":	343,
			"primary_score":	999889,
			"second_score":	120564
		}, {
			"file":	"src/stat_cache.c",
			"line":	344,
			"primary_score":	999889,
			"second_score":	120545
		}, {
			"file":	"src/stat_cache.c",
			"line":	346,
			"primary_score":	999889,
			"second_score":	120544
		}, {
			"file":	"src/stat_cache.c",
			"line":	348,
			"primary_score":	999889,
			"second_score":	120543
		}, {
			"file":	"src/stat_cache.c",
			"line":	353,
			"primary_score":	999889,
			"second_score":	120542
		}, {
			"file":	"src/stat_cache.c",
			"line":	364,
			"primary_score":	999887,
			"second_score":	120272
		}, {
			"file":	"src/stat_cache.c",
			"line":	374,
			"primary_score":	999887,
			"second_score":	120271
		}, {
			"file":	"src/stat_cache.c",
			"line":	378,
			"primary_score":	999887,
			"second_score":	120269
		}, {
			"file":	"src/stat_cache.c",
			"line":	380,
			"primary_score":	999887,
			"second_score":	120268
		}, {
			"file":	"src/stat_cache.c",
			"line":	381,
			"primary_score":	999887,
			"second_score":	120267
		}, {
			"file":	"src/stat_cache.c",
			"line":	382,
			"primary_score":	999887,
			"second_score":	120266
		}, {
			"file":	"src/stat_cache.c",
			"line":	398,
			"primary_score":	999887,
			"second_score":	120265
		}, {
			"file":	"src/stat_cache.c",
			"line":	402,
			"primary_score":	999887,
			"second_score":	120264
		}, {
			"file":	"src/stat_cache.c",
			"line":	448,
			"primary_score":	999887,
			"second_score":	120263
		}, {
			"file":	"src/stat_cache.c",
			"line":	450,
			"primary_score":	999907,
			"second_score":	120262
		}, {
			"file":	"src/stat_cache.c",
			"line":	452,
			"primary_score":	999907,
			"second_score":	120258
		}, {
			"file":	"src/stat_cache.c",
			"line":	453,
			"primary_score":	999907,
			"second_score":	120187
		}, {
			"file":	"src/stat_cache.c",
			"line":	454,
			"primary_score":	999907,
			"second_score":	120186
		}, {
			"file":	"src/stat_cache.c",
			"line":	456,
			"primary_score":	999907,
			"second_score":	120185
		}, {
			"file":	"src/stat_cache.c",
			"line":	459,
			"primary_score":	999907,
			"second_score":	120184
		}, {
			"file":	"src/stat_cache.c",
			"line":	461,
			"primary_score":	999907,
			"second_score":	120183
		}, {
			"file":	"src/stat_cache.c",
			"line":	466,
			"primary_score":	999907,
			"second_score":	120182
		}, {
			"file":	"src/stat_cache.c",
			"line":	472,
			"primary_score":	999895,
			"second_score":	122866
		}, {
			"file":	"src/stat_cache.c",
			"line":	473,
			"primary_score":	999895,
			"second_score":	122865
		}, {
			"file":	"src/stat_cache.c",
			"line":	476,
			"primary_score":	999887,
			"second_score":	120004
		}, {
			"file":	"src/stat_cache.c",
			"line":	478,
			"primary_score":	999887,
			"second_score":	120003
		}, {
			"file":	"src/stat_cache.c",
			"line":	483,
			"primary_score":	999889,
			"second_score":	120328
		}, {
			"file":	"src/stat_cache.c",
			"line":	487,
			"primary_score":	999889,
			"second_score":	123006
		}, {
			"file":	"src/stat_cache.c",
			"line":	518,
			"primary_score":	999987,
			"second_score":	133719
		}, {
			"file":	"src/stat_cache.c",
			"line":	520,
			"primary_score":	999987,
			"second_score":	133718
		}, {
			"file":	"src/stat_cache.c",
			"line":	523,
			"primary_score":	999987,
			"second_score":	133717
		}, {
			"file":	"src/stat_cache.c",
			"line":	525,
			"primary_score":	999987,
			"second_score":	133716
		}, {
			"file":	"src/stat_cache.c",
			"line":	528,
			"primary_score":	999987,
			"second_score":	133715
		}, {
			"file":	"src/status_counter.c",
			"line":	24,
			"primary_score":	999823,
			"second_score":	105
		}, {
			"file":	"src/status_counter.c",
			"line":	28,
			"primary_score":	999840,
			"second_score":	289364
		}, {
			"file":	"src/status_counter.c",
			"line":	32,
			"primary_score":	999840,
			"second_score":	289366
		}, {
			"file":	"src/status_counter.c",
			"line":	33,
			"primary_score":	999840,
			"second_score":	289365
		}, {
			"file":	"src/status_counter.c",
			"line":	35,
			"primary_score":	999840,
			"second_score":	289363
		}, {
			"file":	"src/status_counter.c",
			"line":	38,
			"primary_score":	999840,
			"second_score":	289131
		}, {
			"file":	"src/status_counter.c",
			"line":	39,
			"primary_score":	999840,
			"second_score":	289124
		}, {
			"file":	"src/status_counter.c",
			"line":	41,
			"primary_score":	999840,
			"second_score":	289105
		}, {
			"file":	"src/status_counter.c",
			"line":	42,
			"primary_score":	999840,
			"second_score":	289089
		}, {
			"file":	"src/status_counter.c",
			"line":	44,
			"primary_score":	999840,
			"second_score":	289088
		}, {
			"file":	"src/status_counter.c",
			"line":	46,
			"primary_score":	999840,
			"second_score":	288792
		}],
	"mutation_info":	[{
			"file":	"src/mod_cgi.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"src/mod_cgi.c",
			"lines":	[{
					"line":	250,
					"switches":	[]
				}, {
					"line":	251,
					"switches":	[]
				}, {
					"line":	253,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [80, 81], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [], [], []],
							"begin_line":	254,
							"begin_column":	0,
							"end_line":	254,
							"end_column":	0,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L254\", 5, &(srv), sizeof (srv), &(sess), sizeof (sess), &(c), sizeof (c), &(we_have), sizeof (we_have), &(con), sizeof (con)))\n    return 0;\n", "if (__is_neg(\"\", \"L254\", 5, &(srv), sizeof (srv), &(sess), sizeof (sess), &(c), sizeof (c), &(we_have), sizeof (we_have), &(con), sizeof (con)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	2,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	3,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	4,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	5,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	6,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	7,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	8,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	9,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	10,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	11,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	12,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	13,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	14,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	15,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	16,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	17,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	18,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	19,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	20,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	21,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	22,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	23,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	24,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	25,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	26,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	27,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	28,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	29,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-8.0925604747056763, -8.3169993687056767, -8.1188581387056757, -7.8650734237056765, -8.760325758705676]
								}, {
									"case":	81,
									"scores":	[-10.355342274705677, -10.579781168705676, -10.381639938705677, -10.127855223705676, -11.023107558705675]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [3], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	254,
							"begin_column":	2,
							"end_line":	254,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L254\", 5, &(srv), sizeof (srv), &(sess), sizeof (sess), &(c), sizeof (c), &(we_have), sizeof (we_have), &(con), sizeof (con)))\n    ((void)(srv));\n", "{\n}\n", "((void)(srv))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4182422567056765, -6.8809424217056767, -7.2198681397056763, -6.4347662437056767, -8.2220373217056757]
								}, {
									"case":	2,
									"scores":	[-6.5383749567056766]
								}, {
									"case":	3,
									"scores":	[-6.5383749567056766]
								}]
						}]
				}, {
					"line":	255,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [81, 82], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [], [], []],
							"begin_line":	256,
							"begin_column":	0,
							"end_line":	256,
							"end_column":	0,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L256\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(srv), sizeof (srv), &(c), sizeof (c), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L256\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(srv), sizeof (srv), &(c), sizeof (c), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	2,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	3,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	4,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	5,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	6,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	7,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	8,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	9,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	10,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	11,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	12,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	13,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	14,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	15,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	16,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	17,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	18,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	19,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	20,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	21,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	22,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	23,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	24,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	25,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	26,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	27,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	28,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	29,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	30,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	31,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	32,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	33,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	34,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	35,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	36,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	37,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	38,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	39,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	40,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	41,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	42,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	43,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	44,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	45,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	46,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	47,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	48,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	49,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	50,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	51,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	52,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	53,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	54,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	55,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	56,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	57,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	58,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	59,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	60,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	61,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	62,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	63,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	64,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	65,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	66,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	67,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	68,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	69,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	70,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	71,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	72,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	73,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	74,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	75,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	76,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	77,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	78,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	79,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	80,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	81,
									"scores":	[-8.3347580713881566, -8.45353253138816, -9.1831276773881569, -9.20942534138816, -9.33592204738816, -8.9556406263881563, -9.43922481638816, -9.7633793713881563, -9.58861643738816, -9.58861643738816, -9.77924843738816, -9.77924843738816, -9.77924843738816, -9.58861643738816, -9.77924843738816, -9.77924843738816, -9.77924843738816, -9.58861643738816]
								}, {
									"case":	82,
									"scores":	[-10.597539871388157, -10.716314331388158, -11.445909477388156, -11.472207141388157, -11.598703847388158, -11.218422426388157, -11.702006616388157, -12.026161171388157, -11.851398237388157, -11.851398237388157, -12.042030237388158, -12.042030237388158, -12.042030237388158, -11.851398237388157, -12.042030237388158, -12.042030237388158, -12.042030237388158, -11.851398237388157]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [25, 26, 27, 28, 29, 30], [], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [14]],
							"begin_line":	256,
							"begin_column":	2,
							"end_line":	256,
							"end_column":	44,
							"patch_codes":	["if (!__is_neg(\"\", \"L256\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(srv), sizeof (srv), &(c), sizeof (c), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    chunkqueue_remove_finished_chunks(sess->rb);\n", "chunkqueue_append_buffer(sess->rb, 0)", "chunkqueue_prepend_buffer(sess->rb, 0)", "chunkqueue_set_tempdirs(sess->rb, 0)", "chunkqueue_skip(sess->rb, 0)", "chunkqueue_skip(sess->rb, 1)", "chunkqueue_steal_all_chunks(sess->rb, 0)", "chunkqueue_steal_chunk(sess->rb, 0)", "chunkqueue_steal_chunk(sess->rb, c)", "chunkqueue_steal_tempfile(sess->rb, 0)", "chunkqueue_steal_tempfile(sess->rb, c)", "http_request_parse_cq(sess->rb, 0)", "http_response_parse_cq(sess->rb, 0)", "{\n}\n", "chunkqueue_free(sess->rb)", "chunkqueue_get_append_buffer(sess->rb)", "chunkqueue_get_append_tempfile(sess->rb)", "chunkqueue_get_prepend_buffer(sess->rb)", "chunkqueue_is_empty(sess->rb)", "chunkqueue_length(sess->rb)", "chunkqueue_print(sess->rb)", "chunkqueue_remove_empty_last_chunk(sess->rb)", "chunkqueue_reset(sess->rb)", "chunkqueue_written(sess->rb)", "chunkqueue_remove_finished_chunks((&c)->rb)", "chunkqueue_remove_finished_chunks((&con)->rb)", "chunkqueue_remove_finished_chunks((&sess)->rb)", "chunkqueue_remove_finished_chunks((&srv)->rb)", "chunkqueue_remove_finished_chunks((&we_have)->rb)", "chunkqueue_remove_finished_chunks((sess)->rb)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2729499573881569, -7.6291312573881571, -7.6922728193881573, -7.5022047753881571, -7.812496092388157, -5.9989144793881568, -6.4300478063881572, -7.5054540843881572, -7.354420019388157, -7.354420019388157, -8.19832501938816, -8.19832501938816, -8.19832501938816, -7.354420019388157, -8.19832501938816, -8.19832501938816, -8.19832501938816, -7.354420019388157]
								}, {
									"case":	2,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	3,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	4,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	5,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	6,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	7,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	8,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	9,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	10,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	11,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	12,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	13,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	14,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	15,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	16,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	17,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	18,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	19,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	20,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	21,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	22,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	23,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	24,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	25,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	26,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	27,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	28,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	29,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	30,
									"scores":	[-6.5181722493881571]
								}]
						}]
				}, {
					"line":	258,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [160, 161, 162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [], [], [], [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], [], [], [], [], [], []],
							"begin_line":	259,
							"begin_column":	1,
							"end_line":	259,
							"end_column":	1,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c, 0, sizeof (*(c)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    break;\n", "if (__is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	2,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	3,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	4,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	5,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	6,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	7,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	8,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	9,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	10,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	11,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	12,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	13,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	14,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	15,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	16,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	17,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	18,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	19,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	20,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	21,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	22,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	23,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	24,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	25,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	26,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	27,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	28,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	29,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	30,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	31,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	32,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	33,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	34,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	35,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	36,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	37,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	38,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	39,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	40,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	41,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	42,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	43,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	44,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	45,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	46,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	47,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	48,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	49,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	50,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	51,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	52,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	53,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	54,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	55,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	56,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	57,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	58,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	59,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	60,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	61,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	62,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	63,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	64,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	65,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	66,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	67,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	68,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	69,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	70,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	71,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	72,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	73,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	74,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	75,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	76,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	77,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	78,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	79,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	80,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	81,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	82,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	83,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	84,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	85,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	86,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	87,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	88,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	89,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	90,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	91,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	92,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	93,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	94,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	95,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	96,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	97,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	98,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	99,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	100,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	101,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	102,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	103,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	104,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	105,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	106,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	107,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	108,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	109,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	110,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	111,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	112,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	113,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	114,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	115,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	116,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	117,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	118,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	119,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	120,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	121,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	122,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	123,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	124,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	125,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	126,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	127,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	128,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	129,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	130,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	131,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	132,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	133,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	134,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	135,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	136,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	137,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	138,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	139,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	140,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	141,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	142,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	143,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	144,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	145,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	146,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	147,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	148,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	149,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	150,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	151,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	152,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	153,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	154,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	155,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	156,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	157,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	158,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	159,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	160,
									"scores":	[-9.21885894559622, -9.88661676159622, -9.99224254559622, -9.98943867559622, -10.468872151596221, -10.585559435596222, -10.468872151596221, -9.64526434059622, -9.88391276159622, -10.128848530596223, -9.98943867559622, -9.87275139159622, -10.367662851596222, -10.278240151596222, -10.278240151596222, -10.278240151596222, -10.278240151596222, -10.468872151596221, -10.468872151596221, -10.468872151596221, -10.278240151596222, -10.468872151596221, -10.468872151596221, -10.468872151596221, -10.278240151596222]
								}, {
									"case":	161,
									"scores":	[-9.31876714559622, -9.98652496159622, -10.092150745596221, -10.568780351596221, -10.685467635596222, -10.568780351596221, -10.08934687559622, -9.9838209615962228, -9.74517254059622, -10.228756730596221, -10.08934687559622, -9.97265959159622, -10.467571051596222, -10.378148351596222, -10.378148351596222, -10.568780351596221, -10.568780351596221, -10.568780351596221, -10.378148351596222, -10.568780351596221, -10.568780351596221, -10.568780351596221, -10.378148351596222, -10.378148351596222, -10.378148351596222]
								}, {
									"case":	162,
									"scores":	[-11.581548945596222, -12.249306761596221, -12.354932545596222, -12.352128675596221, -12.831562151596222, -12.948249435596221, -12.831562151596222, -12.007954340596221, -12.246602761596222, -12.491538530596221, -12.352128675596221, -12.235441391596222, -12.730352851596223, -12.640930151596223, -12.640930151596223, -12.640930151596223, -12.640930151596223, -12.831562151596222, -12.831562151596222, -12.831562151596222, -12.640930151596223, -12.831562151596222, -12.831562151596222, -12.831562151596222, -12.640930151596223]
								}]
						}, {
							"switch":	6,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	259,
							"begin_column":	3,
							"end_line":	259,
							"end_column":	26,
							"patch_codes":	["if (__is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    continue;\n", "if ((c->mem->used == 0) || __is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    continue;\n", "if ((c->mem->used == 0) && !__is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0506385334281463, -1.144166368428146, -4.8214722334281461, -4.8908408604281455, -5.0368544954281464, -5.3968930604281464, -5.0368544954281464, -3.6182189554281456, -3.3613673684281458, -4.3538655824281456, -4.8908408604281455, -4.5308022954281455, -4.6299144954281459, -4.1929494954281461, -4.1929494954281461, -4.1929494954281461, -4.1929494954281461, -5.0368544954281464, -5.0368544954281464, -5.0368544954281464, -4.1929494954281461, -5.0368544954281464, -5.0368544954281464, -5.0368544954281464, -4.1929494954281461]
								}, {
									"case":	2,
									"scores":	[-3.9981996014281451, -1.0917274364281471, -4.769033301428145, -4.8384019284281461, -4.9844155634281453, -5.3444541284281462, -4.9844155634281453, -3.5657800234281454, -3.3089284364281464, -4.3014266504281453, -4.8384019284281461, -4.4783633634281461, -4.5774755634281457, -4.1405105634281458, -4.1405105634281458, -4.1405105634281458, -4.1405105634281458, -4.9844155634281453, -4.9844155634281453, -4.9844155634281453, -4.1405105634281458, -4.9844155634281453, -4.9844155634281453, -4.9844155634281453, -4.1405105634281458]
								}, {
									"case":	3,
									"scores":	[-3.9981996014281451, -1.0917274364281471, -4.769033301428145, -4.8384019284281461, -4.9844155634281453, -5.3444541284281462, -4.9844155634281453, -3.5657800234281454, -3.3089284364281464, -4.3014266504281453, -4.8384019284281461, -4.4783633634281461, -4.5774755634281457, -4.1405105634281458, -4.1405105634281458, -4.1405105634281458, -4.1405105634281458, -4.9844155634281453, -4.9844155634281453, -4.9844155634281453, -4.1405105634281458, -4.9844155634281453, -4.9844155634281453, -4.9844155634281453, -4.1405105634281458]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	259,
							"begin_column":	3,
							"end_line":	259,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L259\", 25, &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(sess), sizeof (sess), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    if (c->mem->used == 0)\n        continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.42625328959622, -5.5197811245962214, -9.19708698959622, -9.26645561659622, -9.41246925159622, -9.77250781659622, -9.41246925159622, -7.9938337115962215, -7.7369821245962216, -8.72948033859622, -9.26645561659622, -8.90641705159622, -9.00552925159622, -8.56856425159622, -8.56856425159622, -8.56856425159622, -8.56856425159622, -9.41246925159622, -9.41246925159622, -9.41246925159622, -8.56856425159622, -9.41246925159622, -9.41246925159622, -9.41246925159622, -8.56856425159622]
								}]
						}]
				}, {
					"line":	260,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [160, 161, 162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [], [], [], [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], [], [], [], [], [], []],
							"begin_line":	261,
							"begin_column":	1,
							"end_line":	261,
							"end_column":	1,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c, 0, sizeof (*(c)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L261\", 25, &(c), sizeof (c), &(we_have), sizeof (we_have), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    break;\n", "if (__is_neg(\"\", \"L261\", 25, &(c), sizeof (c), &(we_have), sizeof (we_have), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L261\", 25, &(c), sizeof (c), &(we_have), sizeof (we_have), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	2,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	3,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	4,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	5,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	6,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	7,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	8,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	9,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	10,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	11,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	12,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	13,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	14,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	15,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	16,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	17,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	18,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	19,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	20,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	21,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	22,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	23,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	24,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	25,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	26,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	27,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	28,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	29,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	30,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	31,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	32,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	33,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	34,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	35,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	36,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	37,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	38,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	39,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	40,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	41,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	42,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	43,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	44,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	45,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	46,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	47,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	48,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	49,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	50,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	51,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	52,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	53,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	54,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	55,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	56,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	57,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	58,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	59,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	60,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	61,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	62,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	63,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	64,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	65,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	66,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	67,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	68,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	69,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	70,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	71,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	72,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	73,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	74,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	75,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	76,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	77,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	78,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	79,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	80,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	81,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	82,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	83,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	84,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	85,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	86,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	87,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	88,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	89,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	90,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	91,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	92,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	93,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	94,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	95,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	96,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	97,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	98,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	99,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	100,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	101,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	102,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	103,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	104,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	105,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	106,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	107,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	108,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	109,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	110,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	111,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	112,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	113,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	114,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	115,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	116,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	117,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	118,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	119,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	120,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	121,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	122,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	123,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	124,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	125,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	126,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	127,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	128,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	129,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	130,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	131,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	132,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	133,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	134,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	135,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	136,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	137,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	138,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	139,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	140,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	141,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	142,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	143,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	144,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	145,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	146,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	147,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	148,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	149,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	150,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	151,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	152,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	153,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	154,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	155,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	156,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	157,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	158,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	159,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	160,
									"scores":	[-9.3404260382787, -9.2120354404787, -9.7002433084787, -10.5163166382787, -10.8141424092787, -10.1285960682787, -10.7247168282787, -10.2680059232787, -10.6796740682787, -10.6080295442787, -10.6080295442787, -10.0119087842787, -10.9041910132787, -10.417397544278703, -10.417397544278703, -10.417397544278703, -10.417397544278703, -10.6080295442787, -10.6080295442787, -10.6080295442787, -10.417397544278703, -10.6080295442787, -10.6080295442787, -10.6080295442787, -10.417397544278703]
								}, {
									"case":	161,
									"scores":	[-9.4403342382787, -9.3119436404787, -9.8001515084787, -10.6162248382787, -10.9140506092787, -10.2285042682787, -10.824625028278703, -10.3679141232787, -10.7795822682787, -10.7079377442787, -10.7079377442787, -10.1118169842787, -11.004099213278703, -10.5173057442787, -10.5173057442787, -10.5173057442787, -10.5173057442787, -10.7079377442787, -10.7079377442787, -10.7079377442787, -10.5173057442787, -10.7079377442787, -10.7079377442787, -10.7079377442787, -10.5173057442787]
								}, {
									"case":	162,
									"scores":	[-11.7031160382787, -11.5747254404787, -12.062933308478703, -12.879006638278703, -13.1768324092787, -12.4912860682787, -13.0874068282787, -12.6306959232787, -13.0423640682787, -12.970719544278703, -12.970719544278703, -12.374598784278703, -13.2668810132787, -12.7800875442787, -12.7800875442787, -12.7800875442787, -12.7800875442787, -12.970719544278703, -12.970719544278703, -12.970719544278703, -12.7800875442787, -12.970719544278703, -12.970719544278703, -12.970719544278703, -12.7800875442787]
								}]
						}, {
							"switch":	9,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	261,
							"begin_column":	3,
							"end_line":	261,
							"end_column":	40,
							"patch_codes":	["if (!__is_neg(\"\", \"L261\", 25, &(c), sizeof (c), &(we_have), sizeof (we_have), &(c->mem->used), sizeof (c->mem->used), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->mem->size), sizeof (c->mem->size), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    we_have = c->mem->used - c->offset - 1;\n", "{\n}\n", "we_have = (&c)->mem->used - c->offset - 1", "we_have = (&con)->mem->used - c->offset - 1", "we_have = (&sess)->mem->used - c->offset - 1", "we_have = (&srv)->mem->used - c->offset - 1", "we_have = (&we_have)->mem->used - c->offset - 1", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (&c)->offset - 1", "we_have = c->mem->used - (&con)->offset - 1", "we_have = c->mem->used - (&sess)->offset - 1", "we_have = c->mem->used - (&srv)->offset - 1", "we_have = c->mem->used - (&we_have)->offset - 1", "we_have = c->mem->used - (c)->offset - 1", "we_have = c->mem->used - c->offset - (0 * we_have)", "we_have = c->mem->used - c->offset - (0)", "we_have = c->mem->used - c->offset - (c != 0)", "we_have = c->mem->used - c->offset - (c == 0)", "we_have = c->mem->used - c->offset - (con != 0)", "we_have = c->mem->used - c->offset - (con == 0)", "we_have = c->mem->used - c->offset - (sess != 0)", "we_have = c->mem->used - c->offset - (sess == 0)", "we_have = c->mem->used - c->offset - (srv != 0)", "we_have = c->mem->used - c->offset - (srv == 0)", "we_have = c->mem->used - c->offset - (we_have != 0)", "we_have = c->mem->used - c->offset - (we_have + 0)", "we_have = c->mem->used - c->offset - (we_have - 0)", "we_have = c->mem->used - c->offset - (we_have == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8725038932787, -7.1325067662787021, -8.0678658732787, -9.9967958932787, -9.3548646842787, -9.1834973892787, -9.6895495892787, -7.5301918112787023, -9.5962118892787, -9.2984690242787, -9.2984690242787, -8.7924168242787, -9.4939442932787, -8.454564024278703, -8.454564024278703, -8.454564024278703, -8.454564024278703, -9.2984690242787, -9.2984690242787, -9.2984690242787, -8.454564024278703, -9.2984690242787, -9.2984690242787, -9.2984690242787, -8.454564024278703]
								}, {
									"case":	2,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	3,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	4,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	5,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	6,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	7,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	8,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	9,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	10,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	11,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	12,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	13,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	14,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	15,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	16,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	17,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	18,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	19,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	20,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	21,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	22,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	23,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	24,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	25,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	26,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	27,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	28,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	29,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	30,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	31,
									"scores":	[-7.0838480542787021]
								}]
						}]
				}, {
					"line":	261,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [160, 161, 162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [], [], [], [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], [], [], [], [], [], []],
							"begin_line":	262,
							"begin_column":	1,
							"end_line":	262,
							"end_column":	1,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L262\", 72, &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem->ptr), sizeof (c->mem->ptr), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->mem->size), sizeof (c->mem->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    break;\n", "if (__is_neg(\"\", \"L262\", 72, &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem->ptr), sizeof (c->mem->ptr), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->mem->size), sizeof (c->mem->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L262\", 72, &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem->ptr), sizeof (c->mem->ptr), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->mem->size), sizeof (c->mem->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	2,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	3,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	4,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	5,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	6,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	7,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	8,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	9,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	10,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	11,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	12,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	13,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	14,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	15,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	16,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	17,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	18,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	19,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	20,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	21,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	22,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	23,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	24,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	25,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	26,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	27,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	28,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	29,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	30,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	31,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	32,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	33,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	34,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	35,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	36,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	37,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	38,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	39,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	40,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	41,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	42,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	43,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	44,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	45,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	46,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	47,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	48,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	49,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	50,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	51,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	52,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	53,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	54,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	55,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	56,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	57,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	58,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	59,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	60,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	61,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	62,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	63,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	64,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	65,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	66,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	67,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	68,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	69,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	70,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	71,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	72,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	73,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	74,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	75,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	76,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	77,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	78,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	79,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	80,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	81,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	82,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	83,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	84,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	85,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	86,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	87,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	88,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	89,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	90,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	91,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	92,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	93,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	94,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	95,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	96,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	97,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	98,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	99,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	100,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	101,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	102,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	103,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	104,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	105,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	106,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	107,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	108,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	109,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	110,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	111,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	112,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	113,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	114,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	115,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	116,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	117,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	118,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	119,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	120,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	121,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	122,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	123,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	124,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	125,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	126,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	127,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	128,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	129,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	130,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	131,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	132,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	133,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	134,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	135,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	136,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	137,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	138,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	139,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	140,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	141,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	142,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	143,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	144,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	145,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	146,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	147,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	148,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	149,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	150,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	151,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	152,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	153,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	154,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	155,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	156,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	157,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	158,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	159,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	160,
									"scores":	[-10.423081960961182, -7.5845665639611823, -11.019202720961182, -10.409927973961182, -11.479963260961181, -11.041434530961183, -11.241763825161183, -11.673577020961183, -11.068295115961181, -12.217325130961182, -12.355662925961184, -11.408318736961181, -11.408318736961181, -11.704480205961183, -10.812197976961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.408318736961181, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.408318736961181, -11.408318736961181, -11.408318736961181, -11.408318736961181, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.408318736961181, -11.408318736961181, -11.408318736961181, -10.761575736961182, -11.408318736961181, -11.408318736961181, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.307109436961182, -11.408318736961181, -11.408318736961181, -11.408318736961181, -11.217686736961182, -11.217686736961182, -11.307109436961182, -11.408318736961181, -11.408318736961181, -11.408318736961181, -11.217686736961182, -11.217686736961182, -11.217686736961182, -11.408318736961181, -11.408318736961181, -11.408318736961181, -11.217686736961182, -11.408318736961181, -11.408318736961181, -11.408318736961181, -11.217686736961182]
								}, {
									"case":	161,
									"scores":	[-10.522990160961182, -7.6844747639611821, -11.119110920961182, -10.509836173961183, -11.579871460961183, -11.141342730961181, -11.341672025161182, -11.773485220961181, -11.168203315961183, -12.317233330961182, -12.455571125961184, -11.508226936961183, -11.508226936961183, -11.804388405961182, -10.912106176961181, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.508226936961183, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.508226936961183, -11.508226936961183, -11.508226936961183, -11.508226936961183, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.508226936961183, -11.508226936961183, -11.508226936961183, -10.861483936961182, -11.508226936961183, -11.508226936961183, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.407017636961182, -11.508226936961183, -11.508226936961183, -11.508226936961183, -11.317594936961182, -11.317594936961182, -11.407017636961182, -11.508226936961183, -11.508226936961183, -11.508226936961183, -11.317594936961182, -11.317594936961182, -11.317594936961182, -11.508226936961183, -11.508226936961183, -11.508226936961183, -11.317594936961182, -11.508226936961183, -11.508226936961183, -11.508226936961183, -11.317594936961182]
								}, {
									"case":	162,
									"scores":	[-12.785771960961181, -9.947256563961183, -13.381892720961183, -12.772617973961182, -13.842653260961182, -13.404124530961182, -13.604453825161183, -14.036267020961182, -13.430985115961182, -14.580015130961183, -14.718352925961184, -13.771008736961182, -13.771008736961182, -14.067170205961183, -13.174887976961182, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.771008736961182, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.124265736961183, -13.771008736961182, -13.771008736961182, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.669799436961183, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.580376736961183, -13.580376736961183, -13.669799436961183, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.580376736961183, -13.580376736961183, -13.580376736961183, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.580376736961183, -13.771008736961182, -13.771008736961182, -13.771008736961182, -13.580376736961183]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	262,
							"begin_column":	3,
							"end_line":	262,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L262\", 72, &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(c), sizeof (c), &(c->mem->used), sizeof (c->mem->used), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem->ptr), sizeof (c->mem->ptr), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->mem->size), sizeof (c->mem->size), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    sess->rb->bytes_out += we_have;\n", "{\n}\n", "(&c)->rb->bytes_out += we_have", "(&con)->rb->bytes_out += we_have", "(&sess)->rb->bytes_out += we_have", "(&srv)->rb->bytes_out += we_have", "(&we_have)->rb->bytes_out += we_have", "(sess)->rb->bytes_out += we_have", "sess->rb->bytes_out += (0 * we_have)", "sess->rb->bytes_out += (c != 0)", "sess->rb->bytes_out += (c == 0)", "sess->rb->bytes_out += (con != 0)", "sess->rb->bytes_out += (con == 0)", "sess->rb->bytes_out += (sess != 0)", "sess->rb->bytes_out += (sess == 0)", "sess->rb->bytes_out += (srv != 0)", "sess->rb->bytes_out += (srv == 0)", "sess->rb->bytes_out += (we_have != 0)", "sess->rb->bytes_out += (we_have + 0)", "sess->rb->bytes_out += (we_have - 0)", "sess->rb->bytes_out += (we_have == 0)", "sess->rb->bytes_out += (we_have)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.51531111696118, -7.0401075329611826, -10.021363316961182, -8.0611280169611828, -10.319106181961182, -9.77102251296118, -9.51863189296118, -10.471700081961183, -8.2220441039611831, -10.895314512961182, -10.805630703961182, -9.99032131696118, -9.99032131696118, -10.185796585961182, -9.4842691169611832, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.99032131696118, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.99032131696118, -9.99032131696118, -9.99032131696118, -9.99032131696118, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.99032131696118, -9.99032131696118, -9.99032131696118, -8.90248944696118, -9.99032131696118, -9.99032131696118, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.58338131696118, -9.99032131696118, -9.99032131696118, -9.99032131696118, -9.146416316961183, -9.146416316961183, -9.58338131696118, -9.99032131696118, -9.99032131696118, -9.99032131696118, -9.146416316961183, -9.146416316961183, -9.146416316961183, -9.99032131696118, -9.99032131696118, -9.99032131696118, -9.146416316961183, -9.99032131696118, -9.99032131696118, -9.99032131696118, -9.146416316961183]
								}, {
									"case":	2,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	3,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	4,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	5,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	6,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	7,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	8,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	9,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	10,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	11,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	12,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	13,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	14,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	15,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	16,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	17,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	18,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	19,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	20,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	21,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	22,
									"scores":	[-7.0636453469611826]
								}]
						}]
				}, {
					"line":	262,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [160, 161, 162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [], [], [], [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], [], [], [], [], [], []],
							"begin_line":	263,
							"begin_column":	1,
							"end_line":	263,
							"end_column":	1,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L263\", 69, &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    break;\n", "if (__is_neg(\"\", \"L263\", 69, &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L263\", 69, &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	2,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	3,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	4,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	5,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	6,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	7,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	8,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	9,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	10,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	11,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	12,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	13,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	14,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	15,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	16,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	17,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	18,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	19,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	20,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	21,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	22,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	23,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	24,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	25,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	26,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	27,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	28,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	29,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	30,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	31,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	32,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	33,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	34,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	35,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	36,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	37,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	38,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	39,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	40,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	41,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	42,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	43,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	44,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	45,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	46,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	47,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	48,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	49,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	50,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	51,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	52,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	53,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	54,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	55,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	56,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	57,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	58,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	59,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	60,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	61,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	62,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	63,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	64,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	65,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	66,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	67,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	68,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	69,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	70,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	71,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	72,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	73,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	74,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	75,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	76,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	77,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	78,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	79,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	80,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	81,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	82,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	83,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	84,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	85,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	86,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	87,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	88,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	89,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	90,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	91,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	92,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	93,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	94,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	95,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	96,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	97,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	98,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	99,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	100,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	101,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	102,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	103,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	104,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	105,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	106,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	107,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	108,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	109,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	110,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	111,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	112,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	113,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	114,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	115,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	116,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	117,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	118,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	119,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	120,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	121,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	122,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	123,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	124,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	125,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	126,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	127,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	128,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	129,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	130,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	131,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	132,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	133,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	134,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	135,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	136,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	137,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	138,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	139,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	140,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	141,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	142,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	143,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	144,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	145,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	146,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	147,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	148,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	149,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	150,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	151,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	152,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	153,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	154,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	155,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	156,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	157,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	158,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	159,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	160,
									"scores":	[-10.953957253643663, -7.7251275566436632, -11.147571013643663, -10.389725266643662, -11.403650969643664, -11.021231823643664, -12.335460218643664, -11.999771729643662, -10.653096729643662, -12.197122423643663, -11.388116029643662, -11.388116029643662, -10.791995269643662, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.388116029643662, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.388116029643662, -11.388116029643662, -11.388116029643662, -11.388116029643662, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.388116029643662, -11.388116029643662, -11.388116029643662, -10.741373029643663, -11.388116029643662, -11.388116029643662, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.286906729643663, -11.388116029643662, -11.388116029643662, -11.388116029643662, -11.197484029643663, -11.197484029643663, -11.286906729643663, -11.388116029643662, -11.388116029643662, -11.388116029643662, -11.197484029643663, -11.197484029643663, -11.197484029643663, -11.388116029643662, -11.388116029643662, -11.388116029643662, -11.197484029643663, -11.388116029643662, -11.388116029643662, -11.388116029643662, -11.197484029643663]
								}, {
									"case":	161,
									"scores":	[-11.053865453643663, -7.825035756643663, -11.247479213643661, -10.489633466643664, -11.503559169643662, -11.121140023643662, -12.435368418643664, -12.099679929643663, -10.753004929643662, -12.297030623643662, -11.488024229643663, -11.488024229643663, -10.891903469643662, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.488024229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -10.841281229643663, -11.488024229643663, -11.488024229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.386814929643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -11.297392229643663, -11.297392229643663, -11.386814929643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -11.297392229643663, -11.297392229643663, -11.297392229643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -11.297392229643663, -11.488024229643663, -11.488024229643663, -11.488024229643663, -11.297392229643663]
								}, {
									"case":	162,
									"scores":	[-13.316647253643664, -10.087817556643664, -13.510261013643662, -12.752415266643663, -13.766340969643663, -13.383921823643663, -14.698150218643665, -14.362461729643663, -13.015786729643663, -14.559812423643663, -13.750806029643662, -13.750806029643662, -13.154685269643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.750806029643662, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.104063029643664, -13.750806029643662, -13.750806029643662, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.649596729643664, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.560174029643663, -13.560174029643663, -13.649596729643664, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.560174029643663, -13.560174029643663, -13.560174029643663, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.560174029643663, -13.750806029643662, -13.750806029643662, -13.750806029643662, -13.560174029643663]
								}]
						}, {
							"switch":	13,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	263,
							"begin_column":	3,
							"end_line":	263,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L263\", 69, &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(sess->rb), sizeof (sess->rb), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    con->send->bytes_in += we_have;\n", "{\n}\n", "(&c)->send->bytes_in += we_have", "(&con)->send->bytes_in += we_have", "(&sess)->send->bytes_in += we_have", "(&srv)->send->bytes_in += we_have", "(&we_have)->send->bytes_in += we_have", "(con)->send->bytes_in += we_have", "con->send->bytes_in += (0 * we_have)", "con->send->bytes_in += (c != 0)", "con->send->bytes_in += (c == 0)", "con->send->bytes_in += (con != 0)", "con->send->bytes_in += (con == 0)", "con->send->bytes_in += (sess != 0)", "con->send->bytes_in += (sess == 0)", "con->send->bytes_in += (srv != 0)", "con->send->bytes_in += (srv == 0)", "con->send->bytes_in += (we_have != 0)", "con->send->bytes_in += (we_have + 0)", "con->send->bytes_in += (we_have - 0)", "con->send->bytes_in += (we_have == 0)", "con->send->bytes_in += (we_have)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.218613474643663, -7.7023776666436632, -10.214756209643664, -8.828966309643663, -10.722060040643662, -9.4520211786436636, -7.5635119696436641, -11.228112240643663, -10.058319219643662, -10.372725778643662, -10.758159609643663, -10.758159609643663, -10.252107409643664, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -10.758159609643663, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -10.758159609643663, -10.758159609643663, -10.758159609643663, -10.758159609643663, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -10.758159609643663, -10.758159609643663, -10.758159609643663, -9.67032773964366, -10.758159609643663, -10.758159609643663, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -10.351219609643662, -10.758159609643663, -10.758159609643663, -10.758159609643663, -9.9142546096436632, -9.9142546096436632, -10.351219609643662, -10.758159609643663, -10.758159609643663, -10.758159609643663, -9.9142546096436632, -9.9142546096436632, -9.9142546096436632, -10.758159609643663, -10.758159609643663, -10.758159609643663, -9.9142546096436632, -10.758159609643663, -10.758159609643663, -10.758159609643663, -9.9142546096436632]
								}, {
									"case":	2,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	3,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	4,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	5,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	6,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	7,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	8,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	9,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	10,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	11,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	12,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	13,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	14,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	15,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	16,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	17,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	18,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	19,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	20,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	21,
									"scores":	[-7.0434426396436631]
								}, {
									"case":	22,
									"scores":	[-7.0434426396436631]
								}]
						}]
				}, {
					"line":	268,
					"switches":	[{
							"switch":	16,
							"types":	[[], [], [], [], [161, 162, 163], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], [], [], [], [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], [], [], [], [], [], []],
							"begin_line":	269,
							"begin_column":	2,
							"end_line":	269,
							"end_column":	2,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c, 0, sizeof (*(c)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L269\", 59, &(con), sizeof (con), &(c), sizeof (c), &(con->send), sizeof (con->send), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->ptr), sizeof (c->mem->ptr), &(c->mem->used), sizeof (c->mem->used), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    break;\n", "if (__is_neg(\"\", \"L269\", 59, &(con), sizeof (con), &(c), sizeof (c), &(con->send), sizeof (con->send), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->ptr), sizeof (c->mem->ptr), &(c->mem->used), sizeof (c->mem->used), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    return 0;\n", "if (__is_neg(\"\", \"L269\", 59, &(con), sizeof (con), &(c), sizeof (c), &(con->send), sizeof (con->send), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->ptr), sizeof (c->mem->ptr), &(c->mem->used), sizeof (c->mem->used), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	2,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	3,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	4,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	5,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	6,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	7,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	8,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	9,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	10,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	11,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	12,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	13,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	14,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	15,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	16,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	17,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	18,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	19,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	20,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	21,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	22,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	23,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	24,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	25,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	26,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	27,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	28,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	29,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	30,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	31,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	32,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	33,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	34,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	35,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	36,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	37,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	38,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	39,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	40,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	41,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	42,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	43,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	44,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	45,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	46,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	47,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	48,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	49,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	50,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	51,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	52,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	53,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	54,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	55,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	56,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	57,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	58,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	59,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	60,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	61,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	62,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	63,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	64,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	65,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	66,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	67,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	68,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	69,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	70,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	71,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	72,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	73,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	74,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	75,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	76,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	77,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	78,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	79,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	80,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	81,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	82,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	83,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	84,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	85,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	86,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	87,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	88,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	89,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	90,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	91,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	92,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	93,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	94,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	95,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	96,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	97,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	98,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	99,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	100,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	101,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	102,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	103,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	104,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	105,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	106,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	107,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	108,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	109,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	110,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	111,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	112,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	113,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	114,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	115,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	116,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	117,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	118,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	119,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	120,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	121,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	122,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	123,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	124,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	125,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	126,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	127,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	128,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	129,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	130,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	131,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	132,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	133,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	134,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	135,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	136,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	137,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	138,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	139,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	140,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	141,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	142,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	143,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	144,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	145,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	146,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	147,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	148,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	149,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	150,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	151,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	152,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	153,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	154,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	155,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	156,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	157,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	158,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	159,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	160,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	161,
									"scores":	[-8.596870759008624, -8.3320943290086245, -8.5989579350086238, -9.1054779290086252, -8.6972400580086244, -8.896046662008624, -8.9004630210086244, -9.0019139750086232, -8.6340191350086233, -9.407402735008624, -9.407402735008624, -9.5980347350086248, -9.0019139750086232, -9.5980347350086248, -9.5980347350086248, -9.5980347350086248, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.5980347350086248, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.5980347350086248, -9.5980347350086248, -9.5980347350086248, -9.5980347350086248, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.5980347350086248, -9.5980347350086248, -9.5980347350086248, -8.9512917350086241, -9.5980347350086248, -9.5980347350086248, -9.407402735008624, -9.407402735008624, -9.407402735008624, -9.4968254350086241, -9.5980347350086248, -9.5980347350086248, -9.5980347350086248, -9.407402735008624, -9.407402735008624, -9.4968254350086241, -9.407402735008624, -9.407402735008624]
								}, {
									"case":	162,
									"scores":	[-8.6967789590086237, -8.4320025290086242, -8.6988661350086236, -9.2053861290086232, -8.7971482580086242, -8.9959548620086238, -9.0003712210086242, -9.1018221750086248, -8.7339273350086231, -9.5073109350086238, -9.5073109350086238, -9.6979429350086228, -9.1018221750086248, -9.6979429350086228, -9.6979429350086228, -9.6979429350086228, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.6979429350086228, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.6979429350086228, -9.6979429350086228, -9.6979429350086228, -9.6979429350086228, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.6979429350086228, -9.6979429350086228, -9.6979429350086228, -9.0511999350086239, -9.6979429350086228, -9.6979429350086228, -9.5073109350086238, -9.5073109350086238, -9.5073109350086238, -9.5967336350086239, -9.6979429350086228, -9.6979429350086228, -9.6979429350086228, -9.5073109350086238, -9.5073109350086238, -9.5967336350086239, -9.5073109350086238, -9.5073109350086238]
								}, {
									"case":	163,
									"scores":	[-10.959560759008625, -10.694784329008623, -10.961647935008624, -11.468167929008624, -11.059930058008625, -11.258736662008625, -11.263153021008623, -11.364603975008624, -10.996709135008624, -11.770092735008625, -11.770092735008625, -11.960724735008624, -11.364603975008624, -11.960724735008624, -11.960724735008624, -11.960724735008624, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.960724735008624, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.960724735008624, -11.960724735008624, -11.960724735008624, -11.960724735008624, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.960724735008624, -11.960724735008624, -11.960724735008624, -11.313981735008625, -11.960724735008624, -11.960724735008624, -11.770092735008625, -11.770092735008625, -11.770092735008625, -11.859515435008625, -11.960724735008624, -11.960724735008624, -11.960724735008624, -11.770092735008625, -11.770092735008625, -11.859515435008625, -11.770092735008625, -11.770092735008625]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], [], [], [], [], [2, 3, 4, 5, 6, 7], [], [], [8]],
							"begin_line":	269,
							"begin_column":	4,
							"end_line":	269,
							"end_column":	86,
							"patch_codes":	["if (!__is_neg(\"\", \"L269\", 59, &(con), sizeof (con), &(c), sizeof (c), &(con->send), sizeof (con->send), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->ptr), sizeof (c->mem->ptr), &(c->mem->used), sizeof (c->mem->used), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->is_closed), sizeof (con->send->is_closed), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n", "buffer_append_string_encoded(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset, 0)", "buffer_append_string_encoded(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset, 1)", "g_bookmark_file_load_from_data(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset, 0)", "g_io_channel_write(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset, 0)", "strncasecmp_l(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset, 0)", "strxfrm_l(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset, 0)", "{\n}\n", "BIO_printf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "OPENSSL_strlcat(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "OPENSSL_strlcpy(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "VALGRIND_PRINTF(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "VALGRIND_PRINTF_BACKTRACE(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "X509_VERIFY_PARAM_add1_host(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "X509_VERIFY_PARAM_set1_email(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "X509_VERIFY_PARAM_set1_host(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "__builtin_va_start(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "__stpncpy(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "array_get_element(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_append_memory(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_append_string_len(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_append_string_rfill(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_copy_memory(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_copy_string_hex(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_copy_string_len(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_is_equal_string(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "buffer_search_string_len(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "execl(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "execle(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "execlp(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "fprintf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_ascii_strncasecmp(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_build_filename(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_build_path(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_dpgettext(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_markup_printf_escaped(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_prefix_error(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_print(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_printerr(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_relation_exists(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_relation_insert(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_scanner_error(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_scanner_warn(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_strconcat(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_strdup_printf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_string_append_printf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_string_printf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_strjoin(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_strlcat(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_strlcpy(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_test_message(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_utf8_strncpy(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_builder_add(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_builder_add_parsed(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_get(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_iter_loop(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_iter_next(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_new(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_new_parsed(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "g_variant_new_printf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "log_trace(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "mbstowcs(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "mbtowc(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "printf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "sprintf(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "stpncpy(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "strncasecmp(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "strncat(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "strncmp(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "strncpy(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "strxfrm(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem((&c)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem((&con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem((&sess)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem((&srv)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem((&we_have)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (&c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (&con)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (&sess)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (&srv)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (&we_have)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (&c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (&con)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (&sess)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (&srv)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (&we_have)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (&c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (&con)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (&sess)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (&srv)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (&we_have)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (&c)->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (&con)->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (&sess)->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (&srv)->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (&we_have)->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4981110150086243, -6.986905253008624, -8.176708615008625, -7.7577389530086247, -6.1713429060086247, -6.7854062150086243, -6.2976340880086248, -8.3354000150086236, -7.2267135150086244, -7.9975472150086242, -7.9975472150086242, -8.8414522150086245, -8.3354000150086236, -8.8414522150086245, -8.8414522150086245, -8.8414522150086245, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -8.8414522150086245, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -8.8414522150086245, -8.8414522150086245, -8.8414522150086245, -8.8414522150086245, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -8.8414522150086245, -8.8414522150086245, -8.8414522150086245, -7.7536203450086241, -8.8414522150086245, -8.8414522150086245, -7.9975472150086242, -7.9975472150086242, -7.9975472150086242, -8.434512215008624, -8.8414522150086245, -8.8414522150086245, -8.8414522150086245, -7.9975472150086242, -7.9975472150086242, -8.434512215008624, -7.9975472150086242, -7.9975472150086242]
								}, {
									"case":	2,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	3,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	4,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	5,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	6,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	7,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	8,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	9,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	10,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	11,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	12,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	13,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	14,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	15,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	16,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	17,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	18,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	19,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	20,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	21,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	22,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	23,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	24,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	25,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	26,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	27,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	28,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	29,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	30,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	31,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	32,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	33,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	34,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	35,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	36,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	37,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	38,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	39,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	40,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	41,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	42,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	43,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	44,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	45,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	46,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	47,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	48,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	49,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	50,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	51,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	52,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	53,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	54,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	55,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	56,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	57,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	58,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	59,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	60,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	61,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	62,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	63,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	64,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	65,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	66,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	67,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	68,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	69,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	70,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	71,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	72,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	73,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	74,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	75,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	76,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	77,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	78,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	79,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	80,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	81,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	82,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	83,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	84,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	85,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	86,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	87,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	88,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	89,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	90,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	91,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	92,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	93,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	94,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	95,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	96,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	97,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	98,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	99,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	100,
									"scores":	[-7.0030372250086241]
								}, {
									"case":	101,
									"scores":	[-7.0030372250086241]
								}]
						}]
				}, {
					"line":	270,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [160, 161, 162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [], [], [], [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], [], [], [], [], [], []],
							"begin_line":	271,
							"begin_column":	2,
							"end_line":	271,
							"end_column":	2,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c, 0, sizeof (*(c)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L271\", 12, &(c), sizeof (c), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->used), sizeof (c->mem->used), &(con), sizeof (con), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    break;\n", "if (__is_neg(\"\", \"L271\", 12, &(c), sizeof (c), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->used), sizeof (c->mem->used), &(con), sizeof (con), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    return 0;\n", "if (__is_neg(\"\", \"L271\", 12, &(c), sizeof (c), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->used), sizeof (c->mem->used), &(con), sizeof (con), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	25,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	26,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	27,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	28,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	29,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	30,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	31,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	32,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	33,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	34,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	35,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	36,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	37,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	38,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	39,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	40,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	41,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	42,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	43,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	44,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	45,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	46,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	47,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	48,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	49,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	50,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	51,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	52,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	53,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	54,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	55,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	56,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	57,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	58,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	59,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	60,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	61,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	62,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	63,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	64,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	65,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	66,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	67,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	68,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	69,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	70,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	71,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	72,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	73,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	74,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	75,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	76,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	77,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	78,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	79,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	80,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	81,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	82,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	83,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	84,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	85,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	86,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	87,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	88,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	89,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	90,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	91,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	92,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	93,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	94,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	95,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	96,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	97,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	98,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	99,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	100,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	101,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	102,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	103,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	104,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	105,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	106,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	107,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	108,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	109,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	110,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	111,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	112,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	113,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	114,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	115,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	116,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	117,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	118,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	119,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	120,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	121,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	122,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	123,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	124,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	125,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	126,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	127,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	128,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	129,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	130,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	131,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	132,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	133,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	134,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	135,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	136,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	137,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	138,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	139,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	140,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	141,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	142,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	143,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	144,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	145,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	146,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	147,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	148,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	149,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	150,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	151,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	152,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	153,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	154,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	155,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	156,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	157,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	158,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	159,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	160,
									"scores":	[-7.5273566431509487, -8.30074024315095, -8.88502177635095, -7.73369983515095, -8.95906608915095, -9.00308554915095, -8.19273158915095, -7.82483674915095, -8.78885234915095, -8.19273158915095, -8.59822034915095, -8.59822034915095]
								}, {
									"case":	161,
									"scores":	[-7.6272648431509484, -8.40064844315095, -8.98492997635095, -7.83360803515095, -9.05897428915095, -9.10299374915095, -8.29263978915095, -7.9247449491509485, -8.88876054915095, -8.29263978915095, -8.69812854915095, -8.69812854915095]
								}, {
									"case":	162,
									"scores":	[-9.89004664315095, -10.663430243150948, -11.247711776350949, -10.096389835150948, -11.321756089150949, -11.36577554915095, -10.555421589150949, -10.187526749150949, -11.151542349150949, -10.555421589150949, -10.96091034915095, -10.96091034915095]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	271,
							"begin_column":	4,
							"end_line":	271,
							"end_column":	31,
							"patch_codes":	["if (!__is_neg(\"\", \"L271\", 12, &(c), sizeof (c), &(c->mem), sizeof (c->mem), &(c->offset), sizeof (c->offset), &(c->mem->used), sizeof (c->mem->used), &(con), sizeof (con), &(c->mem->ptr), sizeof (c->mem->ptr), &(sess), sizeof (sess), &(we_have), sizeof (we_have), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(c->type), sizeof (c->type), &(c->mem->size), sizeof (c->mem->size)))\n    c->offset = c->mem->used - 1;\n", "{\n}\n", "c->offset = (&c)->mem->used - 1", "c->offset = (&con)->mem->used - 1", "c->offset = (&sess)->mem->used - 1", "c->offset = (&srv)->mem->used - 1", "c->offset = (&we_have)->mem->used - 1", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "c->offset = c->mem->used - (0 * we_have)", "c->offset = c->mem->used - (0)", "c->offset = c->mem->used - (c != 0)", "c->offset = c->mem->used - (c == 0)", "c->offset = c->mem->used - (con != 0)", "c->offset = c->mem->used - (con == 0)", "c->offset = c->mem->used - (sess != 0)", "c->offset = c->mem->used - (sess == 0)", "c->offset = c->mem->used - (srv != 0)", "c->offset = c->mem->used - (srv == 0)", "c->offset = c->mem->used - (we_have != 0)", "c->offset = c->mem->used - (we_have + 0)", "c->offset = c->mem->used - (we_have - 0)", "c->offset = c->mem->used - (we_have == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.78904350315095, -8.55987720315095, -8.09876158215095, -7.3070975721509486, -8.47592103015095, -8.15817120915095, -7.94320314915095, -6.83451664915095, -8.44925534915095, -7.94320314915095, -7.6053503491509487, -7.6053503491509487]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}]
						}]
				}, {
					"line":	263,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [161, 162, 163], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], [], [], [], [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], [], [], [], [], [], []],
							"begin_line":	264,
							"begin_column":	1,
							"end_line":	264,
							"end_column":	1,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->mem->ptr, 0, sizeof (*(&c->mem->ptr)))", "memset(&c->mem->size, 0, sizeof (*(&c->mem->size)))", "memset(&c->mem->used, 0, sizeof (*(&c->mem->used)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c, 0, sizeof (*(c)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->mem->ptr, 0, sizeof (*(c->mem->ptr)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type)))\n    break;\n", "if (__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type)))\n    return 0;\n", "if (__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	2,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	3,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	4,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	5,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	6,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	7,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	8,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	9,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	10,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	11,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	12,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	13,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	14,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	15,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	16,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	17,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	18,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	19,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	20,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	21,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	22,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	23,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	24,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	25,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	26,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	27,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	28,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	29,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	30,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	31,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	32,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	33,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	34,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	35,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	36,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	37,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	38,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	39,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	40,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	41,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	42,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	43,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	44,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	45,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	46,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	47,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	48,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	49,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	50,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	51,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	52,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	53,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	54,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	55,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	56,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	57,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	58,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	59,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	60,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	61,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	62,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	63,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	64,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	65,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	66,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	67,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	68,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	69,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	70,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	71,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	72,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	73,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	74,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	75,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	76,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	77,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	78,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	79,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	80,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	81,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	82,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	83,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	84,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	85,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	86,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	87,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	88,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	89,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	90,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	91,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	92,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	93,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	94,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	95,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	96,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	97,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	98,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	99,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	100,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	101,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	102,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	103,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	104,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	105,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	106,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	107,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	108,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	109,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	110,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	111,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	112,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	113,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	114,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	115,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	116,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	117,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	118,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	119,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	120,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	121,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	122,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	123,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	124,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	125,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	126,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	127,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	128,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	129,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	130,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	131,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	132,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	133,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	134,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	135,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	136,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	137,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	138,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	139,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	140,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	141,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	142,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	143,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	144,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	145,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	146,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	147,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	148,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	149,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	150,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	151,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	152,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	153,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	154,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	155,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	156,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	157,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	158,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	159,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	160,
									"scores":	[-7.0232399323261436]
								}, {
									"case":	161,
									"scores":	[-8.3329050163261442, -9.5273095525261446, -10.741549046326144, -8.0529204223261441, -10.743636222326144, -10.396038022326143, -11.146592262326145, -10.089438216326144, -11.131057322326143, -10.534936562326143, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -11.131057322326143, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -11.131057322326143, -11.131057322326143, -11.131057322326143, -11.131057322326143, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -10.940425322326144, -11.131057322326143, -11.131057322326143, -11.131057322326143, -10.484314322326144, -11.131057322326143, -11.131057322326143, -10.940425322326144, -10.940425322326144, -10.940425322326144, -11.029848022326144, -11.131057322326143, -11.131057322326143, -11.131057322326143, -10.940425322326144, -10.940425322326144, -11.029848022326144, -11.131057322326143, -11.131057322326143, -11.131057322326143, -10.940425322326144, -10.940425322326144]
								}, {
									"case":	162,
									"scores":	[-8.432813216326144, -9.62721775252614, -10.841457246326144, -8.1528286223261439, -10.843544422326143, -10.495946222326143, -11.246500462326143, -10.189346416326144, -11.230965522326144, -10.634844762326143, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.230965522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.230965522326144, -11.230965522326144, -11.230965522326144, -11.230965522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.230965522326144, -11.230965522326144, -11.230965522326144, -10.584222522326144, -11.230965522326144, -11.230965522326144, -11.040333522326144, -11.040333522326144, -11.040333522326144, -11.129756222326144, -11.230965522326144, -11.230965522326144, -11.230965522326144, -11.040333522326144, -11.040333522326144, -11.129756222326144, -11.230965522326144, -11.230965522326144, -11.230965522326144, -11.040333522326144, -11.040333522326144]
								}, {
									"case":	163,
									"scores":	[-10.695595016326145, -11.889999552526143, -13.104239046326143, -10.415610422326143, -13.106326222326144, -12.758728022326144, -13.509282262326144, -12.452128216326145, -13.493747322326143, -12.897626562326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.493747322326143, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.493747322326143, -13.493747322326143, -13.493747322326143, -13.493747322326143, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.493747322326143, -13.493747322326143, -13.493747322326143, -12.847004322326145, -13.493747322326143, -13.493747322326143, -13.303115322326144, -13.303115322326144, -13.303115322326144, -13.392538022326145, -13.493747322326143, -13.493747322326143, -13.493747322326143, -13.303115322326144, -13.303115322326144, -13.392538022326145, -13.493747322326143, -13.493747322326143, -13.493747322326143, -13.303115322326144, -13.303115322326144]
								}]
						}, {
							"switch":	15,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	264,
							"begin_column":	3,
							"end_line":	272,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type))) {\n    chunkqueue_steal_chunk(con->send, c);\n} else {\n    chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n    c->offset = c->mem->used - 1;\n}\n", "if ((c->offset == 0) || __is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type))) {\n    chunkqueue_steal_chunk(con->send, c);\n} else {\n    chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n    c->offset = c->mem->used - 1;\n}\n", "if ((c->offset == 0) && !__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type))) {\n    chunkqueue_steal_chunk(con->send, c);\n} else {\n    chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n    c->offset = c->mem->used - 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7704738941281448, -2.6109952631281446, -6.5002357211281456, -5.0986173471281457, -7.1788333211281463, -6.6737839001281456, -7.337524721128144, -6.3377201941281447, -7.373624290128145, -6.867572090128145, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -7.373624290128145, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -7.373624290128145, -7.373624290128145, -7.373624290128145, -7.373624290128145, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -7.373624290128145, -7.373624290128145, -7.373624290128145, -6.2857924201281454, -7.373624290128145, -7.373624290128145, -6.5297192901281456, -6.5297192901281456, -6.5297192901281456, -6.9666842901281454, -7.373624290128145, -7.373624290128145, -7.373624290128145, -6.5297192901281456, -6.5297192901281456, -6.9666842901281454, -7.373624290128145, -7.373624290128145, -7.373624290128145, -6.5297192901281456, -6.5297192901281456]
								}, {
									"case":	2,
									"scores":	[-3.9454864614281449, -0.78600783042814681, -4.6752482884281452, -3.2736299144281453, -5.353845888428145, -4.8487964674281452, -5.5125372884281454, -4.5127327614281452, -5.5486368574281455, -5.0425846574281454, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.460804987428145, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.1416968574281459, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -5.1416968574281459, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451]
								}, {
									"case":	3,
									"scores":	[-3.9454864614281449, -0.78600783042814681, -4.6752482884281452, -3.2736299144281453, -5.353845888428145, -4.8487964674281452, -5.5125372884281454, -4.5127327614281452, -5.5486368574281455, -5.0425846574281454, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.460804987428145, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -4.7047318574281451, -5.1416968574281459, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451, -5.1416968574281459, -5.5486368574281455, -5.5486368574281455, -5.5486368574281455, -4.7047318574281451, -4.7047318574281451]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	264,
							"begin_column":	3,
							"end_line":	272,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type)))\n    if (c->offset == 0) {\n        chunkqueue_steal_chunk(con->send, c);\n    } else {\n        chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n        c->offset = c->mem->used - 1;\n    }\n", "if (!__is_neg(\"\", \"L264\", 56, &(c), sizeof (c), &(c->offset), sizeof (c->offset), &(con), sizeof (con), &(we_have), sizeof (we_have), &(con->send), sizeof (con->send), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess), sizeof (sess), &(c->mem), sizeof (c->mem), &(c->next), sizeof (c->next), &(srv), sizeof (srv), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(c->type), sizeof (c->type)) && (c->offset == 0)) {\n    chunkqueue_steal_chunk(con->send, c);\n} else {\n    chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n    c->offset = c->mem->used - 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8137300263261444, -5.6542513953261437, -9.5434918533261435, -8.1418734793261436, -10.222089453326143, -9.71704003232614, -10.380780853326144, -9.3809763263261434, -10.416880422326143, -9.9108282223261437, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -10.416880422326143, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -10.416880422326143, -10.416880422326143, -10.416880422326143, -10.416880422326143, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -10.416880422326143, -10.416880422326143, -10.416880422326143, -9.32904855232614, -10.416880422326143, -10.416880422326143, -9.5729754223261434, -9.5729754223261434, -9.5729754223261434, -10.009940422326142, -10.416880422326143, -10.416880422326143, -10.416880422326143, -9.5729754223261434, -9.5729754223261434, -10.009940422326142, -10.416880422326143, -10.416880422326143, -10.416880422326143, -9.5729754223261434, -9.5729754223261434]
								}, {
									"case":	2,
									"scores":	[-8.02930088832614, -4.8698222573261436, -8.7590627153261433, -7.3574443413261434, -9.4376603153261431, -8.9326108943261442, -9.5963517153261435, -8.5965471883261433, -9.6324512843261427, -9.1263990843261436, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -9.6324512843261427, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -9.6324512843261427, -9.6324512843261427, -9.6324512843261427, -9.6324512843261427, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -9.6324512843261427, -9.6324512843261427, -9.6324512843261427, -8.544619414326144, -9.6324512843261427, -9.6324512843261427, -8.7885462843261433, -8.7885462843261433, -8.7885462843261433, -9.225511284326144, -9.6324512843261427, -9.6324512843261427, -9.6324512843261427, -8.7885462843261433, -8.7885462843261433, -9.225511284326144, -9.6324512843261427, -9.6324512843261427, -9.6324512843261427, -8.7885462843261433, -8.7885462843261433]
								}]
						}]
				}, {
					"line":	257,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [82, 83], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], [], [], [], [], [], []],
							"begin_line":	258,
							"begin_column":	0,
							"end_line":	258,
							"end_column":	0,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c, 0, sizeof (*(c)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L258\", 22, &(sess), sizeof (sess), &(c), sizeof (c), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem), sizeof (c->mem), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(srv), sizeof (srv), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L258\", 22, &(sess), sizeof (sess), &(c), sizeof (c), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem), sizeof (c->mem), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(srv), sizeof (srv), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	2,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	3,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	4,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	5,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	6,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	7,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	8,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	9,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	10,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	11,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	12,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	13,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	14,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	15,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	16,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	17,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	18,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	19,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	20,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	21,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	22,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	23,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	24,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	25,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	26,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	27,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	28,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	29,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	30,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	31,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	32,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	33,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	34,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	35,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	36,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	37,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	38,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	39,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	40,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	41,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	42,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	43,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	44,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	45,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	46,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	47,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	48,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	49,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	50,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	51,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	52,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	53,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	54,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	55,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	56,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	57,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	58,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	59,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	60,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	61,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	62,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	63,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	64,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	65,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	66,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	67,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	68,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	69,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	70,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	71,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	72,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	73,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	74,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	75,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	76,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	77,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	78,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	79,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	80,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	81,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	82,
									"scores":	[-9.52027252807064, -7.613579705270638, -9.18809680407064, -9.1381147577706372, -9.18809680407064, -9.01783228807064, -8.4610676482706371, -8.81772912427064, -9.6920853340706365, -9.28981533107064, -9.1995285280706369, -10.097574094070637, -10.097574094070637, -10.097574094070637, -10.288206094070638, -10.288206094070638, -10.288206094070638, -10.097574094070637, -10.288206094070638, -10.288206094070638, -10.288206094070638, -10.097574094070637]
								}, {
									"case":	83,
									"scores":	[-11.783054328070637, -9.8763615052706371, -11.450878604070638, -11.400896557770636, -11.450878604070638, -11.280614088070639, -10.723849448270638, -11.080510924270637, -11.954867134070637, -11.552597131070637, -11.462310328070638, -12.360355894070636, -12.360355894070636, -12.360355894070636, -12.550987894070637, -12.550987894070637, -12.550987894070637, -12.360355894070636, -12.550987894070637, -12.550987894070637, -12.550987894070637, -12.360355894070636]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	258,
							"begin_column":	2,
							"end_line":	273,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L258\", 22, &(sess), sizeof (sess), &(c), sizeof (c), &(c->next), sizeof (c->next), &(sess->rb), sizeof (sess->rb), &(sess->rb->first), sizeof (sess->rb->first), &(c->mem), sizeof (c->mem), &(we_have), sizeof (we_have), &(c->offset), sizeof (c->offset), &(srv), sizeof (srv), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(con), sizeof (con), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c->type), sizeof (c->type), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    for (c = sess->rb->first; c; c = c->next) {\n        if (c->mem->used == 0)\n            continue;\n        we_have = c->mem->used - c->offset - 1;\n        sess->rb->bytes_out += we_have;\n        con->send->bytes_in += we_have;\n        if (c->offset == 0) {\n            chunkqueue_steal_chunk(con->send, c);\n        } else {\n            chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset);\n            c->offset = c->mem->used - 1;\n        }\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1445210310706369, -7.2708446850706379, -8.1513492850706371, -7.9559117697706379, -8.1513492850706371, -6.742945285070638, -5.7087512850706377, -3.1795102850706378, -7.5273201120706377, -6.1041790120706381, -6.8967448770706383, -7.1894673120706374, -7.1894673120706374, -7.1894673120706374, -8.03337231207064, -8.03337231207064, -8.03337231207064, -7.1894673120706374, -8.03337231207064, -8.03337231207064, -8.03337231207064, -7.1894673120706374]
								}]
						}]
				}, {
					"line":	273,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [81, 82], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [], [], []],
							"begin_line":	274,
							"begin_column":	0,
							"end_line":	274,
							"end_column":	0,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L274\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L274\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	31,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	32,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	33,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	34,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	35,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	36,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	37,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	38,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	39,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	40,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	41,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	42,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	43,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	44,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	45,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	46,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	47,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	48,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	49,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	50,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	51,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	52,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	53,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	54,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	55,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	56,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	57,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	58,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	59,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	60,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	61,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	62,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	63,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	64,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	65,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	66,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	67,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	68,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	69,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	70,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	71,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	72,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	73,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	74,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	75,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	76,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	77,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	78,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	79,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	80,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	81,
									"scores":	[-9.9069074687531167, -10.061566098453117, -10.191703544753118, -10.581722978753117, -8.278588014453117, -7.304198644753118, -9.6473162447531173, -10.141736944753116, -9.7862147847531169, -10.191703544753118, -10.382335544753118, -10.382335544753118, -10.382335544753118, -10.191703544753118, -10.382335544753118, -10.382335544753118, -10.382335544753118, -10.191703544753118]
								}, {
									"case":	82,
									"scores":	[-12.169689268753118, -12.324347898453119, -12.454485344753117, -12.844504778753119, -10.541369814453118, -9.566980444753117, -11.910098044753118, -12.404518744753119, -12.048996584753118, -12.454485344753117, -12.645117344753118, -12.645117344753118, -12.645117344753118, -12.454485344753117, -12.645117344753118, -12.645117344753118, -12.645117344753118, -12.454485344753117]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [25, 26, 27, 28, 29, 30], [], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [14]],
							"begin_line":	274,
							"begin_column":	2,
							"end_line":	274,
							"end_column":	44,
							"patch_codes":	["if (!__is_neg(\"\", \"L274\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    chunkqueue_remove_finished_chunks(sess->rb);\n", "chunkqueue_append_buffer(sess->rb, 0)", "chunkqueue_prepend_buffer(sess->rb, 0)", "chunkqueue_set_tempdirs(sess->rb, 0)", "chunkqueue_skip(sess->rb, 0)", "chunkqueue_skip(sess->rb, 1)", "chunkqueue_steal_all_chunks(sess->rb, 0)", "chunkqueue_steal_chunk(sess->rb, 0)", "chunkqueue_steal_chunk(sess->rb, c)", "chunkqueue_steal_tempfile(sess->rb, 0)", "chunkqueue_steal_tempfile(sess->rb, c)", "http_request_parse_cq(sess->rb, 0)", "http_response_parse_cq(sess->rb, 0)", "{\n}\n", "chunkqueue_free(sess->rb)", "chunkqueue_get_append_buffer(sess->rb)", "chunkqueue_get_append_tempfile(sess->rb)", "chunkqueue_get_prepend_buffer(sess->rb)", "chunkqueue_is_empty(sess->rb)", "chunkqueue_length(sess->rb)", "chunkqueue_print(sess->rb)", "chunkqueue_remove_empty_last_chunk(sess->rb)", "chunkqueue_reset(sess->rb)", "chunkqueue_written(sess->rb)", "chunkqueue_remove_finished_chunks((&c)->rb)", "chunkqueue_remove_finished_chunks((&con)->rb)", "chunkqueue_remove_finished_chunks((&sess)->rb)", "chunkqueue_remove_finished_chunks((&srv)->rb)", "chunkqueue_remove_finished_chunks((&we_have)->rb)", "chunkqueue_remove_finished_chunks((sess)->rb)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9381720687531185, -8.57297373845312, -7.6447238047531183, -8.29991222375312, -7.5778739204531185, -6.2136218617531176, -7.7887884147531183, -8.38875682275312, -7.9825766047531177, -7.6447238047531183, -8.48862880475312, -8.48862880475312, -8.48862880475312, -7.6447238047531183, -8.48862880475312, -8.48862880475312, -8.48862880475312, -7.6447238047531183]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}]
						}]
				}, {
					"line":	276,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [156, 157], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [], [], []],
							"begin_line":	277,
							"begin_column":	1,
							"end_line":	277,
							"end_column":	1,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L277\", 65, &(con), sizeof (con), &(con->send), sizeof (con->send), &(con->send->is_closed), sizeof (con->send->is_closed), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c), sizeof (c), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out)))\n    return 0;\n", "if (__is_neg(\"\", \"L277\", 65, &(con), sizeof (con), &(con->send), sizeof (con->send), &(con->send->is_closed), sizeof (con->send->is_closed), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c), sizeof (c), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.43736142011808]
								}, {
									"case":	2,
									"scores":	[-6.43736142011808]
								}, {
									"case":	3,
									"scores":	[-6.43736142011808]
								}, {
									"case":	4,
									"scores":	[-6.43736142011808]
								}, {
									"case":	5,
									"scores":	[-6.43736142011808]
								}, {
									"case":	6,
									"scores":	[-6.43736142011808]
								}, {
									"case":	7,
									"scores":	[-6.43736142011808]
								}, {
									"case":	8,
									"scores":	[-6.43736142011808]
								}, {
									"case":	9,
									"scores":	[-6.43736142011808]
								}, {
									"case":	10,
									"scores":	[-6.43736142011808]
								}, {
									"case":	11,
									"scores":	[-6.43736142011808]
								}, {
									"case":	12,
									"scores":	[-6.43736142011808]
								}, {
									"case":	13,
									"scores":	[-6.43736142011808]
								}, {
									"case":	14,
									"scores":	[-6.43736142011808]
								}, {
									"case":	15,
									"scores":	[-6.43736142011808]
								}, {
									"case":	16,
									"scores":	[-6.43736142011808]
								}, {
									"case":	17,
									"scores":	[-6.43736142011808]
								}, {
									"case":	18,
									"scores":	[-6.43736142011808]
								}, {
									"case":	19,
									"scores":	[-6.43736142011808]
								}, {
									"case":	20,
									"scores":	[-6.43736142011808]
								}, {
									"case":	21,
									"scores":	[-6.43736142011808]
								}, {
									"case":	22,
									"scores":	[-6.43736142011808]
								}, {
									"case":	23,
									"scores":	[-6.43736142011808]
								}, {
									"case":	24,
									"scores":	[-6.43736142011808]
								}, {
									"case":	25,
									"scores":	[-6.43736142011808]
								}, {
									"case":	26,
									"scores":	[-6.43736142011808]
								}, {
									"case":	27,
									"scores":	[-6.43736142011808]
								}, {
									"case":	28,
									"scores":	[-6.43736142011808]
								}, {
									"case":	29,
									"scores":	[-6.43736142011808]
								}, {
									"case":	30,
									"scores":	[-6.43736142011808]
								}, {
									"case":	31,
									"scores":	[-6.43736142011808]
								}, {
									"case":	32,
									"scores":	[-6.43736142011808]
								}, {
									"case":	33,
									"scores":	[-6.43736142011808]
								}, {
									"case":	34,
									"scores":	[-6.43736142011808]
								}, {
									"case":	35,
									"scores":	[-6.43736142011808]
								}, {
									"case":	36,
									"scores":	[-6.43736142011808]
								}, {
									"case":	37,
									"scores":	[-6.43736142011808]
								}, {
									"case":	38,
									"scores":	[-6.43736142011808]
								}, {
									"case":	39,
									"scores":	[-6.43736142011808]
								}, {
									"case":	40,
									"scores":	[-6.43736142011808]
								}, {
									"case":	41,
									"scores":	[-6.43736142011808]
								}, {
									"case":	42,
									"scores":	[-6.43736142011808]
								}, {
									"case":	43,
									"scores":	[-6.43736142011808]
								}, {
									"case":	44,
									"scores":	[-6.43736142011808]
								}, {
									"case":	45,
									"scores":	[-6.43736142011808]
								}, {
									"case":	46,
									"scores":	[-6.43736142011808]
								}, {
									"case":	47,
									"scores":	[-6.43736142011808]
								}, {
									"case":	48,
									"scores":	[-6.43736142011808]
								}, {
									"case":	49,
									"scores":	[-6.43736142011808]
								}, {
									"case":	50,
									"scores":	[-6.43736142011808]
								}, {
									"case":	51,
									"scores":	[-6.43736142011808]
								}, {
									"case":	52,
									"scores":	[-6.43736142011808]
								}, {
									"case":	53,
									"scores":	[-6.43736142011808]
								}, {
									"case":	54,
									"scores":	[-6.43736142011808]
								}, {
									"case":	55,
									"scores":	[-6.43736142011808]
								}, {
									"case":	56,
									"scores":	[-6.43736142011808]
								}, {
									"case":	57,
									"scores":	[-6.43736142011808]
								}, {
									"case":	58,
									"scores":	[-6.43736142011808]
								}, {
									"case":	59,
									"scores":	[-6.43736142011808]
								}, {
									"case":	60,
									"scores":	[-6.43736142011808]
								}, {
									"case":	61,
									"scores":	[-6.43736142011808]
								}, {
									"case":	62,
									"scores":	[-6.43736142011808]
								}, {
									"case":	63,
									"scores":	[-6.43736142011808]
								}, {
									"case":	64,
									"scores":	[-6.43736142011808]
								}, {
									"case":	65,
									"scores":	[-6.43736142011808]
								}, {
									"case":	66,
									"scores":	[-6.43736142011808]
								}, {
									"case":	67,
									"scores":	[-6.43736142011808]
								}, {
									"case":	68,
									"scores":	[-6.43736142011808]
								}, {
									"case":	69,
									"scores":	[-6.43736142011808]
								}, {
									"case":	70,
									"scores":	[-6.43736142011808]
								}, {
									"case":	71,
									"scores":	[-6.43736142011808]
								}, {
									"case":	72,
									"scores":	[-6.43736142011808]
								}, {
									"case":	73,
									"scores":	[-6.43736142011808]
								}, {
									"case":	74,
									"scores":	[-6.43736142011808]
								}, {
									"case":	75,
									"scores":	[-6.43736142011808]
								}, {
									"case":	76,
									"scores":	[-6.43736142011808]
								}, {
									"case":	77,
									"scores":	[-6.43736142011808]
								}, {
									"case":	78,
									"scores":	[-6.43736142011808]
								}, {
									"case":	79,
									"scores":	[-6.43736142011808]
								}, {
									"case":	80,
									"scores":	[-6.43736142011808]
								}, {
									"case":	81,
									"scores":	[-6.43736142011808]
								}, {
									"case":	82,
									"scores":	[-6.43736142011808]
								}, {
									"case":	83,
									"scores":	[-6.43736142011808]
								}, {
									"case":	84,
									"scores":	[-6.43736142011808]
								}, {
									"case":	85,
									"scores":	[-6.43736142011808]
								}, {
									"case":	86,
									"scores":	[-6.43736142011808]
								}, {
									"case":	87,
									"scores":	[-6.43736142011808]
								}, {
									"case":	88,
									"scores":	[-6.43736142011808]
								}, {
									"case":	89,
									"scores":	[-6.43736142011808]
								}, {
									"case":	90,
									"scores":	[-6.43736142011808]
								}, {
									"case":	91,
									"scores":	[-6.43736142011808]
								}, {
									"case":	92,
									"scores":	[-6.43736142011808]
								}, {
									"case":	93,
									"scores":	[-6.43736142011808]
								}, {
									"case":	94,
									"scores":	[-6.43736142011808]
								}, {
									"case":	95,
									"scores":	[-6.43736142011808]
								}, {
									"case":	96,
									"scores":	[-6.43736142011808]
								}, {
									"case":	97,
									"scores":	[-6.43736142011808]
								}, {
									"case":	98,
									"scores":	[-6.43736142011808]
								}, {
									"case":	99,
									"scores":	[-6.43736142011808]
								}, {
									"case":	100,
									"scores":	[-6.43736142011808]
								}, {
									"case":	101,
									"scores":	[-6.43736142011808]
								}, {
									"case":	102,
									"scores":	[-6.43736142011808]
								}, {
									"case":	103,
									"scores":	[-6.43736142011808]
								}, {
									"case":	104,
									"scores":	[-6.43736142011808]
								}, {
									"case":	105,
									"scores":	[-6.43736142011808]
								}, {
									"case":	106,
									"scores":	[-6.43736142011808]
								}, {
									"case":	107,
									"scores":	[-6.43736142011808]
								}, {
									"case":	108,
									"scores":	[-6.43736142011808]
								}, {
									"case":	109,
									"scores":	[-6.43736142011808]
								}, {
									"case":	110,
									"scores":	[-6.43736142011808]
								}, {
									"case":	111,
									"scores":	[-6.43736142011808]
								}, {
									"case":	112,
									"scores":	[-6.43736142011808]
								}, {
									"case":	113,
									"scores":	[-6.43736142011808]
								}, {
									"case":	114,
									"scores":	[-6.43736142011808]
								}, {
									"case":	115,
									"scores":	[-6.43736142011808]
								}, {
									"case":	116,
									"scores":	[-6.43736142011808]
								}, {
									"case":	117,
									"scores":	[-6.43736142011808]
								}, {
									"case":	118,
									"scores":	[-6.43736142011808]
								}, {
									"case":	119,
									"scores":	[-6.43736142011808]
								}, {
									"case":	120,
									"scores":	[-6.43736142011808]
								}, {
									"case":	121,
									"scores":	[-6.43736142011808]
								}, {
									"case":	122,
									"scores":	[-6.43736142011808]
								}, {
									"case":	123,
									"scores":	[-6.43736142011808]
								}, {
									"case":	124,
									"scores":	[-6.43736142011808]
								}, {
									"case":	125,
									"scores":	[-6.43736142011808]
								}, {
									"case":	126,
									"scores":	[-6.43736142011808]
								}, {
									"case":	127,
									"scores":	[-6.43736142011808]
								}, {
									"case":	128,
									"scores":	[-6.43736142011808]
								}, {
									"case":	129,
									"scores":	[-6.43736142011808]
								}, {
									"case":	130,
									"scores":	[-6.43736142011808]
								}, {
									"case":	131,
									"scores":	[-6.43736142011808]
								}, {
									"case":	132,
									"scores":	[-6.43736142011808]
								}, {
									"case":	133,
									"scores":	[-6.43736142011808]
								}, {
									"case":	134,
									"scores":	[-6.43736142011808]
								}, {
									"case":	135,
									"scores":	[-6.43736142011808]
								}, {
									"case":	136,
									"scores":	[-6.43736142011808]
								}, {
									"case":	137,
									"scores":	[-6.43736142011808]
								}, {
									"case":	138,
									"scores":	[-6.43736142011808]
								}, {
									"case":	139,
									"scores":	[-6.43736142011808]
								}, {
									"case":	140,
									"scores":	[-6.43736142011808]
								}, {
									"case":	141,
									"scores":	[-6.43736142011808]
								}, {
									"case":	142,
									"scores":	[-6.43736142011808]
								}, {
									"case":	143,
									"scores":	[-6.43736142011808]
								}, {
									"case":	144,
									"scores":	[-6.43736142011808]
								}, {
									"case":	145,
									"scores":	[-6.43736142011808]
								}, {
									"case":	146,
									"scores":	[-6.43736142011808]
								}, {
									"case":	147,
									"scores":	[-6.43736142011808]
								}, {
									"case":	148,
									"scores":	[-6.43736142011808]
								}, {
									"case":	149,
									"scores":	[-6.43736142011808]
								}, {
									"case":	150,
									"scores":	[-6.43736142011808]
								}, {
									"case":	151,
									"scores":	[-6.43736142011808]
								}, {
									"case":	152,
									"scores":	[-6.43736142011808]
								}, {
									"case":	153,
									"scores":	[-6.43736142011808]
								}, {
									"case":	154,
									"scores":	[-6.43736142011808]
								}, {
									"case":	155,
									"scores":	[-6.43736142011808]
								}, {
									"case":	156,
									"scores":	[-6.81013074411808, -7.40625150411808, -8.62482999481808, -8.06457735011808, -8.66069811011808, -8.47006611011808, -7.88731451011808, -7.6966825101180785, -8.47006611011808, -8.47006611011808, -8.66069811011808, -8.06457735011808, -8.47006611011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.47006611011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.66069811011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.01395511011808, -8.66069811011808, -8.66069811011808, -8.47006611011808, -8.47006611011808, -8.47006611011808, -8.55948881011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.47006611011808, -8.47006611011808, -8.55948881011808, -8.66069811011808, -8.66069811011808, -8.66069811011808, -8.47006611011808]
								}, {
									"case":	157,
									"scores":	[-9.07291254411808, -9.66903330411808, -10.88761179481808, -10.327359150118079, -10.923479910118079, -10.732847910118078, -10.15009631011808, -9.95946431011808, -10.732847910118078, -10.732847910118078, -10.923479910118079, -10.327359150118079, -10.732847910118078, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.732847910118078, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.923479910118079, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.276736910118078, -10.923479910118079, -10.923479910118079, -10.732847910118078, -10.732847910118078, -10.732847910118078, -10.822270610118078, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.732847910118078, -10.732847910118078, -10.822270610118078, -10.923479910118079, -10.923479910118079, -10.923479910118079, -10.732847910118078]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	277,
							"begin_column":	3,
							"end_line":	277,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L277\", 65, &(con), sizeof (con), &(con->send), sizeof (con->send), &(con->send->is_closed), sizeof (con->send->is_closed), &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(c), sizeof (c), &(we_have), sizeof (we_have), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_out), sizeof (con->send->bytes_out)))\n    con->send->is_closed = 1;\n", "{\n}\n", "con->send->is_closed = (0 * we_have)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (c != 0)", "con->send->is_closed = (c == 0)", "con->send->is_closed = (con != 0)", "con->send->is_closed = (con == 0)", "con->send->is_closed = (sess != 0)", "con->send->is_closed = (sess == 0)", "con->send->is_closed = (srv != 0)", "con->send->is_closed = (srv == 0)", "con->send->is_closed = (we_have != 0)", "con->send->is_closed = (we_have + 0)", "con->send->is_closed = (we_have - 0)", "con->send->is_closed = (we_have == 0)", "con->send->is_closed = (we_have)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.80047968311808, -8.30653188311808, -8.60487858311808, -8.22257571011808, -8.72862791011808, -7.88472291011808, -7.95779421011808, -7.11388921011808, -7.88472291011808, -7.88472291011808, -8.72862791011808, -8.22257571011808, -7.88472291011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -7.88472291011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -8.72862791011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -7.64079604011808, -8.72862791011808, -8.72862791011808, -7.88472291011808, -7.88472291011808, -7.88472291011808, -8.32168791011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -7.88472291011808, -7.88472291011808, -8.32168791011808, -8.72862791011808, -8.72862791011808, -8.72862791011808, -7.88472291011808]
								}, {
									"case":	2,
									"scores":	[-6.43736142011808]
								}, {
									"case":	3,
									"scores":	[-6.43736142011808]
								}, {
									"case":	4,
									"scores":	[-6.43736142011808]
								}, {
									"case":	5,
									"scores":	[-6.43736142011808]
								}, {
									"case":	6,
									"scores":	[-6.43736142011808]
								}, {
									"case":	7,
									"scores":	[-6.43736142011808]
								}, {
									"case":	8,
									"scores":	[-6.43736142011808]
								}, {
									"case":	9,
									"scores":	[-6.43736142011808]
								}, {
									"case":	10,
									"scores":	[-6.43736142011808]
								}, {
									"case":	11,
									"scores":	[-6.43736142011808]
								}, {
									"case":	12,
									"scores":	[-6.43736142011808]
								}, {
									"case":	13,
									"scores":	[-6.43736142011808]
								}, {
									"case":	14,
									"scores":	[-6.43736142011808]
								}, {
									"case":	15,
									"scores":	[-6.43736142011808]
								}, {
									"case":	16,
									"scores":	[-6.43736142011808]
								}, {
									"case":	17,
									"scores":	[-6.43736142011808]
								}, {
									"case":	18,
									"scores":	[-6.43736142011808]
								}]
						}]
				}, {
					"line":	275,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [81, 82], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [], [], []],
							"begin_line":	276,
							"begin_column":	0,
							"end_line":	276,
							"end_column":	0,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L276\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 0;\n", "if (__is_neg(\"\", \"L276\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	2,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	3,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	4,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	5,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	6,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	7,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	8,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	9,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	10,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	11,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	12,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	13,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	14,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	15,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	16,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	17,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	18,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	19,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	20,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	21,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	22,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	23,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	24,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	25,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	26,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	27,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	28,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	29,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	30,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	31,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	32,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	33,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	34,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	35,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	36,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	37,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	38,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	39,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	40,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	41,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	42,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	43,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	44,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	45,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	46,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	47,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	48,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	49,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	50,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	51,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	52,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	53,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	54,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	55,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	56,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	57,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	58,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	59,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	60,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	61,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	62,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	63,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	64,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	65,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	66,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	67,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	68,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	69,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	70,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	71,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	72,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	73,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	74,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	75,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	76,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	77,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	78,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	79,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	80,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	81,
									"scores":	[-9.9549378414356, -10.586942771135597, -10.2238067174356, -9.330205851435597, -8.3106911871356, -7.3363018174356, -9.6794194174356, -10.1738401174356, -9.8183179574356, -10.2238067174356, -10.4144387174356, -10.4144387174356, -10.4144387174356, -10.2238067174356, -10.4144387174356, -10.4144387174356, -10.4144387174356, -10.2238067174356]
								}, {
									"case":	82,
									"scores":	[-12.217719641435597, -12.8497245711356, -12.4865885174356, -11.5929876514356, -10.5734729871356, -9.5990836174356, -11.9422012174356, -12.4366219174356, -12.0810997574356, -12.4865885174356, -12.6772205174356, -12.6772205174356, -12.6772205174356, -12.4865885174356, -12.6772205174356, -12.6772205174356, -12.6772205174356, -12.4865885174356]
								}]
						}, {
							"switch":	25,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	276,
							"begin_column":	2,
							"end_line":	278,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L276\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in))) {\n    con->send->is_closed = 1;\n}\n", "if ((sess->rb->is_closed) || __is_neg(\"\", \"L276\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in))) {\n    con->send->is_closed = 1;\n}\n", "if ((sess->rb->is_closed) && !__is_neg(\"\", \"L276\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in))) {\n    con->send->is_closed = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0842178540281449, -6.5154321237281456, -5.2824771550281451, -5.7309518090281442, -5.2156272707281461, -3.8513752120281457, -5.4265417650281451, -6.0265101730281447, -5.6203299550281454, -5.2824771550281451, -6.1263821550281445, -6.1263821550281445, -6.1263821550281445, -5.2824771550281451, -6.1263821550281445, -6.1263821550281445, -6.1263821550281445, -5.2824771550281451]
								}, {
									"case":	2,
									"scores":	[-5.6165745504281457, -6.0477888201281456, -4.8148338514281459, -5.2633085054281459, -4.7479839671281461, -3.3837319084281456, -4.9588984614281459, -5.5588668694281465, -5.1526866514281462, -4.8148338514281459, -5.6587388514281463, -5.6587388514281463, -5.6587388514281463, -4.8148338514281459, -5.6587388514281463, -5.6587388514281463, -5.6587388514281463, -4.8148338514281459]
								}, {
									"case":	3,
									"scores":	[-5.6165745504281457, -6.0477888201281456, -4.8148338514281459, -5.2633085054281459, -4.7479839671281461, -3.3837319084281456, -4.9588984614281459, -5.5588668694281465, -5.1526866514281462, -4.8148338514281459, -5.6587388514281463, -5.6587388514281463, -5.6587388514281463, -4.8148338514281459, -5.6587388514281463, -5.6587388514281463, -5.6587388514281463, -4.8148338514281459]
								}]
						}, {
							"switch":	28,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	276,
							"begin_column":	2,
							"end_line":	278,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L276\", 18, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(con), sizeof (con), &(c), sizeof (c), &(we_have), sizeof (we_have), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out), &(sess->rb->first), sizeof (sess->rb->first), &(srv), sizeof (srv), &(sess->pid), sizeof (sess->pid), &(sess->sock), sizeof (sess->sock), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in)))\n    if (sess->rb->is_closed) {\n        con->send->is_closed = 1;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5027881194356, -8.9340023891356, -7.7010474204355983, -8.1495220744356, -7.6341975361355985, -6.2699454774355985, -7.8451120304355983, -8.4450804384356, -8.0389002204356, -7.7010474204355983, -8.5449524204356, -8.5449524204356, -8.5449524204356, -7.7010474204355983, -8.5449524204356, -8.5449524204356, -8.5449524204356, -7.7010474204355983]
								}]
						}]
				}, {
					"line":	278,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [80, 81], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [], [], []],
							"begin_line":	279,
							"begin_column":	0,
							"end_line":	279,
							"end_column":	0,
							"patch_codes":	["memset(&c->async, 0, sizeof (*(&c->async)))", "memset(&c->file, 0, sizeof (*(&c->file)))", "memset(&c->mem, 0, sizeof (*(&c->mem)))", "memset(&c->next, 0, sizeof (*(&c->next)))", "memset(&c->offset, 0, sizeof (*(&c->offset)))", "memset(&c->type, 0, sizeof (*(&c->type)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(c->mem, 0, sizeof (*(c->mem)))", "memset(c->next, 0, sizeof (*(c->next)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "buffer_reset((con)->physical.path)", "c->offset = (0)", "c->offset = (1)", "c->offset = (c)->mem->used - 1", "cgi_session_free((sess))", "chunkqueue_append_mem((con)->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, (c)->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + (c)->offset, c->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, (c)->mem->used - c->offset)", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - (c)->offset)", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "chunkqueue_steal_chunk((con)->send, c)", "chunkqueue_steal_chunk(con->send, (c))", "close((sess)->wb_sock->fd)", "con->send->is_closed = (0)", "con->send->is_closed = (1)", "con->send->is_closed = (we_have)", "free((sess))", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "we_have = (0)", "we_have = (1)", "we_have = (c)->mem->used - c->offset - 1", "we_have = (we_have)", "we_have = c->mem->used - (c)->offset - 1", "((void)(srv))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "c->offset = c->mem->used - 1", "chunkqueue_append_mem(con->send, c->mem->ptr + c->offset, c->mem->used - c->offset)", "chunkqueue_remove_finished_chunks(sess->rb)", "chunkqueue_steal_chunk(con->send, c)", "close(0)", "close(1)", "close(2)", "con->send->is_closed = 1", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "we_have = c->mem->used - c->offset - 1", "if (__is_neg(\"\", \"L279\", 5, &(con), sizeof (con), &(sess), sizeof (sess), &(c), sizeof (c), &(we_have), sizeof (we_have), &(srv), sizeof (srv)))\n    return 0;\n", "if (__is_neg(\"\", \"L279\", 5, &(con), sizeof (con), &(sess), sizeof (sess), &(c), sizeof (c), &(we_have), sizeof (we_have), &(srv), sizeof (srv)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.41715871280056]
								}, {
									"case":	2,
									"scores":	[-6.41715871280056]
								}, {
									"case":	3,
									"scores":	[-6.41715871280056]
								}, {
									"case":	4,
									"scores":	[-6.41715871280056]
								}, {
									"case":	5,
									"scores":	[-6.41715871280056]
								}, {
									"case":	6,
									"scores":	[-6.41715871280056]
								}, {
									"case":	7,
									"scores":	[-6.41715871280056]
								}, {
									"case":	8,
									"scores":	[-6.41715871280056]
								}, {
									"case":	9,
									"scores":	[-6.41715871280056]
								}, {
									"case":	10,
									"scores":	[-6.41715871280056]
								}, {
									"case":	11,
									"scores":	[-6.41715871280056]
								}, {
									"case":	12,
									"scores":	[-6.41715871280056]
								}, {
									"case":	13,
									"scores":	[-6.41715871280056]
								}, {
									"case":	14,
									"scores":	[-6.41715871280056]
								}, {
									"case":	15,
									"scores":	[-6.41715871280056]
								}, {
									"case":	16,
									"scores":	[-6.41715871280056]
								}, {
									"case":	17,
									"scores":	[-6.41715871280056]
								}, {
									"case":	18,
									"scores":	[-6.41715871280056]
								}, {
									"case":	19,
									"scores":	[-6.41715871280056]
								}, {
									"case":	20,
									"scores":	[-6.41715871280056]
								}, {
									"case":	21,
									"scores":	[-6.41715871280056]
								}, {
									"case":	22,
									"scores":	[-6.41715871280056]
								}, {
									"case":	23,
									"scores":	[-6.41715871280056]
								}, {
									"case":	24,
									"scores":	[-6.41715871280056]
								}, {
									"case":	25,
									"scores":	[-6.41715871280056]
								}, {
									"case":	26,
									"scores":	[-6.41715871280056]
								}, {
									"case":	27,
									"scores":	[-6.41715871280056]
								}, {
									"case":	28,
									"scores":	[-6.41715871280056]
								}, {
									"case":	29,
									"scores":	[-6.41715871280056]
								}, {
									"case":	30,
									"scores":	[-6.41715871280056]
								}, {
									"case":	31,
									"scores":	[-6.41715871280056]
								}, {
									"case":	32,
									"scores":	[-6.41715871280056]
								}, {
									"case":	33,
									"scores":	[-6.41715871280056]
								}, {
									"case":	34,
									"scores":	[-6.41715871280056]
								}, {
									"case":	35,
									"scores":	[-6.41715871280056]
								}, {
									"case":	36,
									"scores":	[-6.41715871280056]
								}, {
									"case":	37,
									"scores":	[-6.41715871280056]
								}, {
									"case":	38,
									"scores":	[-6.41715871280056]
								}, {
									"case":	39,
									"scores":	[-6.41715871280056]
								}, {
									"case":	40,
									"scores":	[-6.41715871280056]
								}, {
									"case":	41,
									"scores":	[-6.41715871280056]
								}, {
									"case":	42,
									"scores":	[-6.41715871280056]
								}, {
									"case":	43,
									"scores":	[-6.41715871280056]
								}, {
									"case":	44,
									"scores":	[-6.41715871280056]
								}, {
									"case":	45,
									"scores":	[-6.41715871280056]
								}, {
									"case":	46,
									"scores":	[-6.41715871280056]
								}, {
									"case":	47,
									"scores":	[-6.41715871280056]
								}, {
									"case":	48,
									"scores":	[-6.41715871280056]
								}, {
									"case":	49,
									"scores":	[-6.41715871280056]
								}, {
									"case":	50,
									"scores":	[-6.41715871280056]
								}, {
									"case":	51,
									"scores":	[-6.41715871280056]
								}, {
									"case":	52,
									"scores":	[-6.41715871280056]
								}, {
									"case":	53,
									"scores":	[-6.41715871280056]
								}, {
									"case":	54,
									"scores":	[-6.41715871280056]
								}, {
									"case":	55,
									"scores":	[-6.41715871280056]
								}, {
									"case":	56,
									"scores":	[-6.41715871280056]
								}, {
									"case":	57,
									"scores":	[-6.41715871280056]
								}, {
									"case":	58,
									"scores":	[-6.41715871280056]
								}, {
									"case":	59,
									"scores":	[-6.41715871280056]
								}, {
									"case":	60,
									"scores":	[-6.41715871280056]
								}, {
									"case":	61,
									"scores":	[-6.41715871280056]
								}, {
									"case":	62,
									"scores":	[-6.41715871280056]
								}, {
									"case":	63,
									"scores":	[-6.41715871280056]
								}, {
									"case":	64,
									"scores":	[-6.41715871280056]
								}, {
									"case":	65,
									"scores":	[-6.41715871280056]
								}, {
									"case":	66,
									"scores":	[-6.41715871280056]
								}, {
									"case":	67,
									"scores":	[-6.41715871280056]
								}, {
									"case":	68,
									"scores":	[-6.41715871280056]
								}, {
									"case":	69,
									"scores":	[-6.41715871280056]
								}, {
									"case":	70,
									"scores":	[-6.41715871280056]
								}, {
									"case":	71,
									"scores":	[-6.41715871280056]
								}, {
									"case":	72,
									"scores":	[-6.41715871280056]
								}, {
									"case":	73,
									"scores":	[-6.41715871280056]
								}, {
									"case":	74,
									"scores":	[-6.41715871280056]
								}, {
									"case":	75,
									"scores":	[-6.41715871280056]
								}, {
									"case":	76,
									"scores":	[-6.41715871280056]
								}, {
									"case":	77,
									"scores":	[-6.41715871280056]
								}, {
									"case":	78,
									"scores":	[-6.41715871280056]
								}, {
									"case":	79,
									"scores":	[-6.41715871280056]
								}, {
									"case":	80,
									"scores":	[-9.28832796180056, -9.43063036180056, -7.39726769150056, -6.42287832180056, -8.90489446180056]
								}, {
									"case":	81,
									"scores":	[-11.551109761800559, -11.693412161800559, -9.66004949150056, -8.68566012180056, -11.167676261800558]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	279,
							"begin_column":	2,
							"end_line":	279,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L279\", 5, &(con), sizeof (con), &(sess), sizeof (sess), &(c), sizeof (c), &(we_have), sizeof (we_have), &(srv), sizeof (srv)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.21481919680056, -8.33037691480056, -7.49282833150056, -6.12857627280056, -7.89753101580056]
								}]
						}]
				}, {
					"line":	290,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [277, 278, 279, 280, 281, 282, 283, 284], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], [], [], [], [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], [], [], [], [], [], []],
							"begin_line":	291,
							"begin_column":	1,
							"end_line":	291,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return -1;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 0;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 1;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 200;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 299;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 302;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 323;\n", "if (__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	2,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	3,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	4,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	5,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	6,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	7,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	8,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	9,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	10,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	11,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	12,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	13,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	14,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	15,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	16,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	17,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	18,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	19,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	20,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	21,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	22,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	23,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	24,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	25,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	26,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	27,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	28,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	29,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	30,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	31,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	32,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	33,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	34,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	35,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	36,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	37,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	38,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	39,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	40,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	41,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	42,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	43,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	44,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	45,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	46,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	47,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	48,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	49,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	50,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	51,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	52,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	53,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	54,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	55,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	56,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	57,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	58,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	59,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	60,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	61,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	62,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	63,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	64,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	65,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	66,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	67,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	68,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	69,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	70,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	71,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	72,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	73,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	74,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	75,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	76,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	77,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	78,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	79,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	80,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	81,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	82,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	83,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	84,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	85,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	86,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	87,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	88,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	89,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	90,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	91,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	92,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	93,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	94,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	95,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	96,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	97,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	98,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	99,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	100,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	101,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	102,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	103,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	104,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	105,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	106,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	107,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	108,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	109,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	110,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	111,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	112,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	113,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	114,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	115,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	116,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	117,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	118,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	119,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	120,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	121,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	122,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	123,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	124,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	125,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	126,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	127,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	128,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	129,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	130,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	131,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	132,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	133,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	134,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	135,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	136,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	137,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	138,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	139,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	140,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	141,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	142,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	143,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	144,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	145,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	146,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	147,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	148,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	149,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	150,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	151,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	152,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	153,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	154,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	155,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	156,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	157,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	158,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	159,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	160,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	161,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	162,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	163,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	164,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	165,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	166,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	167,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	168,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	169,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	170,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	171,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	172,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	173,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	174,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	175,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	176,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	177,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	178,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	179,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	180,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	181,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	182,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	183,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	184,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	185,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	186,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	187,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	188,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	189,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	190,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	191,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	192,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	193,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	194,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	195,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	196,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	197,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	198,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	199,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	200,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	201,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	202,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	203,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	204,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	205,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	206,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	207,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	208,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	209,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	210,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	211,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	212,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	213,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	214,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	215,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	216,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	217,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	218,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	219,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	220,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	221,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	222,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	223,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	224,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	225,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	226,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	227,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	228,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	229,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	230,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	231,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	232,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	233,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	234,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	235,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	236,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	237,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	238,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	239,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	240,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	241,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	242,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	243,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	244,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	245,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	246,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	247,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	248,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	249,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	250,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	251,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	252,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	253,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	254,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	255,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	256,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	257,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	258,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	259,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	260,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	261,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	262,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	263,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	264,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	265,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	266,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	267,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	268,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	269,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	270,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	271,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	272,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	273,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	274,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	275,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	276,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	277,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}, {
									"case":	278,
									"scores":	[-8.6181754772932742, -8.133340577293275, -9.3519190679932738, -10.049884923293273, -9.5783501529932735, -9.2835504232932742, -8.7916664232932753, -9.1971551832932743, -9.1971551832932743, -9.3877871832932733, -9.3877871832932733, -9.3877871832932733, -9.3877871832932733, -9.3877871832932733, -9.3877871832932733, -9.1971551832932743, -9.1971551832932743]
								}, {
									"case":	279,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}, {
									"case":	280,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}, {
									"case":	281,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}, {
									"case":	282,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}, {
									"case":	283,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}, {
									"case":	284,
									"scores":	[-10.880957277293273, -10.396122377293274, -11.614700867993275, -12.312666723293272, -11.841131952993274, -11.546332223293273, -11.054448223293274, -11.459936983293275, -11.459936983293275, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.650568983293274, -11.459936983293275, -11.459936983293275]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	291,
							"begin_column":	3,
							"end_line":	291,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L291\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    sess->rb->is_closed = 1;\n", "{\n}\n", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (con != 0)", "sess->rb->is_closed = (con == 0)", "sess->rb->is_closed = (p != 0)", "sess->rb->is_closed = (p == 0)", "sess->rb->is_closed = (sess != 0)", "sess->rb->is_closed = (sess == 0)", "sess->rb->is_closed = (srv != 0)", "sess->rb->is_closed = (srv == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.726040740293274, -7.4228635592932743, -7.7212102592932741, -8.412918267293275, -7.8328869059932744, -7.8802003862932741, -7.3389073862932737, -7.0010545862932743, -7.0010545862932743, -7.8449595862932746, -7.8449595862932746, -7.8449595862932746, -7.8449595862932746, -7.8449595862932746, -7.8449595862932746, -7.0010545862932743, -7.0010545862932743]
								}, {
									"case":	2,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	3,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	4,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	5,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	6,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	7,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	8,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	9,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	10,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	11,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	12,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	13,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	14,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	15,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	16,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	17,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	18,
									"scores":	[-6.6393884932932741]
								}]
						}]
				}, {
					"line":	291,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [276, 277, 278, 279, 280, 281, 282, 283], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	292,
							"begin_column":	0,
							"end_line":	292,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->rb->bytes_in, 0, sizeof (*(&sess->rb->bytes_in)))", "memset(&sess->rb->bytes_out, 0, sizeof (*(&sess->rb->bytes_out)))", "memset(&sess->rb->first, 0, sizeof (*(&sess->rb->first)))", "memset(&sess->rb->is_closed, 0, sizeof (*(&sess->rb->is_closed)))", "memset(&sess->rb->last, 0, sizeof (*(&sess->rb->last)))", "memset(&sess->rb->tempdirs, 0, sizeof (*(&sess->rb->tempdirs)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->rb->first, 0, sizeof (*(sess->rb->first)))", "memset(sess->rb->last, 0, sizeof (*(sess->rb->last)))", "memset(sess->rb->tempdirs, 0, sizeof (*(sess->rb->tempdirs)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return -1;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 0;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 1;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 200;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 299;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 302;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 323;\n", "if (__is_neg(\"\", \"L292\", 17, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(sess->rb->is_closed), sizeof (sess->rb->is_closed), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->state), sizeof (sess->state), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(sess->rb->first), sizeof (sess->rb->first), &(sess->rb->last), sizeof (sess->rb->last), &(sess->rb->tempdirs), sizeof (sess->rb->tempdirs), &(sess->rb->bytes_in), sizeof (sess->rb->bytes_in), &(sess->rb->bytes_out), sizeof (sess->rb->bytes_out)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	2,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	3,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	4,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	5,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	6,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	7,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	8,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	9,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	10,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	11,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	12,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	13,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	14,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	15,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	16,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	17,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	18,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	19,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	20,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	21,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	22,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	23,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	24,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	25,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	26,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	27,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	28,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	29,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	30,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	31,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	32,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	33,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	34,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	35,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	36,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	37,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	38,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	39,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	40,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	41,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	42,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	43,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	44,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	45,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	46,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	47,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	48,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	49,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	50,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	51,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	52,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	53,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	54,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	55,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	56,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	57,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	58,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	59,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	60,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	61,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	62,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	63,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	64,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	65,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	66,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	67,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	68,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	69,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	70,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	71,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	72,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	73,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	74,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	75,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	76,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	77,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	78,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	79,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	80,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	81,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	82,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	83,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	84,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	85,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	86,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	87,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	88,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	89,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	90,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	91,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	92,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	93,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	94,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	95,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	96,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	97,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	98,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	99,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	100,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	101,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	102,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	103,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	104,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	105,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	106,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	107,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	108,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	109,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	110,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	111,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	112,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	113,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	114,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	115,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	116,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	117,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	118,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	119,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	120,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	121,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	122,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	123,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	124,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	125,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	126,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	127,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	128,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	129,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	130,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	131,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	132,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	133,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	134,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	135,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	136,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	137,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	138,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	139,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	140,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	141,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	142,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	143,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	144,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	145,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	146,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	147,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	148,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	149,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	150,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	151,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	152,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	153,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	154,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	155,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	156,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	157,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	158,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	159,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	160,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	161,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	162,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	163,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	164,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	165,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	166,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	167,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	168,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	169,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	170,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	171,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	172,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	173,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	174,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	175,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	176,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	177,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	178,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	179,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	180,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	181,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	182,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	183,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	184,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	185,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	186,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	187,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	188,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	189,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	190,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	191,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	192,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	193,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	194,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	195,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	196,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	197,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	198,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	199,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	200,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	201,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	202,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	203,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	204,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	205,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	206,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	207,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	208,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	209,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	210,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	211,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	212,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	213,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	214,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	215,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	216,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	217,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	218,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	219,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	220,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	221,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	222,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	223,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	224,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	225,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	226,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	227,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	228,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	229,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	230,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	231,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	232,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	233,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	234,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	235,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	236,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	237,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	238,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	239,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	240,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	241,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	242,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	243,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	244,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	245,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	246,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	247,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	248,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	249,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	250,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	251,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	252,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	253,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	254,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	255,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	256,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	257,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	258,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	259,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	260,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	261,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	262,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	263,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	264,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	265,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	266,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	267,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	268,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	269,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	270,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	271,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	272,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	273,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	274,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	275,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	276,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}, {
									"case":	277,
									"scores":	[-9.892040984975754, -10.018861784975755, -8.060696884975755, -10.452204824975755, -9.9806700546757554, -9.6858703249757543, -9.1939863249757536, -9.5994750849757544, -9.5994750849757544, -9.7901070849757552, -9.7901070849757552, -9.7901070849757552, -9.7901070849757552, -9.7901070849757552, -9.7901070849757552, -9.5994750849757544, -9.5994750849757544]
								}, {
									"case":	278,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}, {
									"case":	279,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}, {
									"case":	280,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}, {
									"case":	281,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}, {
									"case":	282,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}, {
									"case":	283,
									"scores":	[-12.154822784975753, -12.281643584975754, -10.323478684975754, -12.714986624975754, -12.243451854675754, -11.948652124975755, -11.456768124975754, -11.862256884975753, -11.862256884975753, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -12.052888884975754, -11.862256884975753, -11.862256884975753]
								}]
						}]
				}, {
					"line":	331,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [312, 313, 314, 315, 316, 317, 318, 319], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	332,
							"begin_column":	2,
							"end_line":	332,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return -1;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 0;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 200;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 299;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 302;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 323;\n", "if (__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.54851032258165]
								}, {
									"case":	2,
									"scores":	[-7.54851032258165]
								}, {
									"case":	3,
									"scores":	[-7.54851032258165]
								}, {
									"case":	4,
									"scores":	[-7.54851032258165]
								}, {
									"case":	5,
									"scores":	[-7.54851032258165]
								}, {
									"case":	6,
									"scores":	[-7.54851032258165]
								}, {
									"case":	7,
									"scores":	[-7.54851032258165]
								}, {
									"case":	8,
									"scores":	[-7.54851032258165]
								}, {
									"case":	9,
									"scores":	[-7.54851032258165]
								}, {
									"case":	10,
									"scores":	[-7.54851032258165]
								}, {
									"case":	11,
									"scores":	[-7.54851032258165]
								}, {
									"case":	12,
									"scores":	[-7.54851032258165]
								}, {
									"case":	13,
									"scores":	[-7.54851032258165]
								}, {
									"case":	14,
									"scores":	[-7.54851032258165]
								}, {
									"case":	15,
									"scores":	[-7.54851032258165]
								}, {
									"case":	16,
									"scores":	[-7.54851032258165]
								}, {
									"case":	17,
									"scores":	[-7.54851032258165]
								}, {
									"case":	18,
									"scores":	[-7.54851032258165]
								}, {
									"case":	19,
									"scores":	[-7.54851032258165]
								}, {
									"case":	20,
									"scores":	[-7.54851032258165]
								}, {
									"case":	21,
									"scores":	[-7.54851032258165]
								}, {
									"case":	22,
									"scores":	[-7.54851032258165]
								}, {
									"case":	23,
									"scores":	[-7.54851032258165]
								}, {
									"case":	24,
									"scores":	[-7.54851032258165]
								}, {
									"case":	25,
									"scores":	[-7.54851032258165]
								}, {
									"case":	26,
									"scores":	[-7.54851032258165]
								}, {
									"case":	27,
									"scores":	[-7.54851032258165]
								}, {
									"case":	28,
									"scores":	[-7.54851032258165]
								}, {
									"case":	29,
									"scores":	[-7.54851032258165]
								}, {
									"case":	30,
									"scores":	[-7.54851032258165]
								}, {
									"case":	31,
									"scores":	[-7.54851032258165]
								}, {
									"case":	32,
									"scores":	[-7.54851032258165]
								}, {
									"case":	33,
									"scores":	[-7.54851032258165]
								}, {
									"case":	34,
									"scores":	[-7.54851032258165]
								}, {
									"case":	35,
									"scores":	[-7.54851032258165]
								}, {
									"case":	36,
									"scores":	[-7.54851032258165]
								}, {
									"case":	37,
									"scores":	[-7.54851032258165]
								}, {
									"case":	38,
									"scores":	[-7.54851032258165]
								}, {
									"case":	39,
									"scores":	[-7.54851032258165]
								}, {
									"case":	40,
									"scores":	[-7.54851032258165]
								}, {
									"case":	41,
									"scores":	[-7.54851032258165]
								}, {
									"case":	42,
									"scores":	[-7.54851032258165]
								}, {
									"case":	43,
									"scores":	[-7.54851032258165]
								}, {
									"case":	44,
									"scores":	[-7.54851032258165]
								}, {
									"case":	45,
									"scores":	[-7.54851032258165]
								}, {
									"case":	46,
									"scores":	[-7.54851032258165]
								}, {
									"case":	47,
									"scores":	[-7.54851032258165]
								}, {
									"case":	48,
									"scores":	[-7.54851032258165]
								}, {
									"case":	49,
									"scores":	[-7.54851032258165]
								}, {
									"case":	50,
									"scores":	[-7.54851032258165]
								}, {
									"case":	51,
									"scores":	[-7.54851032258165]
								}, {
									"case":	52,
									"scores":	[-7.54851032258165]
								}, {
									"case":	53,
									"scores":	[-7.54851032258165]
								}, {
									"case":	54,
									"scores":	[-7.54851032258165]
								}, {
									"case":	55,
									"scores":	[-7.54851032258165]
								}, {
									"case":	56,
									"scores":	[-7.54851032258165]
								}, {
									"case":	57,
									"scores":	[-7.54851032258165]
								}, {
									"case":	58,
									"scores":	[-7.54851032258165]
								}, {
									"case":	59,
									"scores":	[-7.54851032258165]
								}, {
									"case":	60,
									"scores":	[-7.54851032258165]
								}, {
									"case":	61,
									"scores":	[-7.54851032258165]
								}, {
									"case":	62,
									"scores":	[-7.54851032258165]
								}, {
									"case":	63,
									"scores":	[-7.54851032258165]
								}, {
									"case":	64,
									"scores":	[-7.54851032258165]
								}, {
									"case":	65,
									"scores":	[-7.54851032258165]
								}, {
									"case":	66,
									"scores":	[-7.54851032258165]
								}, {
									"case":	67,
									"scores":	[-7.54851032258165]
								}, {
									"case":	68,
									"scores":	[-7.54851032258165]
								}, {
									"case":	69,
									"scores":	[-7.54851032258165]
								}, {
									"case":	70,
									"scores":	[-7.54851032258165]
								}, {
									"case":	71,
									"scores":	[-7.54851032258165]
								}, {
									"case":	72,
									"scores":	[-7.54851032258165]
								}, {
									"case":	73,
									"scores":	[-7.54851032258165]
								}, {
									"case":	74,
									"scores":	[-7.54851032258165]
								}, {
									"case":	75,
									"scores":	[-7.54851032258165]
								}, {
									"case":	76,
									"scores":	[-7.54851032258165]
								}, {
									"case":	77,
									"scores":	[-7.54851032258165]
								}, {
									"case":	78,
									"scores":	[-7.54851032258165]
								}, {
									"case":	79,
									"scores":	[-7.54851032258165]
								}, {
									"case":	80,
									"scores":	[-7.54851032258165]
								}, {
									"case":	81,
									"scores":	[-7.54851032258165]
								}, {
									"case":	82,
									"scores":	[-7.54851032258165]
								}, {
									"case":	83,
									"scores":	[-7.54851032258165]
								}, {
									"case":	84,
									"scores":	[-7.54851032258165]
								}, {
									"case":	85,
									"scores":	[-7.54851032258165]
								}, {
									"case":	86,
									"scores":	[-7.54851032258165]
								}, {
									"case":	87,
									"scores":	[-7.54851032258165]
								}, {
									"case":	88,
									"scores":	[-7.54851032258165]
								}, {
									"case":	89,
									"scores":	[-7.54851032258165]
								}, {
									"case":	90,
									"scores":	[-7.54851032258165]
								}, {
									"case":	91,
									"scores":	[-7.54851032258165]
								}, {
									"case":	92,
									"scores":	[-7.54851032258165]
								}, {
									"case":	93,
									"scores":	[-7.54851032258165]
								}, {
									"case":	94,
									"scores":	[-7.54851032258165]
								}, {
									"case":	95,
									"scores":	[-7.54851032258165]
								}, {
									"case":	96,
									"scores":	[-7.54851032258165]
								}, {
									"case":	97,
									"scores":	[-7.54851032258165]
								}, {
									"case":	98,
									"scores":	[-7.54851032258165]
								}, {
									"case":	99,
									"scores":	[-7.54851032258165]
								}, {
									"case":	100,
									"scores":	[-7.54851032258165]
								}, {
									"case":	101,
									"scores":	[-7.54851032258165]
								}, {
									"case":	102,
									"scores":	[-7.54851032258165]
								}, {
									"case":	103,
									"scores":	[-7.54851032258165]
								}, {
									"case":	104,
									"scores":	[-7.54851032258165]
								}, {
									"case":	105,
									"scores":	[-7.54851032258165]
								}, {
									"case":	106,
									"scores":	[-7.54851032258165]
								}, {
									"case":	107,
									"scores":	[-7.54851032258165]
								}, {
									"case":	108,
									"scores":	[-7.54851032258165]
								}, {
									"case":	109,
									"scores":	[-7.54851032258165]
								}, {
									"case":	110,
									"scores":	[-7.54851032258165]
								}, {
									"case":	111,
									"scores":	[-7.54851032258165]
								}, {
									"case":	112,
									"scores":	[-7.54851032258165]
								}, {
									"case":	113,
									"scores":	[-7.54851032258165]
								}, {
									"case":	114,
									"scores":	[-7.54851032258165]
								}, {
									"case":	115,
									"scores":	[-7.54851032258165]
								}, {
									"case":	116,
									"scores":	[-7.54851032258165]
								}, {
									"case":	117,
									"scores":	[-7.54851032258165]
								}, {
									"case":	118,
									"scores":	[-7.54851032258165]
								}, {
									"case":	119,
									"scores":	[-7.54851032258165]
								}, {
									"case":	120,
									"scores":	[-7.54851032258165]
								}, {
									"case":	121,
									"scores":	[-7.54851032258165]
								}, {
									"case":	122,
									"scores":	[-7.54851032258165]
								}, {
									"case":	123,
									"scores":	[-7.54851032258165]
								}, {
									"case":	124,
									"scores":	[-7.54851032258165]
								}, {
									"case":	125,
									"scores":	[-7.54851032258165]
								}, {
									"case":	126,
									"scores":	[-7.54851032258165]
								}, {
									"case":	127,
									"scores":	[-7.54851032258165]
								}, {
									"case":	128,
									"scores":	[-7.54851032258165]
								}, {
									"case":	129,
									"scores":	[-7.54851032258165]
								}, {
									"case":	130,
									"scores":	[-7.54851032258165]
								}, {
									"case":	131,
									"scores":	[-7.54851032258165]
								}, {
									"case":	132,
									"scores":	[-7.54851032258165]
								}, {
									"case":	133,
									"scores":	[-7.54851032258165]
								}, {
									"case":	134,
									"scores":	[-7.54851032258165]
								}, {
									"case":	135,
									"scores":	[-7.54851032258165]
								}, {
									"case":	136,
									"scores":	[-7.54851032258165]
								}, {
									"case":	137,
									"scores":	[-7.54851032258165]
								}, {
									"case":	138,
									"scores":	[-7.54851032258165]
								}, {
									"case":	139,
									"scores":	[-7.54851032258165]
								}, {
									"case":	140,
									"scores":	[-7.54851032258165]
								}, {
									"case":	141,
									"scores":	[-7.54851032258165]
								}, {
									"case":	142,
									"scores":	[-7.54851032258165]
								}, {
									"case":	143,
									"scores":	[-7.54851032258165]
								}, {
									"case":	144,
									"scores":	[-7.54851032258165]
								}, {
									"case":	145,
									"scores":	[-7.54851032258165]
								}, {
									"case":	146,
									"scores":	[-7.54851032258165]
								}, {
									"case":	147,
									"scores":	[-7.54851032258165]
								}, {
									"case":	148,
									"scores":	[-7.54851032258165]
								}, {
									"case":	149,
									"scores":	[-7.54851032258165]
								}, {
									"case":	150,
									"scores":	[-7.54851032258165]
								}, {
									"case":	151,
									"scores":	[-7.54851032258165]
								}, {
									"case":	152,
									"scores":	[-7.54851032258165]
								}, {
									"case":	153,
									"scores":	[-7.54851032258165]
								}, {
									"case":	154,
									"scores":	[-7.54851032258165]
								}, {
									"case":	155,
									"scores":	[-7.54851032258165]
								}, {
									"case":	156,
									"scores":	[-7.54851032258165]
								}, {
									"case":	157,
									"scores":	[-7.54851032258165]
								}, {
									"case":	158,
									"scores":	[-7.54851032258165]
								}, {
									"case":	159,
									"scores":	[-7.54851032258165]
								}, {
									"case":	160,
									"scores":	[-7.54851032258165]
								}, {
									"case":	161,
									"scores":	[-7.54851032258165]
								}, {
									"case":	162,
									"scores":	[-7.54851032258165]
								}, {
									"case":	163,
									"scores":	[-7.54851032258165]
								}, {
									"case":	164,
									"scores":	[-7.54851032258165]
								}, {
									"case":	165,
									"scores":	[-7.54851032258165]
								}, {
									"case":	166,
									"scores":	[-7.54851032258165]
								}, {
									"case":	167,
									"scores":	[-7.54851032258165]
								}, {
									"case":	168,
									"scores":	[-7.54851032258165]
								}, {
									"case":	169,
									"scores":	[-7.54851032258165]
								}, {
									"case":	170,
									"scores":	[-7.54851032258165]
								}, {
									"case":	171,
									"scores":	[-7.54851032258165]
								}, {
									"case":	172,
									"scores":	[-7.54851032258165]
								}, {
									"case":	173,
									"scores":	[-7.54851032258165]
								}, {
									"case":	174,
									"scores":	[-7.54851032258165]
								}, {
									"case":	175,
									"scores":	[-7.54851032258165]
								}, {
									"case":	176,
									"scores":	[-7.54851032258165]
								}, {
									"case":	177,
									"scores":	[-7.54851032258165]
								}, {
									"case":	178,
									"scores":	[-7.54851032258165]
								}, {
									"case":	179,
									"scores":	[-7.54851032258165]
								}, {
									"case":	180,
									"scores":	[-7.54851032258165]
								}, {
									"case":	181,
									"scores":	[-7.54851032258165]
								}, {
									"case":	182,
									"scores":	[-7.54851032258165]
								}, {
									"case":	183,
									"scores":	[-7.54851032258165]
								}, {
									"case":	184,
									"scores":	[-7.54851032258165]
								}, {
									"case":	185,
									"scores":	[-7.54851032258165]
								}, {
									"case":	186,
									"scores":	[-7.54851032258165]
								}, {
									"case":	187,
									"scores":	[-7.54851032258165]
								}, {
									"case":	188,
									"scores":	[-7.54851032258165]
								}, {
									"case":	189,
									"scores":	[-7.54851032258165]
								}, {
									"case":	190,
									"scores":	[-7.54851032258165]
								}, {
									"case":	191,
									"scores":	[-7.54851032258165]
								}, {
									"case":	192,
									"scores":	[-7.54851032258165]
								}, {
									"case":	193,
									"scores":	[-7.54851032258165]
								}, {
									"case":	194,
									"scores":	[-7.54851032258165]
								}, {
									"case":	195,
									"scores":	[-7.54851032258165]
								}, {
									"case":	196,
									"scores":	[-7.54851032258165]
								}, {
									"case":	197,
									"scores":	[-7.54851032258165]
								}, {
									"case":	198,
									"scores":	[-7.54851032258165]
								}, {
									"case":	199,
									"scores":	[-7.54851032258165]
								}, {
									"case":	200,
									"scores":	[-7.54851032258165]
								}, {
									"case":	201,
									"scores":	[-7.54851032258165]
								}, {
									"case":	202,
									"scores":	[-7.54851032258165]
								}, {
									"case":	203,
									"scores":	[-7.54851032258165]
								}, {
									"case":	204,
									"scores":	[-7.54851032258165]
								}, {
									"case":	205,
									"scores":	[-7.54851032258165]
								}, {
									"case":	206,
									"scores":	[-7.54851032258165]
								}, {
									"case":	207,
									"scores":	[-7.54851032258165]
								}, {
									"case":	208,
									"scores":	[-7.54851032258165]
								}, {
									"case":	209,
									"scores":	[-7.54851032258165]
								}, {
									"case":	210,
									"scores":	[-7.54851032258165]
								}, {
									"case":	211,
									"scores":	[-7.54851032258165]
								}, {
									"case":	212,
									"scores":	[-7.54851032258165]
								}, {
									"case":	213,
									"scores":	[-7.54851032258165]
								}, {
									"case":	214,
									"scores":	[-7.54851032258165]
								}, {
									"case":	215,
									"scores":	[-7.54851032258165]
								}, {
									"case":	216,
									"scores":	[-7.54851032258165]
								}, {
									"case":	217,
									"scores":	[-7.54851032258165]
								}, {
									"case":	218,
									"scores":	[-7.54851032258165]
								}, {
									"case":	219,
									"scores":	[-7.54851032258165]
								}, {
									"case":	220,
									"scores":	[-7.54851032258165]
								}, {
									"case":	221,
									"scores":	[-7.54851032258165]
								}, {
									"case":	222,
									"scores":	[-7.54851032258165]
								}, {
									"case":	223,
									"scores":	[-7.54851032258165]
								}, {
									"case":	224,
									"scores":	[-7.54851032258165]
								}, {
									"case":	225,
									"scores":	[-7.54851032258165]
								}, {
									"case":	226,
									"scores":	[-7.54851032258165]
								}, {
									"case":	227,
									"scores":	[-7.54851032258165]
								}, {
									"case":	228,
									"scores":	[-7.54851032258165]
								}, {
									"case":	229,
									"scores":	[-7.54851032258165]
								}, {
									"case":	230,
									"scores":	[-7.54851032258165]
								}, {
									"case":	231,
									"scores":	[-7.54851032258165]
								}, {
									"case":	232,
									"scores":	[-7.54851032258165]
								}, {
									"case":	233,
									"scores":	[-7.54851032258165]
								}, {
									"case":	234,
									"scores":	[-7.54851032258165]
								}, {
									"case":	235,
									"scores":	[-7.54851032258165]
								}, {
									"case":	236,
									"scores":	[-7.54851032258165]
								}, {
									"case":	237,
									"scores":	[-7.54851032258165]
								}, {
									"case":	238,
									"scores":	[-7.54851032258165]
								}, {
									"case":	239,
									"scores":	[-7.54851032258165]
								}, {
									"case":	240,
									"scores":	[-7.54851032258165]
								}, {
									"case":	241,
									"scores":	[-7.54851032258165]
								}, {
									"case":	242,
									"scores":	[-7.54851032258165]
								}, {
									"case":	243,
									"scores":	[-7.54851032258165]
								}, {
									"case":	244,
									"scores":	[-7.54851032258165]
								}, {
									"case":	245,
									"scores":	[-7.54851032258165]
								}, {
									"case":	246,
									"scores":	[-7.54851032258165]
								}, {
									"case":	247,
									"scores":	[-7.54851032258165]
								}, {
									"case":	248,
									"scores":	[-7.54851032258165]
								}, {
									"case":	249,
									"scores":	[-7.54851032258165]
								}, {
									"case":	250,
									"scores":	[-7.54851032258165]
								}, {
									"case":	251,
									"scores":	[-7.54851032258165]
								}, {
									"case":	252,
									"scores":	[-7.54851032258165]
								}, {
									"case":	253,
									"scores":	[-7.54851032258165]
								}, {
									"case":	254,
									"scores":	[-7.54851032258165]
								}, {
									"case":	255,
									"scores":	[-7.54851032258165]
								}, {
									"case":	256,
									"scores":	[-7.54851032258165]
								}, {
									"case":	257,
									"scores":	[-7.54851032258165]
								}, {
									"case":	258,
									"scores":	[-7.54851032258165]
								}, {
									"case":	259,
									"scores":	[-7.54851032258165]
								}, {
									"case":	260,
									"scores":	[-7.54851032258165]
								}, {
									"case":	261,
									"scores":	[-7.54851032258165]
								}, {
									"case":	262,
									"scores":	[-7.54851032258165]
								}, {
									"case":	263,
									"scores":	[-7.54851032258165]
								}, {
									"case":	264,
									"scores":	[-7.54851032258165]
								}, {
									"case":	265,
									"scores":	[-7.54851032258165]
								}, {
									"case":	266,
									"scores":	[-7.54851032258165]
								}, {
									"case":	267,
									"scores":	[-7.54851032258165]
								}, {
									"case":	268,
									"scores":	[-7.54851032258165]
								}, {
									"case":	269,
									"scores":	[-7.54851032258165]
								}, {
									"case":	270,
									"scores":	[-7.54851032258165]
								}, {
									"case":	271,
									"scores":	[-7.54851032258165]
								}, {
									"case":	272,
									"scores":	[-7.54851032258165]
								}, {
									"case":	273,
									"scores":	[-7.54851032258165]
								}, {
									"case":	274,
									"scores":	[-7.54851032258165]
								}, {
									"case":	275,
									"scores":	[-7.54851032258165]
								}, {
									"case":	276,
									"scores":	[-7.54851032258165]
								}, {
									"case":	277,
									"scores":	[-7.54851032258165]
								}, {
									"case":	278,
									"scores":	[-7.54851032258165]
								}, {
									"case":	279,
									"scores":	[-7.54851032258165]
								}, {
									"case":	280,
									"scores":	[-7.54851032258165]
								}, {
									"case":	281,
									"scores":	[-7.54851032258165]
								}, {
									"case":	282,
									"scores":	[-7.54851032258165]
								}, {
									"case":	283,
									"scores":	[-7.54851032258165]
								}, {
									"case":	284,
									"scores":	[-7.54851032258165]
								}, {
									"case":	285,
									"scores":	[-7.54851032258165]
								}, {
									"case":	286,
									"scores":	[-7.54851032258165]
								}, {
									"case":	287,
									"scores":	[-7.54851032258165]
								}, {
									"case":	288,
									"scores":	[-7.54851032258165]
								}, {
									"case":	289,
									"scores":	[-7.54851032258165]
								}, {
									"case":	290,
									"scores":	[-7.54851032258165]
								}, {
									"case":	291,
									"scores":	[-7.54851032258165]
								}, {
									"case":	292,
									"scores":	[-7.54851032258165]
								}, {
									"case":	293,
									"scores":	[-7.54851032258165]
								}, {
									"case":	294,
									"scores":	[-7.54851032258165]
								}, {
									"case":	295,
									"scores":	[-7.54851032258165]
								}, {
									"case":	296,
									"scores":	[-7.54851032258165]
								}, {
									"case":	297,
									"scores":	[-7.54851032258165]
								}, {
									"case":	298,
									"scores":	[-7.54851032258165]
								}, {
									"case":	299,
									"scores":	[-7.54851032258165]
								}, {
									"case":	300,
									"scores":	[-7.54851032258165]
								}, {
									"case":	301,
									"scores":	[-7.54851032258165]
								}, {
									"case":	302,
									"scores":	[-7.54851032258165]
								}, {
									"case":	303,
									"scores":	[-7.54851032258165]
								}, {
									"case":	304,
									"scores":	[-7.54851032258165]
								}, {
									"case":	305,
									"scores":	[-7.54851032258165]
								}, {
									"case":	306,
									"scores":	[-7.54851032258165]
								}, {
									"case":	307,
									"scores":	[-7.54851032258165]
								}, {
									"case":	308,
									"scores":	[-7.54851032258165]
								}, {
									"case":	309,
									"scores":	[-7.54851032258165]
								}, {
									"case":	310,
									"scores":	[-7.54851032258165]
								}, {
									"case":	311,
									"scores":	[-7.54851032258165]
								}, {
									"case":	312,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}, {
									"case":	313,
									"scores":	[-10.80892769458165, -10.49639371058165, -12.200240144581649, -10.888978934581649, -10.548026187381648, -10.44036092438165, -11.30483851058165, -11.39123375058165, -11.495470510581651, -11.30483851058165, -11.495470510581651, -11.495470510581651, -11.495470510581651]
								}, {
									"case":	314,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}, {
									"case":	315,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}, {
									"case":	316,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}, {
									"case":	317,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}, {
									"case":	318,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}, {
									"case":	319,
									"scores":	[-13.071709494581651, -12.759175510581649, -14.463021944581648, -13.15176073458165, -12.810807987381649, -12.703142724381649, -13.567620310581649, -13.654015550581651, -13.75825231058165, -13.567620310581649, -13.75825231058165, -13.75825231058165, -13.75825231058165]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [], [], [], [29, 30, 31, 32, 33, 34, 35], [], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [18]],
							"begin_line":	332,
							"begin_column":	4,
							"end_line":	332,
							"end_column":	46,
							"patch_codes":	["if (!__is_neg(\"\", \"L332\", 13, &(sess), sizeof (sess), &(sess->rb), sizeof (sess->rb), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(sess->state), sizeof (sess->state), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con)))\n    chunkqueue_remove_finished_chunks(sess->rb);\n", "chunkqueue_append_buffer(sess->rb, 0)", "chunkqueue_prepend_buffer(sess->rb, 0)", "chunkqueue_set_tempdirs(sess->rb, 0)", "chunkqueue_skip(sess->rb, -1)", "chunkqueue_skip(sess->rb, 0)", "chunkqueue_skip(sess->rb, 1)", "chunkqueue_skip(sess->rb, 200)", "chunkqueue_skip(sess->rb, 299)", "chunkqueue_skip(sess->rb, 302)", "chunkqueue_skip(sess->rb, 323)", "chunkqueue_skip(sess->rb, 502)", "chunkqueue_steal_all_chunks(sess->rb, 0)", "chunkqueue_steal_chunk(sess->rb, 0)", "chunkqueue_steal_tempfile(sess->rb, 0)", "http_request_parse_cq(sess->rb, 0)", "http_response_parse_cq(sess->rb, 0)", "{\n}\n", "chunkqueue_free(sess->rb)", "chunkqueue_get_append_buffer(sess->rb)", "chunkqueue_get_append_tempfile(sess->rb)", "chunkqueue_get_prepend_buffer(sess->rb)", "chunkqueue_is_empty(sess->rb)", "chunkqueue_length(sess->rb)", "chunkqueue_print(sess->rb)", "chunkqueue_remove_empty_last_chunk(sess->rb)", "chunkqueue_reset(sess->rb)", "chunkqueue_written(sess->rb)", "chunkqueue_remove_finished_chunks((&con)->rb)", "chunkqueue_remove_finished_chunks((&have_content_length)->rb)", "chunkqueue_remove_finished_chunks((&i)->rb)", "chunkqueue_remove_finished_chunks((&p)->rb)", "chunkqueue_remove_finished_chunks((&sess)->rb)", "chunkqueue_remove_finished_chunks((&srv)->rb)", "chunkqueue_remove_finished_chunks((sess)->rb)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.66496609258165, -9.06705219258165, -9.38160276158165, -10.09198098858165, -8.04221814558165, -8.63038399958165, -8.88789079258165, -9.76703659258165, -9.73179579258165, -8.88789079258165, -9.73179579258165, -9.73179579258165, -9.73179579258165]
								}, {
									"case":	2,
									"scores":	[-7.54851032258165]
								}, {
									"case":	3,
									"scores":	[-7.54851032258165]
								}, {
									"case":	4,
									"scores":	[-7.54851032258165]
								}, {
									"case":	5,
									"scores":	[-7.54851032258165]
								}, {
									"case":	6,
									"scores":	[-7.54851032258165]
								}, {
									"case":	7,
									"scores":	[-7.54851032258165]
								}, {
									"case":	8,
									"scores":	[-7.54851032258165]
								}, {
									"case":	9,
									"scores":	[-7.54851032258165]
								}, {
									"case":	10,
									"scores":	[-7.54851032258165]
								}, {
									"case":	11,
									"scores":	[-7.54851032258165]
								}, {
									"case":	12,
									"scores":	[-7.54851032258165]
								}, {
									"case":	13,
									"scores":	[-7.54851032258165]
								}, {
									"case":	14,
									"scores":	[-7.54851032258165]
								}, {
									"case":	15,
									"scores":	[-7.54851032258165]
								}, {
									"case":	16,
									"scores":	[-7.54851032258165]
								}, {
									"case":	17,
									"scores":	[-7.54851032258165]
								}, {
									"case":	18,
									"scores":	[-7.54851032258165]
								}, {
									"case":	19,
									"scores":	[-7.54851032258165]
								}, {
									"case":	20,
									"scores":	[-7.54851032258165]
								}, {
									"case":	21,
									"scores":	[-7.54851032258165]
								}, {
									"case":	22,
									"scores":	[-7.54851032258165]
								}, {
									"case":	23,
									"scores":	[-7.54851032258165]
								}, {
									"case":	24,
									"scores":	[-7.54851032258165]
								}, {
									"case":	25,
									"scores":	[-7.54851032258165]
								}, {
									"case":	26,
									"scores":	[-7.54851032258165]
								}, {
									"case":	27,
									"scores":	[-7.54851032258165]
								}, {
									"case":	28,
									"scores":	[-7.54851032258165]
								}, {
									"case":	29,
									"scores":	[-7.54851032258165]
								}, {
									"case":	30,
									"scores":	[-7.54851032258165]
								}, {
									"case":	31,
									"scores":	[-7.54851032258165]
								}, {
									"case":	32,
									"scores":	[-7.54851032258165]
								}, {
									"case":	33,
									"scores":	[-7.54851032258165]
								}, {
									"case":	34,
									"scores":	[-7.54851032258165]
								}, {
									"case":	35,
									"scores":	[-7.54851032258165]
								}]
						}]
				}, {
					"line":	335,
					"switches":	[]
				}, {
					"line":	336,
					"switches":	[]
				}, {
					"line":	337,
					"switches":	[]
				}, {
					"line":	339,
					"switches":	[]
				}, {
					"line":	343,
					"switches":	[{
							"switch":	38,
							"types":	[[], [], [], [], [368, 369, 370, 371, 372, 373, 374, 375, 376], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], [], [], [], [], [], []],
							"begin_line":	344,
							"begin_column":	4,
							"end_line":	344,
							"end_column":	4,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header, 0, sizeof (*(header)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return -1;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 1;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 200;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 299;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 302;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 323;\n", "if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	2,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	3,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	4,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	5,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	6,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	7,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	8,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	9,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	10,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	11,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	12,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	13,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	14,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	15,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	16,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	17,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	18,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	19,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	20,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	21,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	22,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	23,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	24,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	25,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	26,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	27,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	28,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	29,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	30,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	31,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	32,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	33,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	34,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	35,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	36,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	37,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	38,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	39,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	40,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	41,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	42,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	43,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	44,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	45,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	46,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	47,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	48,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	49,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	50,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	51,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	52,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	53,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	54,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	55,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	56,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	57,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	58,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	59,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	60,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	61,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	62,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	63,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	64,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	65,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	66,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	67,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	68,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	69,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	70,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	71,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	72,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	73,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	74,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	75,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	76,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	77,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	78,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	79,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	80,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	81,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	82,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	83,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	84,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	85,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	86,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	87,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	88,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	89,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	90,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	91,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	92,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	93,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	94,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	95,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	96,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	97,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	98,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	99,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	100,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	101,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	102,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	103,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	104,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	105,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	106,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	107,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	108,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	109,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	110,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	111,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	112,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	113,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	114,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	115,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	116,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	117,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	118,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	119,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	120,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	121,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	122,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	123,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	124,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	125,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	126,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	127,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	128,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	129,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	130,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	131,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	132,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	133,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	134,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	135,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	136,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	137,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	138,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	139,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	140,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	141,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	142,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	143,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	144,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	145,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	146,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	147,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	148,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	149,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	150,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	151,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	152,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	153,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	154,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	155,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	156,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	157,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	158,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	159,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	160,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	161,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	162,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	163,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	164,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	165,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	166,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	167,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	168,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	169,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	170,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	171,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	172,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	173,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	174,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	175,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	176,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	177,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	178,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	179,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	180,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	181,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	182,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	183,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	184,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	185,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	186,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	187,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	188,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	189,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	190,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	191,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	192,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	193,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	194,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	195,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	196,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	197,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	198,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	199,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	200,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	201,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	202,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	203,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	204,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	205,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	206,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	207,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	208,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	209,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	210,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	211,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	212,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	213,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	214,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	215,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	216,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	217,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	218,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	219,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	220,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	221,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	222,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	223,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	224,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	225,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	226,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	227,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	228,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	229,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	230,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	231,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	232,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	233,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	234,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	235,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	236,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	237,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	238,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	239,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	240,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	241,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	242,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	243,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	244,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	245,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	246,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	247,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	248,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	249,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	250,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	251,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	252,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	253,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	254,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	255,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	256,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	257,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	258,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	259,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	260,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	261,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	262,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	263,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	264,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	265,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	266,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	267,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	268,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	269,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	270,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	271,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	272,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	273,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	274,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	275,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	276,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	277,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	278,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	279,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	280,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	281,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	282,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	283,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	284,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	285,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	286,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	287,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	288,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	289,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	290,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	291,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	292,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	293,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	294,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	295,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	296,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	297,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	298,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	299,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	300,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	301,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	302,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	303,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	304,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	305,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	306,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	307,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	308,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	309,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	310,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	311,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	312,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	313,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	314,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	315,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	316,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	317,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	318,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	319,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	320,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	321,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	322,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	323,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	324,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	325,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	326,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	327,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	328,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	329,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	330,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	331,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	332,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	333,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	334,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	335,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	336,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	337,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	338,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	339,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	340,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	341,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	342,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	343,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	344,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	345,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	346,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	347,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	348,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	349,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	350,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	351,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	352,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	353,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	354,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	355,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	356,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	357,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	358,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	359,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	360,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	361,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	362,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	363,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	364,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	365,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	366,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	367,
									"scores":	[-7.4070913713590141]
								}, {
									"case":	368,
									"scores":	[-10.005430818759013, -9.8405139453590138, -9.9186546613590139, -10.613897545359015, -10.422820001359014, -10.054925161359014, -10.828308761359015, -10.914704001359013, -9.5988141613590141, -10.245557161359013, -10.737441161359014, -11.018940761359014, -10.914704001359013, -10.828308761359015, -10.828308761359015, -10.828308761359015, -10.828308761359015, -10.828308761359015, -10.828308761359015, -10.828308761359015, -10.828308761359015]
								}, {
									"case":	369,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}, {
									"case":	370,
									"scores":	[-10.105339018759015, -9.9404221453590136, -10.018562861359014, -10.713805745359014, -10.522728201359014, -10.154833361359014, -10.928216961359013, -11.014612201359014, -9.6987223613590139, -10.345465361359015, -10.837349361359013, -11.118848961359014, -11.014612201359014, -10.928216961359013, -10.928216961359013, -10.928216961359013, -10.928216961359013, -10.928216961359013, -10.928216961359013, -10.928216961359013, -10.928216961359013]
								}, {
									"case":	371,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}, {
									"case":	372,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}, {
									"case":	373,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}, {
									"case":	374,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}, {
									"case":	375,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}, {
									"case":	376,
									"scores":	[-12.368120818759014, -12.203203945359014, -12.281344661359014, -12.976587545359013, -12.785510001359015, -12.417615161359013, -13.190998761359014, -13.277394001359013, -11.961504161359013, -12.608247161359014, -13.100131161359014, -13.381630761359014, -13.277394001359013, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014, -13.190998761359014]
								}]
						}, {
							"switch":	39,
							"types":	[[96], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], []],
							"begin_line":	344,
							"begin_column":	6,
							"end_line":	344,
							"end_column":	53,
							"patch_codes":	["if (__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if ((0 == strcasecmp(ign[j], header->key->ptr)) || __is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (0 == ASN1_BIT_STRING_num_asc(ign[j], header->key->ptr))\n    break;\n", "if (0 == ASN1_GENERALIZEDTIME_set_string(ign[j], header->key->ptr))\n    break;\n", "if (0 == ASN1_TIME_set_string(ign[j], header->key->ptr))\n    break;\n", "if (0 == ASN1_TIME_set_string_X509(ign[j], header->key->ptr))\n    break;\n", "if (0 == ASN1_UTCTIME_set_string(ign[j], header->key->ptr))\n    break;\n", "if (0 == ASN1_str2mask(ign[j], header->key->ptr))\n    break;\n", "if (0 == BIO_get_host_ip(ign[j], header->key->ptr))\n    break;\n", "if (0 == BIO_get_port(ign[j], header->key->ptr))\n    break;\n", "if (0 == BIO_printf(ign[j], header->key->ptr))\n    break;\n", "if (0 == BIO_puts(ign[j], header->key->ptr))\n    break;\n", "if (0 == BN_asc2bn(ign[j], header->key->ptr))\n    break;\n", "if (0 == BN_dec2bn(ign[j], header->key->ptr))\n    break;\n", "if (0 == BN_hex2bn(ign[j], header->key->ptr))\n    break;\n", "if (0 == CTLOG_STORE_load_file(ign[j], header->key->ptr))\n    break;\n", "if (0 == DH_meth_set1_name(ign[j], header->key->ptr))\n    break;\n", "if (0 == DSA_meth_set1_name(ign[j], header->key->ptr))\n    break;\n", "if (0 == OPENSSL_INIT_set_config_appname(ign[j], header->key->ptr))\n    break;\n", "if (0 == RSA_meth_set1_name(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CONF_CTX_set1_prefix(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CONF_cmd_value_type(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_config(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_set_cipher_list(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_set_ciphersuites(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_set_ctlog_list_file(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_set_tlsext_use_srtp(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_use_certificate_chain_file(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_use_psk_identity_hint(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_CTX_use_serverinfo_file(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_SESSION_set1_hostname(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_add1_host(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_add_dir_cert_subjects_to_stack(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_add_file_cert_subjects_to_stack(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_config(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_dane_enable(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_set1_host(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_set_cipher_list(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_set_ciphersuites(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_set_tlsext_use_srtp(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_use_certificate_chain_file(ign[j], header->key->ptr))\n    break;\n", "if (0 == SSL_use_psk_identity_hint(ign[j], header->key->ptr))\n    break;\n", "if (0 == VALGRIND_PRINTF(ign[j], header->key->ptr))\n    break;\n", "if (0 == VALGRIND_PRINTF_BACKTRACE(ign[j], header->key->ptr))\n    break;\n", "if (0 == X509_STORE_CTX_set_default(ign[j], header->key->ptr))\n    break;\n", "if (0 == X509_VERIFY_PARAM_set1_ip_asc(ign[j], header->key->ptr))\n    break;\n", "if (0 == X509_VERIFY_PARAM_set1_name(ign[j], header->key->ptr))\n    break;\n", "if (0 == buffer_append_string(ign[j], header->key->ptr))\n    break;\n", "if (0 == buffer_copy_string(ign[j], header->key->ptr))\n    break;\n", "if (0 == config_read(ign[j], header->key->ptr))\n    break;\n", "if (0 == execl(ign[j], header->key->ptr))\n    break;\n", "if (0 == execle(ign[j], header->key->ptr))\n    break;\n", "if (0 == execlp(ign[j], header->key->ptr))\n    break;\n", "if (0 == execv(ign[j], header->key->ptr))\n    break;\n", "if (0 == execvp(ign[j], header->key->ptr))\n    break;\n", "if (0 == fprintf(ign[j], header->key->ptr))\n    break;\n", "if (0 == fputs(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_ascii_strcasecmp(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_bookmark_file_has_item(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_key_file_has_group(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_pattern_match_simple(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_pattern_match_string(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_regex_get_string_number(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_relation_exists(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_spawn_command_line_async(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_str_has_prefix(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_str_has_suffix(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_strcasecmp(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_strcmp0(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_strv_contains(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_time_val_from_iso8601(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_utf8_collate(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_variant_dict_contains(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_variant_dict_remove(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_variant_iter_loop(ign[j], header->key->ptr))\n    break;\n", "if (0 == g_variant_iter_next(ign[j], header->key->ptr))\n    break;\n", "if (0 == inet_aton(ign[j], header->key->ptr))\n    break;\n", "if (0 == keyvalue_get_key(ign[j], header->key->ptr))\n    break;\n", "if (0 == link(ign[j], header->key->ptr))\n    break;\n", "if (0 == log_trace(ign[j], header->key->ptr))\n    break;\n", "if (0 == lstat(ign[j], header->key->ptr))\n    break;\n", "if (0 == pcre_get_stringnumber(ign[j], header->key->ptr))\n    break;\n", "if (0 == printf(ign[j], header->key->ptr))\n    break;\n", "if (0 == rename(ign[j], header->key->ptr))\n    break;\n", "if (0 == sk_OPENSSL_CSTRING_find(ign[j], header->key->ptr))\n    break;\n", "if (0 == sk_OPENSSL_CSTRING_find_ex(ign[j], header->key->ptr))\n    break;\n", "if (0 == sk_OPENSSL_CSTRING_push(ign[j], header->key->ptr))\n    break;\n", "if (0 == sk_OPENSSL_CSTRING_unshift(ign[j], header->key->ptr))\n    break;\n", "if (0 == sprintf(ign[j], header->key->ptr))\n    break;\n", "if (0 == stat(ign[j], header->key->ptr))\n    break;\n", "if (0 == strcasecmp(ign[j], header->key->ptr))\n    break;\n", "if (0 == strcmp(ign[j], header->key->ptr))\n    break;\n", "if (0 == strcoll(ign[j], header->key->ptr))\n    break;\n", "if (0 == symlink(ign[j], header->key->ptr))\n    break;\n", "if (0 == vprintf(ign[j], header->key->ptr))\n    break;\n", "if ((0 == strcasecmp(ign[j], header->key->ptr)) && !__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.7583962954281462, -3.7706049954281458, -4.3070440954281466, -4.5414386954281465, -4.8726754954281457, -3.763988995428146, -4.5348226954281463, -5.4139684954281462, -3.5200621254281463, -4.6078939954281459, -5.1491869954281464, -5.3787276954281467, -5.4139684954281462, -4.5348226954281463, -4.5348226954281463, -4.5348226954281463, -4.5348226954281463, -4.5348226954281463, -4.5348226954281463, -4.5348226954281463, -4.5348226954281463]
								}, {
									"case":	2,
									"scores":	[-2.4855742304281456, -3.4977829304281451, -4.034222030428146, -4.268616630428145, -4.599853430428146, -3.4911669304281459, -4.2620006304281457, -5.1411464304281456, -3.2472400604281462, -4.3350719304281462, -4.8763649304281458, -5.105905630428146, -5.1411464304281456, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-2.4855742304281456, -3.4977829304281451, -4.034222030428146, -4.268616630428145, -4.599853430428146, -3.4911669304281459, -4.2620006304281457, -5.1411464304281456, -3.2472400604281462, -4.3350719304281462, -4.8763649304281458, -5.105905630428146, -5.1411464304281456, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457, -4.2620006304281457]
								}]
						}, {
							"switch":	40,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	344,
							"begin_column":	6,
							"end_line":	344,
							"end_column":	53,
							"patch_codes":	["if (!__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    if (0 == strcasecmp(ign[j], header->key->ptr))\n        break;\n", "if (!__is_neg(\"\", \"L344\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)) && (0 == strcasecmp(ign[j], header->key->ptr)))\n    break;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9766064613590144, -8.9888151613590139, -9.5252542613590148, -9.7596488613590147, -10.090885661359014, -8.9821991613590129, -9.7530328613590136, -10.632178661359013, -8.7382722913590136, -9.8261041613590141, -10.367397161359014, -10.596937861359013, -10.632178661359013, -9.7530328613590136, -9.7530328613590136, -9.7530328613590136, -9.7530328613590136, -9.7530328613590136, -9.7530328613590136, -9.7530328613590136, -9.7530328613590136]
								}, {
									"case":	2,
									"scores":	[-7.7046536993590138, -8.7168623993590142, -9.2533014993590132, -9.4876960993590131, -9.8189328993590141, -8.7102463993590131, -9.4810800993590139, -10.360225899359014, -8.4663195293590139, -9.5541513993590144, -10.095444399359014, -10.324985099359013, -10.360225899359014, -9.4810800993590139, -9.4810800993590139, -9.4810800993590139, -9.4810800993590139, -9.4810800993590139, -9.4810800993590139, -9.4810800993590139, -9.4810800993590139]
								}]
						}]
				}, {
					"line":	342,
					"switches":	[{
							"switch":	37,
							"types":	[[], [], [], [], [368, 369, 370, 371, 372, 373, 374, 375, 376], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], [], [], [], [], [], []],
							"begin_line":	343,
							"begin_column":	3,
							"end_line":	343,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header, 0, sizeof (*(header)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return -1;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 1;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 200;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 299;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 302;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 323;\n", "if (__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	2,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	3,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	4,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	5,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	6,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	7,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	8,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	9,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	10,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	11,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	12,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	13,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	14,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	15,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	16,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	17,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	18,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	19,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	20,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	21,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	22,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	23,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	24,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	25,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	26,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	27,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	28,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	29,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	30,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	31,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	32,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	33,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	34,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	35,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	36,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	37,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	38,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	39,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	40,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	41,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	42,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	43,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	44,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	45,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	46,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	47,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	48,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	49,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	50,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	51,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	52,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	53,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	54,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	55,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	56,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	57,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	58,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	59,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	60,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	61,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	62,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	63,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	64,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	65,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	66,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	67,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	68,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	69,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	70,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	71,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	72,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	73,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	74,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	75,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	76,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	77,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	78,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	79,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	80,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	81,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	82,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	83,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	84,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	85,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	86,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	87,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	88,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	89,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	90,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	91,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	92,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	93,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	94,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	95,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	96,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	97,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	98,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	99,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	100,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	101,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	102,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	103,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	104,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	105,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	106,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	107,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	108,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	109,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	110,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	111,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	112,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	113,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	114,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	115,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	116,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	117,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	118,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	119,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	120,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	121,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	122,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	123,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	124,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	125,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	126,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	127,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	128,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	129,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	130,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	131,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	132,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	133,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	134,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	135,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	136,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	137,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	138,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	139,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	140,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	141,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	142,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	143,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	144,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	145,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	146,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	147,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	148,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	149,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	150,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	151,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	152,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	153,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	154,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	155,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	156,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	157,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	158,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	159,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	160,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	161,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	162,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	163,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	164,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	165,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	166,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	167,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	168,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	169,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	170,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	171,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	172,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	173,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	174,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	175,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	176,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	177,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	178,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	179,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	180,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	181,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	182,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	183,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	184,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	185,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	186,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	187,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	188,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	189,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	190,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	191,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	192,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	193,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	194,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	195,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	196,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	197,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	198,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	199,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	200,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	201,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	202,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	203,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	204,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	205,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	206,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	207,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	208,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	209,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	210,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	211,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	212,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	213,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	214,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	215,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	216,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	217,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	218,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	219,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	220,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	221,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	222,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	223,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	224,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	225,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	226,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	227,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	228,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	229,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	230,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	231,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	232,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	233,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	234,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	235,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	236,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	237,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	238,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	239,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	240,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	241,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	242,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	243,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	244,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	245,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	246,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	247,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	248,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	249,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	250,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	251,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	252,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	253,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	254,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	255,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	256,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	257,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	258,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	259,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	260,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	261,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	262,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	263,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	264,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	265,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	266,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	267,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	268,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	269,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	270,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	271,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	272,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	273,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	274,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	275,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	276,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	277,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	278,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	279,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	280,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	281,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	282,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	283,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	284,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	285,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	286,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	287,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	288,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	289,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	290,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	291,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	292,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	293,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	294,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	295,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	296,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	297,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	298,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	299,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	300,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	301,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	302,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	303,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	304,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	305,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	306,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	307,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	308,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	309,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	310,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	311,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	312,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	313,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	314,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	315,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	316,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	317,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	318,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	319,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	320,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	321,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	322,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	323,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	324,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	325,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	326,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	327,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	328,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	329,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	330,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	331,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	332,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	333,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	334,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	335,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	336,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	337,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	338,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	339,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	340,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	341,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	342,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	343,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	344,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	345,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	346,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	347,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	348,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	349,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	350,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	351,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	352,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	353,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	354,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	355,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	356,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	357,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	358,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	359,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	360,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	361,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	362,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	363,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	364,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	365,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	366,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	367,
									"scores":	[-7.4272940786765336]
								}, {
									"case":	368,
									"scores":	[-9.5803716827765335, -9.4141336146765333, -9.4922743306765334, -10.187517214676534, -10.608095370676534, -9.8714333196765338, -10.646192630676534, -11.068575364676533, -9.5374508444765329, -10.311060830676533, -10.113291850676534, -10.592560430676533, -10.488323670676534, -10.401928430676534, -10.401928430676534, -10.401928430676534, -10.401928430676534, -10.401928430676534, -10.401928430676534, -10.401928430676534, -10.401928430676534]
								}, {
									"case":	369,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}, {
									"case":	370,
									"scores":	[-9.6802798827765333, -9.5140418146765349, -9.5921825306765349, -10.287425414676534, -10.708003570676533, -9.9713415196765336, -10.746100830676534, -11.168483564676535, -9.6373590444765327, -10.410969030676533, -10.213200050676534, -10.692468630676533, -10.588231870676534, -10.501836630676534, -10.501836630676534, -10.501836630676534, -10.501836630676534, -10.501836630676534, -10.501836630676534, -10.501836630676534, -10.501836630676534]
								}, {
									"case":	371,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}, {
									"case":	372,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}, {
									"case":	373,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}, {
									"case":	374,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}, {
									"case":	375,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}, {
									"case":	376,
									"scores":	[-11.943061682776534, -11.776823614676534, -11.854964330676534, -12.550207214676533, -12.970785370676534, -12.234123319676534, -13.008882630676535, -13.431265364676534, -11.900140844476534, -12.673750830676534, -12.475981850676533, -12.955250430676534, -12.851013670676533, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535, -12.764618430676535]
								}]
						}, {
							"switch":	41,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	343,
							"begin_column":	5,
							"end_line":	345,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L343\", 21, &(j), sizeof (j), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key), sizeof (header->key), &(p), sizeof (p), &(i), sizeof (i), &(header->key->used), sizeof (header->key->used), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(ds), sizeof (ds), &(header->value), sizeof (header->value), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    for (j = 0; ign[j]; j++) {\n        if (0 == strcasecmp(ign[j], header->key->ptr))\n            break;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.7728056546765334, -10.112659413676534, -9.9356016486765331, -10.883493113676533, -10.880887479676533, -9.7362933486765328, -10.506261948676533, -11.602698113676533, -9.09541958267653, -10.687446348676534, -10.112705066676533, -10.916987048676534, -10.952227848676532, -10.073082048676532, -10.073082048676532, -10.073082048676532, -10.073082048676532, -10.073082048676532, -10.073082048676532, -10.073082048676532, -10.073082048676532]
								}]
						}]
				}, {
					"line":	345,
					"switches":	[{
							"switch":	42,
							"types":	[[], [], [], [], [367, 368, 369, 370, 371, 372, 373, 374, 375], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366], [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], [], [], [], [], [], []],
							"begin_line":	346,
							"begin_column":	3,
							"end_line":	346,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    break;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return -1;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 0;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 1;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 200;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 299;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 302;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 323;\n", "if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	2,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	3,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	4,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	5,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	6,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	7,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	8,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	9,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	10,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	11,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	12,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	13,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	14,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	15,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	16,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	17,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	18,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	19,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	20,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	21,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	22,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	23,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	24,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	25,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	26,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	27,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	28,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	29,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	30,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	31,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	32,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	33,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	34,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	35,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	36,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	37,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	38,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	39,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	40,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	41,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	42,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	43,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	44,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	45,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	46,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	47,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	48,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	49,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	50,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	51,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	52,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	53,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	54,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	55,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	56,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	57,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	58,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	59,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	60,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	61,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	62,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	63,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	64,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	65,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	66,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	67,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	68,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	69,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	70,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	71,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	72,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	73,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	74,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	75,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	76,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	77,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	78,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	79,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	80,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	81,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	82,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	83,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	84,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	85,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	86,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	87,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	88,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	89,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	90,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	91,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	92,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	93,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	94,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	95,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	96,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	97,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	98,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	99,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	100,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	101,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	102,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	103,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	104,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	105,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	106,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	107,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	108,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	109,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	110,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	111,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	112,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	113,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	114,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	115,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	116,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	117,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	118,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	119,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	120,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	121,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	122,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	123,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	124,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	125,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	126,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	127,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	128,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	129,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	130,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	131,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	132,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	133,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	134,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	135,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	136,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	137,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	138,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	139,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	140,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	141,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	142,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	143,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	144,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	145,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	146,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	147,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	148,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	149,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	150,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	151,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	152,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	153,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	154,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	155,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	156,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	157,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	158,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	159,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	160,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	161,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	162,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	163,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	164,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	165,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	166,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	167,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	168,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	169,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	170,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	171,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	172,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	173,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	174,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	175,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	176,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	177,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	178,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	179,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	180,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	181,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	182,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	183,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	184,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	185,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	186,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	187,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	188,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	189,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	190,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	191,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	192,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	193,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	194,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	195,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	196,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	197,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	198,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	199,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	200,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	201,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	202,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	203,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	204,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	205,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	206,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	207,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	208,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	209,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	210,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	211,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	212,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	213,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	214,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	215,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	216,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	217,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	218,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	219,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	220,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	221,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	222,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	223,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	224,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	225,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	226,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	227,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	228,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	229,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	230,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	231,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	232,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	233,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	234,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	235,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	236,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	237,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	238,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	239,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	240,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	241,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	242,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	243,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	244,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	245,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	246,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	247,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	248,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	249,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	250,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	251,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	252,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	253,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	254,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	255,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	256,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	257,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	258,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	259,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	260,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	261,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	262,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	263,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	264,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	265,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	266,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	267,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	268,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	269,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	270,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	271,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	272,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	273,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	274,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	275,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	276,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	277,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	278,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	279,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	280,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	281,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	282,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	283,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	284,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	285,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	286,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	287,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	288,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	289,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	290,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	291,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	292,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	293,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	294,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	295,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	296,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	297,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	298,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	299,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	300,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	301,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	302,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	303,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	304,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	305,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	306,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	307,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	308,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	309,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	310,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	311,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	312,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	313,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	314,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	315,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	316,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	317,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	318,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	319,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	320,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	321,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	322,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	323,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	324,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	325,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	326,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	327,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	328,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	329,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	330,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	331,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	332,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	333,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	334,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	335,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	336,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	337,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	338,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	339,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	340,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	341,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	342,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	343,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	344,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	345,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	346,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	347,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	348,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	349,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	350,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	351,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	352,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	353,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	354,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	355,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	356,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	357,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	358,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	359,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	360,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	361,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	362,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	363,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	364,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	365,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	366,
									"scores":	[-7.3868886640414946]
								}, {
									"case":	367,
									"scores":	[-9.7935496024414945, -12.170982448041496, -11.986281198041494, -11.525801204041494, -10.789139153041493, -10.455156677841494, -11.698762968041494, -11.228766664041494, -11.406029504041495]
								}, {
									"case":	368,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}, {
									"case":	369,
									"scores":	[-9.89345780244149, -12.270890648041494, -12.086189398041494, -11.625709404041494, -10.889047353041494, -10.555064877841495, -11.798671168041494, -11.328674864041494, -11.505937704041493]
								}, {
									"case":	370,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}, {
									"case":	371,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}, {
									"case":	372,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}, {
									"case":	373,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}, {
									"case":	374,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}, {
									"case":	375,
									"scores":	[-12.156239602441493, -14.533672448041495, -14.348971198041495, -13.888491204041495, -13.151829153041493, -12.817846677841494, -14.061452968041495, -13.591456664041495, -13.768719504041494]
								}]
						}, {
							"switch":	43,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	346,
							"begin_column":	5,
							"end_line":	346,
							"end_column":	17,
							"patch_codes":	["if (__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    continue;\n", "if ((ign[j]) || __is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    continue;\n", "if ((ign[j]) && !__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5000078204281451, -5.4809155514281462, -6.0161403434281464, -5.7164257364281461, -4.5718316054281463, -4.6511135124281457, -5.7520383884281463, -5.522984605428146, -5.7877661054281457]
								}, {
									"case":	2,
									"scores":	[-4.2707843414281461, -4.2516920724281455, -4.7869168644281457, -4.4872022574281463, -3.3426081264281455, -3.4218900334281459, -4.5228149094281456, -4.2937611264281461, -4.5585426264281459]
								}, {
									"case":	3,
									"scores":	[-4.2707843414281461, -4.2516920724281455, -4.7869168644281457, -4.4872022574281463, -3.3426081264281455, -3.4218900334281459, -4.5228149094281456, -4.2937611264281461, -4.5585426264281459]
								}]
						}, {
							"switch":	44,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	346,
							"begin_column":	5,
							"end_line":	346,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L346\", 9, &(j), sizeof (j), &(header), sizeof (header), &(con), sizeof (con), &(p), sizeof (p), &(i), sizeof (i), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(sess), sizeof (sess), &(srv), sizeof (srv)))\n    if (ign[j])\n        continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.199244159041495, -10.180151890041493, -10.715376682041494, -10.415662075041494, -9.2710679440414943, -9.3503498510414946, -10.451274727041495, -10.222220944041494, -10.487002444041494]
								}]
						}]
				}, {
					"line":	351,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [367, 368, 369, 370, 371, 372, 373, 374, 375], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366], [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], [], [], [], [], [], []],
							"begin_line":	352,
							"begin_column":	4,
							"end_line":	352,
							"end_column":	4,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return -1;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 1;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 200;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 299;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 302;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 323;\n", "if (__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	103,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	104,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	105,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	106,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	107,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	108,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	109,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	110,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	111,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	112,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	113,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	114,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	115,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	116,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	117,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	118,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	119,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	120,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	121,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	122,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	123,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	124,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	125,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	126,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	127,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	128,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	129,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	130,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	131,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	132,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	133,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	134,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	135,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	136,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	137,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	138,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	139,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	140,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	141,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	142,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	143,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	144,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	145,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	146,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	147,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	148,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	149,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	150,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	151,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	152,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	153,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	154,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	155,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	156,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	157,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	158,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	159,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	160,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	161,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	162,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	163,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	164,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	165,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	166,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	167,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	168,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	169,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	170,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	171,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	172,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	173,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	174,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	175,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	176,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	177,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	178,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	179,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	180,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	181,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	182,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	183,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	184,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	185,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	186,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	187,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	188,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	189,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	190,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	191,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	192,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	193,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	194,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	195,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	196,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	197,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	198,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	199,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	200,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	201,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	202,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	203,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	204,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	205,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	206,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	207,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	208,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	209,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	210,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	211,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	212,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	213,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	214,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	215,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	216,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	217,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	218,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	219,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	220,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	221,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	222,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	223,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	224,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	225,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	226,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	227,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	228,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	229,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	230,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	231,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	232,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	233,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	234,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	235,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	236,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	237,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	238,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	239,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	240,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	241,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	242,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	243,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	244,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	245,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	246,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	247,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	248,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	249,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	250,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	251,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	252,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	253,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	254,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	255,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	256,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	257,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	258,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	259,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	260,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	261,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	262,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	263,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	264,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	265,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	266,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	267,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	268,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	269,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	270,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	271,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	272,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	273,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	274,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	275,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	276,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	277,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	278,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	279,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	280,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	281,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	282,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	283,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	284,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	285,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	286,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	287,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	288,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	289,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	290,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	291,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	292,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	293,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	294,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	295,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	296,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	297,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	298,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	299,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	300,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	301,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	302,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	303,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	304,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	305,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	306,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	307,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	308,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	309,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	310,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	311,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	312,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	313,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	314,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	315,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	316,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	317,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	318,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	319,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	320,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	321,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	322,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	323,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	324,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	325,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	326,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	327,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	328,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	329,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	330,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	331,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	332,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	333,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	334,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	335,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	336,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	337,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	338,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	339,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	340,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	341,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	342,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	343,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	344,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	345,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	346,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	347,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	348,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	349,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	350,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	351,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	352,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	353,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	354,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	355,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	356,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	357,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	358,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	359,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	360,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	361,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	362,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	363,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	364,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	365,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	366,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	367,
									"scores":	[-4.8508996093982244, -5.3428787246982239, -6.0150530246982239, -5.9256303246982238, -6.1162623246982237, -6.0120255646982237, -5.3428787246982239, -5.152246724698224, -6.1162623246982237, -5.5201415646982239, -5.152246724698224, -5.8347627246982237, -6.0120255646982237, -5.9256303246982238, -5.9256303246982238, -5.9256303246982238, -5.9256303246982238, -5.9256303246982238, -5.9256303246982238, -5.9256303246982238, -5.9256303246982238]
								}, {
									"case":	368,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}, {
									"case":	369,
									"scores":	[-4.9508078093982242, -5.4427869246982237, -6.1149612246982237, -6.0255385246982236, -6.2161705246982244, -6.1119337646982235, -5.4427869246982237, -5.2521549246982238, -6.2161705246982244, -5.6200497646982237, -5.2521549246982238, -5.9346709246982234, -6.1119337646982235, -6.0255385246982236, -6.0255385246982236, -6.0255385246982236, -6.0255385246982236, -6.0255385246982236, -6.0255385246982236, -6.0255385246982236, -6.0255385246982236]
								}, {
									"case":	370,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}, {
									"case":	371,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}, {
									"case":	372,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}, {
									"case":	373,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}, {
									"case":	374,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}, {
									"case":	375,
									"scores":	[-7.213589609398225, -7.7055687246982245, -8.3777430246982245, -8.2883203246982244, -8.4789523246982235, -8.3747155646982243, -7.7055687246982245, -7.5149367246982237, -8.4789523246982235, -7.8828315646982237, -7.5149367246982237, -8.1974527246982234, -8.3747155646982243, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244, -8.2883203246982244]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	352,
							"begin_column":	6,
							"end_line":	352,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L352\", 21, &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    have_content_length = 1;\n", "{\n}\n", "have_content_length = (-1)", "have_content_length = (0 * have_content_length)", "have_content_length = (0 * i)", "have_content_length = (0 * j)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (con != 0)", "have_content_length = (con == 0)", "have_content_length = (ds != 0)", "have_content_length = (ds != header)", "have_content_length = (ds == 0)", "have_content_length = (ds == header)", "have_content_length = (have_content_length != 0)", "have_content_length = (have_content_length != j)", "have_content_length = (have_content_length * i)", "have_content_length = (have_content_length * j)", "have_content_length = (have_content_length + 0)", "have_content_length = (have_content_length + j)", "have_content_length = (have_content_length - 0)", "have_content_length = (have_content_length - j)", "have_content_length = (have_content_length == 0)", "have_content_length = (have_content_length == j)", "have_content_length = (have_content_length)", "have_content_length = (header != 0)", "have_content_length = (header == 0)", "have_content_length = (i != 0)", "have_content_length = (i != have_content_length)", "have_content_length = (i != j)", "have_content_length = (i * have_content_length)", "have_content_length = (i * j)", "have_content_length = (i + 0)", "have_content_length = (i + have_content_length)", "have_content_length = (i + j)", "have_content_length = (i - 0)", "have_content_length = (i - have_content_length)", "have_content_length = (i - j)", "have_content_length = (i == 0)", "have_content_length = (i == have_content_length)", "have_content_length = (i == j)", "have_content_length = (ign != 0)", "have_content_length = (ign == 0)", "have_content_length = (j != 0)", "have_content_length = (j * have_content_length)", "have_content_length = (j * i)", "have_content_length = (j + 0)", "have_content_length = (j - 0)", "have_content_length = (j == 0)", "have_content_length = (p != 0)", "have_content_length = (p == 0)", "have_content_length = (sess != 0)", "have_content_length = (sess == 0)", "have_content_length = (srv != 0)", "have_content_length = (srv == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1455904276982238, -5.5132666246982236, -5.8771603246982238, -5.440195324698224, -6.2841003246982243, -6.3193411246982247, -5.5132666246982236, -4.6693616246982241, -6.2841003246982243, -5.7780481246982234, -4.6693616246982241, -6.0545596246982241, -6.3193411246982247, -5.440195324698224, -5.440195324698224, -5.440195324698224, -5.440195324698224, -5.440195324698224, -5.440195324698224, -5.440195324698224, -5.440195324698224]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}]
						}]
				}, {
					"line":	350,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [368, 369, 370, 371, 372, 373, 374, 375, 376], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], [], [], [], [], [], []],
							"begin_line":	351,
							"begin_column":	10,
							"end_line":	351,
							"end_column":	10,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header, 0, sizeof (*(header)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    break;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	2,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	3,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	4,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	5,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	6,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	7,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	8,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	9,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	10,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	11,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	12,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	13,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	14,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	15,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	16,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	17,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	18,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	19,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	20,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	21,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	22,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	23,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	24,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	25,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	26,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	27,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	28,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	29,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	30,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	31,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	32,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	33,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	34,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	35,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	36,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	37,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	38,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	39,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	40,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	41,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	42,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	43,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	44,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	45,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	46,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	47,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	48,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	49,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	50,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	51,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	52,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	53,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	54,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	55,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	56,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	57,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	58,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	59,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	60,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	61,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	62,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	63,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	64,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	65,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	66,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	67,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	68,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	69,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	70,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	71,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	72,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	73,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	74,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	75,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	76,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	77,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	78,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	79,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	80,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	81,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	82,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	83,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	84,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	85,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	86,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	87,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	88,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	89,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	90,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	91,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	92,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	93,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	94,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	95,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	96,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	97,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	98,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	99,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	100,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	101,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	102,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	103,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	104,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	105,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	106,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	107,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	108,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	109,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	110,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	111,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	112,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	113,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	114,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	115,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	116,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	117,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	118,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	119,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	120,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	121,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	122,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	123,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	124,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	125,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	126,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	127,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	128,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	129,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	130,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	131,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	132,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	133,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	134,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	135,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	136,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	137,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	138,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	139,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	140,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	141,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	142,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	143,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	144,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	145,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	146,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	147,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	148,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	149,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	150,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	151,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	152,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	153,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	154,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	155,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	156,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	157,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	158,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	159,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	160,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	161,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	162,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	163,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	164,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	165,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	166,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	167,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	168,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	169,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	170,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	171,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	172,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	173,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	174,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	175,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	176,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	177,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	178,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	179,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	180,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	181,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	182,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	183,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	184,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	185,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	186,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	187,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	188,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	189,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	190,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	191,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	192,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	193,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	194,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	195,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	196,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	197,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	198,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	199,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	200,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	201,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	202,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	203,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	204,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	205,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	206,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	207,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	208,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	209,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	210,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	211,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	212,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	213,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	214,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	215,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	216,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	217,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	218,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	219,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	220,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	221,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	222,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	223,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	224,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	225,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	226,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	227,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	228,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	229,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	230,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	231,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	232,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	233,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	234,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	235,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	236,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	237,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	238,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	239,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	240,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	241,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	242,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	243,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	244,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	245,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	246,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	247,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	248,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	249,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	250,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	251,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	252,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	253,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	254,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	255,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	256,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	257,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	258,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	259,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	260,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	261,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	262,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	263,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	264,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	265,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	266,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	267,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	268,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	269,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	270,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	271,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	272,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	273,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	274,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	275,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	276,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	277,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	278,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	279,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	280,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	281,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	282,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	283,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	284,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	285,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	286,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	287,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	288,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	289,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	290,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	291,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	292,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	293,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	294,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	295,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	296,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	297,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	298,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	299,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	300,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	301,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	302,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	303,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	304,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	305,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	306,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	307,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	308,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	309,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	310,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	311,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	312,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	313,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	314,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	315,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	316,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	317,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	318,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	319,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	320,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	321,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	322,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	323,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	324,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	325,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	326,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	327,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	328,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	329,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	330,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	331,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	332,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	333,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	334,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	335,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	336,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	337,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	338,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	339,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	340,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	341,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	342,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	343,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	344,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	345,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	346,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	347,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	348,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	349,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	350,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	351,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	352,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	353,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	354,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	355,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	356,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	357,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	358,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	359,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	360,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	361,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	362,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	363,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	364,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	365,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	366,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	367,
									"scores":	[-7.3464832494064556]
								}, {
									"case":	368,
									"scores":	[-9.7799058234064553, -9.8580465394064554, -10.348274515406455, -10.553289423406456, -10.854095879406454, -9.6929699241064551, -10.767700639406456, -10.184949039406455, -9.9943170394064555, -10.958332639406455, -10.362211879406455, -9.9943170394064555, -10.767700639406456, -10.676833039406455, -10.854095879406454, -10.857123339406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.958332639406455, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.958332639406455, -10.958332639406455, -10.958332639406455, -10.958332639406455, -10.958332639406455, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.958332639406455, -10.958332639406455, -10.958332639406455, -10.311589639406456, -10.958332639406455, -10.958332639406455, -10.767700639406456, -10.767700639406456, -10.767700639406456, -10.958332639406455, -10.958332639406455, -10.958332639406455, -10.767700639406456, -10.767700639406456, -10.857123339406456]
								}, {
									"case":	369,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}, {
									"case":	370,
									"scores":	[-9.8798140234064551, -9.9579547394064551, -10.448182715406455, -10.653197623406456, -10.954004079406456, -9.7928781241064549, -10.867608839406454, -10.284857239406456, -10.094225239406455, -11.058240839406455, -10.462120079406455, -10.094225239406455, -10.867608839406454, -10.776741239406455, -10.954004079406456, -10.957031539406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -11.058240839406455, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -11.058240839406455, -11.058240839406455, -11.058240839406455, -11.058240839406455, -11.058240839406455, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -10.867608839406454, -11.058240839406455, -11.058240839406455, -11.058240839406455, -10.411497839406454, -11.058240839406455, -11.058240839406455, -10.867608839406454, -10.867608839406454, -10.867608839406454, -11.058240839406455, -11.058240839406455, -11.058240839406455, -10.867608839406454, -10.867608839406454, -10.957031539406454]
								}, {
									"case":	371,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}, {
									"case":	372,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}, {
									"case":	373,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}, {
									"case":	374,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}, {
									"case":	375,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}, {
									"case":	376,
									"scores":	[-12.142595823406456, -12.220736539406456, -12.710964515406456, -12.915979423406455, -13.216785879406455, -12.055659924106456, -13.130390639406455, -12.547639039406455, -12.357007039406454, -13.321022639406456, -12.724901879406456, -12.357007039406454, -13.130390639406455, -13.039523039406456, -13.216785879406455, -13.219813339406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -12.674279639406455, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.130390639406455, -13.321022639406456, -13.321022639406456, -13.321022639406456, -13.130390639406455, -13.130390639406455, -13.219813339406455]
								}]
						}, {
							"switch":	48,
							"types":	[[12], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], []],
							"begin_line":	351,
							"begin_column":	12,
							"end_line":	353,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket))) {\n    have_content_length = 1;\n}\n", "if ((0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) || __is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket))) {\n    have_content_length = 1;\n}\n", "if (0 == BIO_snprintf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == VALGRIND_PRINTF(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == VALGRIND_PRINTF_BACKTRACE(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == array_strcasecmp(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == g_relation_exists(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == g_snprintf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == log_trace(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == printf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == snprintf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if ((0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) && !__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket))) {\n    have_content_length = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4772340651281457, -6.0136731651281465, -5.1585780651281459, -6.2480677651281464, -7.1205975651281452, -5.9468468681281452, -6.2414517651281454, -6.3145230651281459, -5.4706180651281464, -7.0853567651281457, -6.5793045651281457, -5.4706180651281464, -6.2414517651281454, -6.8558160651281455, -7.1205975651281452, -6.6784167651281461, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -7.0853567651281457, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -7.0853567651281457, -7.0853567651281457, -7.0853567651281457, -7.0853567651281457, -7.0853567651281457, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -7.0853567651281457, -7.0853567651281457, -7.0853567651281457, -5.9975248951281461, -7.0853567651281457, -7.0853567651281457, -6.2414517651281454, -6.2414517651281454, -6.2414517651281454, -7.0853567651281457, -7.0853567651281457, -7.0853567651281457, -6.2414517651281454, -6.2414517651281454, -6.6784167651281461]
								}, {
									"case":	2,
									"scores":	[-3.422931964428146, -3.9593710644281468, -3.104275964428147, -4.1937656644281462, -5.0662954644281459, -3.8925447674281455, -4.1871496644281461, -4.2602209644281466, -3.4163159644281462, -5.0310546644281464, -4.5250024644281464, -3.4163159644281462, -4.1871496644281461, -4.8015139644281462, -5.0662954644281459, -4.6241146644281468, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -3.9432227944281464, -5.0310546644281464, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.6241146644281468]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.422931964428146, -3.9593710644281468, -3.104275964428147, -4.1937656644281462, -5.0662954644281459, -3.8925447674281455, -4.1871496644281461, -4.2602209644281466, -3.4163159644281462, -5.0310546644281464, -4.5250024644281464, -3.4163159644281462, -4.1871496644281461, -4.8015139644281462, -5.0662954644281459, -4.6241146644281468, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -3.9432227944281464, -5.0310546644281464, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.1871496644281461, -5.0310546644281464, -5.0310546644281464, -5.0310546644281464, -4.1871496644281461, -4.1871496644281461, -4.6241146644281468]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	351,
							"begin_column":	12,
							"end_line":	353,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n        have_content_length = 1;\n    }\n", "if (!__is_neg(\"\", \"L351\", 62, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(ds), sizeof (ds), &(j), sizeof (j), &(header->value), sizeof (header->value), &(p), sizeof (p), &(i), sizeof (i), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)) && (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0))) {\n    have_content_length = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.9282070394064554, -9.4646461394064563, -8.6095510394064547, -9.6990407394064562, -10.571570539406455, -9.3978198424064558, -9.6924247394064551, -9.7654960394064556, -8.9215910394064544, -10.536329739406455, -10.030277539406455, -8.9215910394064544, -9.6924247394064551, -10.306789039406455, -10.571570539406455, -10.129389739406456, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -10.536329739406455, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -10.536329739406455, -10.536329739406455, -10.536329739406455, -10.536329739406455, -10.536329739406455, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -10.536329739406455, -10.536329739406455, -10.536329739406455, -9.4484978694064559, -10.536329739406455, -10.536329739406455, -9.6924247394064551, -9.6924247394064551, -9.6924247394064551, -10.536329739406455, -10.536329739406455, -10.536329739406455, -9.6924247394064551, -9.6924247394064551, -10.129389739406456]
								}, {
									"case":	2,
									"scores":	[-8.2370962084064558, -8.7735353084064549, -7.918440208406456, -9.0079299084064566, -9.8804597084064554, -8.7067090114064545, -9.0013139084064555, -9.074385208406456, -8.2304802084064548, -9.845218908406455, -9.3391667084064558, -8.2304802084064548, -9.0013139084064555, -9.6156782084064556, -9.8804597084064554, -9.4382789084064562, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.845218908406455, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.845218908406455, -9.845218908406455, -9.845218908406455, -9.845218908406455, -9.845218908406455, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.845218908406455, -9.845218908406455, -9.845218908406455, -8.7573870384064545, -9.845218908406455, -9.845218908406455, -9.0013139084064555, -9.0013139084064555, -9.0013139084064555, -9.845218908406455, -9.845218908406455, -9.845218908406455, -9.0013139084064555, -9.0013139084064555, -9.4382789084064562]
								}]
						}]
				}, {
					"line":	347,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [369, 370, 371, 372, 373, 374, 375, 376, 377], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], [], [], [], [], [], []],
							"begin_line":	348,
							"begin_column":	3,
							"end_line":	348,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header, 0, sizeof (*(header)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return -1;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 1;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 200;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 299;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 302;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 323;\n", "if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	2,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	3,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	4,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	5,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	6,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	7,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	8,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	9,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	10,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	11,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	12,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	13,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	14,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	15,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	16,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	17,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	18,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	19,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	20,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	21,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	22,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	23,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	24,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	25,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	26,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	27,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	28,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	29,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	30,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	31,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	32,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	33,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	34,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	35,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	36,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	37,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	38,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	39,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	40,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	41,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	42,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	43,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	44,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	45,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	46,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	47,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	48,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	49,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	50,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	51,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	52,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	53,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	54,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	55,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	56,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	57,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	58,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	59,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	60,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	61,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	62,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	63,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	64,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	65,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	66,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	67,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	68,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	69,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	70,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	71,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	72,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	73,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	74,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	75,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	76,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	77,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	78,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	79,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	80,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	81,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	82,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	83,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	84,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	85,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	86,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	87,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	88,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	89,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	90,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	91,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	92,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	93,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	94,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	95,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	96,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	97,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	98,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	99,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	100,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	101,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	102,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	103,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	104,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	105,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	106,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	107,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	108,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	109,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	110,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	111,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	112,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	113,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	114,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	115,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	116,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	117,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	118,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	119,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	120,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	121,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	122,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	123,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	124,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	125,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	126,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	127,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	128,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	129,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	130,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	131,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	132,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	133,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	134,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	135,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	136,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	137,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	138,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	139,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	140,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	141,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	142,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	143,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	144,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	145,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	146,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	147,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	148,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	149,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	150,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	151,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	152,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	153,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	154,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	155,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	156,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	157,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	158,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	159,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	160,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	161,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	162,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	163,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	164,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	165,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	166,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	167,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	168,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	169,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	170,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	171,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	172,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	173,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	174,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	175,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	176,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	177,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	178,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	179,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	180,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	181,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	182,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	183,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	184,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	185,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	186,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	187,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	188,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	189,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	190,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	191,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	192,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	193,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	194,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	195,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	196,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	197,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	198,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	199,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	200,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	201,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	202,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	203,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	204,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	205,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	206,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	207,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	208,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	209,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	210,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	211,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	212,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	213,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	214,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	215,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	216,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	217,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	218,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	219,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	220,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	221,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	222,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	223,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	224,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	225,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	226,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	227,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	228,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	229,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	230,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	231,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	232,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	233,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	234,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	235,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	236,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	237,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	238,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	239,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	240,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	241,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	242,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	243,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	244,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	245,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	246,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	247,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	248,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	249,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	250,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	251,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	252,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	253,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	254,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	255,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	256,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	257,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	258,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	259,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	260,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	261,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	262,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	263,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	264,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	265,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	266,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	267,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	268,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	269,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	270,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	271,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	272,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	273,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	274,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	275,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	276,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	277,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	278,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	279,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	280,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	281,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	282,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	283,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	284,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	285,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	286,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	287,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	288,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	289,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	290,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	291,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	292,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	293,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	294,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	295,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	296,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	297,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	298,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	299,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	300,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	301,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	302,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	303,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	304,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	305,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	306,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	307,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	308,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	309,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	310,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	311,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	312,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	313,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	314,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	315,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	316,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	317,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	318,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	319,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	320,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	321,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	322,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	323,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	324,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	325,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	326,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	327,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	328,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	329,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	330,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	331,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	332,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	333,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	334,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	335,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	336,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	337,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	338,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	339,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	340,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	341,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	342,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	343,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	344,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	345,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	346,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	347,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	348,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	349,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	350,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	351,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	352,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	353,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	354,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	355,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	356,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	357,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	358,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	359,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	360,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	361,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	362,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	363,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	364,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	365,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	366,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	367,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	368,
									"scores":	[-7.3666859567239751]
								}, {
									"case":	369,
									"scores":	[-11.755593030723976, -11.257962216423977, -11.557627222723976, -12.126469630723975, -11.360079980723976, -10.484535827723974, -10.902322631423976, -12.356182050723977, -12.183220286723976, -11.446558235723977, -12.316256346723975, -11.886185746723974, -12.063448586723975, -11.977053346723975, -11.977053346723975, -11.977053346723975, -11.977053346723975, -11.977053346723975, -11.977053346723975, -11.977053346723975, -11.977053346723975]
								}, {
									"case":	370,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}, {
									"case":	371,
									"scores":	[-11.855501230723975, -11.357870416423976, -11.657535422723974, -12.226377830723976, -11.459988180723975, -10.584444027723976, -11.002230831423976, -12.456090250723976, -12.283128486723975, -11.546466435723975, -12.416164546723977, -11.986093946723976, -12.163356786723975, -12.076961546723975, -12.076961546723975, -12.076961546723975, -12.076961546723975, -12.076961546723975, -12.076961546723975, -12.076961546723975, -12.076961546723975]
								}, {
									"case":	372,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}, {
									"case":	373,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}, {
									"case":	374,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}, {
									"case":	375,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}, {
									"case":	376,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}, {
									"case":	377,
									"scores":	[-14.118283030723976, -13.620652216423977, -13.920317222723975, -14.489159630723975, -13.722769980723976, -12.847225827723975, -13.265012631423977, -14.718872050723977, -14.545910286723975, -13.809248235723976, -14.678946346723976, -14.248875746723975, -14.426138586723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976, -14.339743346723976]
								}]
						}, {
							"switch":	46,
							"types":	[[12], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], []],
							"begin_line":	348,
							"begin_column":	5,
							"end_line":	353,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print))) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if ((0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) || __is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print))) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == BIO_snprintf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == VALGRIND_PRINTF(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == VALGRIND_PRINTF_BACKTRACE(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == array_strcasecmp(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == g_relation_exists(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == g_snprintf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == log_trace(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == printf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if (0 == snprintf(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n", "if ((0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) && !__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print))) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6508018320281463, -4.8386553057281469, -3.9956328860281474, -5.7081386670281464, -6.1860266240281465, -5.807155801028145, -4.7839016890281467, -5.9219246690281455, -5.8863120170281453, -4.7417178860281464, -6.0127097860281449, -5.6928708860281452, -5.9576523860281441, -5.0785065860281451, -5.0785065860281451, -5.0785065860281451, -5.0785065860281451, -5.0785065860281451, -5.0785065860281451, -5.0785065860281451, -5.0785065860281451]
								}, {
									"case":	2,
									"scores":	[-5.1511707954281452, -4.3390242691281466, -3.4960018494281466, -5.2085076304281461, -5.6863955874281462, -5.3075247644281465, -4.2842706524281464, -5.4222936324281452, -5.3866809804281459, -4.2420868494281461, -5.5130787494281464, -5.1932398494281458, -5.4580213494281455, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-5.1511707954281452, -4.3390242691281466, -3.4960018494281466, -5.2085076304281461, -5.6863955874281462, -5.3075247644281465, -4.2842706524281464, -5.4222936324281452, -5.3866809804281459, -4.2420868494281461, -5.5130787494281464, -5.1932398494281458, -5.4580213494281455, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466, -4.5788755494281466]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	348,
							"begin_column":	5,
							"end_line":	353,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n        if (con->http_status == 0)\n            con->http_status = 302;\n    } else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n        have_content_length = 1;\n    }\n", "if (!__is_neg(\"\", \"L348\", 21, &(header), sizeof (header), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(header->key), sizeof (header->key), &(con), sizeof (con), &(j), sizeof (j), &(have_content_length), sizeof (have_content_length), &(ds), sizeof (ds), &(p), sizeof (p), &(i), sizeof (i), &(header->value), sizeof (header->value), &(sess), sizeof (sess), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)) && (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0))) {\n    if (con->http_status == 0)\n        con->http_status = 302;\n} else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n    have_content_length = 1;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.471384972723975, -9.6592384464239753, -8.8162160267239749, -10.528721807723976, -10.138278764723974, -10.627738941723974, -9.6044848297239742, -10.813400482723974, -10.706895157723974, -9.5623010267239756, -10.833292926723974, -10.513454026723975, -10.778235526723975, -9.8990897267239752, -9.8990897267239752, -9.8990897267239752, -9.8990897267239752, -9.8990897267239752, -9.8990897267239752, -9.8990897267239752, -9.8990897267239752]
								}, {
									"case":	2,
									"scores":	[-9.933344426723977, -9.121197900423974, -8.2781754807239754, -9.9906812617239744, -10.468569218723975, -10.089698395723975, -9.0664442837239747, -10.204467263723975, -10.168854611723976, -9.0242604807239744, -10.295252380723976, -9.9754134807239758, -10.240194980723976, -9.3610491807239757, -9.3610491807239757, -9.3610491807239757, -9.3610491807239757, -9.3610491807239757, -9.3610491807239757, -9.3610491807239757, -9.3610491807239757]
								}]
						}]
				}, {
					"line":	355,
					"switches":	[{
							"switch":	55,
							"types":	[[], [], [], [], [368, 369, 370, 371, 372, 373, 374, 375, 376], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343], [], [], [], [], [], []],
							"begin_line":	356,
							"begin_column":	4,
							"end_line":	356,
							"end_column":	4,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds, 0, sizeof (*(ds)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    break;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	2,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	3,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	4,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	5,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	6,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	7,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	8,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	9,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	10,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	11,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	12,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	13,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	14,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	15,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	16,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	17,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	18,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	19,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	20,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	21,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	22,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	23,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	24,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	25,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	26,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	27,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	28,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	29,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	30,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	31,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	32,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	33,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	34,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	35,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	36,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	37,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	38,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	39,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	40,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	41,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	42,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	43,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	44,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	45,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	46,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	47,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	48,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	49,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	50,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	51,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	52,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	53,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	54,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	55,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	56,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	57,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	58,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	59,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	60,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	61,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	62,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	63,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	64,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	65,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	66,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	67,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	68,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	69,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	70,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	71,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	72,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	73,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	74,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	75,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	76,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	77,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	78,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	79,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	80,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	81,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	82,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	83,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	84,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	85,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	86,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	87,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	88,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	89,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	90,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	91,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	92,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	93,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	94,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	95,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	96,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	97,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	98,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	99,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	100,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	101,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	102,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	103,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	104,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	105,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	106,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	107,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	108,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	109,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	110,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	111,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	112,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	113,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	114,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	115,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	116,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	117,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	118,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	119,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	120,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	121,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	122,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	123,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	124,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	125,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	126,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	127,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	128,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	129,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	130,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	131,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	132,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	133,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	134,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	135,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	136,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	137,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	138,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	139,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	140,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	141,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	142,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	143,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	144,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	145,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	146,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	147,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	148,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	149,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	150,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	151,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	152,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	153,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	154,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	155,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	156,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	157,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	158,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	159,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	160,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	161,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	162,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	163,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	164,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	165,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	166,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	167,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	168,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	169,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	170,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	171,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	172,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	173,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	174,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	175,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	176,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	177,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	178,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	179,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	180,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	181,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	182,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	183,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	184,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	185,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	186,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	187,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	188,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	189,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	190,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	191,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	192,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	193,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	194,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	195,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	196,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	197,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	198,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	199,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	200,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	201,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	202,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	203,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	204,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	205,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	206,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	207,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	208,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	209,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	210,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	211,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	212,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	213,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	214,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	215,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	216,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	217,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	218,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	219,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	220,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	221,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	222,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	223,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	224,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	225,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	226,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	227,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	228,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	229,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	230,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	231,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	232,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	233,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	234,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	235,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	236,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	237,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	238,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	239,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	240,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	241,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	242,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	243,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	244,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	245,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	246,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	247,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	248,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	249,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	250,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	251,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	252,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	253,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	254,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	255,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	256,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	257,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	258,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	259,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	260,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	261,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	262,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	263,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	264,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	265,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	266,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	267,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	268,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	269,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	270,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	271,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	272,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	273,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	274,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	275,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	276,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	277,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	278,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	279,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	280,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	281,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	282,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	283,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	284,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	285,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	286,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	287,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	288,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	289,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	290,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	291,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	292,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	293,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	294,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	295,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	296,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	297,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	298,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	299,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	300,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	301,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	302,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	303,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	304,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	305,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	306,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	307,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	308,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	309,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	310,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	311,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	312,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	313,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	314,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	315,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	316,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	317,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	318,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	319,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	320,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	321,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	322,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	323,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	324,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	325,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	326,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	327,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	328,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	329,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	330,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	331,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	332,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	333,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	334,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	335,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	336,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	337,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	338,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	339,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	340,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	341,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	342,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	343,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	344,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	345,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	346,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	347,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	348,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	349,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	350,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	351,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	352,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	353,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	354,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	355,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	356,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	357,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	358,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	359,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	360,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	361,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	362,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	363,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	364,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	365,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	366,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	367,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	368,
									"scores":	[-8.3778514519714165, -9.3252695647714159, -9.4295063247714168, -8.6561227247714161, -9.4295063247714168, -9.4295063247714168, -8.0093797247714171, -9.238874324771416, -9.238874324771416, -8.4654907247714171, -9.1480067247714167, -9.238874324771416, -8.833385564771417, -8.4654907247714171, -9.3252695647714159, -9.3282970247714161, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -8.7827633247714161, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.4295063247714168, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.4295063247714168, -9.4295063247714168, -9.4295063247714168, -9.4295063247714168, -9.4295063247714168, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.4295063247714168, -9.4295063247714168, -9.4295063247714168, -8.7827633247714161, -9.4295063247714168, -9.4295063247714168, -9.238874324771416, -9.238874324771416, -9.238874324771416, -9.4295063247714168, -9.4295063247714168, -9.4295063247714168, -9.238874324771416, -9.238874324771416, -9.3282970247714161]
								}, {
									"case":	369,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}, {
									"case":	370,
									"scores":	[-8.4777596519714162, -9.4251777647714157, -9.5294145247714166, -8.7560309247714159, -9.5294145247714166, -9.5294145247714166, -8.1092879247714169, -9.33878252477142, -9.33878252477142, -8.5653989247714168, -9.2479149247714165, -9.33878252477142, -8.9332937647714168, -8.5653989247714168, -9.4251777647714157, -9.42820522477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -8.8826715247714159, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.5294145247714166, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.5294145247714166, -9.5294145247714166, -9.5294145247714166, -9.5294145247714166, -9.5294145247714166, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.5294145247714166, -9.5294145247714166, -9.5294145247714166, -8.8826715247714159, -9.5294145247714166, -9.5294145247714166, -9.33878252477142, -9.33878252477142, -9.33878252477142, -9.5294145247714166, -9.5294145247714166, -9.5294145247714166, -9.33878252477142, -9.33878252477142, -9.42820522477142]
								}, {
									"case":	371,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}, {
									"case":	372,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}, {
									"case":	373,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}, {
									"case":	374,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}, {
									"case":	375,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}, {
									"case":	376,
									"scores":	[-10.740541451971417, -11.687959564771417, -11.792196324771417, -11.018812724771417, -11.792196324771417, -11.792196324771417, -10.372069724771418, -11.601564324771417, -11.601564324771417, -10.828180724771418, -11.510696724771417, -11.601564324771417, -11.196075564771416, -10.828180724771418, -11.687959564771417, -11.690987024771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.145453324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.145453324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.601564324771417, -11.792196324771417, -11.792196324771417, -11.792196324771417, -11.601564324771417, -11.601564324771417, -11.690987024771417]
								}]
						}, {
							"switch":	56,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	356,
							"begin_column":	6,
							"end_line":	356,
							"end_column":	30,
							"patch_codes":	["if (!__is_neg(\"\", \"L356\", 63, &(ds), sizeof (ds), &(con), sizeof (con), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(have_content_length), sizeof (have_content_length), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(j), sizeof (j), &(sess), sizeof (sess), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    ds = data_response_init();\n", "{\n}\n", "ds = (ds)", "ds = (header)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.897403297771417, -9.6325851247714169, -9.5973443247714165, -8.8265106247714158, -9.5973443247714165, -9.5973443247714165, -7.7386787547714162, -8.7534393247714171, -8.7534393247714171, -7.9826056247714163, -9.3678036247714171, -8.7534393247714171, -9.0912921247714156, -7.9826056247714163, -9.6325851247714169, -9.190404324771416, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.509512454771416, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -9.5973443247714165, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -9.5973443247714165, -9.5973443247714165, -9.5973443247714165, -9.5973443247714165, -9.5973443247714165, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -9.5973443247714165, -9.5973443247714165, -9.5973443247714165, -8.509512454771416, -9.5973443247714165, -9.5973443247714165, -8.7534393247714171, -8.7534393247714171, -8.7534393247714171, -9.5973443247714165, -9.5973443247714165, -9.5973443247714165, -8.7534393247714171, -8.7534393247714171, -9.190404324771416]
								}, {
									"case":	2,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	3,
									"scores":	[-7.3060778347714166]
								}, {
									"case":	4,
									"scores":	[-7.3060778347714166]
								}]
						}]
				}, {
					"line":	354,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [369, 370, 371, 372, 373, 374, 375, 376, 377], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], [], [], [], [], [], []],
							"begin_line":	355,
							"begin_column":	3,
							"end_line":	355,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds, 0, sizeof (*(ds)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    break;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	2,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	3,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	4,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	5,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	6,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	7,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	8,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	9,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	10,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	11,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	12,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	13,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	14,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	15,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	16,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	17,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	18,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	19,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	20,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	21,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	22,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	23,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	24,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	25,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	26,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	27,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	28,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	29,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	30,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	31,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	32,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	33,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	34,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	35,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	36,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	37,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	38,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	39,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	40,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	41,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	42,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	43,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	44,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	45,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	46,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	47,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	48,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	49,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	50,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	51,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	52,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	53,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	54,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	55,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	56,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	57,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	58,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	59,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	60,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	61,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	62,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	63,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	64,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	65,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	66,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	67,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	68,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	69,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	70,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	71,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	72,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	73,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	74,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	75,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	76,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	77,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	78,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	79,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	80,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	81,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	82,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	83,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	84,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	85,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	86,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	87,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	88,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	89,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	90,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	91,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	92,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	93,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	94,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	95,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	96,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	97,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	98,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	99,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	100,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	101,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	102,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	103,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	104,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	105,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	106,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	107,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	108,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	109,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	110,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	111,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	112,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	113,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	114,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	115,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	116,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	117,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	118,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	119,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	120,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	121,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	122,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	123,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	124,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	125,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	126,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	127,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	128,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	129,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	130,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	131,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	132,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	133,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	134,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	135,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	136,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	137,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	138,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	139,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	140,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	141,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	142,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	143,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	144,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	145,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	146,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	147,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	148,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	149,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	150,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	151,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	152,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	153,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	154,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	155,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	156,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	157,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	158,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	159,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	160,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	161,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	162,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	163,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	164,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	165,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	166,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	167,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	168,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	169,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	170,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	171,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	172,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	173,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	174,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	175,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	176,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	177,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	178,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	179,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	180,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	181,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	182,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	183,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	184,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	185,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	186,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	187,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	188,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	189,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	190,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	191,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	192,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	193,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	194,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	195,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	196,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	197,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	198,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	199,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	200,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	201,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	202,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	203,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	204,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	205,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	206,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	207,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	208,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	209,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	210,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	211,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	212,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	213,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	214,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	215,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	216,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	217,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	218,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	219,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	220,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	221,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	222,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	223,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	224,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	225,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	226,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	227,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	228,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	229,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	230,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	231,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	232,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	233,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	234,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	235,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	236,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	237,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	238,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	239,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	240,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	241,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	242,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	243,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	244,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	245,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	246,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	247,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	248,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	249,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	250,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	251,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	252,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	253,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	254,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	255,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	256,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	257,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	258,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	259,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	260,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	261,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	262,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	263,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	264,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	265,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	266,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	267,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	268,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	269,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	270,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	271,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	272,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	273,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	274,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	275,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	276,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	277,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	278,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	279,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	280,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	281,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	282,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	283,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	284,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	285,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	286,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	287,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	288,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	289,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	290,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	291,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	292,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	293,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	294,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	295,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	296,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	297,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	298,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	299,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	300,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	301,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	302,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	303,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	304,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	305,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	306,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	307,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	308,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	309,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	310,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	311,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	312,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	313,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	314,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	315,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	316,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	317,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	318,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	319,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	320,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	321,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	322,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	323,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	324,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	325,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	326,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	327,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	328,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	329,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	330,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	331,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	332,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	333,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	334,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	335,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	336,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	337,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	338,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	339,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	340,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	341,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	342,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	343,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	344,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	345,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	346,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	347,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	348,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	349,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	350,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	351,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	352,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	353,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	354,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	355,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	356,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	357,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	358,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	359,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	360,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	361,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	362,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	363,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	364,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	365,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	366,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	367,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	368,
									"scores":	[-7.3262805420889361]
								}, {
									"case":	369,
									"scores":	[-10.981424066088938, -11.743390343288937, -10.262872542088937, -9.1683751320889364, -12.787996116088937, -12.275850932088936, -12.275850932088936, -10.398467010288936, -10.444130413088935, -11.936647932088936, -11.845780332088935, -11.531159172088937, -11.163264332088936, -11.936647932088936, -12.023043172088936, -12.026070632088937, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.480536932088937, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -12.127279932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -12.127279932088936, -12.127279932088936, -12.127279932088936, -12.127279932088936, -12.127279932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -12.127279932088936, -12.127279932088936, -12.127279932088936, -11.480536932088937, -12.127279932088936, -12.127279932088936, -11.936647932088936, -11.936647932088936, -11.936647932088936, -12.127279932088936, -12.127279932088936, -12.127279932088936, -11.936647932088936, -11.936647932088936, -12.026070632088937]
								}, {
									"case":	370,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}, {
									"case":	371,
									"scores":	[-11.081332266088936, -11.843298543288935, -10.362780742088937, -9.2682833320889362, -12.887904316088935, -12.375759132088938, -12.375759132088938, -10.498375210288938, -10.544038613088937, -12.036556132088936, -11.945688532088937, -11.631067372088935, -11.263172532088937, -12.036556132088936, -12.122951372088936, -12.125978832088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -11.580445132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.227188132088937, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.227188132088937, -12.227188132088937, -12.227188132088937, -12.227188132088937, -12.227188132088937, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.227188132088937, -12.227188132088937, -12.227188132088937, -11.580445132088936, -12.227188132088937, -12.227188132088937, -12.036556132088936, -12.036556132088936, -12.036556132088936, -12.227188132088937, -12.227188132088937, -12.227188132088937, -12.036556132088936, -12.036556132088936, -12.125978832088936]
								}, {
									"case":	372,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}, {
									"case":	373,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}, {
									"case":	374,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}, {
									"case":	375,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}, {
									"case":	376,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}, {
									"case":	377,
									"scores":	[-13.344114066088936, -14.106080343288935, -12.625562542088936, -11.531065132088937, -15.150686116088936, -14.638540932088937, -14.638540932088937, -12.761157010288937, -12.806820413088936, -14.299337932088937, -14.208470332088936, -13.893849172088936, -13.525954332088936, -14.299337932088937, -14.385733172088937, -14.388760632088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -13.843226932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -13.843226932088937, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.299337932088937, -14.489969932088936, -14.489969932088936, -14.489969932088936, -14.299337932088937, -14.299337932088937, -14.388760632088937]
								}]
						}, {
							"switch":	54,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	355,
							"begin_column":	5,
							"end_line":	357,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket))) {\n    ds = data_response_init();\n}\n", "if ((((void *)0) == (ds = (data_string *)array_get_unused_element(con->response.headers, TYPE_STRING))) || __is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket))) {\n    ds = data_response_init();\n}\n", "if ((((void *)0) == (ds = (data_string *)array_get_unused_element(con->response.headers, TYPE_STRING))) && !__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket))) {\n    ds = data_response_init();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5860903934281447, -5.0495236624281468, -4.7553751974281457, -4.3449412014281457, -5.5113488704281464, -5.2085132244281462, -5.8732568244281458, -5.3608292474281463, -5.6677028394281468, -4.939053624428146, -5.5534179244281461, -5.2769064244281463, -4.1682199244281453, -4.939053624428146, -5.8181994244281459, -5.3760186244281449, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.695126754428145, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -5.7829586244281455, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -5.7829586244281455, -5.7829586244281455, -5.7829586244281455, -5.7829586244281455, -5.7829586244281455, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -4.939053624428146, -5.7829586244281455, -5.7829586244281455, -5.7829586244281455, -4.695126754428145, -5.7829586244281455, -5.7829586244281455, -4.939053624428146, -4.939053624428146, -4.939053624428146, -5.7829586244281455, -5.7829586244281455, -5.7829586244281455, -4.939053624428146, -4.939053624428146, -5.3760186244281449]
								}, {
									"case":	2,
									"scores":	[-8.5692520474281455, -8.0326853164281449, -7.7385368514281447, -7.3281028554281464, -8.4945105244281471, -8.1916748784281452, -8.8564184784281448, -8.3439909014281461, -8.6508644934281449, -7.9222152784281459, -8.5365795784281442, -8.2600680784281444, -7.1513815784281451, -7.9222152784281459, -8.801361078428144, -8.3591802784281448, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.6782884084281458, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -7.6782884084281458, -8.7661202784281453, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -8.3591802784281448]
								}, {
									"case":	3,
									"scores":	[-8.5692520474281455, -8.0326853164281449, -7.7385368514281447, -7.3281028554281464, -8.4945105244281471, -8.1916748784281452, -8.8564184784281448, -8.3439909014281461, -8.6508644934281449, -7.9222152784281459, -8.5365795784281442, -8.2600680784281444, -7.1513815784281451, -7.9222152784281459, -8.801361078428144, -8.3591802784281448, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.6782884084281458, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -7.6782884084281458, -8.7661202784281453, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -7.9222152784281459, -8.7661202784281453, -8.7661202784281453, -8.7661202784281453, -7.9222152784281459, -7.9222152784281459, -8.3591802784281448]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	355,
							"begin_column":	5,
							"end_line":	357,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    if (((void *)0) == (ds = (data_string *)array_get_unused_element(con->response.headers, TYPE_STRING))) {\n        ds = data_response_init();\n    }\n", "if (!__is_neg(\"\", \"L355\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(have_content_length), sizeof (have_content_length), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(ds->value), sizeof (ds->value), &(con->http_status), sizeof (con->http_status), &(j), sizeof (j), &(con->file_started), sizeof (con->file_started), &(sess), sizeof (sess), &(p), sizeof (p), &(i), sizeof (i), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)) && (((void *)0) == (ds = (data_string *)array_get_unused_element(con->response.headers, TYPE_STRING)))) {\n    ds = data_response_init();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.422009101088936, -9.8854423700889367, -9.5912939050889356, -9.1808599090889356, -10.347267578088935, -10.044431932088935, -10.709175532088935, -10.196747955088936, -10.503621547088937, -9.7749723320889359, -10.389336632088936, -10.112825132088936, -9.0041386320889352, -9.7749723320889359, -10.654118132088936, -10.211937332088937, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.5310454620889367, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -10.618877332088935, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -10.618877332088935, -10.618877332088935, -10.618877332088935, -10.618877332088935, -10.618877332088935, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -10.618877332088935, -10.618877332088935, -10.618877332088935, -9.5310454620889367, -10.618877332088935, -10.618877332088935, -9.7749723320889359, -9.7749723320889359, -9.7749723320889359, -10.618877332088935, -10.618877332088935, -10.618877332088935, -9.7749723320889359, -9.7749723320889359, -10.211937332088937]
								}, {
									"case":	2,
									"scores":	[-13.035087284088934, -12.498520553088936, -12.204372088088935, -11.793938092088936, -12.960345761088934, -12.657510115088936, -13.322253715088936, -12.809826138088935, -13.116699730088936, -12.388050515088937, -13.002414815088935, -12.725903315088935, -11.617216815088936, -12.388050515088937, -13.267196315088935, -12.825015515088936, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.144123645088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -13.231955515088936, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -13.231955515088936, -13.231955515088936, -13.231955515088936, -13.231955515088936, -13.231955515088936, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -12.388050515088937, -13.231955515088936, -13.231955515088936, -13.231955515088936, -12.144123645088937, -13.231955515088936, -13.231955515088936, -12.388050515088937, -12.388050515088937, -12.388050515088937, -13.231955515088936, -13.231955515088936, -13.231955515088936, -12.388050515088937, -12.388050515088937, -12.825015515088936]
								}]
						}]
				}, {
					"line":	357,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [369, 370, 371, 372, 373, 374, 375, 376, 377], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], [], [], [], [], [], []],
							"begin_line":	358,
							"begin_column":	3,
							"end_line":	358,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds, 0, sizeof (*(ds)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header, 0, sizeof (*(header)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return -1;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 1;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 200;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 299;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 302;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 323;\n", "if (__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	2,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	3,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	4,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	5,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	6,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	7,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	8,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	9,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	10,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	11,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	12,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	13,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	14,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	15,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	16,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	17,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	18,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	19,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	20,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	21,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	22,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	23,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	24,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	25,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	26,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	27,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	28,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	29,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	30,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	31,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	32,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	33,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	34,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	35,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	36,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	37,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	38,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	39,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	40,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	41,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	42,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	43,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	44,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	45,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	46,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	47,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	48,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	49,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	50,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	51,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	52,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	53,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	54,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	55,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	56,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	57,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	58,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	59,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	60,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	61,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	62,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	63,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	64,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	65,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	66,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	67,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	68,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	69,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	70,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	71,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	72,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	73,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	74,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	75,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	76,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	77,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	78,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	79,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	80,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	81,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	82,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	83,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	84,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	85,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	86,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	87,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	88,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	89,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	90,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	91,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	92,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	93,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	94,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	95,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	96,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	97,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	98,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	99,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	100,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	101,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	102,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	103,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	104,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	105,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	106,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	107,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	108,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	109,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	110,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	111,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	112,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	113,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	114,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	115,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	116,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	117,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	118,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	119,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	120,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	121,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	122,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	123,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	124,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	125,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	126,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	127,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	128,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	129,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	130,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	131,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	132,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	133,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	134,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	135,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	136,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	137,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	138,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	139,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	140,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	141,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	142,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	143,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	144,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	145,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	146,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	147,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	148,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	149,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	150,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	151,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	152,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	153,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	154,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	155,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	156,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	157,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	158,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	159,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	160,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	161,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	162,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	163,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	164,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	165,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	166,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	167,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	168,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	169,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	170,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	171,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	172,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	173,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	174,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	175,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	176,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	177,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	178,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	179,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	180,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	181,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	182,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	183,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	184,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	185,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	186,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	187,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	188,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	189,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	190,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	191,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	192,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	193,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	194,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	195,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	196,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	197,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	198,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	199,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	200,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	201,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	202,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	203,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	204,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	205,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	206,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	207,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	208,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	209,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	210,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	211,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	212,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	213,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	214,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	215,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	216,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	217,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	218,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	219,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	220,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	221,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	222,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	223,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	224,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	225,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	226,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	227,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	228,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	229,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	230,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	231,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	232,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	233,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	234,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	235,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	236,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	237,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	238,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	239,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	240,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	241,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	242,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	243,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	244,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	245,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	246,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	247,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	248,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	249,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	250,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	251,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	252,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	253,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	254,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	255,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	256,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	257,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	258,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	259,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	260,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	261,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	262,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	263,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	264,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	265,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	266,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	267,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	268,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	269,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	270,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	271,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	272,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	273,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	274,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	275,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	276,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	277,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	278,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	279,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	280,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	281,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	282,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	283,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	284,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	285,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	286,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	287,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	288,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	289,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	290,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	291,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	292,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	293,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	294,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	295,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	296,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	297,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	298,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	299,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	300,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	301,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	302,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	303,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	304,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	305,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	306,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	307,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	308,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	309,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	310,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	311,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	312,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	313,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	314,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	315,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	316,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	317,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	318,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	319,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	320,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	321,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	322,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	323,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	324,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	325,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	326,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	327,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	328,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	329,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	330,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	331,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	332,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	333,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	334,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	335,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	336,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	337,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	338,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	339,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	340,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	341,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	342,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	343,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	344,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	345,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	346,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	347,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	348,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	349,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	350,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	351,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	352,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	353,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	354,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	355,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	356,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	357,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	358,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	359,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	360,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	361,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	362,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	363,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	364,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	365,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	366,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	367,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	368,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	369,
									"scores":	[-6.9601018214538968, -10.001321321453897, -9.4143368374538969, -10.1806713374539, -10.561984637453897, -10.561984637453897, -11.360375661453897, -7.454508837453897, -10.5027673071539, -10.627090637453897, -10.131914037453896, -9.6922865264538967, -9.8172928774538963, -9.4493980374538964, -10.309176877453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897, -10.222781637453897]
								}, {
									"case":	370,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}, {
									"case":	371,
									"scores":	[-7.0600100214538974, -10.101229521453897, -9.5142450374538967, -10.280579537453896, -10.6618928374539, -10.6618928374539, -11.460283861453895, -7.5544170374538968, -10.602675507153897, -10.7269988374539, -10.2318222374539, -9.7921947264538964, -9.9172010774538961, -9.5493062374539, -10.409085077453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897, -10.322689837453897]
								}, {
									"case":	372,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}, {
									"case":	373,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}, {
									"case":	374,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}, {
									"case":	375,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}, {
									"case":	376,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}, {
									"case":	377,
									"scores":	[-9.3227918214539, -12.3640113214539, -11.7770268374539, -12.543361337453897, -12.924674637453897, -12.924674637453897, -13.723065661453896, -9.8171988374539, -12.8654573071539, -12.989780637453897, -12.494604037453897, -12.054976526453897, -12.179982877453897, -11.812088037453897, -12.6718668774539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539, -12.5854716374539]
								}]
						}, {
							"switch":	59,
							"types":	[[], [], [1], [], [], [], [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], [], [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], [], [], [92]],
							"begin_line":	358,
							"begin_column":	5,
							"end_line":	358,
							"end_column":	51,
							"patch_codes":	["if (!__is_neg(\"\", \"L358\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(sess), sizeof (sess), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    buffer_copy_string_buffer(ds->key, header->key);\n", "buffer_append_memory(ds->key, header->key, -1)", "buffer_append_memory(ds->key, header->key, 0)", "buffer_append_memory(ds->key, header->key, 1)", "buffer_append_memory(ds->key, header->key, 200)", "buffer_append_memory(ds->key, header->key, 299)", "buffer_append_memory(ds->key, header->key, 302)", "buffer_append_memory(ds->key, header->key, 323)", "buffer_append_memory(ds->key, header->key, 502)", "buffer_append_memory(ds->key, header->key, i)", "buffer_append_memory(ds->key, header->key, j)", "buffer_append_string_len(ds->key, header->key, -1)", "buffer_append_string_len(ds->key, header->key, 0)", "buffer_append_string_len(ds->key, header->key, 1)", "buffer_append_string_len(ds->key, header->key, 200)", "buffer_append_string_len(ds->key, header->key, 299)", "buffer_append_string_len(ds->key, header->key, 302)", "buffer_append_string_len(ds->key, header->key, 323)", "buffer_append_string_len(ds->key, header->key, 502)", "buffer_append_string_len(ds->key, header->key, i)", "buffer_append_string_len(ds->key, header->key, j)", "buffer_append_string_rfill(ds->key, header->key, -1)", "buffer_append_string_rfill(ds->key, header->key, 0)", "buffer_append_string_rfill(ds->key, header->key, 1)", "buffer_append_string_rfill(ds->key, header->key, 200)", "buffer_append_string_rfill(ds->key, header->key, 299)", "buffer_append_string_rfill(ds->key, header->key, 302)", "buffer_append_string_rfill(ds->key, header->key, 323)", "buffer_append_string_rfill(ds->key, header->key, 502)", "buffer_append_string_rfill(ds->key, header->key, i)", "buffer_append_string_rfill(ds->key, header->key, j)", "buffer_copy_memory(ds->key, header->key, -1)", "buffer_copy_memory(ds->key, header->key, 0)", "buffer_copy_memory(ds->key, header->key, 1)", "buffer_copy_memory(ds->key, header->key, 200)", "buffer_copy_memory(ds->key, header->key, 299)", "buffer_copy_memory(ds->key, header->key, 302)", "buffer_copy_memory(ds->key, header->key, 323)", "buffer_copy_memory(ds->key, header->key, 502)", "buffer_copy_memory(ds->key, header->key, i)", "buffer_copy_memory(ds->key, header->key, j)", "buffer_copy_string_hex(ds->key, header->key, -1)", "buffer_copy_string_hex(ds->key, header->key, 0)", "buffer_copy_string_hex(ds->key, header->key, 1)", "buffer_copy_string_hex(ds->key, header->key, 200)", "buffer_copy_string_hex(ds->key, header->key, 299)", "buffer_copy_string_hex(ds->key, header->key, 302)", "buffer_copy_string_hex(ds->key, header->key, 323)", "buffer_copy_string_hex(ds->key, header->key, 502)", "buffer_copy_string_hex(ds->key, header->key, i)", "buffer_copy_string_hex(ds->key, header->key, j)", "buffer_copy_string_len(ds->key, header->key, -1)", "buffer_copy_string_len(ds->key, header->key, 0)", "buffer_copy_string_len(ds->key, header->key, 1)", "buffer_copy_string_len(ds->key, header->key, 200)", "buffer_copy_string_len(ds->key, header->key, 299)", "buffer_copy_string_len(ds->key, header->key, 302)", "buffer_copy_string_len(ds->key, header->key, 323)", "buffer_copy_string_len(ds->key, header->key, 502)", "buffer_copy_string_len(ds->key, header->key, i)", "buffer_copy_string_len(ds->key, header->key, j)", "buffer_is_equal_right_len(ds->key, header->key, -1)", "buffer_is_equal_right_len(ds->key, header->key, 0)", "buffer_is_equal_right_len(ds->key, header->key, 1)", "buffer_is_equal_right_len(ds->key, header->key, 200)", "buffer_is_equal_right_len(ds->key, header->key, 299)", "buffer_is_equal_right_len(ds->key, header->key, 302)", "buffer_is_equal_right_len(ds->key, header->key, 323)", "buffer_is_equal_right_len(ds->key, header->key, 502)", "buffer_is_equal_right_len(ds->key, header->key, i)", "buffer_is_equal_right_len(ds->key, header->key, j)", "buffer_is_equal_string(ds->key, header->key, -1)", "buffer_is_equal_string(ds->key, header->key, 0)", "buffer_is_equal_string(ds->key, header->key, 1)", "buffer_is_equal_string(ds->key, header->key, 200)", "buffer_is_equal_string(ds->key, header->key, 299)", "buffer_is_equal_string(ds->key, header->key, 302)", "buffer_is_equal_string(ds->key, header->key, 323)", "buffer_is_equal_string(ds->key, header->key, 502)", "buffer_is_equal_string(ds->key, header->key, i)", "buffer_is_equal_string(ds->key, header->key, j)", "buffer_search_string_len(ds->key, header->key, -1)", "buffer_search_string_len(ds->key, header->key, 0)", "buffer_search_string_len(ds->key, header->key, 1)", "buffer_search_string_len(ds->key, header->key, 200)", "buffer_search_string_len(ds->key, header->key, 299)", "buffer_search_string_len(ds->key, header->key, 302)", "buffer_search_string_len(ds->key, header->key, 323)", "buffer_search_string_len(ds->key, header->key, 502)", "buffer_search_string_len(ds->key, header->key, i)", "buffer_search_string_len(ds->key, header->key, j)", "{\n}\n", "VALGRIND_PRINTF(ds->key, header->key)", "VALGRIND_PRINTF_BACKTRACE(ds->key, header->key)", "__builtin_va_start(ds->key, header->key)", "buffer_append_string(ds->key, header->key)", "buffer_append_string_buffer(ds->key, header->key)", "buffer_copy_string(ds->key, header->key)", "buffer_is_equal(ds->key, header->key)", "buffer_path_simplify(ds->key, header->key)", "g_build_filename(ds->key, header->key)", "g_markup_printf_escaped(ds->key, header->key)", "g_print(ds->key, header->key)", "g_printerr(ds->key, header->key)", "g_relation_exists(ds->key, header->key)", "g_relation_insert(ds->key, header->key)", "g_strconcat(ds->key, header->key)", "g_strdup_printf(ds->key, header->key)", "g_strjoin(ds->key, header->key)", "g_test_message(ds->key, header->key)", "g_variant_new(ds->key, header->key)", "g_variant_new_parsed(ds->key, header->key)", "g_variant_new_printf(ds->key, header->key)", "log_trace(ds->key, header->key)", "printf(ds->key, header->key)", "buffer_copy_string_buffer((&con)->key, header->key)", "buffer_copy_string_buffer((&ds)->key, header->key)", "buffer_copy_string_buffer((&have_content_length)->key, header->key)", "buffer_copy_string_buffer((&header)->key, header->key)", "buffer_copy_string_buffer((&i)->key, header->key)", "buffer_copy_string_buffer((&ign)->key, header->key)", "buffer_copy_string_buffer((&j)->key, header->key)", "buffer_copy_string_buffer((&p)->key, header->key)", "buffer_copy_string_buffer((&sess)->key, header->key)", "buffer_copy_string_buffer((&srv)->key, header->key)", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer(ds->key, (&con)->key)", "buffer_copy_string_buffer(ds->key, (&ds)->key)", "buffer_copy_string_buffer(ds->key, (&have_content_length)->key)", "buffer_copy_string_buffer(ds->key, (&header)->key)", "buffer_copy_string_buffer(ds->key, (&i)->key)", "buffer_copy_string_buffer(ds->key, (&ign)->key)", "buffer_copy_string_buffer(ds->key, (&j)->key)", "buffer_copy_string_buffer(ds->key, (&p)->key)", "buffer_copy_string_buffer(ds->key, (&sess)->key)", "buffer_copy_string_buffer(ds->key, (&srv)->key)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.3484329294539, -9.5945096634539, -9.2013758174538971, -9.734093698453897, -9.2916740174538965, -9.2916740174538965, -11.022443463453897, -8.4281019944538969, -9.4471067371538968, -9.3916423674539, -9.6365787174538973, -8.6854257174539, -9.3600672174539, -8.2513807174538965, -9.9013602174538971, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972, -9.0222144174538972]
								}, {
									"case":	2,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	3,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	4,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	5,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	6,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	7,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	8,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	9,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	10,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	11,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	12,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	13,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	14,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	15,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	16,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	17,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	18,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	19,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	20,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	21,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	22,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	23,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	24,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	25,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	26,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	27,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	28,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	29,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	30,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	31,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	32,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	33,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	34,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	35,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	36,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	37,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	38,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	39,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	40,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	41,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	42,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	43,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	44,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	45,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	46,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	47,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	48,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	49,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	50,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	51,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	52,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	53,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	54,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	55,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	56,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	57,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	58,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	59,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	60,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	61,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	62,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	63,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	64,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	65,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	66,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	67,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	68,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	69,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	70,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	71,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	72,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	73,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	74,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	75,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	76,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	77,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	78,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	79,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	80,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	81,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	82,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	83,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	84,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	85,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	86,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	87,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	88,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	89,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	90,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	91,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	92,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	93,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	94,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	95,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	96,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	97,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	98,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	99,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	100,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	101,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	102,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	103,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	104,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	105,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	106,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	107,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	108,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	109,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	110,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	111,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	112,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	113,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	114,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	115,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	116,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	117,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	118,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	119,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	120,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	121,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	122,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	123,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	124,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	125,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	126,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	127,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	128,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	129,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	130,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	131,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	132,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	133,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	134,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	135,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	136,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	137,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	138,
									"scores":	[-7.2858751274538971]
								}, {
									"case":	139,
									"scores":	[-7.2858751274538971]
								}]
						}]
				}, {
					"line":	358,
					"switches":	[{
							"switch":	60,
							"types":	[[], [], [], [], [369, 370, 371, 372, 373, 374, 375, 376, 377], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], [], [], [], [], [], []],
							"begin_line":	359,
							"begin_column":	3,
							"end_line":	359,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds, 0, sizeof (*(ds)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header, 0, sizeof (*(header)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    break;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return -1;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 0;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 1;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 200;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 299;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 302;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 323;\n", "if (__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	2,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	3,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	4,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	5,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	6,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	7,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	8,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	9,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	10,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	11,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	12,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	13,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	14,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	15,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	16,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	17,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	18,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	19,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	20,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	21,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	22,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	23,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	24,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	25,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	26,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	27,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	28,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	29,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	30,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	31,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	32,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	33,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	34,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	35,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	36,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	37,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	38,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	39,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	40,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	41,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	42,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	43,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	44,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	45,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	46,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	47,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	48,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	49,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	50,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	51,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	52,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	53,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	54,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	55,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	56,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	57,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	58,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	59,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	60,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	61,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	62,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	63,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	64,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	65,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	66,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	67,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	68,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	69,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	70,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	71,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	72,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	73,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	74,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	75,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	76,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	77,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	78,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	79,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	80,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	81,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	82,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	83,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	84,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	85,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	86,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	87,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	88,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	89,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	90,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	91,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	92,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	93,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	94,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	95,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	96,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	97,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	98,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	99,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	100,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	101,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	102,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	103,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	104,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	105,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	106,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	107,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	108,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	109,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	110,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	111,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	112,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	113,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	114,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	115,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	116,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	117,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	118,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	119,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	120,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	121,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	122,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	123,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	124,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	125,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	126,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	127,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	128,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	129,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	130,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	131,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	132,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	133,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	134,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	135,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	136,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	137,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	138,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	139,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	140,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	141,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	142,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	143,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	144,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	145,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	146,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	147,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	148,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	149,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	150,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	151,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	152,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	153,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	154,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	155,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	156,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	157,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	158,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	159,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	160,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	161,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	162,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	163,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	164,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	165,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	166,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	167,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	168,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	169,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	170,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	171,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	172,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	173,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	174,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	175,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	176,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	177,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	178,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	179,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	180,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	181,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	182,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	183,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	184,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	185,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	186,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	187,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	188,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	189,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	190,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	191,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	192,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	193,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	194,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	195,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	196,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	197,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	198,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	199,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	200,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	201,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	202,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	203,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	204,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	205,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	206,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	207,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	208,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	209,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	210,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	211,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	212,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	213,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	214,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	215,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	216,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	217,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	218,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	219,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	220,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	221,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	222,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	223,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	224,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	225,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	226,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	227,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	228,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	229,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	230,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	231,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	232,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	233,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	234,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	235,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	236,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	237,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	238,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	239,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	240,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	241,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	242,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	243,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	244,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	245,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	246,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	247,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	248,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	249,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	250,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	251,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	252,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	253,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	254,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	255,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	256,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	257,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	258,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	259,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	260,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	261,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	262,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	263,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	264,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	265,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	266,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	267,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	268,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	269,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	270,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	271,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	272,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	273,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	274,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	275,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	276,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	277,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	278,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	279,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	280,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	281,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	282,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	283,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	284,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	285,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	286,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	287,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	288,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	289,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	290,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	291,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	292,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	293,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	294,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	295,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	296,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	297,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	298,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	299,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	300,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	301,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	302,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	303,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	304,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	305,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	306,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	307,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	308,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	309,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	310,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	311,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	312,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	313,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	314,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	315,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	316,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	317,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	318,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	319,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	320,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	321,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	322,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	323,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	324,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	325,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	326,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	327,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	328,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	329,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	330,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	331,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	332,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	333,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	334,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	335,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	336,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	337,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	338,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	339,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	340,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	341,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	342,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	343,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	344,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	345,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	346,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	347,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	348,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	349,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	350,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	351,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	352,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	353,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	354,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	355,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	356,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	357,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	358,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	359,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	360,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	361,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	362,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	363,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	364,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	365,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	366,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	367,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	368,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	369,
									"scores":	[-7.9481666141363778, -10.223051614136377, -9.6360671301363769, -9.6360671301363769, -10.825706899836378, -11.437362599836376, -11.582105954136377, -7.6762391301363779, -10.353644330136378, -10.724497599836377, -10.848820930136377, -9.6711283301363764, -10.039023170136378, -9.6711283301363764, -10.530907170136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377, -10.444511930136377]
								}, {
									"case":	370,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}, {
									"case":	371,
									"scores":	[-8.04807481413638, -10.322959814136379, -9.7359753301363767, -9.7359753301363767, -10.925615099836378, -11.537270799836378, -11.682014154136377, -7.7761473301363777, -10.453552530136378, -10.824405799836377, -10.948729130136378, -9.77103653013638, -10.138931370136376, -9.77103653013638, -10.630815370136379, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377, -10.544420130136377]
								}, {
									"case":	372,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}, {
									"case":	373,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}, {
									"case":	374,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}, {
									"case":	375,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}, {
									"case":	376,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}, {
									"case":	377,
									"scores":	[-10.310856614136378, -12.585741614136378, -11.998757130136378, -11.998757130136378, -13.188396899836377, -13.800052599836377, -13.944795954136378, -10.038929130136378, -12.716334330136377, -13.087187599836378, -13.211510930136377, -12.033818330136377, -12.401713170136377, -12.033818330136377, -12.893597170136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378, -12.807201930136378]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [], [], [], [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], [], [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], [], [], [92]],
							"begin_line":	359,
							"begin_column":	5,
							"end_line":	359,
							"end_column":	55,
							"patch_codes":	["if (!__is_neg(\"\", \"L359\", 30, &(ds), sizeof (ds), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(header->value), sizeof (header->value), &(ds->key), sizeof (ds->key), &(header->key), sizeof (header->key), &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(header->key->ptr), sizeof (header->key->ptr), &(header->key->used), sizeof (header->key->used), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(header->key->size), sizeof (header->key->size), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(header->type), sizeof (header->type), &(header->is_index_key), sizeof (header->is_index_key), &(header->copy), sizeof (header->copy), &(header->free), sizeof (header->free), &(header->reset), sizeof (header->reset), &(header->insert_dup), sizeof (header->insert_dup), &(header->print), sizeof (header->print)))\n    buffer_copy_string_buffer(ds->value, header->value);\n", "buffer_append_memory(ds->value, header->value, -1)", "buffer_append_memory(ds->value, header->value, 0)", "buffer_append_memory(ds->value, header->value, 1)", "buffer_append_memory(ds->value, header->value, 200)", "buffer_append_memory(ds->value, header->value, 299)", "buffer_append_memory(ds->value, header->value, 302)", "buffer_append_memory(ds->value, header->value, 323)", "buffer_append_memory(ds->value, header->value, 502)", "buffer_append_memory(ds->value, header->value, i)", "buffer_append_memory(ds->value, header->value, j)", "buffer_append_string_len(ds->value, header->value, -1)", "buffer_append_string_len(ds->value, header->value, 0)", "buffer_append_string_len(ds->value, header->value, 1)", "buffer_append_string_len(ds->value, header->value, 200)", "buffer_append_string_len(ds->value, header->value, 299)", "buffer_append_string_len(ds->value, header->value, 302)", "buffer_append_string_len(ds->value, header->value, 323)", "buffer_append_string_len(ds->value, header->value, 502)", "buffer_append_string_len(ds->value, header->value, i)", "buffer_append_string_len(ds->value, header->value, j)", "buffer_append_string_rfill(ds->value, header->value, -1)", "buffer_append_string_rfill(ds->value, header->value, 0)", "buffer_append_string_rfill(ds->value, header->value, 1)", "buffer_append_string_rfill(ds->value, header->value, 200)", "buffer_append_string_rfill(ds->value, header->value, 299)", "buffer_append_string_rfill(ds->value, header->value, 302)", "buffer_append_string_rfill(ds->value, header->value, 323)", "buffer_append_string_rfill(ds->value, header->value, 502)", "buffer_append_string_rfill(ds->value, header->value, i)", "buffer_append_string_rfill(ds->value, header->value, j)", "buffer_copy_memory(ds->value, header->value, -1)", "buffer_copy_memory(ds->value, header->value, 0)", "buffer_copy_memory(ds->value, header->value, 1)", "buffer_copy_memory(ds->value, header->value, 200)", "buffer_copy_memory(ds->value, header->value, 299)", "buffer_copy_memory(ds->value, header->value, 302)", "buffer_copy_memory(ds->value, header->value, 323)", "buffer_copy_memory(ds->value, header->value, 502)", "buffer_copy_memory(ds->value, header->value, i)", "buffer_copy_memory(ds->value, header->value, j)", "buffer_copy_string_hex(ds->value, header->value, -1)", "buffer_copy_string_hex(ds->value, header->value, 0)", "buffer_copy_string_hex(ds->value, header->value, 1)", "buffer_copy_string_hex(ds->value, header->value, 200)", "buffer_copy_string_hex(ds->value, header->value, 299)", "buffer_copy_string_hex(ds->value, header->value, 302)", "buffer_copy_string_hex(ds->value, header->value, 323)", "buffer_copy_string_hex(ds->value, header->value, 502)", "buffer_copy_string_hex(ds->value, header->value, i)", "buffer_copy_string_hex(ds->value, header->value, j)", "buffer_copy_string_len(ds->value, header->value, -1)", "buffer_copy_string_len(ds->value, header->value, 0)", "buffer_copy_string_len(ds->value, header->value, 1)", "buffer_copy_string_len(ds->value, header->value, 200)", "buffer_copy_string_len(ds->value, header->value, 299)", "buffer_copy_string_len(ds->value, header->value, 302)", "buffer_copy_string_len(ds->value, header->value, 323)", "buffer_copy_string_len(ds->value, header->value, 502)", "buffer_copy_string_len(ds->value, header->value, i)", "buffer_copy_string_len(ds->value, header->value, j)", "buffer_is_equal_right_len(ds->value, header->value, -1)", "buffer_is_equal_right_len(ds->value, header->value, 0)", "buffer_is_equal_right_len(ds->value, header->value, 1)", "buffer_is_equal_right_len(ds->value, header->value, 200)", "buffer_is_equal_right_len(ds->value, header->value, 299)", "buffer_is_equal_right_len(ds->value, header->value, 302)", "buffer_is_equal_right_len(ds->value, header->value, 323)", "buffer_is_equal_right_len(ds->value, header->value, 502)", "buffer_is_equal_right_len(ds->value, header->value, i)", "buffer_is_equal_right_len(ds->value, header->value, j)", "buffer_is_equal_string(ds->value, header->value, -1)", "buffer_is_equal_string(ds->value, header->value, 0)", "buffer_is_equal_string(ds->value, header->value, 1)", "buffer_is_equal_string(ds->value, header->value, 200)", "buffer_is_equal_string(ds->value, header->value, 299)", "buffer_is_equal_string(ds->value, header->value, 302)", "buffer_is_equal_string(ds->value, header->value, 323)", "buffer_is_equal_string(ds->value, header->value, 502)", "buffer_is_equal_string(ds->value, header->value, i)", "buffer_is_equal_string(ds->value, header->value, j)", "buffer_search_string_len(ds->value, header->value, -1)", "buffer_search_string_len(ds->value, header->value, 0)", "buffer_search_string_len(ds->value, header->value, 1)", "buffer_search_string_len(ds->value, header->value, 200)", "buffer_search_string_len(ds->value, header->value, 299)", "buffer_search_string_len(ds->value, header->value, 302)", "buffer_search_string_len(ds->value, header->value, 323)", "buffer_search_string_len(ds->value, header->value, 502)", "buffer_search_string_len(ds->value, header->value, i)", "buffer_search_string_len(ds->value, header->value, j)", "{\n}\n", "VALGRIND_PRINTF(ds->value, header->value)", "VALGRIND_PRINTF_BACKTRACE(ds->value, header->value)", "__builtin_va_start(ds->value, header->value)", "buffer_append_string(ds->value, header->value)", "buffer_append_string_buffer(ds->value, header->value)", "buffer_copy_string(ds->value, header->value)", "buffer_is_equal(ds->value, header->value)", "buffer_path_simplify(ds->value, header->value)", "g_build_filename(ds->value, header->value)", "g_markup_printf_escaped(ds->value, header->value)", "g_print(ds->value, header->value)", "g_printerr(ds->value, header->value)", "g_relation_exists(ds->value, header->value)", "g_relation_insert(ds->value, header->value)", "g_strconcat(ds->value, header->value)", "g_strdup_printf(ds->value, header->value)", "g_strjoin(ds->value, header->value)", "g_test_message(ds->value, header->value)", "g_variant_new(ds->value, header->value)", "g_variant_new_parsed(ds->value, header->value)", "g_variant_new_printf(ds->value, header->value)", "log_trace(ds->value, header->value)", "printf(ds->value, header->value)", "buffer_copy_string_buffer((&con)->value, header->value)", "buffer_copy_string_buffer((&ds)->value, header->value)", "buffer_copy_string_buffer((&have_content_length)->value, header->value)", "buffer_copy_string_buffer((&header)->value, header->value)", "buffer_copy_string_buffer((&i)->value, header->value)", "buffer_copy_string_buffer((&ign)->value, header->value)", "buffer_copy_string_buffer((&j)->value, header->value)", "buffer_copy_string_buffer((&p)->value, header->value)", "buffer_copy_string_buffer((&sess)->value, header->value)", "buffer_copy_string_buffer((&srv)->value, header->value)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->value, (&con)->value)", "buffer_copy_string_buffer(ds->value, (&ds)->value)", "buffer_copy_string_buffer(ds->value, (&have_content_length)->value)", "buffer_copy_string_buffer(ds->value, (&header)->value)", "buffer_copy_string_buffer(ds->value, (&i)->value)", "buffer_copy_string_buffer(ds->value, (&ign)->value)", "buffer_copy_string_buffer(ds->value, (&j)->value)", "buffer_copy_string_buffer(ds->value, (&p)->value)", "buffer_copy_string_buffer(ds->value, (&sess)->value)", "buffer_copy_string_buffer(ds->value, (&srv)->value)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.23540753813638, -8.50500989113638, -8.91567111013638, -8.91567111013638, -9.56834202983638, -10.038294660836378, -9.8994497561363772, -8.14239728713638, -9.35087401013638, -9.16140202983638, -9.10593766013638, -7.9656760101363773, -9.0743625101363765, -7.9656760101363773, -9.61565551013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638, -8.73650971013638]
								}, {
									"case":	2,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	3,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	4,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	5,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	6,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	7,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	8,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	9,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	10,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	11,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	12,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	13,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	14,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	15,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	16,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	17,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	18,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	19,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	20,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	21,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	22,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	23,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	24,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	25,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	26,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	27,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	28,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	29,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	30,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	31,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	32,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	33,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	34,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	35,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	36,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	37,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	38,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	39,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	40,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	41,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	42,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	43,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	44,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	45,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	46,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	47,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	48,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	49,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	50,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	51,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	52,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	53,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	54,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	55,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	56,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	57,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	58,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	59,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	60,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	61,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	62,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	63,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	64,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	65,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	66,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	67,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	68,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	69,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	70,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	71,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	72,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	73,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	74,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	75,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	76,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	77,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	78,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	79,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	80,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	81,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	82,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	83,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	84,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	85,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	86,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	87,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	88,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	89,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	90,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	91,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	92,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	93,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	94,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	95,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	96,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	97,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	98,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	99,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	100,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	101,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	102,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	103,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	104,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	105,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	106,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	107,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	108,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	109,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	110,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	111,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	112,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	113,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	114,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	115,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	116,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	117,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	118,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	119,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	120,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	121,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	122,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	123,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	124,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	125,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	126,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	127,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	128,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	129,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	130,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	131,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	132,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	133,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	134,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	135,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	136,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	137,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	138,
									"scores":	[-7.2656724201363776]
								}, {
									"case":	139,
									"scores":	[-7.2656724201363776]
								}]
						}]
				}, {
					"line":	360,
					"switches":	[{
							"switch":	62,
							"types":	[[], [], [], [], [369, 370, 371, 372, 373, 374, 375, 376, 377], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], [], [], [], [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], [], [], [], [], [], []],
							"begin_line":	361,
							"begin_column":	3,
							"end_line":	361,
							"end_column":	3,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->response.content_length, 0, sizeof (*(&con->response.content_length)))", "memset(&con->response.headers, 0, sizeof (*(&con->response.headers)))", "memset(&con->response.keep_alive, 0, sizeof (*(&con->response.keep_alive)))", "memset(&con->response.transfer_encoding, 0, sizeof (*(&con->response.transfer_encoding)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&ds->copy, 0, sizeof (*(&ds->copy)))", "memset(&ds->free, 0, sizeof (*(&ds->free)))", "memset(&ds->insert_dup, 0, sizeof (*(&ds->insert_dup)))", "memset(&ds->is_index_key, 0, sizeof (*(&ds->is_index_key)))", "memset(&ds->key, 0, sizeof (*(&ds->key)))", "memset(&ds->print, 0, sizeof (*(&ds->print)))", "memset(&ds->reset, 0, sizeof (*(&ds->reset)))", "memset(&ds->type, 0, sizeof (*(&ds->type)))", "memset(&ds->value, 0, sizeof (*(&ds->value)))", "memset(&header->copy, 0, sizeof (*(&header->copy)))", "memset(&header->free, 0, sizeof (*(&header->free)))", "memset(&header->insert_dup, 0, sizeof (*(&header->insert_dup)))", "memset(&header->is_index_key, 0, sizeof (*(&header->is_index_key)))", "memset(&header->key, 0, sizeof (*(&header->key)))", "memset(&header->key->ptr, 0, sizeof (*(&header->key->ptr)))", "memset(&header->key->size, 0, sizeof (*(&header->key->size)))", "memset(&header->key->used, 0, sizeof (*(&header->key->used)))", "memset(&header->print, 0, sizeof (*(&header->print)))", "memset(&header->reset, 0, sizeof (*(&header->reset)))", "memset(&header->type, 0, sizeof (*(&header->type)))", "memset(&header->value, 0, sizeof (*(&header->value)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->response.headers, 0, sizeof (*(con->response.headers)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(ds, 0, sizeof (*(ds)))", "memset(ds->copy, 0, sizeof (*(ds->copy)))", "memset(ds->free, 0, sizeof (*(ds->free)))", "memset(ds->insert_dup, 0, sizeof (*(ds->insert_dup)))", "memset(ds->key, 0, sizeof (*(ds->key)))", "memset(ds->print, 0, sizeof (*(ds->print)))", "memset(ds->reset, 0, sizeof (*(ds->reset)))", "memset(ds->value, 0, sizeof (*(ds->value)))", "memset(header->copy, 0, sizeof (*(header->copy)))", "memset(header->free, 0, sizeof (*(header->free)))", "memset(header->insert_dup, 0, sizeof (*(header->insert_dup)))", "memset(header->key, 0, sizeof (*(header->key)))", "memset(header->key->ptr, 0, sizeof (*(header->key->ptr)))", "memset(header->print, 0, sizeof (*(header->print)))", "memset(header->reset, 0, sizeof (*(header->reset)))", "memset(header->value, 0, sizeof (*(header->value)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_copy_string_buffer((ds)->key, header->key)", "buffer_copy_string_buffer((ds)->value, header->value)", "buffer_copy_string_buffer((header)->key, header->key)", "buffer_copy_string_buffer((header)->value, header->value)", "buffer_copy_string_buffer(ds->key, (ds)->key)", "buffer_copy_string_buffer(ds->key, (header)->key)", "buffer_copy_string_buffer(ds->value, (ds)->value)", "buffer_copy_string_buffer(ds->value, (header)->value)", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "ds = (ds)", "ds = (header)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "array_insert_unique(con->response.headers, (data_unset *)ds)", "buffer_copy_string_buffer(ds->key, header->key)", "buffer_copy_string_buffer(ds->value, header->value)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "ds = data_response_init()", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    break;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	2,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	3,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	4,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	5,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	6,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	7,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	8,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	9,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	10,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	11,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	12,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	13,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	14,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	15,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	16,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	17,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	18,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	19,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	20,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	21,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	22,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	23,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	24,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	25,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	26,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	27,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	28,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	29,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	30,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	31,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	32,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	33,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	34,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	35,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	36,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	37,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	38,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	39,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	40,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	41,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	42,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	43,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	44,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	45,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	46,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	47,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	48,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	49,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	50,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	51,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	52,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	53,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	54,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	55,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	56,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	57,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	58,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	59,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	60,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	61,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	62,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	63,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	64,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	65,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	66,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	67,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	68,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	69,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	70,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	71,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	72,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	73,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	74,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	75,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	76,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	77,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	78,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	79,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	80,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	81,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	82,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	83,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	84,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	85,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	86,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	87,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	88,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	89,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	90,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	91,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	92,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	93,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	94,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	95,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	96,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	97,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	98,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	99,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	100,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	101,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	102,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	103,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	104,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	105,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	106,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	107,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	108,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	109,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	110,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	111,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	112,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	113,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	114,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	115,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	116,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	117,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	118,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	119,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	120,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	121,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	122,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	123,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	124,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	125,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	126,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	127,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	128,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	129,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	130,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	131,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	132,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	133,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	134,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	135,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	136,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	137,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	138,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	139,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	140,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	141,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	142,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	143,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	144,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	145,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	146,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	147,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	148,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	149,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	150,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	151,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	152,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	153,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	154,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	155,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	156,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	157,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	158,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	159,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	160,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	161,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	162,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	163,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	164,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	165,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	166,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	167,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	168,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	169,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	170,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	171,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	172,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	173,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	174,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	175,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	176,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	177,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	178,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	179,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	180,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	181,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	182,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	183,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	184,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	185,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	186,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	187,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	188,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	189,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	190,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	191,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	192,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	193,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	194,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	195,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	196,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	197,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	198,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	199,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	200,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	201,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	202,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	203,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	204,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	205,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	206,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	207,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	208,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	209,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	210,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	211,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	212,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	213,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	214,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	215,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	216,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	217,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	218,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	219,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	220,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	221,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	222,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	223,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	224,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	225,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	226,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	227,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	228,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	229,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	230,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	231,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	232,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	233,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	234,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	235,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	236,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	237,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	238,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	239,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	240,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	241,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	242,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	243,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	244,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	245,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	246,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	247,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	248,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	249,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	250,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	251,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	252,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	253,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	254,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	255,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	256,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	257,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	258,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	259,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	260,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	261,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	262,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	263,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	264,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	265,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	266,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	267,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	268,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	269,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	270,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	271,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	272,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	273,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	274,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	275,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	276,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	277,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	278,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	279,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	280,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	281,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	282,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	283,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	284,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	285,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	286,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	287,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	288,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	289,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	290,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	291,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	292,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	293,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	294,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	295,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	296,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	297,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	298,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	299,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	300,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	301,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	302,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	303,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	304,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	305,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	306,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	307,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	308,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	309,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	310,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	311,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	312,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	313,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	314,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	315,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	316,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	317,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	318,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	319,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	320,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	321,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	322,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	323,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	324,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	325,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	326,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	327,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	328,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	329,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	330,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	331,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	332,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	333,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	334,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	335,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	336,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	337,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	338,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	339,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	340,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	341,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	342,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	343,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	344,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	345,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	346,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	347,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	348,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	349,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	350,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	351,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	352,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	353,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	354,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	355,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	356,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	357,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	358,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	359,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	360,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	361,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	362,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	363,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	364,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	365,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	366,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	367,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	368,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	369,
									"scores":	[-10.489094746818857, -8.31707992281886, -9.42352639251886, -10.607892122818857, -10.805504192518859, -10.805504192518859, -10.424309222818858, -10.424309222818858, -10.333441622818858, -9.194814622818857, -10.424309222818858, -9.6509256228188569, -10.018820462818859, -9.6509256228188569, -10.510704462818858, -10.513731922818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -9.96819822281886, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.614941222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.614941222818858, -10.614941222818858, -10.614941222818858, -10.614941222818858, -10.614941222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.614941222818858, -10.614941222818858, -10.614941222818858, -9.96819822281886, -10.614941222818858, -10.614941222818858, -10.424309222818858, -10.424309222818858, -10.424309222818858, -10.614941222818858, -10.614941222818858, -10.614941222818858, -10.424309222818858, -10.424309222818858, -10.513731922818858]
								}, {
									"case":	370,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}, {
									"case":	371,
									"scores":	[-10.589002946818859, -8.4169881228188572, -9.523434592518857, -10.707800322818859, -10.905412392518858, -10.905412392518858, -10.524217422818857, -10.524217422818857, -10.433349822818858, -9.29472282281886, -10.524217422818857, -9.75083382281886, -10.118728662818857, -9.75083382281886, -10.610612662818859, -10.613640122818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.068106422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.714849422818858, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.714849422818858, -10.714849422818858, -10.714849422818858, -10.714849422818858, -10.714849422818858, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.714849422818858, -10.714849422818858, -10.714849422818858, -10.068106422818857, -10.714849422818858, -10.714849422818858, -10.524217422818857, -10.524217422818857, -10.524217422818857, -10.714849422818858, -10.714849422818858, -10.714849422818858, -10.524217422818857, -10.524217422818857, -10.613640122818857]
								}, {
									"case":	372,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}, {
									"case":	373,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}, {
									"case":	374,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}, {
									"case":	375,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}, {
									"case":	376,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}, {
									"case":	377,
									"scores":	[-12.851784746818858, -10.679769922818858, -11.786216392518858, -12.970582122818858, -13.168194192518857, -13.168194192518857, -12.786999222818858, -12.786999222818858, -12.696131622818857, -11.557504622818858, -12.786999222818858, -12.013615622818858, -12.381510462818857, -12.013615622818858, -12.873394462818858, -12.876421922818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.330888222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.330888222818858, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.786999222818858, -12.977631222818857, -12.977631222818857, -12.977631222818857, -12.786999222818858, -12.786999222818858, -12.876421922818858]
								}]
						}, {
							"switch":	63,
							"types":	[[], [], [1], [], [], [], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [12]],
							"begin_line":	361,
							"begin_column":	5,
							"end_line":	361,
							"end_column":	64,
							"patch_codes":	["if (!__is_neg(\"\", \"L361\", 63, &(con), sizeof (con), &(ds), sizeof (ds), &(con->response.headers), sizeof (con->response.headers), &(header), sizeof (header), &(ds->value), sizeof (ds->value), &(ds->key), sizeof (ds->key), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(con->response.transfer_encoding), sizeof (con->response.transfer_encoding), &(j), sizeof (j), &(p), sizeof (p), &(i), sizeof (i), &(srv), sizeof (srv), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(ds->type), sizeof (ds->type), &(ds->is_index_key), sizeof (ds->is_index_key), &(ds->copy), sizeof (ds->copy), &(ds->free), sizeof (ds->free), &(ds->reset), sizeof (ds->reset), &(ds->insert_dup), sizeof (ds->insert_dup), &(ds->print), sizeof (ds->print), &(con->response.content_length), sizeof (con->response.content_length), &(con->response.keep_alive), sizeof (con->response.keep_alive), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    array_insert_unique(con->response.headers, (data_unset *)ds);\n", "array_get_element(con->response.headers, (data_unset *)ds, -1)", "array_get_element(con->response.headers, (data_unset *)ds, 0)", "array_get_element(con->response.headers, (data_unset *)ds, 1)", "array_get_element(con->response.headers, (data_unset *)ds, 200)", "array_get_element(con->response.headers, (data_unset *)ds, 299)", "array_get_element(con->response.headers, (data_unset *)ds, 302)", "array_get_element(con->response.headers, (data_unset *)ds, 323)", "array_get_element(con->response.headers, (data_unset *)ds, 502)", "array_get_element(con->response.headers, (data_unset *)ds, i)", "array_get_element(con->response.headers, (data_unset *)ds, j)", "{\n}\n", "VALGRIND_PRINTF(con->response.headers, (data_unset *)ds)", "VALGRIND_PRINTF_BACKTRACE(con->response.headers, (data_unset *)ds)", "__builtin_va_start(con->response.headers, (data_unset *)ds)", "array_replace(con->response.headers, (data_unset *)ds)", "g_build_filename(con->response.headers, (data_unset *)ds)", "g_markup_printf_escaped(con->response.headers, (data_unset *)ds)", "g_print(con->response.headers, (data_unset *)ds)", "g_printerr(con->response.headers, (data_unset *)ds)", "g_relation_exists(con->response.headers, (data_unset *)ds)", "g_relation_insert(con->response.headers, (data_unset *)ds)", "g_strconcat(con->response.headers, (data_unset *)ds)", "g_strdup_printf(con->response.headers, (data_unset *)ds)", "g_strjoin(con->response.headers, (data_unset *)ds)", "g_test_message(con->response.headers, (data_unset *)ds)", "g_variant_new(con->response.headers, (data_unset *)ds)", "g_variant_new_parsed(con->response.headers, (data_unset *)ds)", "g_variant_new_printf(con->response.headers, (data_unset *)ds)", "log_trace(con->response.headers, (data_unset *)ds)", "printf(con->response.headers, (data_unset *)ds)", "array_insert_unique((&con)->response.headers, (data_unset *)ds)", "array_insert_unique((&ds)->response.headers, (data_unset *)ds)", "array_insert_unique((&have_content_length)->response.headers, (data_unset *)ds)", "array_insert_unique((&header)->response.headers, (data_unset *)ds)", "array_insert_unique((&i)->response.headers, (data_unset *)ds)", "array_insert_unique((&ign)->response.headers, (data_unset *)ds)", "array_insert_unique((&j)->response.headers, (data_unset *)ds)", "array_insert_unique((&p)->response.headers, (data_unset *)ds)", "array_insert_unique((&sess)->response.headers, (data_unset *)ds)", "array_insert_unique((&srv)->response.headers, (data_unset *)ds)", "array_insert_unique((con)->response.headers, (data_unset *)ds)", "array_insert_unique(con->response.headers, (data_unset *)ds)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.13437768381886, -7.7993320308188583, -8.72689172251886, -9.38102188381886, -9.60706502251886, -9.60706502251886, -8.77523270281886, -8.77523270281886, -9.38959700281886, -7.7604721328188582, -8.77523270281886, -8.00439900281886, -9.11308550281886, -8.00439900281886, -9.65437850281886, -9.21219770281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.53130583281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -9.61913770281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -9.61913770281886, -9.61913770281886, -9.61913770281886, -9.61913770281886, -9.61913770281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -9.61913770281886, -9.61913770281886, -9.61913770281886, -8.53130583281886, -9.61913770281886, -9.61913770281886, -8.77523270281886, -8.77523270281886, -8.77523270281886, -9.61913770281886, -9.61913770281886, -9.61913770281886, -8.77523270281886, -8.77523270281886, -9.21219770281886]
								}, {
									"case":	2,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	3,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	4,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	5,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	6,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	7,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	8,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	9,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	10,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	11,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	12,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	13,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	14,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	15,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	16,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	17,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	18,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	19,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	20,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	21,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	22,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	23,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	24,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	25,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	26,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	27,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	28,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	29,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	30,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	31,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	32,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	33,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	34,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	35,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	36,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	37,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	38,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	39,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	40,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	41,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	42,
									"scores":	[-7.2454697128188581]
								}, {
									"case":	43,
									"scores":	[-7.2454697128188581]
								}]
						}]
				}, {
					"line":	334,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [313, 314, 315, 316, 317, 318, 319, 320], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], [], [], [], [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312], [205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], [], [], [], [], [], []],
							"begin_line":	335,
							"begin_column":	2,
							"end_line":	335,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p, 0, sizeof (*(p)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return -1;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 0;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 1;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 200;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 299;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 302;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 323;\n", "if (__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.52830761526413]
								}, {
									"case":	2,
									"scores":	[-7.52830761526413]
								}, {
									"case":	3,
									"scores":	[-7.52830761526413]
								}, {
									"case":	4,
									"scores":	[-7.52830761526413]
								}, {
									"case":	5,
									"scores":	[-7.52830761526413]
								}, {
									"case":	6,
									"scores":	[-7.52830761526413]
								}, {
									"case":	7,
									"scores":	[-7.52830761526413]
								}, {
									"case":	8,
									"scores":	[-7.52830761526413]
								}, {
									"case":	9,
									"scores":	[-7.52830761526413]
								}, {
									"case":	10,
									"scores":	[-7.52830761526413]
								}, {
									"case":	11,
									"scores":	[-7.52830761526413]
								}, {
									"case":	12,
									"scores":	[-7.52830761526413]
								}, {
									"case":	13,
									"scores":	[-7.52830761526413]
								}, {
									"case":	14,
									"scores":	[-7.52830761526413]
								}, {
									"case":	15,
									"scores":	[-7.52830761526413]
								}, {
									"case":	16,
									"scores":	[-7.52830761526413]
								}, {
									"case":	17,
									"scores":	[-7.52830761526413]
								}, {
									"case":	18,
									"scores":	[-7.52830761526413]
								}, {
									"case":	19,
									"scores":	[-7.52830761526413]
								}, {
									"case":	20,
									"scores":	[-7.52830761526413]
								}, {
									"case":	21,
									"scores":	[-7.52830761526413]
								}, {
									"case":	22,
									"scores":	[-7.52830761526413]
								}, {
									"case":	23,
									"scores":	[-7.52830761526413]
								}, {
									"case":	24,
									"scores":	[-7.52830761526413]
								}, {
									"case":	25,
									"scores":	[-7.52830761526413]
								}, {
									"case":	26,
									"scores":	[-7.52830761526413]
								}, {
									"case":	27,
									"scores":	[-7.52830761526413]
								}, {
									"case":	28,
									"scores":	[-7.52830761526413]
								}, {
									"case":	29,
									"scores":	[-7.52830761526413]
								}, {
									"case":	30,
									"scores":	[-7.52830761526413]
								}, {
									"case":	31,
									"scores":	[-7.52830761526413]
								}, {
									"case":	32,
									"scores":	[-7.52830761526413]
								}, {
									"case":	33,
									"scores":	[-7.52830761526413]
								}, {
									"case":	34,
									"scores":	[-7.52830761526413]
								}, {
									"case":	35,
									"scores":	[-7.52830761526413]
								}, {
									"case":	36,
									"scores":	[-7.52830761526413]
								}, {
									"case":	37,
									"scores":	[-7.52830761526413]
								}, {
									"case":	38,
									"scores":	[-7.52830761526413]
								}, {
									"case":	39,
									"scores":	[-7.52830761526413]
								}, {
									"case":	40,
									"scores":	[-7.52830761526413]
								}, {
									"case":	41,
									"scores":	[-7.52830761526413]
								}, {
									"case":	42,
									"scores":	[-7.52830761526413]
								}, {
									"case":	43,
									"scores":	[-7.52830761526413]
								}, {
									"case":	44,
									"scores":	[-7.52830761526413]
								}, {
									"case":	45,
									"scores":	[-7.52830761526413]
								}, {
									"case":	46,
									"scores":	[-7.52830761526413]
								}, {
									"case":	47,
									"scores":	[-7.52830761526413]
								}, {
									"case":	48,
									"scores":	[-7.52830761526413]
								}, {
									"case":	49,
									"scores":	[-7.52830761526413]
								}, {
									"case":	50,
									"scores":	[-7.52830761526413]
								}, {
									"case":	51,
									"scores":	[-7.52830761526413]
								}, {
									"case":	52,
									"scores":	[-7.52830761526413]
								}, {
									"case":	53,
									"scores":	[-7.52830761526413]
								}, {
									"case":	54,
									"scores":	[-7.52830761526413]
								}, {
									"case":	55,
									"scores":	[-7.52830761526413]
								}, {
									"case":	56,
									"scores":	[-7.52830761526413]
								}, {
									"case":	57,
									"scores":	[-7.52830761526413]
								}, {
									"case":	58,
									"scores":	[-7.52830761526413]
								}, {
									"case":	59,
									"scores":	[-7.52830761526413]
								}, {
									"case":	60,
									"scores":	[-7.52830761526413]
								}, {
									"case":	61,
									"scores":	[-7.52830761526413]
								}, {
									"case":	62,
									"scores":	[-7.52830761526413]
								}, {
									"case":	63,
									"scores":	[-7.52830761526413]
								}, {
									"case":	64,
									"scores":	[-7.52830761526413]
								}, {
									"case":	65,
									"scores":	[-7.52830761526413]
								}, {
									"case":	66,
									"scores":	[-7.52830761526413]
								}, {
									"case":	67,
									"scores":	[-7.52830761526413]
								}, {
									"case":	68,
									"scores":	[-7.52830761526413]
								}, {
									"case":	69,
									"scores":	[-7.52830761526413]
								}, {
									"case":	70,
									"scores":	[-7.52830761526413]
								}, {
									"case":	71,
									"scores":	[-7.52830761526413]
								}, {
									"case":	72,
									"scores":	[-7.52830761526413]
								}, {
									"case":	73,
									"scores":	[-7.52830761526413]
								}, {
									"case":	74,
									"scores":	[-7.52830761526413]
								}, {
									"case":	75,
									"scores":	[-7.52830761526413]
								}, {
									"case":	76,
									"scores":	[-7.52830761526413]
								}, {
									"case":	77,
									"scores":	[-7.52830761526413]
								}, {
									"case":	78,
									"scores":	[-7.52830761526413]
								}, {
									"case":	79,
									"scores":	[-7.52830761526413]
								}, {
									"case":	80,
									"scores":	[-7.52830761526413]
								}, {
									"case":	81,
									"scores":	[-7.52830761526413]
								}, {
									"case":	82,
									"scores":	[-7.52830761526413]
								}, {
									"case":	83,
									"scores":	[-7.52830761526413]
								}, {
									"case":	84,
									"scores":	[-7.52830761526413]
								}, {
									"case":	85,
									"scores":	[-7.52830761526413]
								}, {
									"case":	86,
									"scores":	[-7.52830761526413]
								}, {
									"case":	87,
									"scores":	[-7.52830761526413]
								}, {
									"case":	88,
									"scores":	[-7.52830761526413]
								}, {
									"case":	89,
									"scores":	[-7.52830761526413]
								}, {
									"case":	90,
									"scores":	[-7.52830761526413]
								}, {
									"case":	91,
									"scores":	[-7.52830761526413]
								}, {
									"case":	92,
									"scores":	[-7.52830761526413]
								}, {
									"case":	93,
									"scores":	[-7.52830761526413]
								}, {
									"case":	94,
									"scores":	[-7.52830761526413]
								}, {
									"case":	95,
									"scores":	[-7.52830761526413]
								}, {
									"case":	96,
									"scores":	[-7.52830761526413]
								}, {
									"case":	97,
									"scores":	[-7.52830761526413]
								}, {
									"case":	98,
									"scores":	[-7.52830761526413]
								}, {
									"case":	99,
									"scores":	[-7.52830761526413]
								}, {
									"case":	100,
									"scores":	[-7.52830761526413]
								}, {
									"case":	101,
									"scores":	[-7.52830761526413]
								}, {
									"case":	102,
									"scores":	[-7.52830761526413]
								}, {
									"case":	103,
									"scores":	[-7.52830761526413]
								}, {
									"case":	104,
									"scores":	[-7.52830761526413]
								}, {
									"case":	105,
									"scores":	[-7.52830761526413]
								}, {
									"case":	106,
									"scores":	[-7.52830761526413]
								}, {
									"case":	107,
									"scores":	[-7.52830761526413]
								}, {
									"case":	108,
									"scores":	[-7.52830761526413]
								}, {
									"case":	109,
									"scores":	[-7.52830761526413]
								}, {
									"case":	110,
									"scores":	[-7.52830761526413]
								}, {
									"case":	111,
									"scores":	[-7.52830761526413]
								}, {
									"case":	112,
									"scores":	[-7.52830761526413]
								}, {
									"case":	113,
									"scores":	[-7.52830761526413]
								}, {
									"case":	114,
									"scores":	[-7.52830761526413]
								}, {
									"case":	115,
									"scores":	[-7.52830761526413]
								}, {
									"case":	116,
									"scores":	[-7.52830761526413]
								}, {
									"case":	117,
									"scores":	[-7.52830761526413]
								}, {
									"case":	118,
									"scores":	[-7.52830761526413]
								}, {
									"case":	119,
									"scores":	[-7.52830761526413]
								}, {
									"case":	120,
									"scores":	[-7.52830761526413]
								}, {
									"case":	121,
									"scores":	[-7.52830761526413]
								}, {
									"case":	122,
									"scores":	[-7.52830761526413]
								}, {
									"case":	123,
									"scores":	[-7.52830761526413]
								}, {
									"case":	124,
									"scores":	[-7.52830761526413]
								}, {
									"case":	125,
									"scores":	[-7.52830761526413]
								}, {
									"case":	126,
									"scores":	[-7.52830761526413]
								}, {
									"case":	127,
									"scores":	[-7.52830761526413]
								}, {
									"case":	128,
									"scores":	[-7.52830761526413]
								}, {
									"case":	129,
									"scores":	[-7.52830761526413]
								}, {
									"case":	130,
									"scores":	[-7.52830761526413]
								}, {
									"case":	131,
									"scores":	[-7.52830761526413]
								}, {
									"case":	132,
									"scores":	[-7.52830761526413]
								}, {
									"case":	133,
									"scores":	[-7.52830761526413]
								}, {
									"case":	134,
									"scores":	[-7.52830761526413]
								}, {
									"case":	135,
									"scores":	[-7.52830761526413]
								}, {
									"case":	136,
									"scores":	[-7.52830761526413]
								}, {
									"case":	137,
									"scores":	[-7.52830761526413]
								}, {
									"case":	138,
									"scores":	[-7.52830761526413]
								}, {
									"case":	139,
									"scores":	[-7.52830761526413]
								}, {
									"case":	140,
									"scores":	[-7.52830761526413]
								}, {
									"case":	141,
									"scores":	[-7.52830761526413]
								}, {
									"case":	142,
									"scores":	[-7.52830761526413]
								}, {
									"case":	143,
									"scores":	[-7.52830761526413]
								}, {
									"case":	144,
									"scores":	[-7.52830761526413]
								}, {
									"case":	145,
									"scores":	[-7.52830761526413]
								}, {
									"case":	146,
									"scores":	[-7.52830761526413]
								}, {
									"case":	147,
									"scores":	[-7.52830761526413]
								}, {
									"case":	148,
									"scores":	[-7.52830761526413]
								}, {
									"case":	149,
									"scores":	[-7.52830761526413]
								}, {
									"case":	150,
									"scores":	[-7.52830761526413]
								}, {
									"case":	151,
									"scores":	[-7.52830761526413]
								}, {
									"case":	152,
									"scores":	[-7.52830761526413]
								}, {
									"case":	153,
									"scores":	[-7.52830761526413]
								}, {
									"case":	154,
									"scores":	[-7.52830761526413]
								}, {
									"case":	155,
									"scores":	[-7.52830761526413]
								}, {
									"case":	156,
									"scores":	[-7.52830761526413]
								}, {
									"case":	157,
									"scores":	[-7.52830761526413]
								}, {
									"case":	158,
									"scores":	[-7.52830761526413]
								}, {
									"case":	159,
									"scores":	[-7.52830761526413]
								}, {
									"case":	160,
									"scores":	[-7.52830761526413]
								}, {
									"case":	161,
									"scores":	[-7.52830761526413]
								}, {
									"case":	162,
									"scores":	[-7.52830761526413]
								}, {
									"case":	163,
									"scores":	[-7.52830761526413]
								}, {
									"case":	164,
									"scores":	[-7.52830761526413]
								}, {
									"case":	165,
									"scores":	[-7.52830761526413]
								}, {
									"case":	166,
									"scores":	[-7.52830761526413]
								}, {
									"case":	167,
									"scores":	[-7.52830761526413]
								}, {
									"case":	168,
									"scores":	[-7.52830761526413]
								}, {
									"case":	169,
									"scores":	[-7.52830761526413]
								}, {
									"case":	170,
									"scores":	[-7.52830761526413]
								}, {
									"case":	171,
									"scores":	[-7.52830761526413]
								}, {
									"case":	172,
									"scores":	[-7.52830761526413]
								}, {
									"case":	173,
									"scores":	[-7.52830761526413]
								}, {
									"case":	174,
									"scores":	[-7.52830761526413]
								}, {
									"case":	175,
									"scores":	[-7.52830761526413]
								}, {
									"case":	176,
									"scores":	[-7.52830761526413]
								}, {
									"case":	177,
									"scores":	[-7.52830761526413]
								}, {
									"case":	178,
									"scores":	[-7.52830761526413]
								}, {
									"case":	179,
									"scores":	[-7.52830761526413]
								}, {
									"case":	180,
									"scores":	[-7.52830761526413]
								}, {
									"case":	181,
									"scores":	[-7.52830761526413]
								}, {
									"case":	182,
									"scores":	[-7.52830761526413]
								}, {
									"case":	183,
									"scores":	[-7.52830761526413]
								}, {
									"case":	184,
									"scores":	[-7.52830761526413]
								}, {
									"case":	185,
									"scores":	[-7.52830761526413]
								}, {
									"case":	186,
									"scores":	[-7.52830761526413]
								}, {
									"case":	187,
									"scores":	[-7.52830761526413]
								}, {
									"case":	188,
									"scores":	[-7.52830761526413]
								}, {
									"case":	189,
									"scores":	[-7.52830761526413]
								}, {
									"case":	190,
									"scores":	[-7.52830761526413]
								}, {
									"case":	191,
									"scores":	[-7.52830761526413]
								}, {
									"case":	192,
									"scores":	[-7.52830761526413]
								}, {
									"case":	193,
									"scores":	[-7.52830761526413]
								}, {
									"case":	194,
									"scores":	[-7.52830761526413]
								}, {
									"case":	195,
									"scores":	[-7.52830761526413]
								}, {
									"case":	196,
									"scores":	[-7.52830761526413]
								}, {
									"case":	197,
									"scores":	[-7.52830761526413]
								}, {
									"case":	198,
									"scores":	[-7.52830761526413]
								}, {
									"case":	199,
									"scores":	[-7.52830761526413]
								}, {
									"case":	200,
									"scores":	[-7.52830761526413]
								}, {
									"case":	201,
									"scores":	[-7.52830761526413]
								}, {
									"case":	202,
									"scores":	[-7.52830761526413]
								}, {
									"case":	203,
									"scores":	[-7.52830761526413]
								}, {
									"case":	204,
									"scores":	[-7.52830761526413]
								}, {
									"case":	205,
									"scores":	[-7.52830761526413]
								}, {
									"case":	206,
									"scores":	[-7.52830761526413]
								}, {
									"case":	207,
									"scores":	[-7.52830761526413]
								}, {
									"case":	208,
									"scores":	[-7.52830761526413]
								}, {
									"case":	209,
									"scores":	[-7.52830761526413]
								}, {
									"case":	210,
									"scores":	[-7.52830761526413]
								}, {
									"case":	211,
									"scores":	[-7.52830761526413]
								}, {
									"case":	212,
									"scores":	[-7.52830761526413]
								}, {
									"case":	213,
									"scores":	[-7.52830761526413]
								}, {
									"case":	214,
									"scores":	[-7.52830761526413]
								}, {
									"case":	215,
									"scores":	[-7.52830761526413]
								}, {
									"case":	216,
									"scores":	[-7.52830761526413]
								}, {
									"case":	217,
									"scores":	[-7.52830761526413]
								}, {
									"case":	218,
									"scores":	[-7.52830761526413]
								}, {
									"case":	219,
									"scores":	[-7.52830761526413]
								}, {
									"case":	220,
									"scores":	[-7.52830761526413]
								}, {
									"case":	221,
									"scores":	[-7.52830761526413]
								}, {
									"case":	222,
									"scores":	[-7.52830761526413]
								}, {
									"case":	223,
									"scores":	[-7.52830761526413]
								}, {
									"case":	224,
									"scores":	[-7.52830761526413]
								}, {
									"case":	225,
									"scores":	[-7.52830761526413]
								}, {
									"case":	226,
									"scores":	[-7.52830761526413]
								}, {
									"case":	227,
									"scores":	[-7.52830761526413]
								}, {
									"case":	228,
									"scores":	[-7.52830761526413]
								}, {
									"case":	229,
									"scores":	[-7.52830761526413]
								}, {
									"case":	230,
									"scores":	[-7.52830761526413]
								}, {
									"case":	231,
									"scores":	[-7.52830761526413]
								}, {
									"case":	232,
									"scores":	[-7.52830761526413]
								}, {
									"case":	233,
									"scores":	[-7.52830761526413]
								}, {
									"case":	234,
									"scores":	[-7.52830761526413]
								}, {
									"case":	235,
									"scores":	[-7.52830761526413]
								}, {
									"case":	236,
									"scores":	[-7.52830761526413]
								}, {
									"case":	237,
									"scores":	[-7.52830761526413]
								}, {
									"case":	238,
									"scores":	[-7.52830761526413]
								}, {
									"case":	239,
									"scores":	[-7.52830761526413]
								}, {
									"case":	240,
									"scores":	[-7.52830761526413]
								}, {
									"case":	241,
									"scores":	[-7.52830761526413]
								}, {
									"case":	242,
									"scores":	[-7.52830761526413]
								}, {
									"case":	243,
									"scores":	[-7.52830761526413]
								}, {
									"case":	244,
									"scores":	[-7.52830761526413]
								}, {
									"case":	245,
									"scores":	[-7.52830761526413]
								}, {
									"case":	246,
									"scores":	[-7.52830761526413]
								}, {
									"case":	247,
									"scores":	[-7.52830761526413]
								}, {
									"case":	248,
									"scores":	[-7.52830761526413]
								}, {
									"case":	249,
									"scores":	[-7.52830761526413]
								}, {
									"case":	250,
									"scores":	[-7.52830761526413]
								}, {
									"case":	251,
									"scores":	[-7.52830761526413]
								}, {
									"case":	252,
									"scores":	[-7.52830761526413]
								}, {
									"case":	253,
									"scores":	[-7.52830761526413]
								}, {
									"case":	254,
									"scores":	[-7.52830761526413]
								}, {
									"case":	255,
									"scores":	[-7.52830761526413]
								}, {
									"case":	256,
									"scores":	[-7.52830761526413]
								}, {
									"case":	257,
									"scores":	[-7.52830761526413]
								}, {
									"case":	258,
									"scores":	[-7.52830761526413]
								}, {
									"case":	259,
									"scores":	[-7.52830761526413]
								}, {
									"case":	260,
									"scores":	[-7.52830761526413]
								}, {
									"case":	261,
									"scores":	[-7.52830761526413]
								}, {
									"case":	262,
									"scores":	[-7.52830761526413]
								}, {
									"case":	263,
									"scores":	[-7.52830761526413]
								}, {
									"case":	264,
									"scores":	[-7.52830761526413]
								}, {
									"case":	265,
									"scores":	[-7.52830761526413]
								}, {
									"case":	266,
									"scores":	[-7.52830761526413]
								}, {
									"case":	267,
									"scores":	[-7.52830761526413]
								}, {
									"case":	268,
									"scores":	[-7.52830761526413]
								}, {
									"case":	269,
									"scores":	[-7.52830761526413]
								}, {
									"case":	270,
									"scores":	[-7.52830761526413]
								}, {
									"case":	271,
									"scores":	[-7.52830761526413]
								}, {
									"case":	272,
									"scores":	[-7.52830761526413]
								}, {
									"case":	273,
									"scores":	[-7.52830761526413]
								}, {
									"case":	274,
									"scores":	[-7.52830761526413]
								}, {
									"case":	275,
									"scores":	[-7.52830761526413]
								}, {
									"case":	276,
									"scores":	[-7.52830761526413]
								}, {
									"case":	277,
									"scores":	[-7.52830761526413]
								}, {
									"case":	278,
									"scores":	[-7.52830761526413]
								}, {
									"case":	279,
									"scores":	[-7.52830761526413]
								}, {
									"case":	280,
									"scores":	[-7.52830761526413]
								}, {
									"case":	281,
									"scores":	[-7.52830761526413]
								}, {
									"case":	282,
									"scores":	[-7.52830761526413]
								}, {
									"case":	283,
									"scores":	[-7.52830761526413]
								}, {
									"case":	284,
									"scores":	[-7.52830761526413]
								}, {
									"case":	285,
									"scores":	[-7.52830761526413]
								}, {
									"case":	286,
									"scores":	[-7.52830761526413]
								}, {
									"case":	287,
									"scores":	[-7.52830761526413]
								}, {
									"case":	288,
									"scores":	[-7.52830761526413]
								}, {
									"case":	289,
									"scores":	[-7.52830761526413]
								}, {
									"case":	290,
									"scores":	[-7.52830761526413]
								}, {
									"case":	291,
									"scores":	[-7.52830761526413]
								}, {
									"case":	292,
									"scores":	[-7.52830761526413]
								}, {
									"case":	293,
									"scores":	[-7.52830761526413]
								}, {
									"case":	294,
									"scores":	[-7.52830761526413]
								}, {
									"case":	295,
									"scores":	[-7.52830761526413]
								}, {
									"case":	296,
									"scores":	[-7.52830761526413]
								}, {
									"case":	297,
									"scores":	[-7.52830761526413]
								}, {
									"case":	298,
									"scores":	[-7.52830761526413]
								}, {
									"case":	299,
									"scores":	[-7.52830761526413]
								}, {
									"case":	300,
									"scores":	[-7.52830761526413]
								}, {
									"case":	301,
									"scores":	[-7.52830761526413]
								}, {
									"case":	302,
									"scores":	[-7.52830761526413]
								}, {
									"case":	303,
									"scores":	[-7.52830761526413]
								}, {
									"case":	304,
									"scores":	[-7.52830761526413]
								}, {
									"case":	305,
									"scores":	[-7.52830761526413]
								}, {
									"case":	306,
									"scores":	[-7.52830761526413]
								}, {
									"case":	307,
									"scores":	[-7.52830761526413]
								}, {
									"case":	308,
									"scores":	[-7.52830761526413]
								}, {
									"case":	309,
									"scores":	[-7.52830761526413]
								}, {
									"case":	310,
									"scores":	[-7.52830761526413]
								}, {
									"case":	311,
									"scores":	[-7.52830761526413]
								}, {
									"case":	312,
									"scores":	[-7.52830761526413]
								}, {
									"case":	313,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}, {
									"case":	314,
									"scores":	[-10.332316391264129, -9.47843372936413, -10.928437151264131, -10.699682451264131, -10.04928457726413, -11.83758576126413, -10.17772130126413, -10.75004416726413, -10.590400462264132, -10.05821445196413, -11.219340407264131, -11.132945167264129, -11.32357716726413, -11.222367867264129, -11.132945167264129, -11.32357716726413, -11.222367867264129, -11.132945167264129, -11.132945167264129, -11.132945167264129, -11.132945167264129]
								}, {
									"case":	315,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}, {
									"case":	316,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}, {
									"case":	317,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}, {
									"case":	318,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}, {
									"case":	319,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}, {
									"case":	320,
									"scores":	[-12.59509819126413, -11.74121552936413, -13.19121895126413, -12.96246425126413, -12.312066377264131, -14.100367561264129, -12.440503101264131, -13.012825967264131, -12.853182262264131, -12.320996251964129, -13.48212220726413, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.586358967264129, -13.485149667264132, -13.395726967264132, -13.395726967264132, -13.395726967264132, -13.395726967264132]
								}]
						}, {
							"switch":	64,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	335,
							"begin_column":	4,
							"end_line":	362,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L335\", 21, &(p), sizeof (p), &(i), sizeof (i), &(p->resp), sizeof (p->resp), &(p->resp->headers), sizeof (p->resp->headers), &(p->resp->headers->used), sizeof (p->resp->headers->used), &(sess), sizeof (sess), &(con), sizeof (con), &(p->resp->status), sizeof (p->resp->status), &(p->resp->headers->data), sizeof (p->resp->headers->data), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->config_storage), sizeof (p->config_storage), &(p->resp->protocol), sizeof (p->resp->protocol), &(p->resp->reason), sizeof (p->resp->reason), &(p->resp->headers->sorted), sizeof (p->resp->headers->sorted), &(p->resp->headers->size), sizeof (p->resp->headers->size), &(p->resp->headers->unique_ndx), sizeof (p->resp->headers->unique_ndx), &(p->resp->headers->next_power_of_2), sizeof (p->resp->headers->next_power_of_2), &(p->resp->headers->is_weakref), sizeof (p->resp->headers->is_weakref)))\n    for (i = 0; i < p->resp->headers->used; i++) {\n        const char *ign[] = {\"Status\", \"Connection\", ((void *)0)};\n        size_t j;\n        data_string *ds;\n        data_string *header = (data_string *)p->resp->headers->data[i];\n        for (j = 0; ign[j]; j++) {\n            if (0 == strcasecmp(ign[j], header->key->ptr))\n                break;\n        }\n        if (ign[j])\n            continue;\n        if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Location\", \"Location\" ? sizeof (\"Location\") - 1 : 0)) {\n            if (con->http_status == 0)\n                con->http_status = 302;\n        } else if (0 == buffer_caseless_compare(header->key->ptr, header->key->used ? header->key->used - 1 : 0, \"Content-Length\", \"Content-Length\" ? sizeof (\"Content-Length\") - 1 : 0)) {\n            have_content_length = 1;\n        }\n        if (((void *)0) == (ds = (data_string *)array_get_unused_element(con->response.headers, TYPE_STRING))) {\n            ds = data_response_init();\n        }\n        buffer_copy_string_buffer(ds->key, header->key);\n        buffer_copy_string_buffer(ds->value, header->value);\n        array_insert_unique(con->response.headers, (data_unset *)ds);\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.251031316264131, -8.55040959126413, -10.75708351626413, -10.50256058526413, -8.48844658526413, -10.41029453126413, -9.10645405426413, -8.84106888526413, -8.72779358526413, -8.76189368826413, -9.93564438526413, -9.05649858526413, -9.90040358526413, -9.49346358526413, -9.05649858526413, -9.90040358526413, -9.49346358526413, -9.05649858526413, -9.05649858526413, -9.05649858526413, -9.05649858526413]
								}]
						}]
				}, {
					"line":	363,
					"switches":	[{
							"switch":	65,
							"types":	[[], [], [], [], [312, 313, 314, 315, 316, 317, 318, 319], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	364,
							"begin_column":	2,
							"end_line":	364,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	2,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	3,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	4,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	5,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	6,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	7,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	8,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	9,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	10,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	11,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	12,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	13,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	14,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	15,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	16,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	17,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	18,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	19,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	20,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	21,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	22,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	23,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	24,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	25,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	26,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	27,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	28,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	29,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	30,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	31,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	32,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	33,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	34,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	35,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	36,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	37,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	38,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	39,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	40,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	41,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	42,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	43,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	44,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	45,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	46,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	47,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	48,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	49,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	50,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	51,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	52,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	53,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	54,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	55,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	56,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	57,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	58,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	59,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	60,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	61,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	62,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	63,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	64,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	65,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	66,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	67,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	68,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	69,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	70,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	71,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	72,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	73,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	74,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	75,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	76,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	77,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	78,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	79,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	80,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	81,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	82,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	83,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	84,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	85,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	86,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	87,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	88,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	89,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	90,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	91,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	92,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	93,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	94,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	95,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	96,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	97,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	98,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	99,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	100,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	101,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	102,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	103,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	104,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	105,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	106,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	107,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	108,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	109,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	110,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	111,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	112,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	113,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	114,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	115,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	116,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	117,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	118,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	119,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	120,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	121,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	122,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	123,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	124,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	125,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	126,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	127,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	128,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	129,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	130,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	131,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	132,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	133,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	134,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	135,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	136,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	137,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	138,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	139,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	140,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	141,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	142,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	143,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	144,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	145,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	146,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	147,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	148,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	149,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	150,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	151,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	152,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	153,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	154,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	155,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	156,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	157,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	158,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	159,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	160,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	161,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	162,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	163,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	164,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	165,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	166,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	167,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	168,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	169,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	170,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	171,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	172,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	173,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	174,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	175,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	176,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	177,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	178,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	179,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	180,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	181,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	182,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	183,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	184,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	185,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	186,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	187,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	188,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	189,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	190,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	191,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	192,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	193,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	194,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	195,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	196,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	197,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	198,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	199,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	200,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	201,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	202,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	203,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	204,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	205,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	206,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	207,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	208,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	209,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	210,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	211,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	212,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	213,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	214,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	215,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	216,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	217,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	218,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	219,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	220,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	221,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	222,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	223,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	224,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	225,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	226,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	227,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	228,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	229,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	230,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	231,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	232,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	233,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	234,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	235,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	236,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	237,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	238,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	239,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	240,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	241,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	242,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	243,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	244,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	245,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	246,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	247,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	248,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	249,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	250,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	251,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	252,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	253,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	254,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	255,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	256,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	257,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	258,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	259,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	260,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	261,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	262,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	263,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	264,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	265,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	266,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	267,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	268,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	269,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	270,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	271,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	272,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	273,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	274,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	275,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	276,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	277,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	278,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	279,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	280,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	281,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	282,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	283,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	284,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	285,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	286,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	287,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	288,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	289,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	290,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	291,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	292,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	293,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	294,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	295,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	296,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	297,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	298,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	299,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	300,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	301,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	302,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	303,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	304,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	305,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	306,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	307,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	308,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	309,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	310,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	311,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	312,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}, {
									"case":	313,
									"scores":	[-10.439479829501337, -11.378861580201338, -10.937508787501338, -11.928738289501338, -8.45582489550134, -11.310492935501339, -11.189666035501338, -9.40746347650134, -11.313520395501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.41472969550134, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.41472969550134, -11.41472969550134, -11.41472969550134, -11.41472969550134, -11.41472969550134, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.41472969550134, -11.41472969550134, -11.41472969550134, -10.767986695501339, -11.41472969550134, -11.41472969550134, -11.224097695501339, -11.224097695501339, -11.224097695501339, -11.41472969550134, -11.41472969550134, -11.41472969550134, -11.224097695501339, -11.224097695501339, -11.313520395501339]
								}, {
									"case":	314,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}, {
									"case":	315,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}, {
									"case":	316,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}, {
									"case":	317,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}, {
									"case":	318,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}, {
									"case":	319,
									"scores":	[-12.702261629501338, -13.641643380201339, -13.200290587501339, -14.191520089501338, -10.718606695501339, -13.573274735501339, -13.452447835501339, -11.670245276501337, -13.576302195501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.030768495501338, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.486879495501338, -13.677511495501339, -13.677511495501339, -13.677511495501339, -13.486879495501338, -13.486879495501338, -13.576302195501338]
								}]
						}, {
							"switch":	66,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	364,
							"begin_column":	4,
							"end_line":	364,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L364\", 47, &(con), sizeof (con), &(con->file_started), sizeof (con->file_started), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    con->file_started = 1;\n", "{\n}\n", "con->file_started = (-1)", "con->file_started = (0 * have_content_length)", "con->file_started = (0 * i)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (con != 0)", "con->file_started = (con == 0)", "con->file_started = (have_content_length != 0)", "con->file_started = (have_content_length * i)", "con->file_started = (have_content_length + 0)", "con->file_started = (have_content_length - 0)", "con->file_started = (have_content_length == 0)", "con->file_started = (have_content_length)", "con->file_started = (i != 0)", "con->file_started = (i != have_content_length)", "con->file_started = (i * have_content_length)", "con->file_started = (i + 0)", "con->file_started = (i + have_content_length)", "con->file_started = (i - 0)", "con->file_started = (i - have_content_length)", "con->file_started = (i == 0)", "con->file_started = (i == have_content_length)", "con->file_started = (p != 0)", "con->file_started = (p == 0)", "con->file_started = (sess != 0)", "con->file_started = (sess == 0)", "con->file_started = (srv != 0)", "con->file_started = (srv == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.93518519450134, -9.67428914850134, -8.92555287550134, -10.307929421501338, -8.36002105250134, -9.83327927550134, -9.66206692450134, -8.94251444050134, -9.39109847550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -9.79803847550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -9.79803847550134, -9.79803847550134, -9.79803847550134, -9.79803847550134, -9.79803847550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -9.79803847550134, -9.79803847550134, -9.79803847550134, -8.71020660550134, -9.79803847550134, -9.79803847550134, -8.95413347550134, -8.95413347550134, -8.95413347550134, -9.79803847550134, -9.79803847550134, -9.79803847550134, -8.95413347550134, -8.95413347550134, -9.39109847550134]
								}, {
									"case":	2,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	3,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	4,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	5,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	6,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	7,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	8,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	9,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	10,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	11,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	12,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	13,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	14,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	15,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	16,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	17,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	18,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	19,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	20,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	21,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	22,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	23,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	24,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	25,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	26,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	27,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	28,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	29,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	30,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	31,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	32,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	33,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	34,
									"scores":	[-7.2252670055013386]
								}, {
									"case":	35,
									"scores":	[-7.2252670055013386]
								}]
						}]
				}, {
					"line":	365,
					"switches":	[{
							"switch":	69,
							"types":	[[], [], [], [], [312, 313, 314, 315, 316, 317, 318, 319], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	366,
							"begin_column":	29,
							"end_line":	366,
							"end_column":	29,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1848615908663]
								}, {
									"case":	2,
									"scores":	[-7.1848615908663]
								}, {
									"case":	3,
									"scores":	[-7.1848615908663]
								}, {
									"case":	4,
									"scores":	[-7.1848615908663]
								}, {
									"case":	5,
									"scores":	[-7.1848615908663]
								}, {
									"case":	6,
									"scores":	[-7.1848615908663]
								}, {
									"case":	7,
									"scores":	[-7.1848615908663]
								}, {
									"case":	8,
									"scores":	[-7.1848615908663]
								}, {
									"case":	9,
									"scores":	[-7.1848615908663]
								}, {
									"case":	10,
									"scores":	[-7.1848615908663]
								}, {
									"case":	11,
									"scores":	[-7.1848615908663]
								}, {
									"case":	12,
									"scores":	[-7.1848615908663]
								}, {
									"case":	13,
									"scores":	[-7.1848615908663]
								}, {
									"case":	14,
									"scores":	[-7.1848615908663]
								}, {
									"case":	15,
									"scores":	[-7.1848615908663]
								}, {
									"case":	16,
									"scores":	[-7.1848615908663]
								}, {
									"case":	17,
									"scores":	[-7.1848615908663]
								}, {
									"case":	18,
									"scores":	[-7.1848615908663]
								}, {
									"case":	19,
									"scores":	[-7.1848615908663]
								}, {
									"case":	20,
									"scores":	[-7.1848615908663]
								}, {
									"case":	21,
									"scores":	[-7.1848615908663]
								}, {
									"case":	22,
									"scores":	[-7.1848615908663]
								}, {
									"case":	23,
									"scores":	[-7.1848615908663]
								}, {
									"case":	24,
									"scores":	[-7.1848615908663]
								}, {
									"case":	25,
									"scores":	[-7.1848615908663]
								}, {
									"case":	26,
									"scores":	[-7.1848615908663]
								}, {
									"case":	27,
									"scores":	[-7.1848615908663]
								}, {
									"case":	28,
									"scores":	[-7.1848615908663]
								}, {
									"case":	29,
									"scores":	[-7.1848615908663]
								}, {
									"case":	30,
									"scores":	[-7.1848615908663]
								}, {
									"case":	31,
									"scores":	[-7.1848615908663]
								}, {
									"case":	32,
									"scores":	[-7.1848615908663]
								}, {
									"case":	33,
									"scores":	[-7.1848615908663]
								}, {
									"case":	34,
									"scores":	[-7.1848615908663]
								}, {
									"case":	35,
									"scores":	[-7.1848615908663]
								}, {
									"case":	36,
									"scores":	[-7.1848615908663]
								}, {
									"case":	37,
									"scores":	[-7.1848615908663]
								}, {
									"case":	38,
									"scores":	[-7.1848615908663]
								}, {
									"case":	39,
									"scores":	[-7.1848615908663]
								}, {
									"case":	40,
									"scores":	[-7.1848615908663]
								}, {
									"case":	41,
									"scores":	[-7.1848615908663]
								}, {
									"case":	42,
									"scores":	[-7.1848615908663]
								}, {
									"case":	43,
									"scores":	[-7.1848615908663]
								}, {
									"case":	44,
									"scores":	[-7.1848615908663]
								}, {
									"case":	45,
									"scores":	[-7.1848615908663]
								}, {
									"case":	46,
									"scores":	[-7.1848615908663]
								}, {
									"case":	47,
									"scores":	[-7.1848615908663]
								}, {
									"case":	48,
									"scores":	[-7.1848615908663]
								}, {
									"case":	49,
									"scores":	[-7.1848615908663]
								}, {
									"case":	50,
									"scores":	[-7.1848615908663]
								}, {
									"case":	51,
									"scores":	[-7.1848615908663]
								}, {
									"case":	52,
									"scores":	[-7.1848615908663]
								}, {
									"case":	53,
									"scores":	[-7.1848615908663]
								}, {
									"case":	54,
									"scores":	[-7.1848615908663]
								}, {
									"case":	55,
									"scores":	[-7.1848615908663]
								}, {
									"case":	56,
									"scores":	[-7.1848615908663]
								}, {
									"case":	57,
									"scores":	[-7.1848615908663]
								}, {
									"case":	58,
									"scores":	[-7.1848615908663]
								}, {
									"case":	59,
									"scores":	[-7.1848615908663]
								}, {
									"case":	60,
									"scores":	[-7.1848615908663]
								}, {
									"case":	61,
									"scores":	[-7.1848615908663]
								}, {
									"case":	62,
									"scores":	[-7.1848615908663]
								}, {
									"case":	63,
									"scores":	[-7.1848615908663]
								}, {
									"case":	64,
									"scores":	[-7.1848615908663]
								}, {
									"case":	65,
									"scores":	[-7.1848615908663]
								}, {
									"case":	66,
									"scores":	[-7.1848615908663]
								}, {
									"case":	67,
									"scores":	[-7.1848615908663]
								}, {
									"case":	68,
									"scores":	[-7.1848615908663]
								}, {
									"case":	69,
									"scores":	[-7.1848615908663]
								}, {
									"case":	70,
									"scores":	[-7.1848615908663]
								}, {
									"case":	71,
									"scores":	[-7.1848615908663]
								}, {
									"case":	72,
									"scores":	[-7.1848615908663]
								}, {
									"case":	73,
									"scores":	[-7.1848615908663]
								}, {
									"case":	74,
									"scores":	[-7.1848615908663]
								}, {
									"case":	75,
									"scores":	[-7.1848615908663]
								}, {
									"case":	76,
									"scores":	[-7.1848615908663]
								}, {
									"case":	77,
									"scores":	[-7.1848615908663]
								}, {
									"case":	78,
									"scores":	[-7.1848615908663]
								}, {
									"case":	79,
									"scores":	[-7.1848615908663]
								}, {
									"case":	80,
									"scores":	[-7.1848615908663]
								}, {
									"case":	81,
									"scores":	[-7.1848615908663]
								}, {
									"case":	82,
									"scores":	[-7.1848615908663]
								}, {
									"case":	83,
									"scores":	[-7.1848615908663]
								}, {
									"case":	84,
									"scores":	[-7.1848615908663]
								}, {
									"case":	85,
									"scores":	[-7.1848615908663]
								}, {
									"case":	86,
									"scores":	[-7.1848615908663]
								}, {
									"case":	87,
									"scores":	[-7.1848615908663]
								}, {
									"case":	88,
									"scores":	[-7.1848615908663]
								}, {
									"case":	89,
									"scores":	[-7.1848615908663]
								}, {
									"case":	90,
									"scores":	[-7.1848615908663]
								}, {
									"case":	91,
									"scores":	[-7.1848615908663]
								}, {
									"case":	92,
									"scores":	[-7.1848615908663]
								}, {
									"case":	93,
									"scores":	[-7.1848615908663]
								}, {
									"case":	94,
									"scores":	[-7.1848615908663]
								}, {
									"case":	95,
									"scores":	[-7.1848615908663]
								}, {
									"case":	96,
									"scores":	[-7.1848615908663]
								}, {
									"case":	97,
									"scores":	[-7.1848615908663]
								}, {
									"case":	98,
									"scores":	[-7.1848615908663]
								}, {
									"case":	99,
									"scores":	[-7.1848615908663]
								}, {
									"case":	100,
									"scores":	[-7.1848615908663]
								}, {
									"case":	101,
									"scores":	[-7.1848615908663]
								}, {
									"case":	102,
									"scores":	[-7.1848615908663]
								}, {
									"case":	103,
									"scores":	[-7.1848615908663]
								}, {
									"case":	104,
									"scores":	[-7.1848615908663]
								}, {
									"case":	105,
									"scores":	[-7.1848615908663]
								}, {
									"case":	106,
									"scores":	[-7.1848615908663]
								}, {
									"case":	107,
									"scores":	[-7.1848615908663]
								}, {
									"case":	108,
									"scores":	[-7.1848615908663]
								}, {
									"case":	109,
									"scores":	[-7.1848615908663]
								}, {
									"case":	110,
									"scores":	[-7.1848615908663]
								}, {
									"case":	111,
									"scores":	[-7.1848615908663]
								}, {
									"case":	112,
									"scores":	[-7.1848615908663]
								}, {
									"case":	113,
									"scores":	[-7.1848615908663]
								}, {
									"case":	114,
									"scores":	[-7.1848615908663]
								}, {
									"case":	115,
									"scores":	[-7.1848615908663]
								}, {
									"case":	116,
									"scores":	[-7.1848615908663]
								}, {
									"case":	117,
									"scores":	[-7.1848615908663]
								}, {
									"case":	118,
									"scores":	[-7.1848615908663]
								}, {
									"case":	119,
									"scores":	[-7.1848615908663]
								}, {
									"case":	120,
									"scores":	[-7.1848615908663]
								}, {
									"case":	121,
									"scores":	[-7.1848615908663]
								}, {
									"case":	122,
									"scores":	[-7.1848615908663]
								}, {
									"case":	123,
									"scores":	[-7.1848615908663]
								}, {
									"case":	124,
									"scores":	[-7.1848615908663]
								}, {
									"case":	125,
									"scores":	[-7.1848615908663]
								}, {
									"case":	126,
									"scores":	[-7.1848615908663]
								}, {
									"case":	127,
									"scores":	[-7.1848615908663]
								}, {
									"case":	128,
									"scores":	[-7.1848615908663]
								}, {
									"case":	129,
									"scores":	[-7.1848615908663]
								}, {
									"case":	130,
									"scores":	[-7.1848615908663]
								}, {
									"case":	131,
									"scores":	[-7.1848615908663]
								}, {
									"case":	132,
									"scores":	[-7.1848615908663]
								}, {
									"case":	133,
									"scores":	[-7.1848615908663]
								}, {
									"case":	134,
									"scores":	[-7.1848615908663]
								}, {
									"case":	135,
									"scores":	[-7.1848615908663]
								}, {
									"case":	136,
									"scores":	[-7.1848615908663]
								}, {
									"case":	137,
									"scores":	[-7.1848615908663]
								}, {
									"case":	138,
									"scores":	[-7.1848615908663]
								}, {
									"case":	139,
									"scores":	[-7.1848615908663]
								}, {
									"case":	140,
									"scores":	[-7.1848615908663]
								}, {
									"case":	141,
									"scores":	[-7.1848615908663]
								}, {
									"case":	142,
									"scores":	[-7.1848615908663]
								}, {
									"case":	143,
									"scores":	[-7.1848615908663]
								}, {
									"case":	144,
									"scores":	[-7.1848615908663]
								}, {
									"case":	145,
									"scores":	[-7.1848615908663]
								}, {
									"case":	146,
									"scores":	[-7.1848615908663]
								}, {
									"case":	147,
									"scores":	[-7.1848615908663]
								}, {
									"case":	148,
									"scores":	[-7.1848615908663]
								}, {
									"case":	149,
									"scores":	[-7.1848615908663]
								}, {
									"case":	150,
									"scores":	[-7.1848615908663]
								}, {
									"case":	151,
									"scores":	[-7.1848615908663]
								}, {
									"case":	152,
									"scores":	[-7.1848615908663]
								}, {
									"case":	153,
									"scores":	[-7.1848615908663]
								}, {
									"case":	154,
									"scores":	[-7.1848615908663]
								}, {
									"case":	155,
									"scores":	[-7.1848615908663]
								}, {
									"case":	156,
									"scores":	[-7.1848615908663]
								}, {
									"case":	157,
									"scores":	[-7.1848615908663]
								}, {
									"case":	158,
									"scores":	[-7.1848615908663]
								}, {
									"case":	159,
									"scores":	[-7.1848615908663]
								}, {
									"case":	160,
									"scores":	[-7.1848615908663]
								}, {
									"case":	161,
									"scores":	[-7.1848615908663]
								}, {
									"case":	162,
									"scores":	[-7.1848615908663]
								}, {
									"case":	163,
									"scores":	[-7.1848615908663]
								}, {
									"case":	164,
									"scores":	[-7.1848615908663]
								}, {
									"case":	165,
									"scores":	[-7.1848615908663]
								}, {
									"case":	166,
									"scores":	[-7.1848615908663]
								}, {
									"case":	167,
									"scores":	[-7.1848615908663]
								}, {
									"case":	168,
									"scores":	[-7.1848615908663]
								}, {
									"case":	169,
									"scores":	[-7.1848615908663]
								}, {
									"case":	170,
									"scores":	[-7.1848615908663]
								}, {
									"case":	171,
									"scores":	[-7.1848615908663]
								}, {
									"case":	172,
									"scores":	[-7.1848615908663]
								}, {
									"case":	173,
									"scores":	[-7.1848615908663]
								}, {
									"case":	174,
									"scores":	[-7.1848615908663]
								}, {
									"case":	175,
									"scores":	[-7.1848615908663]
								}, {
									"case":	176,
									"scores":	[-7.1848615908663]
								}, {
									"case":	177,
									"scores":	[-7.1848615908663]
								}, {
									"case":	178,
									"scores":	[-7.1848615908663]
								}, {
									"case":	179,
									"scores":	[-7.1848615908663]
								}, {
									"case":	180,
									"scores":	[-7.1848615908663]
								}, {
									"case":	181,
									"scores":	[-7.1848615908663]
								}, {
									"case":	182,
									"scores":	[-7.1848615908663]
								}, {
									"case":	183,
									"scores":	[-7.1848615908663]
								}, {
									"case":	184,
									"scores":	[-7.1848615908663]
								}, {
									"case":	185,
									"scores":	[-7.1848615908663]
								}, {
									"case":	186,
									"scores":	[-7.1848615908663]
								}, {
									"case":	187,
									"scores":	[-7.1848615908663]
								}, {
									"case":	188,
									"scores":	[-7.1848615908663]
								}, {
									"case":	189,
									"scores":	[-7.1848615908663]
								}, {
									"case":	190,
									"scores":	[-7.1848615908663]
								}, {
									"case":	191,
									"scores":	[-7.1848615908663]
								}, {
									"case":	192,
									"scores":	[-7.1848615908663]
								}, {
									"case":	193,
									"scores":	[-7.1848615908663]
								}, {
									"case":	194,
									"scores":	[-7.1848615908663]
								}, {
									"case":	195,
									"scores":	[-7.1848615908663]
								}, {
									"case":	196,
									"scores":	[-7.1848615908663]
								}, {
									"case":	197,
									"scores":	[-7.1848615908663]
								}, {
									"case":	198,
									"scores":	[-7.1848615908663]
								}, {
									"case":	199,
									"scores":	[-7.1848615908663]
								}, {
									"case":	200,
									"scores":	[-7.1848615908663]
								}, {
									"case":	201,
									"scores":	[-7.1848615908663]
								}, {
									"case":	202,
									"scores":	[-7.1848615908663]
								}, {
									"case":	203,
									"scores":	[-7.1848615908663]
								}, {
									"case":	204,
									"scores":	[-7.1848615908663]
								}, {
									"case":	205,
									"scores":	[-7.1848615908663]
								}, {
									"case":	206,
									"scores":	[-7.1848615908663]
								}, {
									"case":	207,
									"scores":	[-7.1848615908663]
								}, {
									"case":	208,
									"scores":	[-7.1848615908663]
								}, {
									"case":	209,
									"scores":	[-7.1848615908663]
								}, {
									"case":	210,
									"scores":	[-7.1848615908663]
								}, {
									"case":	211,
									"scores":	[-7.1848615908663]
								}, {
									"case":	212,
									"scores":	[-7.1848615908663]
								}, {
									"case":	213,
									"scores":	[-7.1848615908663]
								}, {
									"case":	214,
									"scores":	[-7.1848615908663]
								}, {
									"case":	215,
									"scores":	[-7.1848615908663]
								}, {
									"case":	216,
									"scores":	[-7.1848615908663]
								}, {
									"case":	217,
									"scores":	[-7.1848615908663]
								}, {
									"case":	218,
									"scores":	[-7.1848615908663]
								}, {
									"case":	219,
									"scores":	[-7.1848615908663]
								}, {
									"case":	220,
									"scores":	[-7.1848615908663]
								}, {
									"case":	221,
									"scores":	[-7.1848615908663]
								}, {
									"case":	222,
									"scores":	[-7.1848615908663]
								}, {
									"case":	223,
									"scores":	[-7.1848615908663]
								}, {
									"case":	224,
									"scores":	[-7.1848615908663]
								}, {
									"case":	225,
									"scores":	[-7.1848615908663]
								}, {
									"case":	226,
									"scores":	[-7.1848615908663]
								}, {
									"case":	227,
									"scores":	[-7.1848615908663]
								}, {
									"case":	228,
									"scores":	[-7.1848615908663]
								}, {
									"case":	229,
									"scores":	[-7.1848615908663]
								}, {
									"case":	230,
									"scores":	[-7.1848615908663]
								}, {
									"case":	231,
									"scores":	[-7.1848615908663]
								}, {
									"case":	232,
									"scores":	[-7.1848615908663]
								}, {
									"case":	233,
									"scores":	[-7.1848615908663]
								}, {
									"case":	234,
									"scores":	[-7.1848615908663]
								}, {
									"case":	235,
									"scores":	[-7.1848615908663]
								}, {
									"case":	236,
									"scores":	[-7.1848615908663]
								}, {
									"case":	237,
									"scores":	[-7.1848615908663]
								}, {
									"case":	238,
									"scores":	[-7.1848615908663]
								}, {
									"case":	239,
									"scores":	[-7.1848615908663]
								}, {
									"case":	240,
									"scores":	[-7.1848615908663]
								}, {
									"case":	241,
									"scores":	[-7.1848615908663]
								}, {
									"case":	242,
									"scores":	[-7.1848615908663]
								}, {
									"case":	243,
									"scores":	[-7.1848615908663]
								}, {
									"case":	244,
									"scores":	[-7.1848615908663]
								}, {
									"case":	245,
									"scores":	[-7.1848615908663]
								}, {
									"case":	246,
									"scores":	[-7.1848615908663]
								}, {
									"case":	247,
									"scores":	[-7.1848615908663]
								}, {
									"case":	248,
									"scores":	[-7.1848615908663]
								}, {
									"case":	249,
									"scores":	[-7.1848615908663]
								}, {
									"case":	250,
									"scores":	[-7.1848615908663]
								}, {
									"case":	251,
									"scores":	[-7.1848615908663]
								}, {
									"case":	252,
									"scores":	[-7.1848615908663]
								}, {
									"case":	253,
									"scores":	[-7.1848615908663]
								}, {
									"case":	254,
									"scores":	[-7.1848615908663]
								}, {
									"case":	255,
									"scores":	[-7.1848615908663]
								}, {
									"case":	256,
									"scores":	[-7.1848615908663]
								}, {
									"case":	257,
									"scores":	[-7.1848615908663]
								}, {
									"case":	258,
									"scores":	[-7.1848615908663]
								}, {
									"case":	259,
									"scores":	[-7.1848615908663]
								}, {
									"case":	260,
									"scores":	[-7.1848615908663]
								}, {
									"case":	261,
									"scores":	[-7.1848615908663]
								}, {
									"case":	262,
									"scores":	[-7.1848615908663]
								}, {
									"case":	263,
									"scores":	[-7.1848615908663]
								}, {
									"case":	264,
									"scores":	[-7.1848615908663]
								}, {
									"case":	265,
									"scores":	[-7.1848615908663]
								}, {
									"case":	266,
									"scores":	[-7.1848615908663]
								}, {
									"case":	267,
									"scores":	[-7.1848615908663]
								}, {
									"case":	268,
									"scores":	[-7.1848615908663]
								}, {
									"case":	269,
									"scores":	[-7.1848615908663]
								}, {
									"case":	270,
									"scores":	[-7.1848615908663]
								}, {
									"case":	271,
									"scores":	[-7.1848615908663]
								}, {
									"case":	272,
									"scores":	[-7.1848615908663]
								}, {
									"case":	273,
									"scores":	[-7.1848615908663]
								}, {
									"case":	274,
									"scores":	[-7.1848615908663]
								}, {
									"case":	275,
									"scores":	[-7.1848615908663]
								}, {
									"case":	276,
									"scores":	[-7.1848615908663]
								}, {
									"case":	277,
									"scores":	[-7.1848615908663]
								}, {
									"case":	278,
									"scores":	[-7.1848615908663]
								}, {
									"case":	279,
									"scores":	[-7.1848615908663]
								}, {
									"case":	280,
									"scores":	[-7.1848615908663]
								}, {
									"case":	281,
									"scores":	[-7.1848615908663]
								}, {
									"case":	282,
									"scores":	[-7.1848615908663]
								}, {
									"case":	283,
									"scores":	[-7.1848615908663]
								}, {
									"case":	284,
									"scores":	[-7.1848615908663]
								}, {
									"case":	285,
									"scores":	[-7.1848615908663]
								}, {
									"case":	286,
									"scores":	[-7.1848615908663]
								}, {
									"case":	287,
									"scores":	[-7.1848615908663]
								}, {
									"case":	288,
									"scores":	[-7.1848615908663]
								}, {
									"case":	289,
									"scores":	[-7.1848615908663]
								}, {
									"case":	290,
									"scores":	[-7.1848615908663]
								}, {
									"case":	291,
									"scores":	[-7.1848615908663]
								}, {
									"case":	292,
									"scores":	[-7.1848615908663]
								}, {
									"case":	293,
									"scores":	[-7.1848615908663]
								}, {
									"case":	294,
									"scores":	[-7.1848615908663]
								}, {
									"case":	295,
									"scores":	[-7.1848615908663]
								}, {
									"case":	296,
									"scores":	[-7.1848615908663]
								}, {
									"case":	297,
									"scores":	[-7.1848615908663]
								}, {
									"case":	298,
									"scores":	[-7.1848615908663]
								}, {
									"case":	299,
									"scores":	[-7.1848615908663]
								}, {
									"case":	300,
									"scores":	[-7.1848615908663]
								}, {
									"case":	301,
									"scores":	[-7.1848615908663]
								}, {
									"case":	302,
									"scores":	[-7.1848615908663]
								}, {
									"case":	303,
									"scores":	[-7.1848615908663]
								}, {
									"case":	304,
									"scores":	[-7.1848615908663]
								}, {
									"case":	305,
									"scores":	[-7.1848615908663]
								}, {
									"case":	306,
									"scores":	[-7.1848615908663]
								}, {
									"case":	307,
									"scores":	[-7.1848615908663]
								}, {
									"case":	308,
									"scores":	[-7.1848615908663]
								}, {
									"case":	309,
									"scores":	[-7.1848615908663]
								}, {
									"case":	310,
									"scores":	[-7.1848615908663]
								}, {
									"case":	311,
									"scores":	[-7.1848615908663]
								}, {
									"case":	312,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}, {
									"case":	313,
									"scores":	[-8.0495149148663, -9.3723301655663, -9.1266986808663, -9.2175662808663, -9.2175662808663, -7.9880716808663, -9.3039615208663, -8.8120775208663, -8.4441826808663, -9.4081982808663, -9.4081982808663, -9.3069889808663, -9.2175662808663, -9.4081982808663, -9.4081982808663, -9.4081982808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.4081982808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.4081982808663, -9.4081982808663, -9.4081982808663, -9.4081982808663, -9.4081982808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.4081982808663, -9.4081982808663, -9.4081982808663, -8.7614552808663, -9.4081982808663, -9.4081982808663, -9.2175662808663, -9.2175662808663, -9.2175662808663, -9.4081982808663, -9.4081982808663, -9.4081982808663, -9.2175662808663, -9.2175662808663, -9.3069889808663]
								}, {
									"case":	314,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}, {
									"case":	315,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}, {
									"case":	316,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}, {
									"case":	317,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}, {
									"case":	318,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}, {
									"case":	319,
									"scores":	[-10.3122967148663, -11.6351119655663, -11.3894804808663, -11.4803480808663, -11.4803480808663, -10.2508534808663, -11.5667433208663, -11.0748593208663, -10.7069644808663, -11.6709800808663, -11.6709800808663, -11.5697707808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.0242370808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.4803480808663, -11.6709800808663, -11.6709800808663, -11.6709800808663, -11.4803480808663, -11.4803480808663, -11.5697707808663]
								}]
						}, {
							"switch":	70,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	366,
							"begin_column":	31,
							"end_line":	366,
							"end_column":	50,
							"patch_codes":	["if (!__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    con->http_status = 200;\n", "{\n}\n", "con->http_status = (-1)", "con->http_status = (0 * have_content_length)", "con->http_status = (0 * i)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (con != 0)", "con->http_status = (con == 0)", "con->http_status = (have_content_length != 0)", "con->http_status = (have_content_length * i)", "con->http_status = (have_content_length + 0)", "con->http_status = (have_content_length - 0)", "con->http_status = (have_content_length == 0)", "con->http_status = (have_content_length)", "con->http_status = (i != 0)", "con->http_status = (i != have_content_length)", "con->http_status = (i * have_content_length)", "con->http_status = (i + 0)", "con->http_status = (i + have_content_length)", "con->http_status = (i - 0)", "con->http_status = (i - have_content_length)", "con->http_status = (i == 0)", "con->http_status = (i == have_content_length)", "con->http_status = (p != 0)", "con->http_status = (p == 0)", "con->http_status = (sess != 0)", "con->http_status = (sess == 0)", "con->http_status = (srv != 0)", "con->http_status = (srv == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.0892728538663, -9.3523787538663, -9.2465873808663, -8.6322230808663, -8.6322230808663, -7.6174625108663, -9.5113688808663, -8.9700758808663, -7.8613893808663, -9.4761280808663, -9.4761280808663, -9.0691880808663, -8.6322230808663, -9.4761280808663, -9.4761280808663, -9.4761280808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -9.4761280808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -9.4761280808663, -9.4761280808663, -9.4761280808663, -9.4761280808663, -9.4761280808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -9.4761280808663, -9.4761280808663, -9.4761280808663, -8.3882962108663, -9.4761280808663, -9.4761280808663, -8.6322230808663, -8.6322230808663, -8.6322230808663, -9.4761280808663, -9.4761280808663, -9.4761280808663, -8.6322230808663, -8.6322230808663, -9.0691880808663]
								}, {
									"case":	2,
									"scores":	[-7.1848615908663]
								}, {
									"case":	3,
									"scores":	[-7.1848615908663]
								}, {
									"case":	4,
									"scores":	[-7.1848615908663]
								}, {
									"case":	5,
									"scores":	[-7.1848615908663]
								}, {
									"case":	6,
									"scores":	[-7.1848615908663]
								}, {
									"case":	7,
									"scores":	[-7.1848615908663]
								}, {
									"case":	8,
									"scores":	[-7.1848615908663]
								}, {
									"case":	9,
									"scores":	[-7.1848615908663]
								}, {
									"case":	10,
									"scores":	[-7.1848615908663]
								}, {
									"case":	11,
									"scores":	[-7.1848615908663]
								}, {
									"case":	12,
									"scores":	[-7.1848615908663]
								}, {
									"case":	13,
									"scores":	[-7.1848615908663]
								}, {
									"case":	14,
									"scores":	[-7.1848615908663]
								}, {
									"case":	15,
									"scores":	[-7.1848615908663]
								}, {
									"case":	16,
									"scores":	[-7.1848615908663]
								}, {
									"case":	17,
									"scores":	[-7.1848615908663]
								}, {
									"case":	18,
									"scores":	[-7.1848615908663]
								}, {
									"case":	19,
									"scores":	[-7.1848615908663]
								}, {
									"case":	20,
									"scores":	[-7.1848615908663]
								}, {
									"case":	21,
									"scores":	[-7.1848615908663]
								}, {
									"case":	22,
									"scores":	[-7.1848615908663]
								}, {
									"case":	23,
									"scores":	[-7.1848615908663]
								}, {
									"case":	24,
									"scores":	[-7.1848615908663]
								}, {
									"case":	25,
									"scores":	[-7.1848615908663]
								}, {
									"case":	26,
									"scores":	[-7.1848615908663]
								}, {
									"case":	27,
									"scores":	[-7.1848615908663]
								}, {
									"case":	28,
									"scores":	[-7.1848615908663]
								}, {
									"case":	29,
									"scores":	[-7.1848615908663]
								}, {
									"case":	30,
									"scores":	[-7.1848615908663]
								}, {
									"case":	31,
									"scores":	[-7.1848615908663]
								}, {
									"case":	32,
									"scores":	[-7.1848615908663]
								}, {
									"case":	33,
									"scores":	[-7.1848615908663]
								}, {
									"case":	34,
									"scores":	[-7.1848615908663]
								}, {
									"case":	35,
									"scores":	[-7.1848615908663]
								}]
						}]
				}, {
					"line":	365,
					"switches":	[{
							"switch":	67,
							"types":	[[], [], [], [], [312, 313, 314, 315, 316, 317, 318, 319], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	366,
							"begin_column":	2,
							"end_line":	366,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.20506429818382]
								}, {
									"case":	2,
									"scores":	[-7.20506429818382]
								}, {
									"case":	3,
									"scores":	[-7.20506429818382]
								}, {
									"case":	4,
									"scores":	[-7.20506429818382]
								}, {
									"case":	5,
									"scores":	[-7.20506429818382]
								}, {
									"case":	6,
									"scores":	[-7.20506429818382]
								}, {
									"case":	7,
									"scores":	[-7.20506429818382]
								}, {
									"case":	8,
									"scores":	[-7.20506429818382]
								}, {
									"case":	9,
									"scores":	[-7.20506429818382]
								}, {
									"case":	10,
									"scores":	[-7.20506429818382]
								}, {
									"case":	11,
									"scores":	[-7.20506429818382]
								}, {
									"case":	12,
									"scores":	[-7.20506429818382]
								}, {
									"case":	13,
									"scores":	[-7.20506429818382]
								}, {
									"case":	14,
									"scores":	[-7.20506429818382]
								}, {
									"case":	15,
									"scores":	[-7.20506429818382]
								}, {
									"case":	16,
									"scores":	[-7.20506429818382]
								}, {
									"case":	17,
									"scores":	[-7.20506429818382]
								}, {
									"case":	18,
									"scores":	[-7.20506429818382]
								}, {
									"case":	19,
									"scores":	[-7.20506429818382]
								}, {
									"case":	20,
									"scores":	[-7.20506429818382]
								}, {
									"case":	21,
									"scores":	[-7.20506429818382]
								}, {
									"case":	22,
									"scores":	[-7.20506429818382]
								}, {
									"case":	23,
									"scores":	[-7.20506429818382]
								}, {
									"case":	24,
									"scores":	[-7.20506429818382]
								}, {
									"case":	25,
									"scores":	[-7.20506429818382]
								}, {
									"case":	26,
									"scores":	[-7.20506429818382]
								}, {
									"case":	27,
									"scores":	[-7.20506429818382]
								}, {
									"case":	28,
									"scores":	[-7.20506429818382]
								}, {
									"case":	29,
									"scores":	[-7.20506429818382]
								}, {
									"case":	30,
									"scores":	[-7.20506429818382]
								}, {
									"case":	31,
									"scores":	[-7.20506429818382]
								}, {
									"case":	32,
									"scores":	[-7.20506429818382]
								}, {
									"case":	33,
									"scores":	[-7.20506429818382]
								}, {
									"case":	34,
									"scores":	[-7.20506429818382]
								}, {
									"case":	35,
									"scores":	[-7.20506429818382]
								}, {
									"case":	36,
									"scores":	[-7.20506429818382]
								}, {
									"case":	37,
									"scores":	[-7.20506429818382]
								}, {
									"case":	38,
									"scores":	[-7.20506429818382]
								}, {
									"case":	39,
									"scores":	[-7.20506429818382]
								}, {
									"case":	40,
									"scores":	[-7.20506429818382]
								}, {
									"case":	41,
									"scores":	[-7.20506429818382]
								}, {
									"case":	42,
									"scores":	[-7.20506429818382]
								}, {
									"case":	43,
									"scores":	[-7.20506429818382]
								}, {
									"case":	44,
									"scores":	[-7.20506429818382]
								}, {
									"case":	45,
									"scores":	[-7.20506429818382]
								}, {
									"case":	46,
									"scores":	[-7.20506429818382]
								}, {
									"case":	47,
									"scores":	[-7.20506429818382]
								}, {
									"case":	48,
									"scores":	[-7.20506429818382]
								}, {
									"case":	49,
									"scores":	[-7.20506429818382]
								}, {
									"case":	50,
									"scores":	[-7.20506429818382]
								}, {
									"case":	51,
									"scores":	[-7.20506429818382]
								}, {
									"case":	52,
									"scores":	[-7.20506429818382]
								}, {
									"case":	53,
									"scores":	[-7.20506429818382]
								}, {
									"case":	54,
									"scores":	[-7.20506429818382]
								}, {
									"case":	55,
									"scores":	[-7.20506429818382]
								}, {
									"case":	56,
									"scores":	[-7.20506429818382]
								}, {
									"case":	57,
									"scores":	[-7.20506429818382]
								}, {
									"case":	58,
									"scores":	[-7.20506429818382]
								}, {
									"case":	59,
									"scores":	[-7.20506429818382]
								}, {
									"case":	60,
									"scores":	[-7.20506429818382]
								}, {
									"case":	61,
									"scores":	[-7.20506429818382]
								}, {
									"case":	62,
									"scores":	[-7.20506429818382]
								}, {
									"case":	63,
									"scores":	[-7.20506429818382]
								}, {
									"case":	64,
									"scores":	[-7.20506429818382]
								}, {
									"case":	65,
									"scores":	[-7.20506429818382]
								}, {
									"case":	66,
									"scores":	[-7.20506429818382]
								}, {
									"case":	67,
									"scores":	[-7.20506429818382]
								}, {
									"case":	68,
									"scores":	[-7.20506429818382]
								}, {
									"case":	69,
									"scores":	[-7.20506429818382]
								}, {
									"case":	70,
									"scores":	[-7.20506429818382]
								}, {
									"case":	71,
									"scores":	[-7.20506429818382]
								}, {
									"case":	72,
									"scores":	[-7.20506429818382]
								}, {
									"case":	73,
									"scores":	[-7.20506429818382]
								}, {
									"case":	74,
									"scores":	[-7.20506429818382]
								}, {
									"case":	75,
									"scores":	[-7.20506429818382]
								}, {
									"case":	76,
									"scores":	[-7.20506429818382]
								}, {
									"case":	77,
									"scores":	[-7.20506429818382]
								}, {
									"case":	78,
									"scores":	[-7.20506429818382]
								}, {
									"case":	79,
									"scores":	[-7.20506429818382]
								}, {
									"case":	80,
									"scores":	[-7.20506429818382]
								}, {
									"case":	81,
									"scores":	[-7.20506429818382]
								}, {
									"case":	82,
									"scores":	[-7.20506429818382]
								}, {
									"case":	83,
									"scores":	[-7.20506429818382]
								}, {
									"case":	84,
									"scores":	[-7.20506429818382]
								}, {
									"case":	85,
									"scores":	[-7.20506429818382]
								}, {
									"case":	86,
									"scores":	[-7.20506429818382]
								}, {
									"case":	87,
									"scores":	[-7.20506429818382]
								}, {
									"case":	88,
									"scores":	[-7.20506429818382]
								}, {
									"case":	89,
									"scores":	[-7.20506429818382]
								}, {
									"case":	90,
									"scores":	[-7.20506429818382]
								}, {
									"case":	91,
									"scores":	[-7.20506429818382]
								}, {
									"case":	92,
									"scores":	[-7.20506429818382]
								}, {
									"case":	93,
									"scores":	[-7.20506429818382]
								}, {
									"case":	94,
									"scores":	[-7.20506429818382]
								}, {
									"case":	95,
									"scores":	[-7.20506429818382]
								}, {
									"case":	96,
									"scores":	[-7.20506429818382]
								}, {
									"case":	97,
									"scores":	[-7.20506429818382]
								}, {
									"case":	98,
									"scores":	[-7.20506429818382]
								}, {
									"case":	99,
									"scores":	[-7.20506429818382]
								}, {
									"case":	100,
									"scores":	[-7.20506429818382]
								}, {
									"case":	101,
									"scores":	[-7.20506429818382]
								}, {
									"case":	102,
									"scores":	[-7.20506429818382]
								}, {
									"case":	103,
									"scores":	[-7.20506429818382]
								}, {
									"case":	104,
									"scores":	[-7.20506429818382]
								}, {
									"case":	105,
									"scores":	[-7.20506429818382]
								}, {
									"case":	106,
									"scores":	[-7.20506429818382]
								}, {
									"case":	107,
									"scores":	[-7.20506429818382]
								}, {
									"case":	108,
									"scores":	[-7.20506429818382]
								}, {
									"case":	109,
									"scores":	[-7.20506429818382]
								}, {
									"case":	110,
									"scores":	[-7.20506429818382]
								}, {
									"case":	111,
									"scores":	[-7.20506429818382]
								}, {
									"case":	112,
									"scores":	[-7.20506429818382]
								}, {
									"case":	113,
									"scores":	[-7.20506429818382]
								}, {
									"case":	114,
									"scores":	[-7.20506429818382]
								}, {
									"case":	115,
									"scores":	[-7.20506429818382]
								}, {
									"case":	116,
									"scores":	[-7.20506429818382]
								}, {
									"case":	117,
									"scores":	[-7.20506429818382]
								}, {
									"case":	118,
									"scores":	[-7.20506429818382]
								}, {
									"case":	119,
									"scores":	[-7.20506429818382]
								}, {
									"case":	120,
									"scores":	[-7.20506429818382]
								}, {
									"case":	121,
									"scores":	[-7.20506429818382]
								}, {
									"case":	122,
									"scores":	[-7.20506429818382]
								}, {
									"case":	123,
									"scores":	[-7.20506429818382]
								}, {
									"case":	124,
									"scores":	[-7.20506429818382]
								}, {
									"case":	125,
									"scores":	[-7.20506429818382]
								}, {
									"case":	126,
									"scores":	[-7.20506429818382]
								}, {
									"case":	127,
									"scores":	[-7.20506429818382]
								}, {
									"case":	128,
									"scores":	[-7.20506429818382]
								}, {
									"case":	129,
									"scores":	[-7.20506429818382]
								}, {
									"case":	130,
									"scores":	[-7.20506429818382]
								}, {
									"case":	131,
									"scores":	[-7.20506429818382]
								}, {
									"case":	132,
									"scores":	[-7.20506429818382]
								}, {
									"case":	133,
									"scores":	[-7.20506429818382]
								}, {
									"case":	134,
									"scores":	[-7.20506429818382]
								}, {
									"case":	135,
									"scores":	[-7.20506429818382]
								}, {
									"case":	136,
									"scores":	[-7.20506429818382]
								}, {
									"case":	137,
									"scores":	[-7.20506429818382]
								}, {
									"case":	138,
									"scores":	[-7.20506429818382]
								}, {
									"case":	139,
									"scores":	[-7.20506429818382]
								}, {
									"case":	140,
									"scores":	[-7.20506429818382]
								}, {
									"case":	141,
									"scores":	[-7.20506429818382]
								}, {
									"case":	142,
									"scores":	[-7.20506429818382]
								}, {
									"case":	143,
									"scores":	[-7.20506429818382]
								}, {
									"case":	144,
									"scores":	[-7.20506429818382]
								}, {
									"case":	145,
									"scores":	[-7.20506429818382]
								}, {
									"case":	146,
									"scores":	[-7.20506429818382]
								}, {
									"case":	147,
									"scores":	[-7.20506429818382]
								}, {
									"case":	148,
									"scores":	[-7.20506429818382]
								}, {
									"case":	149,
									"scores":	[-7.20506429818382]
								}, {
									"case":	150,
									"scores":	[-7.20506429818382]
								}, {
									"case":	151,
									"scores":	[-7.20506429818382]
								}, {
									"case":	152,
									"scores":	[-7.20506429818382]
								}, {
									"case":	153,
									"scores":	[-7.20506429818382]
								}, {
									"case":	154,
									"scores":	[-7.20506429818382]
								}, {
									"case":	155,
									"scores":	[-7.20506429818382]
								}, {
									"case":	156,
									"scores":	[-7.20506429818382]
								}, {
									"case":	157,
									"scores":	[-7.20506429818382]
								}, {
									"case":	158,
									"scores":	[-7.20506429818382]
								}, {
									"case":	159,
									"scores":	[-7.20506429818382]
								}, {
									"case":	160,
									"scores":	[-7.20506429818382]
								}, {
									"case":	161,
									"scores":	[-7.20506429818382]
								}, {
									"case":	162,
									"scores":	[-7.20506429818382]
								}, {
									"case":	163,
									"scores":	[-7.20506429818382]
								}, {
									"case":	164,
									"scores":	[-7.20506429818382]
								}, {
									"case":	165,
									"scores":	[-7.20506429818382]
								}, {
									"case":	166,
									"scores":	[-7.20506429818382]
								}, {
									"case":	167,
									"scores":	[-7.20506429818382]
								}, {
									"case":	168,
									"scores":	[-7.20506429818382]
								}, {
									"case":	169,
									"scores":	[-7.20506429818382]
								}, {
									"case":	170,
									"scores":	[-7.20506429818382]
								}, {
									"case":	171,
									"scores":	[-7.20506429818382]
								}, {
									"case":	172,
									"scores":	[-7.20506429818382]
								}, {
									"case":	173,
									"scores":	[-7.20506429818382]
								}, {
									"case":	174,
									"scores":	[-7.20506429818382]
								}, {
									"case":	175,
									"scores":	[-7.20506429818382]
								}, {
									"case":	176,
									"scores":	[-7.20506429818382]
								}, {
									"case":	177,
									"scores":	[-7.20506429818382]
								}, {
									"case":	178,
									"scores":	[-7.20506429818382]
								}, {
									"case":	179,
									"scores":	[-7.20506429818382]
								}, {
									"case":	180,
									"scores":	[-7.20506429818382]
								}, {
									"case":	181,
									"scores":	[-7.20506429818382]
								}, {
									"case":	182,
									"scores":	[-7.20506429818382]
								}, {
									"case":	183,
									"scores":	[-7.20506429818382]
								}, {
									"case":	184,
									"scores":	[-7.20506429818382]
								}, {
									"case":	185,
									"scores":	[-7.20506429818382]
								}, {
									"case":	186,
									"scores":	[-7.20506429818382]
								}, {
									"case":	187,
									"scores":	[-7.20506429818382]
								}, {
									"case":	188,
									"scores":	[-7.20506429818382]
								}, {
									"case":	189,
									"scores":	[-7.20506429818382]
								}, {
									"case":	190,
									"scores":	[-7.20506429818382]
								}, {
									"case":	191,
									"scores":	[-7.20506429818382]
								}, {
									"case":	192,
									"scores":	[-7.20506429818382]
								}, {
									"case":	193,
									"scores":	[-7.20506429818382]
								}, {
									"case":	194,
									"scores":	[-7.20506429818382]
								}, {
									"case":	195,
									"scores":	[-7.20506429818382]
								}, {
									"case":	196,
									"scores":	[-7.20506429818382]
								}, {
									"case":	197,
									"scores":	[-7.20506429818382]
								}, {
									"case":	198,
									"scores":	[-7.20506429818382]
								}, {
									"case":	199,
									"scores":	[-7.20506429818382]
								}, {
									"case":	200,
									"scores":	[-7.20506429818382]
								}, {
									"case":	201,
									"scores":	[-7.20506429818382]
								}, {
									"case":	202,
									"scores":	[-7.20506429818382]
								}, {
									"case":	203,
									"scores":	[-7.20506429818382]
								}, {
									"case":	204,
									"scores":	[-7.20506429818382]
								}, {
									"case":	205,
									"scores":	[-7.20506429818382]
								}, {
									"case":	206,
									"scores":	[-7.20506429818382]
								}, {
									"case":	207,
									"scores":	[-7.20506429818382]
								}, {
									"case":	208,
									"scores":	[-7.20506429818382]
								}, {
									"case":	209,
									"scores":	[-7.20506429818382]
								}, {
									"case":	210,
									"scores":	[-7.20506429818382]
								}, {
									"case":	211,
									"scores":	[-7.20506429818382]
								}, {
									"case":	212,
									"scores":	[-7.20506429818382]
								}, {
									"case":	213,
									"scores":	[-7.20506429818382]
								}, {
									"case":	214,
									"scores":	[-7.20506429818382]
								}, {
									"case":	215,
									"scores":	[-7.20506429818382]
								}, {
									"case":	216,
									"scores":	[-7.20506429818382]
								}, {
									"case":	217,
									"scores":	[-7.20506429818382]
								}, {
									"case":	218,
									"scores":	[-7.20506429818382]
								}, {
									"case":	219,
									"scores":	[-7.20506429818382]
								}, {
									"case":	220,
									"scores":	[-7.20506429818382]
								}, {
									"case":	221,
									"scores":	[-7.20506429818382]
								}, {
									"case":	222,
									"scores":	[-7.20506429818382]
								}, {
									"case":	223,
									"scores":	[-7.20506429818382]
								}, {
									"case":	224,
									"scores":	[-7.20506429818382]
								}, {
									"case":	225,
									"scores":	[-7.20506429818382]
								}, {
									"case":	226,
									"scores":	[-7.20506429818382]
								}, {
									"case":	227,
									"scores":	[-7.20506429818382]
								}, {
									"case":	228,
									"scores":	[-7.20506429818382]
								}, {
									"case":	229,
									"scores":	[-7.20506429818382]
								}, {
									"case":	230,
									"scores":	[-7.20506429818382]
								}, {
									"case":	231,
									"scores":	[-7.20506429818382]
								}, {
									"case":	232,
									"scores":	[-7.20506429818382]
								}, {
									"case":	233,
									"scores":	[-7.20506429818382]
								}, {
									"case":	234,
									"scores":	[-7.20506429818382]
								}, {
									"case":	235,
									"scores":	[-7.20506429818382]
								}, {
									"case":	236,
									"scores":	[-7.20506429818382]
								}, {
									"case":	237,
									"scores":	[-7.20506429818382]
								}, {
									"case":	238,
									"scores":	[-7.20506429818382]
								}, {
									"case":	239,
									"scores":	[-7.20506429818382]
								}, {
									"case":	240,
									"scores":	[-7.20506429818382]
								}, {
									"case":	241,
									"scores":	[-7.20506429818382]
								}, {
									"case":	242,
									"scores":	[-7.20506429818382]
								}, {
									"case":	243,
									"scores":	[-7.20506429818382]
								}, {
									"case":	244,
									"scores":	[-7.20506429818382]
								}, {
									"case":	245,
									"scores":	[-7.20506429818382]
								}, {
									"case":	246,
									"scores":	[-7.20506429818382]
								}, {
									"case":	247,
									"scores":	[-7.20506429818382]
								}, {
									"case":	248,
									"scores":	[-7.20506429818382]
								}, {
									"case":	249,
									"scores":	[-7.20506429818382]
								}, {
									"case":	250,
									"scores":	[-7.20506429818382]
								}, {
									"case":	251,
									"scores":	[-7.20506429818382]
								}, {
									"case":	252,
									"scores":	[-7.20506429818382]
								}, {
									"case":	253,
									"scores":	[-7.20506429818382]
								}, {
									"case":	254,
									"scores":	[-7.20506429818382]
								}, {
									"case":	255,
									"scores":	[-7.20506429818382]
								}, {
									"case":	256,
									"scores":	[-7.20506429818382]
								}, {
									"case":	257,
									"scores":	[-7.20506429818382]
								}, {
									"case":	258,
									"scores":	[-7.20506429818382]
								}, {
									"case":	259,
									"scores":	[-7.20506429818382]
								}, {
									"case":	260,
									"scores":	[-7.20506429818382]
								}, {
									"case":	261,
									"scores":	[-7.20506429818382]
								}, {
									"case":	262,
									"scores":	[-7.20506429818382]
								}, {
									"case":	263,
									"scores":	[-7.20506429818382]
								}, {
									"case":	264,
									"scores":	[-7.20506429818382]
								}, {
									"case":	265,
									"scores":	[-7.20506429818382]
								}, {
									"case":	266,
									"scores":	[-7.20506429818382]
								}, {
									"case":	267,
									"scores":	[-7.20506429818382]
								}, {
									"case":	268,
									"scores":	[-7.20506429818382]
								}, {
									"case":	269,
									"scores":	[-7.20506429818382]
								}, {
									"case":	270,
									"scores":	[-7.20506429818382]
								}, {
									"case":	271,
									"scores":	[-7.20506429818382]
								}, {
									"case":	272,
									"scores":	[-7.20506429818382]
								}, {
									"case":	273,
									"scores":	[-7.20506429818382]
								}, {
									"case":	274,
									"scores":	[-7.20506429818382]
								}, {
									"case":	275,
									"scores":	[-7.20506429818382]
								}, {
									"case":	276,
									"scores":	[-7.20506429818382]
								}, {
									"case":	277,
									"scores":	[-7.20506429818382]
								}, {
									"case":	278,
									"scores":	[-7.20506429818382]
								}, {
									"case":	279,
									"scores":	[-7.20506429818382]
								}, {
									"case":	280,
									"scores":	[-7.20506429818382]
								}, {
									"case":	281,
									"scores":	[-7.20506429818382]
								}, {
									"case":	282,
									"scores":	[-7.20506429818382]
								}, {
									"case":	283,
									"scores":	[-7.20506429818382]
								}, {
									"case":	284,
									"scores":	[-7.20506429818382]
								}, {
									"case":	285,
									"scores":	[-7.20506429818382]
								}, {
									"case":	286,
									"scores":	[-7.20506429818382]
								}, {
									"case":	287,
									"scores":	[-7.20506429818382]
								}, {
									"case":	288,
									"scores":	[-7.20506429818382]
								}, {
									"case":	289,
									"scores":	[-7.20506429818382]
								}, {
									"case":	290,
									"scores":	[-7.20506429818382]
								}, {
									"case":	291,
									"scores":	[-7.20506429818382]
								}, {
									"case":	292,
									"scores":	[-7.20506429818382]
								}, {
									"case":	293,
									"scores":	[-7.20506429818382]
								}, {
									"case":	294,
									"scores":	[-7.20506429818382]
								}, {
									"case":	295,
									"scores":	[-7.20506429818382]
								}, {
									"case":	296,
									"scores":	[-7.20506429818382]
								}, {
									"case":	297,
									"scores":	[-7.20506429818382]
								}, {
									"case":	298,
									"scores":	[-7.20506429818382]
								}, {
									"case":	299,
									"scores":	[-7.20506429818382]
								}, {
									"case":	300,
									"scores":	[-7.20506429818382]
								}, {
									"case":	301,
									"scores":	[-7.20506429818382]
								}, {
									"case":	302,
									"scores":	[-7.20506429818382]
								}, {
									"case":	303,
									"scores":	[-7.20506429818382]
								}, {
									"case":	304,
									"scores":	[-7.20506429818382]
								}, {
									"case":	305,
									"scores":	[-7.20506429818382]
								}, {
									"case":	306,
									"scores":	[-7.20506429818382]
								}, {
									"case":	307,
									"scores":	[-7.20506429818382]
								}, {
									"case":	308,
									"scores":	[-7.20506429818382]
								}, {
									"case":	309,
									"scores":	[-7.20506429818382]
								}, {
									"case":	310,
									"scores":	[-7.20506429818382]
								}, {
									"case":	311,
									"scores":	[-7.20506429818382]
								}, {
									"case":	312,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}, {
									"case":	313,
									"scores":	[-11.231073022183818, -10.634977851083818, -12.72033148218382, -12.309805908183819, -10.47691268818382, -9.24741808818382, -12.102086128183819, -12.36416022818382, -10.199056669183818, -12.396885857883818, -12.20632288818382, -12.105113588183819, -12.015690888183819, -12.20632288818382, -12.20632288818382, -12.20632288818382, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.20632288818382, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.20632288818382, -12.20632288818382, -12.20632288818382, -12.20632288818382, -12.20632288818382, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.20632288818382, -12.20632288818382, -12.20632288818382, -11.559579888183819, -12.20632288818382, -12.20632288818382, -12.015690888183819, -12.015690888183819, -12.015690888183819, -12.20632288818382, -12.20632288818382, -12.20632288818382, -12.015690888183819, -12.015690888183819, -12.105113588183819]
								}, {
									"case":	314,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}, {
									"case":	315,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}, {
									"case":	316,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}, {
									"case":	317,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}, {
									"case":	318,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}, {
									"case":	319,
									"scores":	[-13.493854822183819, -12.897759651083819, -14.983113282183819, -14.57258770818382, -12.739694488183819, -11.51019988818382, -14.36486792818382, -14.626942028183819, -12.461838469183819, -14.659667657883819, -14.469104688183819, -14.36789538818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -13.82236168818382, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.27847268818382, -14.469104688183819, -14.469104688183819, -14.469104688183819, -14.27847268818382, -14.27847268818382, -14.36789538818382]
								}]
						}, {
							"switch":	68,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	366,
							"begin_column":	4,
							"end_line":	366,
							"end_column":	50,
							"patch_codes":	["if (__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    con->http_status = 200;\n", "if ((con->http_status == 0) || __is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    con->http_status = 200;\n", "if ((con->http_status == 0) && !__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    con->http_status = 200;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6464339877281446, -4.5901125647281464, -6.5970821877281445, -5.702826659728145, -6.0860304157281444, -5.0712698457281453, -6.5445280687281446, -6.5887454177281448, -5.6537632337281449, -6.4972145884281449, -6.5092872687281451, -6.1023472687281455, -5.6653822687281448, -6.5092872687281451, -6.5092872687281451, -6.5092872687281451, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -6.5092872687281451, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -6.5092872687281451, -6.5092872687281451, -6.5092872687281451, -6.5092872687281451, -6.5092872687281451, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -6.5092872687281451, -6.5092872687281451, -6.5092872687281451, -5.4214553987281455, -6.5092872687281451, -6.5092872687281451, -5.6653822687281448, -5.6653822687281448, -5.6653822687281448, -6.5092872687281451, -6.5092872687281451, -6.5092872687281451, -5.6653822687281448, -5.6653822687281448, -6.1023472687281455]
								}, {
									"case":	2,
									"scores":	[-7.5778599626281462, -5.5215385396281462, -7.528508162628146, -6.6342526346281456, -7.017456390628146, -6.002695820628146, -7.4759540436281462, -7.5201713926281455, -6.5851892086281456, -7.4286405633281456, -7.4407132436281458, -7.0337732436281453, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.3528813736281453, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -7.0337732436281453]
								}, {
									"case":	3,
									"scores":	[-7.5778599626281462, -5.5215385396281462, -7.528508162628146, -6.6342526346281456, -7.017456390628146, -6.002695820628146, -7.4759540436281462, -7.5201713926281455, -6.5851892086281456, -7.4286405633281456, -7.4407132436281458, -7.0337732436281453, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.3528813736281453, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -6.5968082436281463, -7.4407132436281458, -7.4407132436281458, -7.4407132436281458, -6.5968082436281463, -6.5968082436281463, -7.0337732436281453]
								}]
						}, {
							"switch":	71,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	366,
							"begin_column":	4,
							"end_line":	366,
							"end_column":	50,
							"patch_codes":	["if (!__is_neg(\"\", \"L366\", 54, &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->file_started), sizeof (con->file_started), &(have_content_length), sizeof (have_content_length), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    if (con->http_status == 0)\n        con->http_status = 200;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.55056748718382, -7.49424606418382, -9.50121568718382, -8.60696015918382, -8.99016391518382, -7.97540334518382, -9.44866156818382, -9.49287891718382, -8.55789673318382, -9.40134808788382, -9.41342076818382, -9.00648076818382, -8.56951576818382, -9.41342076818382, -9.41342076818382, -9.41342076818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -9.41342076818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -9.41342076818382, -9.41342076818382, -9.41342076818382, -9.41342076818382, -9.41342076818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -9.41342076818382, -9.41342076818382, -9.41342076818382, -8.32558889818382, -9.41342076818382, -9.41342076818382, -8.56951576818382, -8.56951576818382, -8.56951576818382, -9.41342076818382, -9.41342076818382, -9.41342076818382, -8.56951576818382, -8.56951576818382, -9.00648076818382]
								}]
						}]
				}, {
					"line":	366,
					"switches":	[{
							"switch":	72,
							"types":	[[], [], [], [], [312, 313, 314, 315, 316, 317, 318, 319], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	367,
							"begin_column":	2,
							"end_line":	367,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.16465888354878]
								}, {
									"case":	2,
									"scores":	[-7.16465888354878]
								}, {
									"case":	3,
									"scores":	[-7.16465888354878]
								}, {
									"case":	4,
									"scores":	[-7.16465888354878]
								}, {
									"case":	5,
									"scores":	[-7.16465888354878]
								}, {
									"case":	6,
									"scores":	[-7.16465888354878]
								}, {
									"case":	7,
									"scores":	[-7.16465888354878]
								}, {
									"case":	8,
									"scores":	[-7.16465888354878]
								}, {
									"case":	9,
									"scores":	[-7.16465888354878]
								}, {
									"case":	10,
									"scores":	[-7.16465888354878]
								}, {
									"case":	11,
									"scores":	[-7.16465888354878]
								}, {
									"case":	12,
									"scores":	[-7.16465888354878]
								}, {
									"case":	13,
									"scores":	[-7.16465888354878]
								}, {
									"case":	14,
									"scores":	[-7.16465888354878]
								}, {
									"case":	15,
									"scores":	[-7.16465888354878]
								}, {
									"case":	16,
									"scores":	[-7.16465888354878]
								}, {
									"case":	17,
									"scores":	[-7.16465888354878]
								}, {
									"case":	18,
									"scores":	[-7.16465888354878]
								}, {
									"case":	19,
									"scores":	[-7.16465888354878]
								}, {
									"case":	20,
									"scores":	[-7.16465888354878]
								}, {
									"case":	21,
									"scores":	[-7.16465888354878]
								}, {
									"case":	22,
									"scores":	[-7.16465888354878]
								}, {
									"case":	23,
									"scores":	[-7.16465888354878]
								}, {
									"case":	24,
									"scores":	[-7.16465888354878]
								}, {
									"case":	25,
									"scores":	[-7.16465888354878]
								}, {
									"case":	26,
									"scores":	[-7.16465888354878]
								}, {
									"case":	27,
									"scores":	[-7.16465888354878]
								}, {
									"case":	28,
									"scores":	[-7.16465888354878]
								}, {
									"case":	29,
									"scores":	[-7.16465888354878]
								}, {
									"case":	30,
									"scores":	[-7.16465888354878]
								}, {
									"case":	31,
									"scores":	[-7.16465888354878]
								}, {
									"case":	32,
									"scores":	[-7.16465888354878]
								}, {
									"case":	33,
									"scores":	[-7.16465888354878]
								}, {
									"case":	34,
									"scores":	[-7.16465888354878]
								}, {
									"case":	35,
									"scores":	[-7.16465888354878]
								}, {
									"case":	36,
									"scores":	[-7.16465888354878]
								}, {
									"case":	37,
									"scores":	[-7.16465888354878]
								}, {
									"case":	38,
									"scores":	[-7.16465888354878]
								}, {
									"case":	39,
									"scores":	[-7.16465888354878]
								}, {
									"case":	40,
									"scores":	[-7.16465888354878]
								}, {
									"case":	41,
									"scores":	[-7.16465888354878]
								}, {
									"case":	42,
									"scores":	[-7.16465888354878]
								}, {
									"case":	43,
									"scores":	[-7.16465888354878]
								}, {
									"case":	44,
									"scores":	[-7.16465888354878]
								}, {
									"case":	45,
									"scores":	[-7.16465888354878]
								}, {
									"case":	46,
									"scores":	[-7.16465888354878]
								}, {
									"case":	47,
									"scores":	[-7.16465888354878]
								}, {
									"case":	48,
									"scores":	[-7.16465888354878]
								}, {
									"case":	49,
									"scores":	[-7.16465888354878]
								}, {
									"case":	50,
									"scores":	[-7.16465888354878]
								}, {
									"case":	51,
									"scores":	[-7.16465888354878]
								}, {
									"case":	52,
									"scores":	[-7.16465888354878]
								}, {
									"case":	53,
									"scores":	[-7.16465888354878]
								}, {
									"case":	54,
									"scores":	[-7.16465888354878]
								}, {
									"case":	55,
									"scores":	[-7.16465888354878]
								}, {
									"case":	56,
									"scores":	[-7.16465888354878]
								}, {
									"case":	57,
									"scores":	[-7.16465888354878]
								}, {
									"case":	58,
									"scores":	[-7.16465888354878]
								}, {
									"case":	59,
									"scores":	[-7.16465888354878]
								}, {
									"case":	60,
									"scores":	[-7.16465888354878]
								}, {
									"case":	61,
									"scores":	[-7.16465888354878]
								}, {
									"case":	62,
									"scores":	[-7.16465888354878]
								}, {
									"case":	63,
									"scores":	[-7.16465888354878]
								}, {
									"case":	64,
									"scores":	[-7.16465888354878]
								}, {
									"case":	65,
									"scores":	[-7.16465888354878]
								}, {
									"case":	66,
									"scores":	[-7.16465888354878]
								}, {
									"case":	67,
									"scores":	[-7.16465888354878]
								}, {
									"case":	68,
									"scores":	[-7.16465888354878]
								}, {
									"case":	69,
									"scores":	[-7.16465888354878]
								}, {
									"case":	70,
									"scores":	[-7.16465888354878]
								}, {
									"case":	71,
									"scores":	[-7.16465888354878]
								}, {
									"case":	72,
									"scores":	[-7.16465888354878]
								}, {
									"case":	73,
									"scores":	[-7.16465888354878]
								}, {
									"case":	74,
									"scores":	[-7.16465888354878]
								}, {
									"case":	75,
									"scores":	[-7.16465888354878]
								}, {
									"case":	76,
									"scores":	[-7.16465888354878]
								}, {
									"case":	77,
									"scores":	[-7.16465888354878]
								}, {
									"case":	78,
									"scores":	[-7.16465888354878]
								}, {
									"case":	79,
									"scores":	[-7.16465888354878]
								}, {
									"case":	80,
									"scores":	[-7.16465888354878]
								}, {
									"case":	81,
									"scores":	[-7.16465888354878]
								}, {
									"case":	82,
									"scores":	[-7.16465888354878]
								}, {
									"case":	83,
									"scores":	[-7.16465888354878]
								}, {
									"case":	84,
									"scores":	[-7.16465888354878]
								}, {
									"case":	85,
									"scores":	[-7.16465888354878]
								}, {
									"case":	86,
									"scores":	[-7.16465888354878]
								}, {
									"case":	87,
									"scores":	[-7.16465888354878]
								}, {
									"case":	88,
									"scores":	[-7.16465888354878]
								}, {
									"case":	89,
									"scores":	[-7.16465888354878]
								}, {
									"case":	90,
									"scores":	[-7.16465888354878]
								}, {
									"case":	91,
									"scores":	[-7.16465888354878]
								}, {
									"case":	92,
									"scores":	[-7.16465888354878]
								}, {
									"case":	93,
									"scores":	[-7.16465888354878]
								}, {
									"case":	94,
									"scores":	[-7.16465888354878]
								}, {
									"case":	95,
									"scores":	[-7.16465888354878]
								}, {
									"case":	96,
									"scores":	[-7.16465888354878]
								}, {
									"case":	97,
									"scores":	[-7.16465888354878]
								}, {
									"case":	98,
									"scores":	[-7.16465888354878]
								}, {
									"case":	99,
									"scores":	[-7.16465888354878]
								}, {
									"case":	100,
									"scores":	[-7.16465888354878]
								}, {
									"case":	101,
									"scores":	[-7.16465888354878]
								}, {
									"case":	102,
									"scores":	[-7.16465888354878]
								}, {
									"case":	103,
									"scores":	[-7.16465888354878]
								}, {
									"case":	104,
									"scores":	[-7.16465888354878]
								}, {
									"case":	105,
									"scores":	[-7.16465888354878]
								}, {
									"case":	106,
									"scores":	[-7.16465888354878]
								}, {
									"case":	107,
									"scores":	[-7.16465888354878]
								}, {
									"case":	108,
									"scores":	[-7.16465888354878]
								}, {
									"case":	109,
									"scores":	[-7.16465888354878]
								}, {
									"case":	110,
									"scores":	[-7.16465888354878]
								}, {
									"case":	111,
									"scores":	[-7.16465888354878]
								}, {
									"case":	112,
									"scores":	[-7.16465888354878]
								}, {
									"case":	113,
									"scores":	[-7.16465888354878]
								}, {
									"case":	114,
									"scores":	[-7.16465888354878]
								}, {
									"case":	115,
									"scores":	[-7.16465888354878]
								}, {
									"case":	116,
									"scores":	[-7.16465888354878]
								}, {
									"case":	117,
									"scores":	[-7.16465888354878]
								}, {
									"case":	118,
									"scores":	[-7.16465888354878]
								}, {
									"case":	119,
									"scores":	[-7.16465888354878]
								}, {
									"case":	120,
									"scores":	[-7.16465888354878]
								}, {
									"case":	121,
									"scores":	[-7.16465888354878]
								}, {
									"case":	122,
									"scores":	[-7.16465888354878]
								}, {
									"case":	123,
									"scores":	[-7.16465888354878]
								}, {
									"case":	124,
									"scores":	[-7.16465888354878]
								}, {
									"case":	125,
									"scores":	[-7.16465888354878]
								}, {
									"case":	126,
									"scores":	[-7.16465888354878]
								}, {
									"case":	127,
									"scores":	[-7.16465888354878]
								}, {
									"case":	128,
									"scores":	[-7.16465888354878]
								}, {
									"case":	129,
									"scores":	[-7.16465888354878]
								}, {
									"case":	130,
									"scores":	[-7.16465888354878]
								}, {
									"case":	131,
									"scores":	[-7.16465888354878]
								}, {
									"case":	132,
									"scores":	[-7.16465888354878]
								}, {
									"case":	133,
									"scores":	[-7.16465888354878]
								}, {
									"case":	134,
									"scores":	[-7.16465888354878]
								}, {
									"case":	135,
									"scores":	[-7.16465888354878]
								}, {
									"case":	136,
									"scores":	[-7.16465888354878]
								}, {
									"case":	137,
									"scores":	[-7.16465888354878]
								}, {
									"case":	138,
									"scores":	[-7.16465888354878]
								}, {
									"case":	139,
									"scores":	[-7.16465888354878]
								}, {
									"case":	140,
									"scores":	[-7.16465888354878]
								}, {
									"case":	141,
									"scores":	[-7.16465888354878]
								}, {
									"case":	142,
									"scores":	[-7.16465888354878]
								}, {
									"case":	143,
									"scores":	[-7.16465888354878]
								}, {
									"case":	144,
									"scores":	[-7.16465888354878]
								}, {
									"case":	145,
									"scores":	[-7.16465888354878]
								}, {
									"case":	146,
									"scores":	[-7.16465888354878]
								}, {
									"case":	147,
									"scores":	[-7.16465888354878]
								}, {
									"case":	148,
									"scores":	[-7.16465888354878]
								}, {
									"case":	149,
									"scores":	[-7.16465888354878]
								}, {
									"case":	150,
									"scores":	[-7.16465888354878]
								}, {
									"case":	151,
									"scores":	[-7.16465888354878]
								}, {
									"case":	152,
									"scores":	[-7.16465888354878]
								}, {
									"case":	153,
									"scores":	[-7.16465888354878]
								}, {
									"case":	154,
									"scores":	[-7.16465888354878]
								}, {
									"case":	155,
									"scores":	[-7.16465888354878]
								}, {
									"case":	156,
									"scores":	[-7.16465888354878]
								}, {
									"case":	157,
									"scores":	[-7.16465888354878]
								}, {
									"case":	158,
									"scores":	[-7.16465888354878]
								}, {
									"case":	159,
									"scores":	[-7.16465888354878]
								}, {
									"case":	160,
									"scores":	[-7.16465888354878]
								}, {
									"case":	161,
									"scores":	[-7.16465888354878]
								}, {
									"case":	162,
									"scores":	[-7.16465888354878]
								}, {
									"case":	163,
									"scores":	[-7.16465888354878]
								}, {
									"case":	164,
									"scores":	[-7.16465888354878]
								}, {
									"case":	165,
									"scores":	[-7.16465888354878]
								}, {
									"case":	166,
									"scores":	[-7.16465888354878]
								}, {
									"case":	167,
									"scores":	[-7.16465888354878]
								}, {
									"case":	168,
									"scores":	[-7.16465888354878]
								}, {
									"case":	169,
									"scores":	[-7.16465888354878]
								}, {
									"case":	170,
									"scores":	[-7.16465888354878]
								}, {
									"case":	171,
									"scores":	[-7.16465888354878]
								}, {
									"case":	172,
									"scores":	[-7.16465888354878]
								}, {
									"case":	173,
									"scores":	[-7.16465888354878]
								}, {
									"case":	174,
									"scores":	[-7.16465888354878]
								}, {
									"case":	175,
									"scores":	[-7.16465888354878]
								}, {
									"case":	176,
									"scores":	[-7.16465888354878]
								}, {
									"case":	177,
									"scores":	[-7.16465888354878]
								}, {
									"case":	178,
									"scores":	[-7.16465888354878]
								}, {
									"case":	179,
									"scores":	[-7.16465888354878]
								}, {
									"case":	180,
									"scores":	[-7.16465888354878]
								}, {
									"case":	181,
									"scores":	[-7.16465888354878]
								}, {
									"case":	182,
									"scores":	[-7.16465888354878]
								}, {
									"case":	183,
									"scores":	[-7.16465888354878]
								}, {
									"case":	184,
									"scores":	[-7.16465888354878]
								}, {
									"case":	185,
									"scores":	[-7.16465888354878]
								}, {
									"case":	186,
									"scores":	[-7.16465888354878]
								}, {
									"case":	187,
									"scores":	[-7.16465888354878]
								}, {
									"case":	188,
									"scores":	[-7.16465888354878]
								}, {
									"case":	189,
									"scores":	[-7.16465888354878]
								}, {
									"case":	190,
									"scores":	[-7.16465888354878]
								}, {
									"case":	191,
									"scores":	[-7.16465888354878]
								}, {
									"case":	192,
									"scores":	[-7.16465888354878]
								}, {
									"case":	193,
									"scores":	[-7.16465888354878]
								}, {
									"case":	194,
									"scores":	[-7.16465888354878]
								}, {
									"case":	195,
									"scores":	[-7.16465888354878]
								}, {
									"case":	196,
									"scores":	[-7.16465888354878]
								}, {
									"case":	197,
									"scores":	[-7.16465888354878]
								}, {
									"case":	198,
									"scores":	[-7.16465888354878]
								}, {
									"case":	199,
									"scores":	[-7.16465888354878]
								}, {
									"case":	200,
									"scores":	[-7.16465888354878]
								}, {
									"case":	201,
									"scores":	[-7.16465888354878]
								}, {
									"case":	202,
									"scores":	[-7.16465888354878]
								}, {
									"case":	203,
									"scores":	[-7.16465888354878]
								}, {
									"case":	204,
									"scores":	[-7.16465888354878]
								}, {
									"case":	205,
									"scores":	[-7.16465888354878]
								}, {
									"case":	206,
									"scores":	[-7.16465888354878]
								}, {
									"case":	207,
									"scores":	[-7.16465888354878]
								}, {
									"case":	208,
									"scores":	[-7.16465888354878]
								}, {
									"case":	209,
									"scores":	[-7.16465888354878]
								}, {
									"case":	210,
									"scores":	[-7.16465888354878]
								}, {
									"case":	211,
									"scores":	[-7.16465888354878]
								}, {
									"case":	212,
									"scores":	[-7.16465888354878]
								}, {
									"case":	213,
									"scores":	[-7.16465888354878]
								}, {
									"case":	214,
									"scores":	[-7.16465888354878]
								}, {
									"case":	215,
									"scores":	[-7.16465888354878]
								}, {
									"case":	216,
									"scores":	[-7.16465888354878]
								}, {
									"case":	217,
									"scores":	[-7.16465888354878]
								}, {
									"case":	218,
									"scores":	[-7.16465888354878]
								}, {
									"case":	219,
									"scores":	[-7.16465888354878]
								}, {
									"case":	220,
									"scores":	[-7.16465888354878]
								}, {
									"case":	221,
									"scores":	[-7.16465888354878]
								}, {
									"case":	222,
									"scores":	[-7.16465888354878]
								}, {
									"case":	223,
									"scores":	[-7.16465888354878]
								}, {
									"case":	224,
									"scores":	[-7.16465888354878]
								}, {
									"case":	225,
									"scores":	[-7.16465888354878]
								}, {
									"case":	226,
									"scores":	[-7.16465888354878]
								}, {
									"case":	227,
									"scores":	[-7.16465888354878]
								}, {
									"case":	228,
									"scores":	[-7.16465888354878]
								}, {
									"case":	229,
									"scores":	[-7.16465888354878]
								}, {
									"case":	230,
									"scores":	[-7.16465888354878]
								}, {
									"case":	231,
									"scores":	[-7.16465888354878]
								}, {
									"case":	232,
									"scores":	[-7.16465888354878]
								}, {
									"case":	233,
									"scores":	[-7.16465888354878]
								}, {
									"case":	234,
									"scores":	[-7.16465888354878]
								}, {
									"case":	235,
									"scores":	[-7.16465888354878]
								}, {
									"case":	236,
									"scores":	[-7.16465888354878]
								}, {
									"case":	237,
									"scores":	[-7.16465888354878]
								}, {
									"case":	238,
									"scores":	[-7.16465888354878]
								}, {
									"case":	239,
									"scores":	[-7.16465888354878]
								}, {
									"case":	240,
									"scores":	[-7.16465888354878]
								}, {
									"case":	241,
									"scores":	[-7.16465888354878]
								}, {
									"case":	242,
									"scores":	[-7.16465888354878]
								}, {
									"case":	243,
									"scores":	[-7.16465888354878]
								}, {
									"case":	244,
									"scores":	[-7.16465888354878]
								}, {
									"case":	245,
									"scores":	[-7.16465888354878]
								}, {
									"case":	246,
									"scores":	[-7.16465888354878]
								}, {
									"case":	247,
									"scores":	[-7.16465888354878]
								}, {
									"case":	248,
									"scores":	[-7.16465888354878]
								}, {
									"case":	249,
									"scores":	[-7.16465888354878]
								}, {
									"case":	250,
									"scores":	[-7.16465888354878]
								}, {
									"case":	251,
									"scores":	[-7.16465888354878]
								}, {
									"case":	252,
									"scores":	[-7.16465888354878]
								}, {
									"case":	253,
									"scores":	[-7.16465888354878]
								}, {
									"case":	254,
									"scores":	[-7.16465888354878]
								}, {
									"case":	255,
									"scores":	[-7.16465888354878]
								}, {
									"case":	256,
									"scores":	[-7.16465888354878]
								}, {
									"case":	257,
									"scores":	[-7.16465888354878]
								}, {
									"case":	258,
									"scores":	[-7.16465888354878]
								}, {
									"case":	259,
									"scores":	[-7.16465888354878]
								}, {
									"case":	260,
									"scores":	[-7.16465888354878]
								}, {
									"case":	261,
									"scores":	[-7.16465888354878]
								}, {
									"case":	262,
									"scores":	[-7.16465888354878]
								}, {
									"case":	263,
									"scores":	[-7.16465888354878]
								}, {
									"case":	264,
									"scores":	[-7.16465888354878]
								}, {
									"case":	265,
									"scores":	[-7.16465888354878]
								}, {
									"case":	266,
									"scores":	[-7.16465888354878]
								}, {
									"case":	267,
									"scores":	[-7.16465888354878]
								}, {
									"case":	268,
									"scores":	[-7.16465888354878]
								}, {
									"case":	269,
									"scores":	[-7.16465888354878]
								}, {
									"case":	270,
									"scores":	[-7.16465888354878]
								}, {
									"case":	271,
									"scores":	[-7.16465888354878]
								}, {
									"case":	272,
									"scores":	[-7.16465888354878]
								}, {
									"case":	273,
									"scores":	[-7.16465888354878]
								}, {
									"case":	274,
									"scores":	[-7.16465888354878]
								}, {
									"case":	275,
									"scores":	[-7.16465888354878]
								}, {
									"case":	276,
									"scores":	[-7.16465888354878]
								}, {
									"case":	277,
									"scores":	[-7.16465888354878]
								}, {
									"case":	278,
									"scores":	[-7.16465888354878]
								}, {
									"case":	279,
									"scores":	[-7.16465888354878]
								}, {
									"case":	280,
									"scores":	[-7.16465888354878]
								}, {
									"case":	281,
									"scores":	[-7.16465888354878]
								}, {
									"case":	282,
									"scores":	[-7.16465888354878]
								}, {
									"case":	283,
									"scores":	[-7.16465888354878]
								}, {
									"case":	284,
									"scores":	[-7.16465888354878]
								}, {
									"case":	285,
									"scores":	[-7.16465888354878]
								}, {
									"case":	286,
									"scores":	[-7.16465888354878]
								}, {
									"case":	287,
									"scores":	[-7.16465888354878]
								}, {
									"case":	288,
									"scores":	[-7.16465888354878]
								}, {
									"case":	289,
									"scores":	[-7.16465888354878]
								}, {
									"case":	290,
									"scores":	[-7.16465888354878]
								}, {
									"case":	291,
									"scores":	[-7.16465888354878]
								}, {
									"case":	292,
									"scores":	[-7.16465888354878]
								}, {
									"case":	293,
									"scores":	[-7.16465888354878]
								}, {
									"case":	294,
									"scores":	[-7.16465888354878]
								}, {
									"case":	295,
									"scores":	[-7.16465888354878]
								}, {
									"case":	296,
									"scores":	[-7.16465888354878]
								}, {
									"case":	297,
									"scores":	[-7.16465888354878]
								}, {
									"case":	298,
									"scores":	[-7.16465888354878]
								}, {
									"case":	299,
									"scores":	[-7.16465888354878]
								}, {
									"case":	300,
									"scores":	[-7.16465888354878]
								}, {
									"case":	301,
									"scores":	[-7.16465888354878]
								}, {
									"case":	302,
									"scores":	[-7.16465888354878]
								}, {
									"case":	303,
									"scores":	[-7.16465888354878]
								}, {
									"case":	304,
									"scores":	[-7.16465888354878]
								}, {
									"case":	305,
									"scores":	[-7.16465888354878]
								}, {
									"case":	306,
									"scores":	[-7.16465888354878]
								}, {
									"case":	307,
									"scores":	[-7.16465888354878]
								}, {
									"case":	308,
									"scores":	[-7.16465888354878]
								}, {
									"case":	309,
									"scores":	[-7.16465888354878]
								}, {
									"case":	310,
									"scores":	[-7.16465888354878]
								}, {
									"case":	311,
									"scores":	[-7.16465888354878]
								}, {
									"case":	312,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}, {
									"case":	313,
									"scores":	[-10.54739836754878, -11.61444130074878, -12.391715007548779, -10.354531651748779, -9.12443977354878, -10.35393437354878, -11.979107813548779, -12.241181913548781, -10.07607835454878, -12.08334457354878, -12.08334457354878, -11.982135273548781, -11.892712573548781, -12.08334457354878, -12.08334457354878, -12.08334457354878, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -12.08334457354878, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -12.08334457354878, -12.08334457354878, -12.08334457354878, -12.08334457354878, -12.08334457354878, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -11.892712573548781, -12.08334457354878, -12.08334457354878, -12.08334457354878, -11.436601573548781, -12.08334457354878, -12.08334457354878, -11.892712573548781, -11.892712573548781, -11.892712573548781, -12.08334457354878, -12.08334457354878, -12.08334457354878, -11.892712573548781, -11.892712573548781, -11.982135273548781]
								}, {
									"case":	314,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}, {
									"case":	315,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}, {
									"case":	316,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}, {
									"case":	317,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}, {
									"case":	318,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}, {
									"case":	319,
									"scores":	[-12.810180167548781, -13.877223100748781, -14.65449680754878, -12.61731345174878, -11.38722157354878, -12.616716173548781, -14.24188961354878, -14.503963713548782, -12.338860154548779, -14.346126373548781, -14.346126373548781, -14.24491707354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -13.69938337354878, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.15549437354878, -14.346126373548781, -14.346126373548781, -14.346126373548781, -14.15549437354878, -14.15549437354878, -14.24491707354878]
								}]
						}, {
							"switch":	73,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	367,
							"begin_column":	4,
							"end_line":	367,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L367\", 54, &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con), sizeof (con), &(con->http_status), sizeof (con->http_status), &(have_content_length), sizeof (have_content_length), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(sess->rb), sizeof (sess->rb), &(sess->sock), sizeof (sess->sock), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    sess->state = CGI_STATE_READ_RESPONSE_CONTENT;\n", "{\n}\n", "sess->state = (-1)", "sess->state = (0 * have_content_length)", "sess->state = (0 * i)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "sess->state = (con != 0)", "sess->state = (con == 0)", "sess->state = (have_content_length != 0)", "sess->state = (have_content_length * i)", "sess->state = (have_content_length + 0)", "sess->state = (have_content_length - 0)", "sess->state = (have_content_length == 0)", "sess->state = (i != 0)", "sess->state = (i != have_content_length)", "sess->state = (i * have_content_length)", "sess->state = (i + 0)", "sess->state = (i + have_content_length)", "sess->state = (i - 0)", "sess->state = (i - have_content_length)", "sess->state = (i == 0)", "sess->state = (i == have_content_length)", "sess->state = (p != 0)", "sess->state = (p == 0)", "sess->state = (sess != 0)", "sess->state = (sess == 0)", "sess->state = (srv != 0)", "sess->state = (srv == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.67709662654878, -9.55572102654878, -10.46588007254878, -9.90660397654878, -8.89071593054878, -9.90547650054878, -10.36397415354878, -10.40819150254878, -9.47320931854878, -10.328733353548779, -10.328733353548779, -9.92179335354878, -9.48482835354878, -10.328733353548779, -10.328733353548779, -10.328733353548779, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -10.328733353548779, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -10.328733353548779, -10.328733353548779, -10.328733353548779, -10.328733353548779, -10.328733353548779, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -9.48482835354878, -10.328733353548779, -10.328733353548779, -10.328733353548779, -9.24090148354878, -10.328733353548779, -10.328733353548779, -9.48482835354878, -9.48482835354878, -9.48482835354878, -10.328733353548779, -10.328733353548779, -10.328733353548779, -9.48482835354878, -9.48482835354878, -9.92179335354878]
								}, {
									"case":	2,
									"scores":	[-7.16465888354878]
								}, {
									"case":	3,
									"scores":	[-7.16465888354878]
								}, {
									"case":	4,
									"scores":	[-7.16465888354878]
								}, {
									"case":	5,
									"scores":	[-7.16465888354878]
								}, {
									"case":	6,
									"scores":	[-7.16465888354878]
								}, {
									"case":	7,
									"scores":	[-7.16465888354878]
								}, {
									"case":	8,
									"scores":	[-7.16465888354878]
								}, {
									"case":	9,
									"scores":	[-7.16465888354878]
								}, {
									"case":	10,
									"scores":	[-7.16465888354878]
								}, {
									"case":	11,
									"scores":	[-7.16465888354878]
								}, {
									"case":	12,
									"scores":	[-7.16465888354878]
								}, {
									"case":	13,
									"scores":	[-7.16465888354878]
								}, {
									"case":	14,
									"scores":	[-7.16465888354878]
								}, {
									"case":	15,
									"scores":	[-7.16465888354878]
								}, {
									"case":	16,
									"scores":	[-7.16465888354878]
								}, {
									"case":	17,
									"scores":	[-7.16465888354878]
								}, {
									"case":	18,
									"scores":	[-7.16465888354878]
								}, {
									"case":	19,
									"scores":	[-7.16465888354878]
								}, {
									"case":	20,
									"scores":	[-7.16465888354878]
								}, {
									"case":	21,
									"scores":	[-7.16465888354878]
								}, {
									"case":	22,
									"scores":	[-7.16465888354878]
								}, {
									"case":	23,
									"scores":	[-7.16465888354878]
								}, {
									"case":	24,
									"scores":	[-7.16465888354878]
								}, {
									"case":	25,
									"scores":	[-7.16465888354878]
								}, {
									"case":	26,
									"scores":	[-7.16465888354878]
								}, {
									"case":	27,
									"scores":	[-7.16465888354878]
								}, {
									"case":	28,
									"scores":	[-7.16465888354878]
								}, {
									"case":	29,
									"scores":	[-7.16465888354878]
								}, {
									"case":	30,
									"scores":	[-7.16465888354878]
								}, {
									"case":	31,
									"scores":	[-7.16465888354878]
								}, {
									"case":	32,
									"scores":	[-7.16465888354878]
								}, {
									"case":	33,
									"scores":	[-7.16465888354878]
								}, {
									"case":	34,
									"scores":	[-7.16465888354878]
								}, {
									"case":	35,
									"scores":	[-7.16465888354878]
								}, {
									"case":	36,
									"scores":	[-7.16465888354878]
								}, {
									"case":	37,
									"scores":	[-7.16465888354878]
								}, {
									"case":	38,
									"scores":	[-7.16465888354878]
								}]
						}]
				}, {
					"line":	368,
					"switches":	[{
							"switch":	74,
							"types":	[[], [], [], [], [312, 313, 314, 315, 316, 317, 318, 319], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], [], [], [], [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [], [], [], []],
							"begin_line":	369,
							"begin_column":	2,
							"end_line":	369,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return -1;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 0;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 1;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 200;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 299;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 302;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 323;\n", "if (__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.14445617623126]
								}, {
									"case":	2,
									"scores":	[-7.14445617623126]
								}, {
									"case":	3,
									"scores":	[-7.14445617623126]
								}, {
									"case":	4,
									"scores":	[-7.14445617623126]
								}, {
									"case":	5,
									"scores":	[-7.14445617623126]
								}, {
									"case":	6,
									"scores":	[-7.14445617623126]
								}, {
									"case":	7,
									"scores":	[-7.14445617623126]
								}, {
									"case":	8,
									"scores":	[-7.14445617623126]
								}, {
									"case":	9,
									"scores":	[-7.14445617623126]
								}, {
									"case":	10,
									"scores":	[-7.14445617623126]
								}, {
									"case":	11,
									"scores":	[-7.14445617623126]
								}, {
									"case":	12,
									"scores":	[-7.14445617623126]
								}, {
									"case":	13,
									"scores":	[-7.14445617623126]
								}, {
									"case":	14,
									"scores":	[-7.14445617623126]
								}, {
									"case":	15,
									"scores":	[-7.14445617623126]
								}, {
									"case":	16,
									"scores":	[-7.14445617623126]
								}, {
									"case":	17,
									"scores":	[-7.14445617623126]
								}, {
									"case":	18,
									"scores":	[-7.14445617623126]
								}, {
									"case":	19,
									"scores":	[-7.14445617623126]
								}, {
									"case":	20,
									"scores":	[-7.14445617623126]
								}, {
									"case":	21,
									"scores":	[-7.14445617623126]
								}, {
									"case":	22,
									"scores":	[-7.14445617623126]
								}, {
									"case":	23,
									"scores":	[-7.14445617623126]
								}, {
									"case":	24,
									"scores":	[-7.14445617623126]
								}, {
									"case":	25,
									"scores":	[-7.14445617623126]
								}, {
									"case":	26,
									"scores":	[-7.14445617623126]
								}, {
									"case":	27,
									"scores":	[-7.14445617623126]
								}, {
									"case":	28,
									"scores":	[-7.14445617623126]
								}, {
									"case":	29,
									"scores":	[-7.14445617623126]
								}, {
									"case":	30,
									"scores":	[-7.14445617623126]
								}, {
									"case":	31,
									"scores":	[-7.14445617623126]
								}, {
									"case":	32,
									"scores":	[-7.14445617623126]
								}, {
									"case":	33,
									"scores":	[-7.14445617623126]
								}, {
									"case":	34,
									"scores":	[-7.14445617623126]
								}, {
									"case":	35,
									"scores":	[-7.14445617623126]
								}, {
									"case":	36,
									"scores":	[-7.14445617623126]
								}, {
									"case":	37,
									"scores":	[-7.14445617623126]
								}, {
									"case":	38,
									"scores":	[-7.14445617623126]
								}, {
									"case":	39,
									"scores":	[-7.14445617623126]
								}, {
									"case":	40,
									"scores":	[-7.14445617623126]
								}, {
									"case":	41,
									"scores":	[-7.14445617623126]
								}, {
									"case":	42,
									"scores":	[-7.14445617623126]
								}, {
									"case":	43,
									"scores":	[-7.14445617623126]
								}, {
									"case":	44,
									"scores":	[-7.14445617623126]
								}, {
									"case":	45,
									"scores":	[-7.14445617623126]
								}, {
									"case":	46,
									"scores":	[-7.14445617623126]
								}, {
									"case":	47,
									"scores":	[-7.14445617623126]
								}, {
									"case":	48,
									"scores":	[-7.14445617623126]
								}, {
									"case":	49,
									"scores":	[-7.14445617623126]
								}, {
									"case":	50,
									"scores":	[-7.14445617623126]
								}, {
									"case":	51,
									"scores":	[-7.14445617623126]
								}, {
									"case":	52,
									"scores":	[-7.14445617623126]
								}, {
									"case":	53,
									"scores":	[-7.14445617623126]
								}, {
									"case":	54,
									"scores":	[-7.14445617623126]
								}, {
									"case":	55,
									"scores":	[-7.14445617623126]
								}, {
									"case":	56,
									"scores":	[-7.14445617623126]
								}, {
									"case":	57,
									"scores":	[-7.14445617623126]
								}, {
									"case":	58,
									"scores":	[-7.14445617623126]
								}, {
									"case":	59,
									"scores":	[-7.14445617623126]
								}, {
									"case":	60,
									"scores":	[-7.14445617623126]
								}, {
									"case":	61,
									"scores":	[-7.14445617623126]
								}, {
									"case":	62,
									"scores":	[-7.14445617623126]
								}, {
									"case":	63,
									"scores":	[-7.14445617623126]
								}, {
									"case":	64,
									"scores":	[-7.14445617623126]
								}, {
									"case":	65,
									"scores":	[-7.14445617623126]
								}, {
									"case":	66,
									"scores":	[-7.14445617623126]
								}, {
									"case":	67,
									"scores":	[-7.14445617623126]
								}, {
									"case":	68,
									"scores":	[-7.14445617623126]
								}, {
									"case":	69,
									"scores":	[-7.14445617623126]
								}, {
									"case":	70,
									"scores":	[-7.14445617623126]
								}, {
									"case":	71,
									"scores":	[-7.14445617623126]
								}, {
									"case":	72,
									"scores":	[-7.14445617623126]
								}, {
									"case":	73,
									"scores":	[-7.14445617623126]
								}, {
									"case":	74,
									"scores":	[-7.14445617623126]
								}, {
									"case":	75,
									"scores":	[-7.14445617623126]
								}, {
									"case":	76,
									"scores":	[-7.14445617623126]
								}, {
									"case":	77,
									"scores":	[-7.14445617623126]
								}, {
									"case":	78,
									"scores":	[-7.14445617623126]
								}, {
									"case":	79,
									"scores":	[-7.14445617623126]
								}, {
									"case":	80,
									"scores":	[-7.14445617623126]
								}, {
									"case":	81,
									"scores":	[-7.14445617623126]
								}, {
									"case":	82,
									"scores":	[-7.14445617623126]
								}, {
									"case":	83,
									"scores":	[-7.14445617623126]
								}, {
									"case":	84,
									"scores":	[-7.14445617623126]
								}, {
									"case":	85,
									"scores":	[-7.14445617623126]
								}, {
									"case":	86,
									"scores":	[-7.14445617623126]
								}, {
									"case":	87,
									"scores":	[-7.14445617623126]
								}, {
									"case":	88,
									"scores":	[-7.14445617623126]
								}, {
									"case":	89,
									"scores":	[-7.14445617623126]
								}, {
									"case":	90,
									"scores":	[-7.14445617623126]
								}, {
									"case":	91,
									"scores":	[-7.14445617623126]
								}, {
									"case":	92,
									"scores":	[-7.14445617623126]
								}, {
									"case":	93,
									"scores":	[-7.14445617623126]
								}, {
									"case":	94,
									"scores":	[-7.14445617623126]
								}, {
									"case":	95,
									"scores":	[-7.14445617623126]
								}, {
									"case":	96,
									"scores":	[-7.14445617623126]
								}, {
									"case":	97,
									"scores":	[-7.14445617623126]
								}, {
									"case":	98,
									"scores":	[-7.14445617623126]
								}, {
									"case":	99,
									"scores":	[-7.14445617623126]
								}, {
									"case":	100,
									"scores":	[-7.14445617623126]
								}, {
									"case":	101,
									"scores":	[-7.14445617623126]
								}, {
									"case":	102,
									"scores":	[-7.14445617623126]
								}, {
									"case":	103,
									"scores":	[-7.14445617623126]
								}, {
									"case":	104,
									"scores":	[-7.14445617623126]
								}, {
									"case":	105,
									"scores":	[-7.14445617623126]
								}, {
									"case":	106,
									"scores":	[-7.14445617623126]
								}, {
									"case":	107,
									"scores":	[-7.14445617623126]
								}, {
									"case":	108,
									"scores":	[-7.14445617623126]
								}, {
									"case":	109,
									"scores":	[-7.14445617623126]
								}, {
									"case":	110,
									"scores":	[-7.14445617623126]
								}, {
									"case":	111,
									"scores":	[-7.14445617623126]
								}, {
									"case":	112,
									"scores":	[-7.14445617623126]
								}, {
									"case":	113,
									"scores":	[-7.14445617623126]
								}, {
									"case":	114,
									"scores":	[-7.14445617623126]
								}, {
									"case":	115,
									"scores":	[-7.14445617623126]
								}, {
									"case":	116,
									"scores":	[-7.14445617623126]
								}, {
									"case":	117,
									"scores":	[-7.14445617623126]
								}, {
									"case":	118,
									"scores":	[-7.14445617623126]
								}, {
									"case":	119,
									"scores":	[-7.14445617623126]
								}, {
									"case":	120,
									"scores":	[-7.14445617623126]
								}, {
									"case":	121,
									"scores":	[-7.14445617623126]
								}, {
									"case":	122,
									"scores":	[-7.14445617623126]
								}, {
									"case":	123,
									"scores":	[-7.14445617623126]
								}, {
									"case":	124,
									"scores":	[-7.14445617623126]
								}, {
									"case":	125,
									"scores":	[-7.14445617623126]
								}, {
									"case":	126,
									"scores":	[-7.14445617623126]
								}, {
									"case":	127,
									"scores":	[-7.14445617623126]
								}, {
									"case":	128,
									"scores":	[-7.14445617623126]
								}, {
									"case":	129,
									"scores":	[-7.14445617623126]
								}, {
									"case":	130,
									"scores":	[-7.14445617623126]
								}, {
									"case":	131,
									"scores":	[-7.14445617623126]
								}, {
									"case":	132,
									"scores":	[-7.14445617623126]
								}, {
									"case":	133,
									"scores":	[-7.14445617623126]
								}, {
									"case":	134,
									"scores":	[-7.14445617623126]
								}, {
									"case":	135,
									"scores":	[-7.14445617623126]
								}, {
									"case":	136,
									"scores":	[-7.14445617623126]
								}, {
									"case":	137,
									"scores":	[-7.14445617623126]
								}, {
									"case":	138,
									"scores":	[-7.14445617623126]
								}, {
									"case":	139,
									"scores":	[-7.14445617623126]
								}, {
									"case":	140,
									"scores":	[-7.14445617623126]
								}, {
									"case":	141,
									"scores":	[-7.14445617623126]
								}, {
									"case":	142,
									"scores":	[-7.14445617623126]
								}, {
									"case":	143,
									"scores":	[-7.14445617623126]
								}, {
									"case":	144,
									"scores":	[-7.14445617623126]
								}, {
									"case":	145,
									"scores":	[-7.14445617623126]
								}, {
									"case":	146,
									"scores":	[-7.14445617623126]
								}, {
									"case":	147,
									"scores":	[-7.14445617623126]
								}, {
									"case":	148,
									"scores":	[-7.14445617623126]
								}, {
									"case":	149,
									"scores":	[-7.14445617623126]
								}, {
									"case":	150,
									"scores":	[-7.14445617623126]
								}, {
									"case":	151,
									"scores":	[-7.14445617623126]
								}, {
									"case":	152,
									"scores":	[-7.14445617623126]
								}, {
									"case":	153,
									"scores":	[-7.14445617623126]
								}, {
									"case":	154,
									"scores":	[-7.14445617623126]
								}, {
									"case":	155,
									"scores":	[-7.14445617623126]
								}, {
									"case":	156,
									"scores":	[-7.14445617623126]
								}, {
									"case":	157,
									"scores":	[-7.14445617623126]
								}, {
									"case":	158,
									"scores":	[-7.14445617623126]
								}, {
									"case":	159,
									"scores":	[-7.14445617623126]
								}, {
									"case":	160,
									"scores":	[-7.14445617623126]
								}, {
									"case":	161,
									"scores":	[-7.14445617623126]
								}, {
									"case":	162,
									"scores":	[-7.14445617623126]
								}, {
									"case":	163,
									"scores":	[-7.14445617623126]
								}, {
									"case":	164,
									"scores":	[-7.14445617623126]
								}, {
									"case":	165,
									"scores":	[-7.14445617623126]
								}, {
									"case":	166,
									"scores":	[-7.14445617623126]
								}, {
									"case":	167,
									"scores":	[-7.14445617623126]
								}, {
									"case":	168,
									"scores":	[-7.14445617623126]
								}, {
									"case":	169,
									"scores":	[-7.14445617623126]
								}, {
									"case":	170,
									"scores":	[-7.14445617623126]
								}, {
									"case":	171,
									"scores":	[-7.14445617623126]
								}, {
									"case":	172,
									"scores":	[-7.14445617623126]
								}, {
									"case":	173,
									"scores":	[-7.14445617623126]
								}, {
									"case":	174,
									"scores":	[-7.14445617623126]
								}, {
									"case":	175,
									"scores":	[-7.14445617623126]
								}, {
									"case":	176,
									"scores":	[-7.14445617623126]
								}, {
									"case":	177,
									"scores":	[-7.14445617623126]
								}, {
									"case":	178,
									"scores":	[-7.14445617623126]
								}, {
									"case":	179,
									"scores":	[-7.14445617623126]
								}, {
									"case":	180,
									"scores":	[-7.14445617623126]
								}, {
									"case":	181,
									"scores":	[-7.14445617623126]
								}, {
									"case":	182,
									"scores":	[-7.14445617623126]
								}, {
									"case":	183,
									"scores":	[-7.14445617623126]
								}, {
									"case":	184,
									"scores":	[-7.14445617623126]
								}, {
									"case":	185,
									"scores":	[-7.14445617623126]
								}, {
									"case":	186,
									"scores":	[-7.14445617623126]
								}, {
									"case":	187,
									"scores":	[-7.14445617623126]
								}, {
									"case":	188,
									"scores":	[-7.14445617623126]
								}, {
									"case":	189,
									"scores":	[-7.14445617623126]
								}, {
									"case":	190,
									"scores":	[-7.14445617623126]
								}, {
									"case":	191,
									"scores":	[-7.14445617623126]
								}, {
									"case":	192,
									"scores":	[-7.14445617623126]
								}, {
									"case":	193,
									"scores":	[-7.14445617623126]
								}, {
									"case":	194,
									"scores":	[-7.14445617623126]
								}, {
									"case":	195,
									"scores":	[-7.14445617623126]
								}, {
									"case":	196,
									"scores":	[-7.14445617623126]
								}, {
									"case":	197,
									"scores":	[-7.14445617623126]
								}, {
									"case":	198,
									"scores":	[-7.14445617623126]
								}, {
									"case":	199,
									"scores":	[-7.14445617623126]
								}, {
									"case":	200,
									"scores":	[-7.14445617623126]
								}, {
									"case":	201,
									"scores":	[-7.14445617623126]
								}, {
									"case":	202,
									"scores":	[-7.14445617623126]
								}, {
									"case":	203,
									"scores":	[-7.14445617623126]
								}, {
									"case":	204,
									"scores":	[-7.14445617623126]
								}, {
									"case":	205,
									"scores":	[-7.14445617623126]
								}, {
									"case":	206,
									"scores":	[-7.14445617623126]
								}, {
									"case":	207,
									"scores":	[-7.14445617623126]
								}, {
									"case":	208,
									"scores":	[-7.14445617623126]
								}, {
									"case":	209,
									"scores":	[-7.14445617623126]
								}, {
									"case":	210,
									"scores":	[-7.14445617623126]
								}, {
									"case":	211,
									"scores":	[-7.14445617623126]
								}, {
									"case":	212,
									"scores":	[-7.14445617623126]
								}, {
									"case":	213,
									"scores":	[-7.14445617623126]
								}, {
									"case":	214,
									"scores":	[-7.14445617623126]
								}, {
									"case":	215,
									"scores":	[-7.14445617623126]
								}, {
									"case":	216,
									"scores":	[-7.14445617623126]
								}, {
									"case":	217,
									"scores":	[-7.14445617623126]
								}, {
									"case":	218,
									"scores":	[-7.14445617623126]
								}, {
									"case":	219,
									"scores":	[-7.14445617623126]
								}, {
									"case":	220,
									"scores":	[-7.14445617623126]
								}, {
									"case":	221,
									"scores":	[-7.14445617623126]
								}, {
									"case":	222,
									"scores":	[-7.14445617623126]
								}, {
									"case":	223,
									"scores":	[-7.14445617623126]
								}, {
									"case":	224,
									"scores":	[-7.14445617623126]
								}, {
									"case":	225,
									"scores":	[-7.14445617623126]
								}, {
									"case":	226,
									"scores":	[-7.14445617623126]
								}, {
									"case":	227,
									"scores":	[-7.14445617623126]
								}, {
									"case":	228,
									"scores":	[-7.14445617623126]
								}, {
									"case":	229,
									"scores":	[-7.14445617623126]
								}, {
									"case":	230,
									"scores":	[-7.14445617623126]
								}, {
									"case":	231,
									"scores":	[-7.14445617623126]
								}, {
									"case":	232,
									"scores":	[-7.14445617623126]
								}, {
									"case":	233,
									"scores":	[-7.14445617623126]
								}, {
									"case":	234,
									"scores":	[-7.14445617623126]
								}, {
									"case":	235,
									"scores":	[-7.14445617623126]
								}, {
									"case":	236,
									"scores":	[-7.14445617623126]
								}, {
									"case":	237,
									"scores":	[-7.14445617623126]
								}, {
									"case":	238,
									"scores":	[-7.14445617623126]
								}, {
									"case":	239,
									"scores":	[-7.14445617623126]
								}, {
									"case":	240,
									"scores":	[-7.14445617623126]
								}, {
									"case":	241,
									"scores":	[-7.14445617623126]
								}, {
									"case":	242,
									"scores":	[-7.14445617623126]
								}, {
									"case":	243,
									"scores":	[-7.14445617623126]
								}, {
									"case":	244,
									"scores":	[-7.14445617623126]
								}, {
									"case":	245,
									"scores":	[-7.14445617623126]
								}, {
									"case":	246,
									"scores":	[-7.14445617623126]
								}, {
									"case":	247,
									"scores":	[-7.14445617623126]
								}, {
									"case":	248,
									"scores":	[-7.14445617623126]
								}, {
									"case":	249,
									"scores":	[-7.14445617623126]
								}, {
									"case":	250,
									"scores":	[-7.14445617623126]
								}, {
									"case":	251,
									"scores":	[-7.14445617623126]
								}, {
									"case":	252,
									"scores":	[-7.14445617623126]
								}, {
									"case":	253,
									"scores":	[-7.14445617623126]
								}, {
									"case":	254,
									"scores":	[-7.14445617623126]
								}, {
									"case":	255,
									"scores":	[-7.14445617623126]
								}, {
									"case":	256,
									"scores":	[-7.14445617623126]
								}, {
									"case":	257,
									"scores":	[-7.14445617623126]
								}, {
									"case":	258,
									"scores":	[-7.14445617623126]
								}, {
									"case":	259,
									"scores":	[-7.14445617623126]
								}, {
									"case":	260,
									"scores":	[-7.14445617623126]
								}, {
									"case":	261,
									"scores":	[-7.14445617623126]
								}, {
									"case":	262,
									"scores":	[-7.14445617623126]
								}, {
									"case":	263,
									"scores":	[-7.14445617623126]
								}, {
									"case":	264,
									"scores":	[-7.14445617623126]
								}, {
									"case":	265,
									"scores":	[-7.14445617623126]
								}, {
									"case":	266,
									"scores":	[-7.14445617623126]
								}, {
									"case":	267,
									"scores":	[-7.14445617623126]
								}, {
									"case":	268,
									"scores":	[-7.14445617623126]
								}, {
									"case":	269,
									"scores":	[-7.14445617623126]
								}, {
									"case":	270,
									"scores":	[-7.14445617623126]
								}, {
									"case":	271,
									"scores":	[-7.14445617623126]
								}, {
									"case":	272,
									"scores":	[-7.14445617623126]
								}, {
									"case":	273,
									"scores":	[-7.14445617623126]
								}, {
									"case":	274,
									"scores":	[-7.14445617623126]
								}, {
									"case":	275,
									"scores":	[-7.14445617623126]
								}, {
									"case":	276,
									"scores":	[-7.14445617623126]
								}, {
									"case":	277,
									"scores":	[-7.14445617623126]
								}, {
									"case":	278,
									"scores":	[-7.14445617623126]
								}, {
									"case":	279,
									"scores":	[-7.14445617623126]
								}, {
									"case":	280,
									"scores":	[-7.14445617623126]
								}, {
									"case":	281,
									"scores":	[-7.14445617623126]
								}, {
									"case":	282,
									"scores":	[-7.14445617623126]
								}, {
									"case":	283,
									"scores":	[-7.14445617623126]
								}, {
									"case":	284,
									"scores":	[-7.14445617623126]
								}, {
									"case":	285,
									"scores":	[-7.14445617623126]
								}, {
									"case":	286,
									"scores":	[-7.14445617623126]
								}, {
									"case":	287,
									"scores":	[-7.14445617623126]
								}, {
									"case":	288,
									"scores":	[-7.14445617623126]
								}, {
									"case":	289,
									"scores":	[-7.14445617623126]
								}, {
									"case":	290,
									"scores":	[-7.14445617623126]
								}, {
									"case":	291,
									"scores":	[-7.14445617623126]
								}, {
									"case":	292,
									"scores":	[-7.14445617623126]
								}, {
									"case":	293,
									"scores":	[-7.14445617623126]
								}, {
									"case":	294,
									"scores":	[-7.14445617623126]
								}, {
									"case":	295,
									"scores":	[-7.14445617623126]
								}, {
									"case":	296,
									"scores":	[-7.14445617623126]
								}, {
									"case":	297,
									"scores":	[-7.14445617623126]
								}, {
									"case":	298,
									"scores":	[-7.14445617623126]
								}, {
									"case":	299,
									"scores":	[-7.14445617623126]
								}, {
									"case":	300,
									"scores":	[-7.14445617623126]
								}, {
									"case":	301,
									"scores":	[-7.14445617623126]
								}, {
									"case":	302,
									"scores":	[-7.14445617623126]
								}, {
									"case":	303,
									"scores":	[-7.14445617623126]
								}, {
									"case":	304,
									"scores":	[-7.14445617623126]
								}, {
									"case":	305,
									"scores":	[-7.14445617623126]
								}, {
									"case":	306,
									"scores":	[-7.14445617623126]
								}, {
									"case":	307,
									"scores":	[-7.14445617623126]
								}, {
									"case":	308,
									"scores":	[-7.14445617623126]
								}, {
									"case":	309,
									"scores":	[-7.14445617623126]
								}, {
									"case":	310,
									"scores":	[-7.14445617623126]
								}, {
									"case":	311,
									"scores":	[-7.14445617623126]
								}, {
									"case":	312,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}, {
									"case":	313,
									"scores":	[-11.193409100231261, -12.135409766231261, -10.903211166231261, -12.27059286623126, -10.594524844431261, -10.593927566231262, -12.219101006231259, -11.72721700623126, -11.35932216623126, -12.222128466231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.32333776623126, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.32333776623126, -12.32333776623126, -12.32333776623126, -12.32333776623126, -12.32333776623126, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.32333776623126, -12.32333776623126, -12.32333776623126, -11.676594766231261, -12.32333776623126, -12.32333776623126, -12.132705766231261, -12.132705766231261, -12.132705766231261, -12.32333776623126, -12.32333776623126, -12.32333776623126, -12.132705766231261, -12.132705766231261, -12.222128466231261, -12.32333776623126, -12.32333776623126, -12.32333776623126, -12.132705766231261, -12.32333776623126, -12.32333776623126, -11.676594766231261, -12.132705766231261, -12.32333776623126]
								}, {
									"case":	314,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}, {
									"case":	315,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}, {
									"case":	316,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}, {
									"case":	317,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}, {
									"case":	318,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}, {
									"case":	319,
									"scores":	[-13.456190900231261, -14.398191566231262, -13.165992966231261, -14.533374666231261, -12.857306644431262, -12.856709366231261, -14.48188280623126, -13.989998806231261, -13.622103966231261, -14.48491026623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.39548756623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.39548756623126, -14.48491026623126, -14.586119566231261, -14.586119566231261, -14.586119566231261, -14.39548756623126, -14.586119566231261, -14.586119566231261, -13.93937656623126, -14.39548756623126, -14.586119566231261]
								}]
						}, {
							"switch":	75,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	369,
							"begin_column":	4,
							"end_line":	372,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L369\", 57, &(have_content_length), sizeof (have_content_length), &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo))) {\n    con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED;\n}\n", "if (((con->request.http_version == HTTP_VERSION_1_1) || __is_neg(\"\", \"L369\", 57, &(have_content_length), sizeof (have_content_length), &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo))) && !have_content_length) {\n    con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED;\n}\n", "if ((con->request.http_version == HTTP_VERSION_1_1 && !have_content_length) || __is_neg(\"\", \"L369\", 57, &(have_content_length), sizeof (have_content_length), &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo))) {\n    con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED;\n}\n", "if (con->request.http_version == HTTP_VERSION_1_1) {\n    con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED;\n}\n", "if ((con->request.http_version == HTTP_VERSION_1_1 && !have_content_length) && !__is_neg(\"\", \"L369\", 57, &(have_content_length), sizeof (have_content_length), &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo))) {\n    con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.5327055123281461, -7.259038786328146, -4.3302650823281468, -7.4163533133281465, -6.9692417053281455, -6.9681142293281457, -7.426611882328146, -6.8853188823281455, -5.7766323823281454, -6.984431082328145, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -7.3913710823281455, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -7.3913710823281455, -7.3913710823281455, -7.3913710823281455, -7.3913710823281455, -7.3913710823281455, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -7.3913710823281455, -7.3913710823281455, -7.3913710823281455, -6.3035392123281451, -7.3913710823281455, -7.3913710823281455, -6.5474660823281461, -6.5474660823281461, -6.5474660823281461, -7.3913710823281455, -7.3913710823281455, -7.3913710823281455, -6.5474660823281461, -6.5474660823281461, -6.984431082328145, -7.3913710823281455, -7.3913710823281455, -7.3913710823281455, -6.5474660823281461, -7.3913710823281455, -7.3913710823281455, -6.3035392123281451, -6.5474660823281461, -7.3913710823281455]
								}, {
									"case":	2,
									"scores":	[-4.9271046784281465, -6.6534379524281455, -3.7246642484281454, -6.810752479428146, -6.3636408714281458, -6.3625133954281452, -6.8210110484281454, -6.2797180484281458, -5.1710315484281466, -6.3788302484281463, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.6979383784281463, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -6.3788302484281463, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -5.6979383784281463, -5.9418652484281456, -6.7857702484281459]
								}, {
									"case":	3,
									"scores":	[-4.9271046784281465, -6.6534379524281455, -3.7246642484281454, -6.810752479428146, -6.3636408714281458, -6.3625133954281452, -6.8210110484281454, -6.2797180484281458, -5.1710315484281466, -6.3788302484281463, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.6979383784281463, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -6.3788302484281463, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -5.6979383784281463, -5.9418652484281456, -6.7857702484281459]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-4.9271046784281465, -6.6534379524281455, -3.7246642484281454, -6.810752479428146, -6.3636408714281458, -6.3625133954281452, -6.8210110484281454, -6.2797180484281458, -5.1710315484281466, -6.3788302484281463, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.6979383784281463, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -5.9418652484281456, -6.3788302484281463, -6.7857702484281459, -6.7857702484281459, -6.7857702484281459, -5.9418652484281456, -6.7857702484281459, -6.7857702484281459, -5.6979383784281463, -5.9418652484281456, -6.7857702484281459]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	369,
							"begin_column":	4,
							"end_line":	372,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L369\", 57, &(con), sizeof (con), &(con->request.http_version), sizeof (con->request.http_version), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.http_method), sizeof (con->request.http_method), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.headers), sizeof (con->request.headers), &(con->request.content_length), sizeof (con->request.content_length), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->request.pathinfo), sizeof (con->request.pathinfo)))\n    if (con->request.http_version == HTTP_VERSION_1_1 && !have_content_length) {\n        con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.35926767323126, -7.43049396923126, -8.63293439923126, -10.516582200231261, -10.06947059223126, -10.06834311623126, -10.52684076923126, -9.98554776923126, -8.87686126923126, -10.084659969231261, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -10.49159996923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -10.49159996923126, -10.49159996923126, -10.49159996923126, -10.49159996923126, -10.49159996923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -10.49159996923126, -10.49159996923126, -10.49159996923126, -9.40376809923126, -10.49159996923126, -10.49159996923126, -9.64769496923126, -9.64769496923126, -9.64769496923126, -10.49159996923126, -10.49159996923126, -10.49159996923126, -9.64769496923126, -9.64769496923126, -10.084659969231261, -10.49159996923126, -10.49159996923126, -10.49159996923126, -9.64769496923126, -10.49159996923126, -10.49159996923126, -9.40376809923126, -9.64769496923126, -10.49159996923126]
								}]
						}]
				}, {
					"line":	373,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [311, 312, 313, 314, 315, 316, 317, 318], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], [], [], [], [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], [], [], [], [], [], []],
							"begin_line":	374,
							"begin_column":	2,
							"end_line":	374,
							"end_column":	2,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->resp->headers, 0, sizeof (*(&p->resp->headers)))", "memset(&p->resp->headers->data, 0, sizeof (*(&p->resp->headers->data)))", "memset(&p->resp->headers->is_weakref, 0, sizeof (*(&p->resp->headers->is_weakref)))", "memset(&p->resp->headers->next_power_of_2, 0, sizeof (*(&p->resp->headers->next_power_of_2)))", "memset(&p->resp->headers->size, 0, sizeof (*(&p->resp->headers->size)))", "memset(&p->resp->headers->sorted, 0, sizeof (*(&p->resp->headers->sorted)))", "memset(&p->resp->headers->unique_ndx, 0, sizeof (*(&p->resp->headers->unique_ndx)))", "memset(&p->resp->headers->used, 0, sizeof (*(&p->resp->headers->used)))", "memset(&p->resp->protocol, 0, sizeof (*(&p->resp->protocol)))", "memset(&p->resp->reason, 0, sizeof (*(&p->resp->reason)))", "memset(&p->resp->status, 0, sizeof (*(&p->resp->status)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->resp->headers, 0, sizeof (*(p->resp->headers)))", "memset(p->resp->headers->data, 0, sizeof (*(p->resp->headers->data)))", "memset(p->resp->headers->sorted, 0, sizeof (*(p->resp->headers->sorted)))", "memset(p->resp->reason, 0, sizeof (*(p->resp->reason)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->file_started = (have_content_length)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->http_status = (have_content_length)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "have_content_length = (-1)", "have_content_length = (0)", "have_content_length = (1)", "have_content_length = (200)", "have_content_length = (299)", "have_content_length = (302)", "have_content_length = (323)", "have_content_length = (502)", "have_content_length = (have_content_length)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->rb->is_closed = (have_content_length)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "have_content_length = 1", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return -1;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 0;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 1;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 200;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 299;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 302;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 323;\n", "if (__is_neg(\"\", \"L374\", 6, &(con), sizeof (con), &(have_content_length), sizeof (have_content_length), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(i), sizeof (i)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.12425346891374]
								}, {
									"case":	2,
									"scores":	[-7.12425346891374]
								}, {
									"case":	3,
									"scores":	[-7.12425346891374]
								}, {
									"case":	4,
									"scores":	[-7.12425346891374]
								}, {
									"case":	5,
									"scores":	[-7.12425346891374]
								}, {
									"case":	6,
									"scores":	[-7.12425346891374]
								}, {
									"case":	7,
									"scores":	[-7.12425346891374]
								}, {
									"case":	8,
									"scores":	[-7.12425346891374]
								}, {
									"case":	9,
									"scores":	[-7.12425346891374]
								}, {
									"case":	10,
									"scores":	[-7.12425346891374]
								}, {
									"case":	11,
									"scores":	[-7.12425346891374]
								}, {
									"case":	12,
									"scores":	[-7.12425346891374]
								}, {
									"case":	13,
									"scores":	[-7.12425346891374]
								}, {
									"case":	14,
									"scores":	[-7.12425346891374]
								}, {
									"case":	15,
									"scores":	[-7.12425346891374]
								}, {
									"case":	16,
									"scores":	[-7.12425346891374]
								}, {
									"case":	17,
									"scores":	[-7.12425346891374]
								}, {
									"case":	18,
									"scores":	[-7.12425346891374]
								}, {
									"case":	19,
									"scores":	[-7.12425346891374]
								}, {
									"case":	20,
									"scores":	[-7.12425346891374]
								}, {
									"case":	21,
									"scores":	[-7.12425346891374]
								}, {
									"case":	22,
									"scores":	[-7.12425346891374]
								}, {
									"case":	23,
									"scores":	[-7.12425346891374]
								}, {
									"case":	24,
									"scores":	[-7.12425346891374]
								}, {
									"case":	25,
									"scores":	[-7.12425346891374]
								}, {
									"case":	26,
									"scores":	[-7.12425346891374]
								}, {
									"case":	27,
									"scores":	[-7.12425346891374]
								}, {
									"case":	28,
									"scores":	[-7.12425346891374]
								}, {
									"case":	29,
									"scores":	[-7.12425346891374]
								}, {
									"case":	30,
									"scores":	[-7.12425346891374]
								}, {
									"case":	31,
									"scores":	[-7.12425346891374]
								}, {
									"case":	32,
									"scores":	[-7.12425346891374]
								}, {
									"case":	33,
									"scores":	[-7.12425346891374]
								}, {
									"case":	34,
									"scores":	[-7.12425346891374]
								}, {
									"case":	35,
									"scores":	[-7.12425346891374]
								}, {
									"case":	36,
									"scores":	[-7.12425346891374]
								}, {
									"case":	37,
									"scores":	[-7.12425346891374]
								}, {
									"case":	38,
									"scores":	[-7.12425346891374]
								}, {
									"case":	39,
									"scores":	[-7.12425346891374]
								}, {
									"case":	40,
									"scores":	[-7.12425346891374]
								}, {
									"case":	41,
									"scores":	[-7.12425346891374]
								}, {
									"case":	42,
									"scores":	[-7.12425346891374]
								}, {
									"case":	43,
									"scores":	[-7.12425346891374]
								}, {
									"case":	44,
									"scores":	[-7.12425346891374]
								}, {
									"case":	45,
									"scores":	[-7.12425346891374]
								}, {
									"case":	46,
									"scores":	[-7.12425346891374]
								}, {
									"case":	47,
									"scores":	[-7.12425346891374]
								}, {
									"case":	48,
									"scores":	[-7.12425346891374]
								}, {
									"case":	49,
									"scores":	[-7.12425346891374]
								}, {
									"case":	50,
									"scores":	[-7.12425346891374]
								}, {
									"case":	51,
									"scores":	[-7.12425346891374]
								}, {
									"case":	52,
									"scores":	[-7.12425346891374]
								}, {
									"case":	53,
									"scores":	[-7.12425346891374]
								}, {
									"case":	54,
									"scores":	[-7.12425346891374]
								}, {
									"case":	55,
									"scores":	[-7.12425346891374]
								}, {
									"case":	56,
									"scores":	[-7.12425346891374]
								}, {
									"case":	57,
									"scores":	[-7.12425346891374]
								}, {
									"case":	58,
									"scores":	[-7.12425346891374]
								}, {
									"case":	59,
									"scores":	[-7.12425346891374]
								}, {
									"case":	60,
									"scores":	[-7.12425346891374]
								}, {
									"case":	61,
									"scores":	[-7.12425346891374]
								}, {
									"case":	62,
									"scores":	[-7.12425346891374]
								}, {
									"case":	63,
									"scores":	[-7.12425346891374]
								}, {
									"case":	64,
									"scores":	[-7.12425346891374]
								}, {
									"case":	65,
									"scores":	[-7.12425346891374]
								}, {
									"case":	66,
									"scores":	[-7.12425346891374]
								}, {
									"case":	67,
									"scores":	[-7.12425346891374]
								}, {
									"case":	68,
									"scores":	[-7.12425346891374]
								}, {
									"case":	69,
									"scores":	[-7.12425346891374]
								}, {
									"case":	70,
									"scores":	[-7.12425346891374]
								}, {
									"case":	71,
									"scores":	[-7.12425346891374]
								}, {
									"case":	72,
									"scores":	[-7.12425346891374]
								}, {
									"case":	73,
									"scores":	[-7.12425346891374]
								}, {
									"case":	74,
									"scores":	[-7.12425346891374]
								}, {
									"case":	75,
									"scores":	[-7.12425346891374]
								}, {
									"case":	76,
									"scores":	[-7.12425346891374]
								}, {
									"case":	77,
									"scores":	[-7.12425346891374]
								}, {
									"case":	78,
									"scores":	[-7.12425346891374]
								}, {
									"case":	79,
									"scores":	[-7.12425346891374]
								}, {
									"case":	80,
									"scores":	[-7.12425346891374]
								}, {
									"case":	81,
									"scores":	[-7.12425346891374]
								}, {
									"case":	82,
									"scores":	[-7.12425346891374]
								}, {
									"case":	83,
									"scores":	[-7.12425346891374]
								}, {
									"case":	84,
									"scores":	[-7.12425346891374]
								}, {
									"case":	85,
									"scores":	[-7.12425346891374]
								}, {
									"case":	86,
									"scores":	[-7.12425346891374]
								}, {
									"case":	87,
									"scores":	[-7.12425346891374]
								}, {
									"case":	88,
									"scores":	[-7.12425346891374]
								}, {
									"case":	89,
									"scores":	[-7.12425346891374]
								}, {
									"case":	90,
									"scores":	[-7.12425346891374]
								}, {
									"case":	91,
									"scores":	[-7.12425346891374]
								}, {
									"case":	92,
									"scores":	[-7.12425346891374]
								}, {
									"case":	93,
									"scores":	[-7.12425346891374]
								}, {
									"case":	94,
									"scores":	[-7.12425346891374]
								}, {
									"case":	95,
									"scores":	[-7.12425346891374]
								}, {
									"case":	96,
									"scores":	[-7.12425346891374]
								}, {
									"case":	97,
									"scores":	[-7.12425346891374]
								}, {
									"case":	98,
									"scores":	[-7.12425346891374]
								}, {
									"case":	99,
									"scores":	[-7.12425346891374]
								}, {
									"case":	100,
									"scores":	[-7.12425346891374]
								}, {
									"case":	101,
									"scores":	[-7.12425346891374]
								}, {
									"case":	102,
									"scores":	[-7.12425346891374]
								}, {
									"case":	103,
									"scores":	[-7.12425346891374]
								}, {
									"case":	104,
									"scores":	[-7.12425346891374]
								}, {
									"case":	105,
									"scores":	[-7.12425346891374]
								}, {
									"case":	106,
									"scores":	[-7.12425346891374]
								}, {
									"case":	107,
									"scores":	[-7.12425346891374]
								}, {
									"case":	108,
									"scores":	[-7.12425346891374]
								}, {
									"case":	109,
									"scores":	[-7.12425346891374]
								}, {
									"case":	110,
									"scores":	[-7.12425346891374]
								}, {
									"case":	111,
									"scores":	[-7.12425346891374]
								}, {
									"case":	112,
									"scores":	[-7.12425346891374]
								}, {
									"case":	113,
									"scores":	[-7.12425346891374]
								}, {
									"case":	114,
									"scores":	[-7.12425346891374]
								}, {
									"case":	115,
									"scores":	[-7.12425346891374]
								}, {
									"case":	116,
									"scores":	[-7.12425346891374]
								}, {
									"case":	117,
									"scores":	[-7.12425346891374]
								}, {
									"case":	118,
									"scores":	[-7.12425346891374]
								}, {
									"case":	119,
									"scores":	[-7.12425346891374]
								}, {
									"case":	120,
									"scores":	[-7.12425346891374]
								}, {
									"case":	121,
									"scores":	[-7.12425346891374]
								}, {
									"case":	122,
									"scores":	[-7.12425346891374]
								}, {
									"case":	123,
									"scores":	[-7.12425346891374]
								}, {
									"case":	124,
									"scores":	[-7.12425346891374]
								}, {
									"case":	125,
									"scores":	[-7.12425346891374]
								}, {
									"case":	126,
									"scores":	[-7.12425346891374]
								}, {
									"case":	127,
									"scores":	[-7.12425346891374]
								}, {
									"case":	128,
									"scores":	[-7.12425346891374]
								}, {
									"case":	129,
									"scores":	[-7.12425346891374]
								}, {
									"case":	130,
									"scores":	[-7.12425346891374]
								}, {
									"case":	131,
									"scores":	[-7.12425346891374]
								}, {
									"case":	132,
									"scores":	[-7.12425346891374]
								}, {
									"case":	133,
									"scores":	[-7.12425346891374]
								}, {
									"case":	134,
									"scores":	[-7.12425346891374]
								}, {
									"case":	135,
									"scores":	[-7.12425346891374]
								}, {
									"case":	136,
									"scores":	[-7.12425346891374]
								}, {
									"case":	137,
									"scores":	[-7.12425346891374]
								}, {
									"case":	138,
									"scores":	[-7.12425346891374]
								}, {
									"case":	139,
									"scores":	[-7.12425346891374]
								}, {
									"case":	140,
									"scores":	[-7.12425346891374]
								}, {
									"case":	141,
									"scores":	[-7.12425346891374]
								}, {
									"case":	142,
									"scores":	[-7.12425346891374]
								}, {
									"case":	143,
									"scores":	[-7.12425346891374]
								}, {
									"case":	144,
									"scores":	[-7.12425346891374]
								}, {
									"case":	145,
									"scores":	[-7.12425346891374]
								}, {
									"case":	146,
									"scores":	[-7.12425346891374]
								}, {
									"case":	147,
									"scores":	[-7.12425346891374]
								}, {
									"case":	148,
									"scores":	[-7.12425346891374]
								}, {
									"case":	149,
									"scores":	[-7.12425346891374]
								}, {
									"case":	150,
									"scores":	[-7.12425346891374]
								}, {
									"case":	151,
									"scores":	[-7.12425346891374]
								}, {
									"case":	152,
									"scores":	[-7.12425346891374]
								}, {
									"case":	153,
									"scores":	[-7.12425346891374]
								}, {
									"case":	154,
									"scores":	[-7.12425346891374]
								}, {
									"case":	155,
									"scores":	[-7.12425346891374]
								}, {
									"case":	156,
									"scores":	[-7.12425346891374]
								}, {
									"case":	157,
									"scores":	[-7.12425346891374]
								}, {
									"case":	158,
									"scores":	[-7.12425346891374]
								}, {
									"case":	159,
									"scores":	[-7.12425346891374]
								}, {
									"case":	160,
									"scores":	[-7.12425346891374]
								}, {
									"case":	161,
									"scores":	[-7.12425346891374]
								}, {
									"case":	162,
									"scores":	[-7.12425346891374]
								}, {
									"case":	163,
									"scores":	[-7.12425346891374]
								}, {
									"case":	164,
									"scores":	[-7.12425346891374]
								}, {
									"case":	165,
									"scores":	[-7.12425346891374]
								}, {
									"case":	166,
									"scores":	[-7.12425346891374]
								}, {
									"case":	167,
									"scores":	[-7.12425346891374]
								}, {
									"case":	168,
									"scores":	[-7.12425346891374]
								}, {
									"case":	169,
									"scores":	[-7.12425346891374]
								}, {
									"case":	170,
									"scores":	[-7.12425346891374]
								}, {
									"case":	171,
									"scores":	[-7.12425346891374]
								}, {
									"case":	172,
									"scores":	[-7.12425346891374]
								}, {
									"case":	173,
									"scores":	[-7.12425346891374]
								}, {
									"case":	174,
									"scores":	[-7.12425346891374]
								}, {
									"case":	175,
									"scores":	[-7.12425346891374]
								}, {
									"case":	176,
									"scores":	[-7.12425346891374]
								}, {
									"case":	177,
									"scores":	[-7.12425346891374]
								}, {
									"case":	178,
									"scores":	[-7.12425346891374]
								}, {
									"case":	179,
									"scores":	[-7.12425346891374]
								}, {
									"case":	180,
									"scores":	[-7.12425346891374]
								}, {
									"case":	181,
									"scores":	[-7.12425346891374]
								}, {
									"case":	182,
									"scores":	[-7.12425346891374]
								}, {
									"case":	183,
									"scores":	[-7.12425346891374]
								}, {
									"case":	184,
									"scores":	[-7.12425346891374]
								}, {
									"case":	185,
									"scores":	[-7.12425346891374]
								}, {
									"case":	186,
									"scores":	[-7.12425346891374]
								}, {
									"case":	187,
									"scores":	[-7.12425346891374]
								}, {
									"case":	188,
									"scores":	[-7.12425346891374]
								}, {
									"case":	189,
									"scores":	[-7.12425346891374]
								}, {
									"case":	190,
									"scores":	[-7.12425346891374]
								}, {
									"case":	191,
									"scores":	[-7.12425346891374]
								}, {
									"case":	192,
									"scores":	[-7.12425346891374]
								}, {
									"case":	193,
									"scores":	[-7.12425346891374]
								}, {
									"case":	194,
									"scores":	[-7.12425346891374]
								}, {
									"case":	195,
									"scores":	[-7.12425346891374]
								}, {
									"case":	196,
									"scores":	[-7.12425346891374]
								}, {
									"case":	197,
									"scores":	[-7.12425346891374]
								}, {
									"case":	198,
									"scores":	[-7.12425346891374]
								}, {
									"case":	199,
									"scores":	[-7.12425346891374]
								}, {
									"case":	200,
									"scores":	[-7.12425346891374]
								}, {
									"case":	201,
									"scores":	[-7.12425346891374]
								}, {
									"case":	202,
									"scores":	[-7.12425346891374]
								}, {
									"case":	203,
									"scores":	[-7.12425346891374]
								}, {
									"case":	204,
									"scores":	[-7.12425346891374]
								}, {
									"case":	205,
									"scores":	[-7.12425346891374]
								}, {
									"case":	206,
									"scores":	[-7.12425346891374]
								}, {
									"case":	207,
									"scores":	[-7.12425346891374]
								}, {
									"case":	208,
									"scores":	[-7.12425346891374]
								}, {
									"case":	209,
									"scores":	[-7.12425346891374]
								}, {
									"case":	210,
									"scores":	[-7.12425346891374]
								}, {
									"case":	211,
									"scores":	[-7.12425346891374]
								}, {
									"case":	212,
									"scores":	[-7.12425346891374]
								}, {
									"case":	213,
									"scores":	[-7.12425346891374]
								}, {
									"case":	214,
									"scores":	[-7.12425346891374]
								}, {
									"case":	215,
									"scores":	[-7.12425346891374]
								}, {
									"case":	216,
									"scores":	[-7.12425346891374]
								}, {
									"case":	217,
									"scores":	[-7.12425346891374]
								}, {
									"case":	218,
									"scores":	[-7.12425346891374]
								}, {
									"case":	219,
									"scores":	[-7.12425346891374]
								}, {
									"case":	220,
									"scores":	[-7.12425346891374]
								}, {
									"case":	221,
									"scores":	[-7.12425346891374]
								}, {
									"case":	222,
									"scores":	[-7.12425346891374]
								}, {
									"case":	223,
									"scores":	[-7.12425346891374]
								}, {
									"case":	224,
									"scores":	[-7.12425346891374]
								}, {
									"case":	225,
									"scores":	[-7.12425346891374]
								}, {
									"case":	226,
									"scores":	[-7.12425346891374]
								}, {
									"case":	227,
									"scores":	[-7.12425346891374]
								}, {
									"case":	228,
									"scores":	[-7.12425346891374]
								}, {
									"case":	229,
									"scores":	[-7.12425346891374]
								}, {
									"case":	230,
									"scores":	[-7.12425346891374]
								}, {
									"case":	231,
									"scores":	[-7.12425346891374]
								}, {
									"case":	232,
									"scores":	[-7.12425346891374]
								}, {
									"case":	233,
									"scores":	[-7.12425346891374]
								}, {
									"case":	234,
									"scores":	[-7.12425346891374]
								}, {
									"case":	235,
									"scores":	[-7.12425346891374]
								}, {
									"case":	236,
									"scores":	[-7.12425346891374]
								}, {
									"case":	237,
									"scores":	[-7.12425346891374]
								}, {
									"case":	238,
									"scores":	[-7.12425346891374]
								}, {
									"case":	239,
									"scores":	[-7.12425346891374]
								}, {
									"case":	240,
									"scores":	[-7.12425346891374]
								}, {
									"case":	241,
									"scores":	[-7.12425346891374]
								}, {
									"case":	242,
									"scores":	[-7.12425346891374]
								}, {
									"case":	243,
									"scores":	[-7.12425346891374]
								}, {
									"case":	244,
									"scores":	[-7.12425346891374]
								}, {
									"case":	245,
									"scores":	[-7.12425346891374]
								}, {
									"case":	246,
									"scores":	[-7.12425346891374]
								}, {
									"case":	247,
									"scores":	[-7.12425346891374]
								}, {
									"case":	248,
									"scores":	[-7.12425346891374]
								}, {
									"case":	249,
									"scores":	[-7.12425346891374]
								}, {
									"case":	250,
									"scores":	[-7.12425346891374]
								}, {
									"case":	251,
									"scores":	[-7.12425346891374]
								}, {
									"case":	252,
									"scores":	[-7.12425346891374]
								}, {
									"case":	253,
									"scores":	[-7.12425346891374]
								}, {
									"case":	254,
									"scores":	[-7.12425346891374]
								}, {
									"case":	255,
									"scores":	[-7.12425346891374]
								}, {
									"case":	256,
									"scores":	[-7.12425346891374]
								}, {
									"case":	257,
									"scores":	[-7.12425346891374]
								}, {
									"case":	258,
									"scores":	[-7.12425346891374]
								}, {
									"case":	259,
									"scores":	[-7.12425346891374]
								}, {
									"case":	260,
									"scores":	[-7.12425346891374]
								}, {
									"case":	261,
									"scores":	[-7.12425346891374]
								}, {
									"case":	262,
									"scores":	[-7.12425346891374]
								}, {
									"case":	263,
									"scores":	[-7.12425346891374]
								}, {
									"case":	264,
									"scores":	[-7.12425346891374]
								}, {
									"case":	265,
									"scores":	[-7.12425346891374]
								}, {
									"case":	266,
									"scores":	[-7.12425346891374]
								}, {
									"case":	267,
									"scores":	[-7.12425346891374]
								}, {
									"case":	268,
									"scores":	[-7.12425346891374]
								}, {
									"case":	269,
									"scores":	[-7.12425346891374]
								}, {
									"case":	270,
									"scores":	[-7.12425346891374]
								}, {
									"case":	271,
									"scores":	[-7.12425346891374]
								}, {
									"case":	272,
									"scores":	[-7.12425346891374]
								}, {
									"case":	273,
									"scores":	[-7.12425346891374]
								}, {
									"case":	274,
									"scores":	[-7.12425346891374]
								}, {
									"case":	275,
									"scores":	[-7.12425346891374]
								}, {
									"case":	276,
									"scores":	[-7.12425346891374]
								}, {
									"case":	277,
									"scores":	[-7.12425346891374]
								}, {
									"case":	278,
									"scores":	[-7.12425346891374]
								}, {
									"case":	279,
									"scores":	[-7.12425346891374]
								}, {
									"case":	280,
									"scores":	[-7.12425346891374]
								}, {
									"case":	281,
									"scores":	[-7.12425346891374]
								}, {
									"case":	282,
									"scores":	[-7.12425346891374]
								}, {
									"case":	283,
									"scores":	[-7.12425346891374]
								}, {
									"case":	284,
									"scores":	[-7.12425346891374]
								}, {
									"case":	285,
									"scores":	[-7.12425346891374]
								}, {
									"case":	286,
									"scores":	[-7.12425346891374]
								}, {
									"case":	287,
									"scores":	[-7.12425346891374]
								}, {
									"case":	288,
									"scores":	[-7.12425346891374]
								}, {
									"case":	289,
									"scores":	[-7.12425346891374]
								}, {
									"case":	290,
									"scores":	[-7.12425346891374]
								}, {
									"case":	291,
									"scores":	[-7.12425346891374]
								}, {
									"case":	292,
									"scores":	[-7.12425346891374]
								}, {
									"case":	293,
									"scores":	[-7.12425346891374]
								}, {
									"case":	294,
									"scores":	[-7.12425346891374]
								}, {
									"case":	295,
									"scores":	[-7.12425346891374]
								}, {
									"case":	296,
									"scores":	[-7.12425346891374]
								}, {
									"case":	297,
									"scores":	[-7.12425346891374]
								}, {
									"case":	298,
									"scores":	[-7.12425346891374]
								}, {
									"case":	299,
									"scores":	[-7.12425346891374]
								}, {
									"case":	300,
									"scores":	[-7.12425346891374]
								}, {
									"case":	301,
									"scores":	[-7.12425346891374]
								}, {
									"case":	302,
									"scores":	[-7.12425346891374]
								}, {
									"case":	303,
									"scores":	[-7.12425346891374]
								}, {
									"case":	304,
									"scores":	[-7.12425346891374]
								}, {
									"case":	305,
									"scores":	[-7.12425346891374]
								}, {
									"case":	306,
									"scores":	[-7.12425346891374]
								}, {
									"case":	307,
									"scores":	[-7.12425346891374]
								}, {
									"case":	308,
									"scores":	[-7.12425346891374]
								}, {
									"case":	309,
									"scores":	[-7.12425346891374]
								}, {
									"case":	310,
									"scores":	[-7.12425346891374]
								}, {
									"case":	311,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}, {
									"case":	312,
									"scores":	[-10.871399917913742, -9.32675537791374, -10.694137077913741, -10.642645217913742, -10.15076121791374, -9.78286637791374]
								}, {
									"case":	313,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}, {
									"case":	314,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}, {
									"case":	315,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}, {
									"case":	316,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}, {
									"case":	317,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}, {
									"case":	318,
									"scores":	[-13.134181717913741, -11.589537177913741, -12.95691887791374, -12.905427017913741, -12.41354301791374, -12.045648177913741]
								}]
						}]
				}, {
					"line":	384,
					"switches":	[{
							"switch":	78,
							"types":	[[], [], [], [], [270, 271, 272, 273, 274, 275, 276, 277], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [], [], [], [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], [], [], [], [], [], []],
							"begin_line":	385,
							"begin_column":	0,
							"end_line":	385,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv, 0, sizeof (*(srv)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	24,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	25,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	26,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	27,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	28,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	29,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	30,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	31,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	32,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	33,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	34,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	35,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	36,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	37,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	38,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	39,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	40,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	41,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	42,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	43,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	44,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	45,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	46,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	47,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	48,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	49,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	50,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	51,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	52,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	53,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	54,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	55,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	56,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	57,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	58,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	59,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	60,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	61,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	62,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	63,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	64,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	65,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	66,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	67,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	68,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	69,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	70,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	71,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	72,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	73,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	74,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	75,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	76,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	77,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	78,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	79,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	80,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	81,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	82,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	83,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	84,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	85,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	86,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	87,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	88,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	89,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	90,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	91,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	92,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	93,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	94,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	95,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	96,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	97,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	98,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	99,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	100,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	101,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	102,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	103,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	104,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	105,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	106,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	107,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	108,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	109,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	110,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	111,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	112,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	113,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	114,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	115,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	116,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	117,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	118,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	119,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	120,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	121,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	122,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	123,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	124,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	125,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	126,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	127,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	128,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	129,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	130,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	131,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	132,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	133,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	134,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	135,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	136,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	137,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	138,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	139,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	140,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	141,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	142,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	143,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	144,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	145,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	146,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	147,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	148,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	149,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	150,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	151,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	152,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	153,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	154,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	155,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	156,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	157,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	158,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	159,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	160,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	161,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	162,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	163,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	164,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	165,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	166,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	167,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	168,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	169,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	170,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	171,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	172,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	173,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	174,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	175,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	176,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	177,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	178,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	179,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	180,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	181,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	182,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	183,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	184,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	185,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	186,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	187,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	188,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	189,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	190,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	191,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	192,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	193,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	194,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	195,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	196,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	197,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	198,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	199,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	200,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	201,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	202,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	203,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	204,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	205,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	206,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	207,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	208,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	209,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	210,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	211,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	212,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	213,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	214,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	215,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	216,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	217,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	218,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	219,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	220,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	221,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	222,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	223,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	224,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	225,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	226,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	227,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	228,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	229,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	230,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	231,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	232,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	233,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	234,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	235,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	236,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	237,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	238,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	239,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	240,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	241,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	242,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	243,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	244,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	245,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	246,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	247,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	248,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	249,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	250,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	251,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	252,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	253,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	254,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	255,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	256,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	257,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	258,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	259,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	260,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	261,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	262,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	263,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	264,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	265,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	266,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	267,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	268,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	269,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	270,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}, {
									"case":	271,
									"scores":	[-8.8845058983582348, -8.5016048983582344, -8.2884578886582343, -6.7200837886582354, -7.4567878668582352, -7.4567878668582352, -9.1152159286582339, -9.6049184583582345, -9.3761637583582349, -9.3761637583582349, -9.1513449706582346, -9.4849594886582356, -9.1856007886582347, -9.084391488658234, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.7294897886582348, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.084391488658234, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.538857788658234, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -8.9949687886582339, -9.1856007886582347, -9.1856007886582347, -9.1856007886582347, -8.9949687886582339, -8.9949687886582339, -9.084391488658234]
								}, {
									"case":	272,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}, {
									"case":	273,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}, {
									"case":	274,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}, {
									"case":	275,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}, {
									"case":	276,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}, {
									"case":	277,
									"scores":	[-11.147287698358234, -10.764386698358235, -10.551239688658235, -8.9828655886582354, -9.7195696668582343, -9.7195696668582343, -11.377997728658237, -11.867700258358235, -11.638945558358234, -11.638945558358234, -11.414126770658235, -11.747741288658236, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.992271588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.347173288658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -10.801639588658235, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.257750588658237, -11.448382588658234, -11.448382588658234, -11.448382588658234, -11.257750588658237, -11.257750588658237, -11.347173288658237]
								}]
						}, {
							"switch":	79,
							"types":	[[], [], [1], [], [], [], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [19]],
							"begin_line":	385,
							"begin_column":	2,
							"end_line":	385,
							"end_column":	34,
							"patch_codes":	["if (!__is_neg(\"\", \"L385\", 101, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(sess->state), sizeof (sess->state), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(sess->rb), sizeof (sess->rb), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->pid), sizeof (sess->pid), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->wb), sizeof (sess->wb), &(sess->remote_con), sizeof (sess->remote_con), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    cgi_copy_response(srv, con, sess);\n", "cgi_create_env(srv, con, sess, 0)", "network_read(srv, con, sess, 0)", "network_read_chunkqueue_openssl(srv, con, sess, 0)", "network_read_chunkqueue_read(srv, con, sess, 0)", "network_read_chunkqueue_win32recv(srv, con, sess, 0)", "network_write_chunkqueue_freebsdsendfile(srv, con, sess, 0)", "network_write_chunkqueue_gthreadaio(srv, con, sess, 0)", "network_write_chunkqueue_gthreadsendfile(srv, con, sess, 0)", "network_write_chunkqueue_linuxaiosendfile(srv, con, sess, 0)", "network_write_chunkqueue_linuxsendfile(srv, con, sess, 0)", "network_write_chunkqueue_openssl(srv, con, sess, 0)", "network_write_chunkqueue_posixaio(srv, con, sess, 0)", "network_write_chunkqueue_solarissendfilev(srv, con, sess, 0)", "network_write_chunkqueue_win32send(srv, con, sess, 0)", "network_write_chunkqueue_win32transmitfile(srv, con, sess, 0)", "network_write_chunkqueue_write(srv, con, sess, 0)", "network_write_chunkqueue_writev(srv, con, sess, 0)", "{\n}\n", "VALGRIND_PRINTF(srv, con, sess)", "VALGRIND_PRINTF_BACKTRACE(srv, con, sess)", "__builtin_va_start(srv, con, sess)", "cgi_connection_close(srv, con, sess)", "cgi_connection_close_callback(srv, con, sess)", "cgi_demux_response(srv, con, sess)", "config_check_cond(srv, con, sess)", "g_build_filename(srv, con, sess)", "g_markup_printf_escaped(srv, con, sess)", "g_print(srv, con, sess)", "g_printerr(srv, con, sess)", "g_relation_exists(srv, con, sess)", "g_relation_insert(srv, con, sess)", "g_strconcat(srv, con, sess)", "g_strdup_printf(srv, con, sess)", "g_strjoin(srv, con, sess)", "g_test_message(srv, con, sess)", "g_variant_new(srv, con, sess)", "g_variant_new_parsed(srv, con, sess)", "g_variant_new_printf(srv, con, sess)", "log_trace(srv, con, sess)", "mod_cgi_patch_connection(srv, con, sess)", "mod_cgi_read_response_content(srv, con, sess)", "mod_cgi_send_request_content(srv, con, sess)", "mod_cgi_start_backend(srv, con, sess)", "network_write_chunkqueue(srv, con, sess)", "printf(srv, con, sess)", "cgi_copy_response((&con), con, sess)", "cgi_copy_response((&p), con, sess)", "cgi_copy_response((&sess), con, sess)", "cgi_copy_response((&srv), con, sess)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (&con), sess)", "cgi_copy_response(srv, (&p), sess)", "cgi_copy_response(srv, (&sess), sess)", "cgi_copy_response(srv, (&srv), sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (&con))", "cgi_copy_response(srv, con, (&p))", "cgi_copy_response(srv, con, (&sess))", "cgi_copy_response(srv, con, (&srv))", "cgi_copy_response(srv, con, (sess))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5566082193582353, -8.3411785193582357, -8.0609367496582358, -7.080669015658235, -8.2158034916582352, -8.2158034916582352, -8.5647265676582354, -8.8803831193582354, -8.6258601883582351, -8.6258601883582351, -7.8578407006582349, -8.5870137686582346, -8.6379328686582362, -8.2309928686582357, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.3940059986582352, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.2309928686582357, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.5501009986582348, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -7.7940278686582349, -8.6379328686582362, -8.6379328686582362, -8.6379328686582362, -7.7940278686582349, -7.7940278686582349, -8.2309928686582357]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	24,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	25,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	26,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	27,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	28,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	29,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	30,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	31,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	32,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	33,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	34,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	35,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	36,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	37,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	38,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	39,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	40,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	41,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	42,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	43,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	44,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	45,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	46,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	47,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	48,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	49,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	50,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	51,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	52,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	53,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	54,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	55,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	56,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	57,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	58,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	59,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	60,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	61,
									"scores":	[-6.5989830786582351]
								}]
						}]
				}, {
					"line":	386,
					"switches":	[{
							"switch":	80,
							"types":	[[], [], [], [], [269, 270, 271, 272, 273, 274, 275, 276], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [], [], [], [250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249], [], [], [], [], [], []],
							"begin_line":	387,
							"begin_column":	0,
							"end_line":	387,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv, 0, sizeof (*(srv)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 200;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 299;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 302;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 323;\n", "if (__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.39695600548304]
								}, {
									"case":	2,
									"scores":	[-6.39695600548304]
								}, {
									"case":	3,
									"scores":	[-6.39695600548304]
								}, {
									"case":	4,
									"scores":	[-6.39695600548304]
								}, {
									"case":	5,
									"scores":	[-6.39695600548304]
								}, {
									"case":	6,
									"scores":	[-6.39695600548304]
								}, {
									"case":	7,
									"scores":	[-6.39695600548304]
								}, {
									"case":	8,
									"scores":	[-6.39695600548304]
								}, {
									"case":	9,
									"scores":	[-6.39695600548304]
								}, {
									"case":	10,
									"scores":	[-6.39695600548304]
								}, {
									"case":	11,
									"scores":	[-6.39695600548304]
								}, {
									"case":	12,
									"scores":	[-6.39695600548304]
								}, {
									"case":	13,
									"scores":	[-6.39695600548304]
								}, {
									"case":	14,
									"scores":	[-6.39695600548304]
								}, {
									"case":	15,
									"scores":	[-6.39695600548304]
								}, {
									"case":	16,
									"scores":	[-6.39695600548304]
								}, {
									"case":	17,
									"scores":	[-6.39695600548304]
								}, {
									"case":	18,
									"scores":	[-6.39695600548304]
								}, {
									"case":	19,
									"scores":	[-6.39695600548304]
								}, {
									"case":	20,
									"scores":	[-6.39695600548304]
								}, {
									"case":	21,
									"scores":	[-6.39695600548304]
								}, {
									"case":	22,
									"scores":	[-6.39695600548304]
								}, {
									"case":	23,
									"scores":	[-6.39695600548304]
								}, {
									"case":	24,
									"scores":	[-6.39695600548304]
								}, {
									"case":	25,
									"scores":	[-6.39695600548304]
								}, {
									"case":	26,
									"scores":	[-6.39695600548304]
								}, {
									"case":	27,
									"scores":	[-6.39695600548304]
								}, {
									"case":	28,
									"scores":	[-6.39695600548304]
								}, {
									"case":	29,
									"scores":	[-6.39695600548304]
								}, {
									"case":	30,
									"scores":	[-6.39695600548304]
								}, {
									"case":	31,
									"scores":	[-6.39695600548304]
								}, {
									"case":	32,
									"scores":	[-6.39695600548304]
								}, {
									"case":	33,
									"scores":	[-6.39695600548304]
								}, {
									"case":	34,
									"scores":	[-6.39695600548304]
								}, {
									"case":	35,
									"scores":	[-6.39695600548304]
								}, {
									"case":	36,
									"scores":	[-6.39695600548304]
								}, {
									"case":	37,
									"scores":	[-6.39695600548304]
								}, {
									"case":	38,
									"scores":	[-6.39695600548304]
								}, {
									"case":	39,
									"scores":	[-6.39695600548304]
								}, {
									"case":	40,
									"scores":	[-6.39695600548304]
								}, {
									"case":	41,
									"scores":	[-6.39695600548304]
								}, {
									"case":	42,
									"scores":	[-6.39695600548304]
								}, {
									"case":	43,
									"scores":	[-6.39695600548304]
								}, {
									"case":	44,
									"scores":	[-6.39695600548304]
								}, {
									"case":	45,
									"scores":	[-6.39695600548304]
								}, {
									"case":	46,
									"scores":	[-6.39695600548304]
								}, {
									"case":	47,
									"scores":	[-6.39695600548304]
								}, {
									"case":	48,
									"scores":	[-6.39695600548304]
								}, {
									"case":	49,
									"scores":	[-6.39695600548304]
								}, {
									"case":	50,
									"scores":	[-6.39695600548304]
								}, {
									"case":	51,
									"scores":	[-6.39695600548304]
								}, {
									"case":	52,
									"scores":	[-6.39695600548304]
								}, {
									"case":	53,
									"scores":	[-6.39695600548304]
								}, {
									"case":	54,
									"scores":	[-6.39695600548304]
								}, {
									"case":	55,
									"scores":	[-6.39695600548304]
								}, {
									"case":	56,
									"scores":	[-6.39695600548304]
								}, {
									"case":	57,
									"scores":	[-6.39695600548304]
								}, {
									"case":	58,
									"scores":	[-6.39695600548304]
								}, {
									"case":	59,
									"scores":	[-6.39695600548304]
								}, {
									"case":	60,
									"scores":	[-6.39695600548304]
								}, {
									"case":	61,
									"scores":	[-6.39695600548304]
								}, {
									"case":	62,
									"scores":	[-6.39695600548304]
								}, {
									"case":	63,
									"scores":	[-6.39695600548304]
								}, {
									"case":	64,
									"scores":	[-6.39695600548304]
								}, {
									"case":	65,
									"scores":	[-6.39695600548304]
								}, {
									"case":	66,
									"scores":	[-6.39695600548304]
								}, {
									"case":	67,
									"scores":	[-6.39695600548304]
								}, {
									"case":	68,
									"scores":	[-6.39695600548304]
								}, {
									"case":	69,
									"scores":	[-6.39695600548304]
								}, {
									"case":	70,
									"scores":	[-6.39695600548304]
								}, {
									"case":	71,
									"scores":	[-6.39695600548304]
								}, {
									"case":	72,
									"scores":	[-6.39695600548304]
								}, {
									"case":	73,
									"scores":	[-6.39695600548304]
								}, {
									"case":	74,
									"scores":	[-6.39695600548304]
								}, {
									"case":	75,
									"scores":	[-6.39695600548304]
								}, {
									"case":	76,
									"scores":	[-6.39695600548304]
								}, {
									"case":	77,
									"scores":	[-6.39695600548304]
								}, {
									"case":	78,
									"scores":	[-6.39695600548304]
								}, {
									"case":	79,
									"scores":	[-6.39695600548304]
								}, {
									"case":	80,
									"scores":	[-6.39695600548304]
								}, {
									"case":	81,
									"scores":	[-6.39695600548304]
								}, {
									"case":	82,
									"scores":	[-6.39695600548304]
								}, {
									"case":	83,
									"scores":	[-6.39695600548304]
								}, {
									"case":	84,
									"scores":	[-6.39695600548304]
								}, {
									"case":	85,
									"scores":	[-6.39695600548304]
								}, {
									"case":	86,
									"scores":	[-6.39695600548304]
								}, {
									"case":	87,
									"scores":	[-6.39695600548304]
								}, {
									"case":	88,
									"scores":	[-6.39695600548304]
								}, {
									"case":	89,
									"scores":	[-6.39695600548304]
								}, {
									"case":	90,
									"scores":	[-6.39695600548304]
								}, {
									"case":	91,
									"scores":	[-6.39695600548304]
								}, {
									"case":	92,
									"scores":	[-6.39695600548304]
								}, {
									"case":	93,
									"scores":	[-6.39695600548304]
								}, {
									"case":	94,
									"scores":	[-6.39695600548304]
								}, {
									"case":	95,
									"scores":	[-6.39695600548304]
								}, {
									"case":	96,
									"scores":	[-6.39695600548304]
								}, {
									"case":	97,
									"scores":	[-6.39695600548304]
								}, {
									"case":	98,
									"scores":	[-6.39695600548304]
								}, {
									"case":	99,
									"scores":	[-6.39695600548304]
								}, {
									"case":	100,
									"scores":	[-6.39695600548304]
								}, {
									"case":	101,
									"scores":	[-6.39695600548304]
								}, {
									"case":	102,
									"scores":	[-6.39695600548304]
								}, {
									"case":	103,
									"scores":	[-6.39695600548304]
								}, {
									"case":	104,
									"scores":	[-6.39695600548304]
								}, {
									"case":	105,
									"scores":	[-6.39695600548304]
								}, {
									"case":	106,
									"scores":	[-6.39695600548304]
								}, {
									"case":	107,
									"scores":	[-6.39695600548304]
								}, {
									"case":	108,
									"scores":	[-6.39695600548304]
								}, {
									"case":	109,
									"scores":	[-6.39695600548304]
								}, {
									"case":	110,
									"scores":	[-6.39695600548304]
								}, {
									"case":	111,
									"scores":	[-6.39695600548304]
								}, {
									"case":	112,
									"scores":	[-6.39695600548304]
								}, {
									"case":	113,
									"scores":	[-6.39695600548304]
								}, {
									"case":	114,
									"scores":	[-6.39695600548304]
								}, {
									"case":	115,
									"scores":	[-6.39695600548304]
								}, {
									"case":	116,
									"scores":	[-6.39695600548304]
								}, {
									"case":	117,
									"scores":	[-6.39695600548304]
								}, {
									"case":	118,
									"scores":	[-6.39695600548304]
								}, {
									"case":	119,
									"scores":	[-6.39695600548304]
								}, {
									"case":	120,
									"scores":	[-6.39695600548304]
								}, {
									"case":	121,
									"scores":	[-6.39695600548304]
								}, {
									"case":	122,
									"scores":	[-6.39695600548304]
								}, {
									"case":	123,
									"scores":	[-6.39695600548304]
								}, {
									"case":	124,
									"scores":	[-6.39695600548304]
								}, {
									"case":	125,
									"scores":	[-6.39695600548304]
								}, {
									"case":	126,
									"scores":	[-6.39695600548304]
								}, {
									"case":	127,
									"scores":	[-6.39695600548304]
								}, {
									"case":	128,
									"scores":	[-6.39695600548304]
								}, {
									"case":	129,
									"scores":	[-6.39695600548304]
								}, {
									"case":	130,
									"scores":	[-6.39695600548304]
								}, {
									"case":	131,
									"scores":	[-6.39695600548304]
								}, {
									"case":	132,
									"scores":	[-6.39695600548304]
								}, {
									"case":	133,
									"scores":	[-6.39695600548304]
								}, {
									"case":	134,
									"scores":	[-6.39695600548304]
								}, {
									"case":	135,
									"scores":	[-6.39695600548304]
								}, {
									"case":	136,
									"scores":	[-6.39695600548304]
								}, {
									"case":	137,
									"scores":	[-6.39695600548304]
								}, {
									"case":	138,
									"scores":	[-6.39695600548304]
								}, {
									"case":	139,
									"scores":	[-6.39695600548304]
								}, {
									"case":	140,
									"scores":	[-6.39695600548304]
								}, {
									"case":	141,
									"scores":	[-6.39695600548304]
								}, {
									"case":	142,
									"scores":	[-6.39695600548304]
								}, {
									"case":	143,
									"scores":	[-6.39695600548304]
								}, {
									"case":	144,
									"scores":	[-6.39695600548304]
								}, {
									"case":	145,
									"scores":	[-6.39695600548304]
								}, {
									"case":	146,
									"scores":	[-6.39695600548304]
								}, {
									"case":	147,
									"scores":	[-6.39695600548304]
								}, {
									"case":	148,
									"scores":	[-6.39695600548304]
								}, {
									"case":	149,
									"scores":	[-6.39695600548304]
								}, {
									"case":	150,
									"scores":	[-6.39695600548304]
								}, {
									"case":	151,
									"scores":	[-6.39695600548304]
								}, {
									"case":	152,
									"scores":	[-6.39695600548304]
								}, {
									"case":	153,
									"scores":	[-6.39695600548304]
								}, {
									"case":	154,
									"scores":	[-6.39695600548304]
								}, {
									"case":	155,
									"scores":	[-6.39695600548304]
								}, {
									"case":	156,
									"scores":	[-6.39695600548304]
								}, {
									"case":	157,
									"scores":	[-6.39695600548304]
								}, {
									"case":	158,
									"scores":	[-6.39695600548304]
								}, {
									"case":	159,
									"scores":	[-6.39695600548304]
								}, {
									"case":	160,
									"scores":	[-6.39695600548304]
								}, {
									"case":	161,
									"scores":	[-6.39695600548304]
								}, {
									"case":	162,
									"scores":	[-6.39695600548304]
								}, {
									"case":	163,
									"scores":	[-6.39695600548304]
								}, {
									"case":	164,
									"scores":	[-6.39695600548304]
								}, {
									"case":	165,
									"scores":	[-6.39695600548304]
								}, {
									"case":	166,
									"scores":	[-6.39695600548304]
								}, {
									"case":	167,
									"scores":	[-6.39695600548304]
								}, {
									"case":	168,
									"scores":	[-6.39695600548304]
								}, {
									"case":	169,
									"scores":	[-6.39695600548304]
								}, {
									"case":	170,
									"scores":	[-6.39695600548304]
								}, {
									"case":	171,
									"scores":	[-6.39695600548304]
								}, {
									"case":	172,
									"scores":	[-6.39695600548304]
								}, {
									"case":	173,
									"scores":	[-6.39695600548304]
								}, {
									"case":	174,
									"scores":	[-6.39695600548304]
								}, {
									"case":	175,
									"scores":	[-6.39695600548304]
								}, {
									"case":	176,
									"scores":	[-6.39695600548304]
								}, {
									"case":	177,
									"scores":	[-6.39695600548304]
								}, {
									"case":	178,
									"scores":	[-6.39695600548304]
								}, {
									"case":	179,
									"scores":	[-6.39695600548304]
								}, {
									"case":	180,
									"scores":	[-6.39695600548304]
								}, {
									"case":	181,
									"scores":	[-6.39695600548304]
								}, {
									"case":	182,
									"scores":	[-6.39695600548304]
								}, {
									"case":	183,
									"scores":	[-6.39695600548304]
								}, {
									"case":	184,
									"scores":	[-6.39695600548304]
								}, {
									"case":	185,
									"scores":	[-6.39695600548304]
								}, {
									"case":	186,
									"scores":	[-6.39695600548304]
								}, {
									"case":	187,
									"scores":	[-6.39695600548304]
								}, {
									"case":	188,
									"scores":	[-6.39695600548304]
								}, {
									"case":	189,
									"scores":	[-6.39695600548304]
								}, {
									"case":	190,
									"scores":	[-6.39695600548304]
								}, {
									"case":	191,
									"scores":	[-6.39695600548304]
								}, {
									"case":	192,
									"scores":	[-6.39695600548304]
								}, {
									"case":	193,
									"scores":	[-6.39695600548304]
								}, {
									"case":	194,
									"scores":	[-6.39695600548304]
								}, {
									"case":	195,
									"scores":	[-6.39695600548304]
								}, {
									"case":	196,
									"scores":	[-6.39695600548304]
								}, {
									"case":	197,
									"scores":	[-6.39695600548304]
								}, {
									"case":	198,
									"scores":	[-6.39695600548304]
								}, {
									"case":	199,
									"scores":	[-6.39695600548304]
								}, {
									"case":	200,
									"scores":	[-6.39695600548304]
								}, {
									"case":	201,
									"scores":	[-6.39695600548304]
								}, {
									"case":	202,
									"scores":	[-6.39695600548304]
								}, {
									"case":	203,
									"scores":	[-6.39695600548304]
								}, {
									"case":	204,
									"scores":	[-6.39695600548304]
								}, {
									"case":	205,
									"scores":	[-6.39695600548304]
								}, {
									"case":	206,
									"scores":	[-6.39695600548304]
								}, {
									"case":	207,
									"scores":	[-6.39695600548304]
								}, {
									"case":	208,
									"scores":	[-6.39695600548304]
								}, {
									"case":	209,
									"scores":	[-6.39695600548304]
								}, {
									"case":	210,
									"scores":	[-6.39695600548304]
								}, {
									"case":	211,
									"scores":	[-6.39695600548304]
								}, {
									"case":	212,
									"scores":	[-6.39695600548304]
								}, {
									"case":	213,
									"scores":	[-6.39695600548304]
								}, {
									"case":	214,
									"scores":	[-6.39695600548304]
								}, {
									"case":	215,
									"scores":	[-6.39695600548304]
								}, {
									"case":	216,
									"scores":	[-6.39695600548304]
								}, {
									"case":	217,
									"scores":	[-6.39695600548304]
								}, {
									"case":	218,
									"scores":	[-6.39695600548304]
								}, {
									"case":	219,
									"scores":	[-6.39695600548304]
								}, {
									"case":	220,
									"scores":	[-6.39695600548304]
								}, {
									"case":	221,
									"scores":	[-6.39695600548304]
								}, {
									"case":	222,
									"scores":	[-6.39695600548304]
								}, {
									"case":	223,
									"scores":	[-6.39695600548304]
								}, {
									"case":	224,
									"scores":	[-6.39695600548304]
								}, {
									"case":	225,
									"scores":	[-6.39695600548304]
								}, {
									"case":	226,
									"scores":	[-6.39695600548304]
								}, {
									"case":	227,
									"scores":	[-6.39695600548304]
								}, {
									"case":	228,
									"scores":	[-6.39695600548304]
								}, {
									"case":	229,
									"scores":	[-6.39695600548304]
								}, {
									"case":	230,
									"scores":	[-6.39695600548304]
								}, {
									"case":	231,
									"scores":	[-6.39695600548304]
								}, {
									"case":	232,
									"scores":	[-6.39695600548304]
								}, {
									"case":	233,
									"scores":	[-6.39695600548304]
								}, {
									"case":	234,
									"scores":	[-6.39695600548304]
								}, {
									"case":	235,
									"scores":	[-6.39695600548304]
								}, {
									"case":	236,
									"scores":	[-6.39695600548304]
								}, {
									"case":	237,
									"scores":	[-6.39695600548304]
								}, {
									"case":	238,
									"scores":	[-6.39695600548304]
								}, {
									"case":	239,
									"scores":	[-6.39695600548304]
								}, {
									"case":	240,
									"scores":	[-6.39695600548304]
								}, {
									"case":	241,
									"scores":	[-6.39695600548304]
								}, {
									"case":	242,
									"scores":	[-6.39695600548304]
								}, {
									"case":	243,
									"scores":	[-6.39695600548304]
								}, {
									"case":	244,
									"scores":	[-6.39695600548304]
								}, {
									"case":	245,
									"scores":	[-6.39695600548304]
								}, {
									"case":	246,
									"scores":	[-6.39695600548304]
								}, {
									"case":	247,
									"scores":	[-6.39695600548304]
								}, {
									"case":	248,
									"scores":	[-6.39695600548304]
								}, {
									"case":	249,
									"scores":	[-6.39695600548304]
								}, {
									"case":	250,
									"scores":	[-6.39695600548304]
								}, {
									"case":	251,
									"scores":	[-6.39695600548304]
								}, {
									"case":	252,
									"scores":	[-6.39695600548304]
								}, {
									"case":	253,
									"scores":	[-6.39695600548304]
								}, {
									"case":	254,
									"scores":	[-6.39695600548304]
								}, {
									"case":	255,
									"scores":	[-6.39695600548304]
								}, {
									"case":	256,
									"scores":	[-6.39695600548304]
								}, {
									"case":	257,
									"scores":	[-6.39695600548304]
								}, {
									"case":	258,
									"scores":	[-6.39695600548304]
								}, {
									"case":	259,
									"scores":	[-6.39695600548304]
								}, {
									"case":	260,
									"scores":	[-6.39695600548304]
								}, {
									"case":	261,
									"scores":	[-6.39695600548304]
								}, {
									"case":	262,
									"scores":	[-6.39695600548304]
								}, {
									"case":	263,
									"scores":	[-6.39695600548304]
								}, {
									"case":	264,
									"scores":	[-6.39695600548304]
								}, {
									"case":	265,
									"scores":	[-6.39695600548304]
								}, {
									"case":	266,
									"scores":	[-6.39695600548304]
								}, {
									"case":	267,
									"scores":	[-6.39695600548304]
								}, {
									"case":	268,
									"scores":	[-6.39695600548304]
								}, {
									"case":	269,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}, {
									"case":	270,
									"scores":	[-8.92441182518304, -8.54151082518304, -9.36332478518304, -7.49669379368304, -7.49669379368304, -9.15512185548304, -9.41606968518304, -9.19125089748304, -9.12429741548304, -9.22550671548304, -9.12429741548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -8.76939571548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.12429741548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -8.57876371548304, -9.22550671548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.03487471548304, -9.22550671548304, -9.22550671548304, -9.22550671548304, -9.03487471548304, -9.03487471548304, -9.12429741548304]
								}, {
									"case":	271,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}, {
									"case":	272,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}, {
									"case":	273,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}, {
									"case":	274,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}, {
									"case":	275,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}, {
									"case":	276,
									"scores":	[-11.18719362518304, -10.804292625183042, -11.62610658518304, -9.75947559368304, -9.75947559368304, -11.417903655483041, -11.67885148518304, -11.45403269748304, -11.387079215483041, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.03217751548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.387079215483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -10.841545515483041, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.297656515483041, -11.48828851548304, -11.48828851548304, -11.48828851548304, -11.297656515483041, -11.297656515483041, -11.387079215483041]
								}]
						}, {
							"switch":	81,
							"types":	[[], [], [1], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114], [], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [], [], [58]],
							"begin_line":	387,
							"begin_column":	2,
							"end_line":	387,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L387\", 94, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(con->http_status), sizeof (con->http_status), &(con->file_started), sizeof (con->file_started), &(p), sizeof (p), &(srv->ev), sizeof (srv->ev), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->mode), sizeof (con->mode), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    joblist_append(srv, con);\n", "cgi_connection_close(srv, con, 0)", "cgi_connection_close(srv, con, p)", "cgi_connection_close_callback(srv, con, 0)", "cgi_copy_response(srv, con, 0)", "cgi_copy_response(srv, con, sess)", "cgi_demux_response(srv, con, 0)", "cgi_demux_response(srv, con, p)", "cgi_pid_add(srv, con, -1)", "cgi_pid_add(srv, con, 0)", "cgi_pid_add(srv, con, 1)", "cgi_pid_add(srv, con, 200)", "cgi_pid_add(srv, con, 299)", "cgi_pid_add(srv, con, 302)", "cgi_pid_add(srv, con, 323)", "cgi_pid_add(srv, con, 502)", "cgi_pid_del(srv, con, -1)", "cgi_pid_del(srv, con, 0)", "cgi_pid_del(srv, con, 1)", "cgi_pid_del(srv, con, 200)", "cgi_pid_del(srv, con, 299)", "cgi_pid_del(srv, con, 302)", "cgi_pid_del(srv, con, 323)", "cgi_pid_del(srv, con, 502)", "config_check_cond(srv, con, 0)", "config_get_value_buffer(srv, con, -1)", "config_get_value_buffer(srv, con, 0)", "config_get_value_buffer(srv, con, 1)", "config_get_value_buffer(srv, con, 200)", "config_get_value_buffer(srv, con, 299)", "config_get_value_buffer(srv, con, 302)", "config_get_value_buffer(srv, con, 323)", "config_get_value_buffer(srv, con, 502)", "config_insert_values_global(srv, con, 0)", "config_insert_values_internal(srv, con, 0)", "config_patch_connection(srv, con, -1)", "config_patch_connection(srv, con, 0)", "config_patch_connection(srv, con, 1)", "config_patch_connection(srv, con, 200)", "config_patch_connection(srv, con, 299)", "config_patch_connection(srv, con, 302)", "config_patch_connection(srv, con, 323)", "config_patch_connection(srv, con, 502)", "connection_set_state(srv, con, -1)", "connection_set_state(srv, con, 0)", "connection_set_state(srv, con, 1)", "connection_set_state(srv, con, 200)", "connection_set_state(srv, con, 299)", "connection_set_state(srv, con, 302)", "connection_set_state(srv, con, 323)", "connection_set_state(srv, con, 502)", "mod_cgi_patch_connection(srv, con, 0)", "mod_cgi_patch_connection(srv, con, p)", "mod_cgi_read_response_content(srv, con, 0)", "mod_cgi_send_request_content(srv, con, 0)", "mod_cgi_start_backend(srv, con, 0)", "network_write_chunkqueue(srv, con, 0)", "{\n}\n", "VALGRIND_PRINTF(srv, con)", "VALGRIND_PRINTF_BACKTRACE(srv, con)", "__builtin_va_start(srv, con)", "cgi_trigger(srv, con)", "config_read(srv, con)", "config_setup_connection(srv, con)", "connection_accept(srv, con)", "connection_close(srv, con)", "connection_reset(srv, con)", "connection_state_machine(srv, con)", "fdwaitqueue_append(srv, con)", "fdwaitqueue_free(srv, con)", "fdwaitqueue_unshift(srv, con)", "g_build_filename(srv, con)", "g_markup_printf_escaped(srv, con)", "g_print(srv, con)", "g_printerr(srv, con)", "g_relation_exists(srv, con)", "g_relation_insert(srv, con)", "g_strconcat(srv, con)", "g_strdup_printf(srv, con)", "g_strjoin(srv, con)", "g_test_message(srv, con)", "g_variant_new(srv, con)", "g_variant_new_parsed(srv, con)", "g_variant_new_printf(srv, con)", "joblist_free(srv, con)", "log_trace(srv, con)", "mod_cgi_free(srv, con)", "mod_cgi_set_defaults(srv, con)", "plugin_get_config(srv, con)", "plugins_call_connection_reset(srv, con)", "plugins_call_handle_connection_close(srv, con)", "plugins_call_handle_docroot(srv, con)", "plugins_call_handle_filter_response_content(srv, con)", "plugins_call_handle_joblist(srv, con)", "plugins_call_handle_physical(srv, con)", "plugins_call_handle_read_response_content(srv, con)", "plugins_call_handle_response_done(srv, con)", "plugins_call_handle_response_header(srv, con)", "plugins_call_handle_send_request_content(srv, con)", "plugins_call_handle_start_backend(srv, con)", "plugins_call_handle_uri_clean(srv, con)", "plugins_call_handle_uri_raw(srv, con)", "printf(srv, con)", "server_out_of_fds(srv, con)", "joblist_append((&con), con)", "joblist_append((&p), con)", "joblist_append((&sess), con)", "joblist_append((&srv), con)", "joblist_append((srv), con)", "joblist_append(srv, (&con))", "joblist_append(srv, (&p))", "joblist_append(srv, (&sess))", "joblist_append(srv, (&srv))", "joblist_append(srv, (con))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.05857594918304, -7.84314624918304, -8.24310834918304, -7.80806942148304, -7.80806942148304, -8.15699249748304, -8.21812611818304, -7.45010663048304, -7.82325879848304, -8.23019879848304, -7.82325879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.98627192848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.82325879848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.14236692848304, -8.23019879848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.38629379848304, -8.23019879848304, -8.23019879848304, -8.23019879848304, -7.38629379848304, -7.38629379848304, -7.82325879848304]
								}, {
									"case":	2,
									"scores":	[-6.39695600548304]
								}, {
									"case":	3,
									"scores":	[-6.39695600548304]
								}, {
									"case":	4,
									"scores":	[-6.39695600548304]
								}, {
									"case":	5,
									"scores":	[-6.39695600548304]
								}, {
									"case":	6,
									"scores":	[-6.39695600548304]
								}, {
									"case":	7,
									"scores":	[-6.39695600548304]
								}, {
									"case":	8,
									"scores":	[-6.39695600548304]
								}, {
									"case":	9,
									"scores":	[-6.39695600548304]
								}, {
									"case":	10,
									"scores":	[-6.39695600548304]
								}, {
									"case":	11,
									"scores":	[-6.39695600548304]
								}, {
									"case":	12,
									"scores":	[-6.39695600548304]
								}, {
									"case":	13,
									"scores":	[-6.39695600548304]
								}, {
									"case":	14,
									"scores":	[-6.39695600548304]
								}, {
									"case":	15,
									"scores":	[-6.39695600548304]
								}, {
									"case":	16,
									"scores":	[-6.39695600548304]
								}, {
									"case":	17,
									"scores":	[-6.39695600548304]
								}, {
									"case":	18,
									"scores":	[-6.39695600548304]
								}, {
									"case":	19,
									"scores":	[-6.39695600548304]
								}, {
									"case":	20,
									"scores":	[-6.39695600548304]
								}, {
									"case":	21,
									"scores":	[-6.39695600548304]
								}, {
									"case":	22,
									"scores":	[-6.39695600548304]
								}, {
									"case":	23,
									"scores":	[-6.39695600548304]
								}, {
									"case":	24,
									"scores":	[-6.39695600548304]
								}, {
									"case":	25,
									"scores":	[-6.39695600548304]
								}, {
									"case":	26,
									"scores":	[-6.39695600548304]
								}, {
									"case":	27,
									"scores":	[-6.39695600548304]
								}, {
									"case":	28,
									"scores":	[-6.39695600548304]
								}, {
									"case":	29,
									"scores":	[-6.39695600548304]
								}, {
									"case":	30,
									"scores":	[-6.39695600548304]
								}, {
									"case":	31,
									"scores":	[-6.39695600548304]
								}, {
									"case":	32,
									"scores":	[-6.39695600548304]
								}, {
									"case":	33,
									"scores":	[-6.39695600548304]
								}, {
									"case":	34,
									"scores":	[-6.39695600548304]
								}, {
									"case":	35,
									"scores":	[-6.39695600548304]
								}, {
									"case":	36,
									"scores":	[-6.39695600548304]
								}, {
									"case":	37,
									"scores":	[-6.39695600548304]
								}, {
									"case":	38,
									"scores":	[-6.39695600548304]
								}, {
									"case":	39,
									"scores":	[-6.39695600548304]
								}, {
									"case":	40,
									"scores":	[-6.39695600548304]
								}, {
									"case":	41,
									"scores":	[-6.39695600548304]
								}, {
									"case":	42,
									"scores":	[-6.39695600548304]
								}, {
									"case":	43,
									"scores":	[-6.39695600548304]
								}, {
									"case":	44,
									"scores":	[-6.39695600548304]
								}, {
									"case":	45,
									"scores":	[-6.39695600548304]
								}, {
									"case":	46,
									"scores":	[-6.39695600548304]
								}, {
									"case":	47,
									"scores":	[-6.39695600548304]
								}, {
									"case":	48,
									"scores":	[-6.39695600548304]
								}, {
									"case":	49,
									"scores":	[-6.39695600548304]
								}, {
									"case":	50,
									"scores":	[-6.39695600548304]
								}, {
									"case":	51,
									"scores":	[-6.39695600548304]
								}, {
									"case":	52,
									"scores":	[-6.39695600548304]
								}, {
									"case":	53,
									"scores":	[-6.39695600548304]
								}, {
									"case":	54,
									"scores":	[-6.39695600548304]
								}, {
									"case":	55,
									"scores":	[-6.39695600548304]
								}, {
									"case":	56,
									"scores":	[-6.39695600548304]
								}, {
									"case":	57,
									"scores":	[-6.39695600548304]
								}, {
									"case":	58,
									"scores":	[-6.39695600548304]
								}, {
									"case":	59,
									"scores":	[-6.39695600548304]
								}, {
									"case":	60,
									"scores":	[-6.39695600548304]
								}, {
									"case":	61,
									"scores":	[-6.39695600548304]
								}, {
									"case":	62,
									"scores":	[-6.39695600548304]
								}, {
									"case":	63,
									"scores":	[-6.39695600548304]
								}, {
									"case":	64,
									"scores":	[-6.39695600548304]
								}, {
									"case":	65,
									"scores":	[-6.39695600548304]
								}, {
									"case":	66,
									"scores":	[-6.39695600548304]
								}, {
									"case":	67,
									"scores":	[-6.39695600548304]
								}, {
									"case":	68,
									"scores":	[-6.39695600548304]
								}, {
									"case":	69,
									"scores":	[-6.39695600548304]
								}, {
									"case":	70,
									"scores":	[-6.39695600548304]
								}, {
									"case":	71,
									"scores":	[-6.39695600548304]
								}, {
									"case":	72,
									"scores":	[-6.39695600548304]
								}, {
									"case":	73,
									"scores":	[-6.39695600548304]
								}, {
									"case":	74,
									"scores":	[-6.39695600548304]
								}, {
									"case":	75,
									"scores":	[-6.39695600548304]
								}, {
									"case":	76,
									"scores":	[-6.39695600548304]
								}, {
									"case":	77,
									"scores":	[-6.39695600548304]
								}, {
									"case":	78,
									"scores":	[-6.39695600548304]
								}, {
									"case":	79,
									"scores":	[-6.39695600548304]
								}, {
									"case":	80,
									"scores":	[-6.39695600548304]
								}, {
									"case":	81,
									"scores":	[-6.39695600548304]
								}, {
									"case":	82,
									"scores":	[-6.39695600548304]
								}, {
									"case":	83,
									"scores":	[-6.39695600548304]
								}, {
									"case":	84,
									"scores":	[-6.39695600548304]
								}, {
									"case":	85,
									"scores":	[-6.39695600548304]
								}, {
									"case":	86,
									"scores":	[-6.39695600548304]
								}, {
									"case":	87,
									"scores":	[-6.39695600548304]
								}, {
									"case":	88,
									"scores":	[-6.39695600548304]
								}, {
									"case":	89,
									"scores":	[-6.39695600548304]
								}, {
									"case":	90,
									"scores":	[-6.39695600548304]
								}, {
									"case":	91,
									"scores":	[-6.39695600548304]
								}, {
									"case":	92,
									"scores":	[-6.39695600548304]
								}, {
									"case":	93,
									"scores":	[-6.39695600548304]
								}, {
									"case":	94,
									"scores":	[-6.39695600548304]
								}, {
									"case":	95,
									"scores":	[-6.39695600548304]
								}, {
									"case":	96,
									"scores":	[-6.39695600548304]
								}, {
									"case":	97,
									"scores":	[-6.39695600548304]
								}, {
									"case":	98,
									"scores":	[-6.39695600548304]
								}, {
									"case":	99,
									"scores":	[-6.39695600548304]
								}, {
									"case":	100,
									"scores":	[-6.39695600548304]
								}, {
									"case":	101,
									"scores":	[-6.39695600548304]
								}, {
									"case":	102,
									"scores":	[-6.39695600548304]
								}, {
									"case":	103,
									"scores":	[-6.39695600548304]
								}, {
									"case":	104,
									"scores":	[-6.39695600548304]
								}, {
									"case":	105,
									"scores":	[-6.39695600548304]
								}, {
									"case":	106,
									"scores":	[-6.39695600548304]
								}, {
									"case":	107,
									"scores":	[-6.39695600548304]
								}, {
									"case":	108,
									"scores":	[-6.39695600548304]
								}, {
									"case":	109,
									"scores":	[-6.39695600548304]
								}, {
									"case":	110,
									"scores":	[-6.39695600548304]
								}, {
									"case":	111,
									"scores":	[-6.39695600548304]
								}, {
									"case":	112,
									"scores":	[-6.39695600548304]
								}, {
									"case":	113,
									"scores":	[-6.39695600548304]
								}, {
									"case":	114,
									"scores":	[-6.39695600548304]
								}]
						}]
				}, {
					"line":	388,
					"switches":	[{
							"switch":	82,
							"types":	[[], [], [], [], [267, 268, 269, 270, 271, 272, 273, 274], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], [], [], [], [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247], [], [], [], [], [], []],
							"begin_line":	389,
							"begin_column":	0,
							"end_line":	389,
							"end_column":	0,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_copy_response((srv), con, sess)", "cgi_copy_response(srv, (con), sess)", "cgi_copy_response(srv, con, (sess))", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->file_started = (-1)", "con->file_started = (0)", "con->file_started = (1)", "con->file_started = (200)", "con->file_started = (299)", "con->file_started = (302)", "con->file_started = (323)", "con->file_started = (502)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (200)", "con->http_status = (299)", "con->http_status = (302)", "con->http_status = (323)", "con->http_status = (502)", "con->response.transfer_encoding = (-1)", "con->response.transfer_encoding = (0)", "con->response.transfer_encoding = (1)", "con->response.transfer_encoding = (200)", "con->response.transfer_encoding = (299)", "con->response.transfer_encoding = (302)", "con->response.transfer_encoding = (323)", "con->response.transfer_encoding = (502)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_CHUNKED)", "con->response.transfer_encoding = (HTTP_TRANSFER_ENCODING_IDENTITY)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "joblist_append((srv), con)", "joblist_append(srv, (con))", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess->rb->is_closed = (-1)", "sess->rb->is_closed = (0)", "sess->rb->is_closed = (1)", "sess->rb->is_closed = (200)", "sess->rb->is_closed = (299)", "sess->rb->is_closed = (302)", "sess->rb->is_closed = (323)", "sess->rb->is_closed = (502)", "sess->state = (-1)", "sess->state = (0)", "sess->state = (1)", "sess->state = (200)", "sess->state = (299)", "sess->state = (302)", "sess->state = (323)", "sess->state = (502)", "sess->state = (CGI_STATE_CONNECTING)", "sess->state = (CGI_STATE_READ_RESPONSE_CONTENT)", "sess->state = (CGI_STATE_READ_RESPONSE_HEADER)", "sess->state = (CGI_STATE_UNSET)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_copy_response(srv, con, sess)", "chunkqueue_remove_finished_chunks(sess->rb)", "close(0)", "close(1)", "close(2)", "con->file_started = 1", "con->http_status = 200", "con->http_status = 302", "con->http_status = 502", "con->response.transfer_encoding = HTTP_TRANSFER_ENCODING_CHUNKED", "http_response_reset(p->resp)", "joblist_append(srv, con)", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess->rb->is_closed = 1", "sess->state = CGI_STATE_READ_RESPONSE_CONTENT", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return -1;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 0;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 1;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 200;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 299;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 302;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 323;\n", "if (__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 502;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.356550590848]
								}, {
									"case":	2,
									"scores":	[-6.356550590848]
								}, {
									"case":	3,
									"scores":	[-6.356550590848]
								}, {
									"case":	4,
									"scores":	[-6.356550590848]
								}, {
									"case":	5,
									"scores":	[-6.356550590848]
								}, {
									"case":	6,
									"scores":	[-6.356550590848]
								}, {
									"case":	7,
									"scores":	[-6.356550590848]
								}, {
									"case":	8,
									"scores":	[-6.356550590848]
								}, {
									"case":	9,
									"scores":	[-6.356550590848]
								}, {
									"case":	10,
									"scores":	[-6.356550590848]
								}, {
									"case":	11,
									"scores":	[-6.356550590848]
								}, {
									"case":	12,
									"scores":	[-6.356550590848]
								}, {
									"case":	13,
									"scores":	[-6.356550590848]
								}, {
									"case":	14,
									"scores":	[-6.356550590848]
								}, {
									"case":	15,
									"scores":	[-6.356550590848]
								}, {
									"case":	16,
									"scores":	[-6.356550590848]
								}, {
									"case":	17,
									"scores":	[-6.356550590848]
								}, {
									"case":	18,
									"scores":	[-6.356550590848]
								}, {
									"case":	19,
									"scores":	[-6.356550590848]
								}, {
									"case":	20,
									"scores":	[-6.356550590848]
								}, {
									"case":	21,
									"scores":	[-6.356550590848]
								}, {
									"case":	22,
									"scores":	[-6.356550590848]
								}, {
									"case":	23,
									"scores":	[-6.356550590848]
								}, {
									"case":	24,
									"scores":	[-6.356550590848]
								}, {
									"case":	25,
									"scores":	[-6.356550590848]
								}, {
									"case":	26,
									"scores":	[-6.356550590848]
								}, {
									"case":	27,
									"scores":	[-6.356550590848]
								}, {
									"case":	28,
									"scores":	[-6.356550590848]
								}, {
									"case":	29,
									"scores":	[-6.356550590848]
								}, {
									"case":	30,
									"scores":	[-6.356550590848]
								}, {
									"case":	31,
									"scores":	[-6.356550590848]
								}, {
									"case":	32,
									"scores":	[-6.356550590848]
								}, {
									"case":	33,
									"scores":	[-6.356550590848]
								}, {
									"case":	34,
									"scores":	[-6.356550590848]
								}, {
									"case":	35,
									"scores":	[-6.356550590848]
								}, {
									"case":	36,
									"scores":	[-6.356550590848]
								}, {
									"case":	37,
									"scores":	[-6.356550590848]
								}, {
									"case":	38,
									"scores":	[-6.356550590848]
								}, {
									"case":	39,
									"scores":	[-6.356550590848]
								}, {
									"case":	40,
									"scores":	[-6.356550590848]
								}, {
									"case":	41,
									"scores":	[-6.356550590848]
								}, {
									"case":	42,
									"scores":	[-6.356550590848]
								}, {
									"case":	43,
									"scores":	[-6.356550590848]
								}, {
									"case":	44,
									"scores":	[-6.356550590848]
								}, {
									"case":	45,
									"scores":	[-6.356550590848]
								}, {
									"case":	46,
									"scores":	[-6.356550590848]
								}, {
									"case":	47,
									"scores":	[-6.356550590848]
								}, {
									"case":	48,
									"scores":	[-6.356550590848]
								}, {
									"case":	49,
									"scores":	[-6.356550590848]
								}, {
									"case":	50,
									"scores":	[-6.356550590848]
								}, {
									"case":	51,
									"scores":	[-6.356550590848]
								}, {
									"case":	52,
									"scores":	[-6.356550590848]
								}, {
									"case":	53,
									"scores":	[-6.356550590848]
								}, {
									"case":	54,
									"scores":	[-6.356550590848]
								}, {
									"case":	55,
									"scores":	[-6.356550590848]
								}, {
									"case":	56,
									"scores":	[-6.356550590848]
								}, {
									"case":	57,
									"scores":	[-6.356550590848]
								}, {
									"case":	58,
									"scores":	[-6.356550590848]
								}, {
									"case":	59,
									"scores":	[-6.356550590848]
								}, {
									"case":	60,
									"scores":	[-6.356550590848]
								}, {
									"case":	61,
									"scores":	[-6.356550590848]
								}, {
									"case":	62,
									"scores":	[-6.356550590848]
								}, {
									"case":	63,
									"scores":	[-6.356550590848]
								}, {
									"case":	64,
									"scores":	[-6.356550590848]
								}, {
									"case":	65,
									"scores":	[-6.356550590848]
								}, {
									"case":	66,
									"scores":	[-6.356550590848]
								}, {
									"case":	67,
									"scores":	[-6.356550590848]
								}, {
									"case":	68,
									"scores":	[-6.356550590848]
								}, {
									"case":	69,
									"scores":	[-6.356550590848]
								}, {
									"case":	70,
									"scores":	[-6.356550590848]
								}, {
									"case":	71,
									"scores":	[-6.356550590848]
								}, {
									"case":	72,
									"scores":	[-6.356550590848]
								}, {
									"case":	73,
									"scores":	[-6.356550590848]
								}, {
									"case":	74,
									"scores":	[-6.356550590848]
								}, {
									"case":	75,
									"scores":	[-6.356550590848]
								}, {
									"case":	76,
									"scores":	[-6.356550590848]
								}, {
									"case":	77,
									"scores":	[-6.356550590848]
								}, {
									"case":	78,
									"scores":	[-6.356550590848]
								}, {
									"case":	79,
									"scores":	[-6.356550590848]
								}, {
									"case":	80,
									"scores":	[-6.356550590848]
								}, {
									"case":	81,
									"scores":	[-6.356550590848]
								}, {
									"case":	82,
									"scores":	[-6.356550590848]
								}, {
									"case":	83,
									"scores":	[-6.356550590848]
								}, {
									"case":	84,
									"scores":	[-6.356550590848]
								}, {
									"case":	85,
									"scores":	[-6.356550590848]
								}, {
									"case":	86,
									"scores":	[-6.356550590848]
								}, {
									"case":	87,
									"scores":	[-6.356550590848]
								}, {
									"case":	88,
									"scores":	[-6.356550590848]
								}, {
									"case":	89,
									"scores":	[-6.356550590848]
								}, {
									"case":	90,
									"scores":	[-6.356550590848]
								}, {
									"case":	91,
									"scores":	[-6.356550590848]
								}, {
									"case":	92,
									"scores":	[-6.356550590848]
								}, {
									"case":	93,
									"scores":	[-6.356550590848]
								}, {
									"case":	94,
									"scores":	[-6.356550590848]
								}, {
									"case":	95,
									"scores":	[-6.356550590848]
								}, {
									"case":	96,
									"scores":	[-6.356550590848]
								}, {
									"case":	97,
									"scores":	[-6.356550590848]
								}, {
									"case":	98,
									"scores":	[-6.356550590848]
								}, {
									"case":	99,
									"scores":	[-6.356550590848]
								}, {
									"case":	100,
									"scores":	[-6.356550590848]
								}, {
									"case":	101,
									"scores":	[-6.356550590848]
								}, {
									"case":	102,
									"scores":	[-6.356550590848]
								}, {
									"case":	103,
									"scores":	[-6.356550590848]
								}, {
									"case":	104,
									"scores":	[-6.356550590848]
								}, {
									"case":	105,
									"scores":	[-6.356550590848]
								}, {
									"case":	106,
									"scores":	[-6.356550590848]
								}, {
									"case":	107,
									"scores":	[-6.356550590848]
								}, {
									"case":	108,
									"scores":	[-6.356550590848]
								}, {
									"case":	109,
									"scores":	[-6.356550590848]
								}, {
									"case":	110,
									"scores":	[-6.356550590848]
								}, {
									"case":	111,
									"scores":	[-6.356550590848]
								}, {
									"case":	112,
									"scores":	[-6.356550590848]
								}, {
									"case":	113,
									"scores":	[-6.356550590848]
								}, {
									"case":	114,
									"scores":	[-6.356550590848]
								}, {
									"case":	115,
									"scores":	[-6.356550590848]
								}, {
									"case":	116,
									"scores":	[-6.356550590848]
								}, {
									"case":	117,
									"scores":	[-6.356550590848]
								}, {
									"case":	118,
									"scores":	[-6.356550590848]
								}, {
									"case":	119,
									"scores":	[-6.356550590848]
								}, {
									"case":	120,
									"scores":	[-6.356550590848]
								}, {
									"case":	121,
									"scores":	[-6.356550590848]
								}, {
									"case":	122,
									"scores":	[-6.356550590848]
								}, {
									"case":	123,
									"scores":	[-6.356550590848]
								}, {
									"case":	124,
									"scores":	[-6.356550590848]
								}, {
									"case":	125,
									"scores":	[-6.356550590848]
								}, {
									"case":	126,
									"scores":	[-6.356550590848]
								}, {
									"case":	127,
									"scores":	[-6.356550590848]
								}, {
									"case":	128,
									"scores":	[-6.356550590848]
								}, {
									"case":	129,
									"scores":	[-6.356550590848]
								}, {
									"case":	130,
									"scores":	[-6.356550590848]
								}, {
									"case":	131,
									"scores":	[-6.356550590848]
								}, {
									"case":	132,
									"scores":	[-6.356550590848]
								}, {
									"case":	133,
									"scores":	[-6.356550590848]
								}, {
									"case":	134,
									"scores":	[-6.356550590848]
								}, {
									"case":	135,
									"scores":	[-6.356550590848]
								}, {
									"case":	136,
									"scores":	[-6.356550590848]
								}, {
									"case":	137,
									"scores":	[-6.356550590848]
								}, {
									"case":	138,
									"scores":	[-6.356550590848]
								}, {
									"case":	139,
									"scores":	[-6.356550590848]
								}, {
									"case":	140,
									"scores":	[-6.356550590848]
								}, {
									"case":	141,
									"scores":	[-6.356550590848]
								}, {
									"case":	142,
									"scores":	[-6.356550590848]
								}, {
									"case":	143,
									"scores":	[-6.356550590848]
								}, {
									"case":	144,
									"scores":	[-6.356550590848]
								}, {
									"case":	145,
									"scores":	[-6.356550590848]
								}, {
									"case":	146,
									"scores":	[-6.356550590848]
								}, {
									"case":	147,
									"scores":	[-6.356550590848]
								}, {
									"case":	148,
									"scores":	[-6.356550590848]
								}, {
									"case":	149,
									"scores":	[-6.356550590848]
								}, {
									"case":	150,
									"scores":	[-6.356550590848]
								}, {
									"case":	151,
									"scores":	[-6.356550590848]
								}, {
									"case":	152,
									"scores":	[-6.356550590848]
								}, {
									"case":	153,
									"scores":	[-6.356550590848]
								}, {
									"case":	154,
									"scores":	[-6.356550590848]
								}, {
									"case":	155,
									"scores":	[-6.356550590848]
								}, {
									"case":	156,
									"scores":	[-6.356550590848]
								}, {
									"case":	157,
									"scores":	[-6.356550590848]
								}, {
									"case":	158,
									"scores":	[-6.356550590848]
								}, {
									"case":	159,
									"scores":	[-6.356550590848]
								}, {
									"case":	160,
									"scores":	[-6.356550590848]
								}, {
									"case":	161,
									"scores":	[-6.356550590848]
								}, {
									"case":	162,
									"scores":	[-6.356550590848]
								}, {
									"case":	163,
									"scores":	[-6.356550590848]
								}, {
									"case":	164,
									"scores":	[-6.356550590848]
								}, {
									"case":	165,
									"scores":	[-6.356550590848]
								}, {
									"case":	166,
									"scores":	[-6.356550590848]
								}, {
									"case":	167,
									"scores":	[-6.356550590848]
								}, {
									"case":	168,
									"scores":	[-6.356550590848]
								}, {
									"case":	169,
									"scores":	[-6.356550590848]
								}, {
									"case":	170,
									"scores":	[-6.356550590848]
								}, {
									"case":	171,
									"scores":	[-6.356550590848]
								}, {
									"case":	172,
									"scores":	[-6.356550590848]
								}, {
									"case":	173,
									"scores":	[-6.356550590848]
								}, {
									"case":	174,
									"scores":	[-6.356550590848]
								}, {
									"case":	175,
									"scores":	[-6.356550590848]
								}, {
									"case":	176,
									"scores":	[-6.356550590848]
								}, {
									"case":	177,
									"scores":	[-6.356550590848]
								}, {
									"case":	178,
									"scores":	[-6.356550590848]
								}, {
									"case":	179,
									"scores":	[-6.356550590848]
								}, {
									"case":	180,
									"scores":	[-6.356550590848]
								}, {
									"case":	181,
									"scores":	[-6.356550590848]
								}, {
									"case":	182,
									"scores":	[-6.356550590848]
								}, {
									"case":	183,
									"scores":	[-6.356550590848]
								}, {
									"case":	184,
									"scores":	[-6.356550590848]
								}, {
									"case":	185,
									"scores":	[-6.356550590848]
								}, {
									"case":	186,
									"scores":	[-6.356550590848]
								}, {
									"case":	187,
									"scores":	[-6.356550590848]
								}, {
									"case":	188,
									"scores":	[-6.356550590848]
								}, {
									"case":	189,
									"scores":	[-6.356550590848]
								}, {
									"case":	190,
									"scores":	[-6.356550590848]
								}, {
									"case":	191,
									"scores":	[-6.356550590848]
								}, {
									"case":	192,
									"scores":	[-6.356550590848]
								}, {
									"case":	193,
									"scores":	[-6.356550590848]
								}, {
									"case":	194,
									"scores":	[-6.356550590848]
								}, {
									"case":	195,
									"scores":	[-6.356550590848]
								}, {
									"case":	196,
									"scores":	[-6.356550590848]
								}, {
									"case":	197,
									"scores":	[-6.356550590848]
								}, {
									"case":	198,
									"scores":	[-6.356550590848]
								}, {
									"case":	199,
									"scores":	[-6.356550590848]
								}, {
									"case":	200,
									"scores":	[-6.356550590848]
								}, {
									"case":	201,
									"scores":	[-6.356550590848]
								}, {
									"case":	202,
									"scores":	[-6.356550590848]
								}, {
									"case":	203,
									"scores":	[-6.356550590848]
								}, {
									"case":	204,
									"scores":	[-6.356550590848]
								}, {
									"case":	205,
									"scores":	[-6.356550590848]
								}, {
									"case":	206,
									"scores":	[-6.356550590848]
								}, {
									"case":	207,
									"scores":	[-6.356550590848]
								}, {
									"case":	208,
									"scores":	[-6.356550590848]
								}, {
									"case":	209,
									"scores":	[-6.356550590848]
								}, {
									"case":	210,
									"scores":	[-6.356550590848]
								}, {
									"case":	211,
									"scores":	[-6.356550590848]
								}, {
									"case":	212,
									"scores":	[-6.356550590848]
								}, {
									"case":	213,
									"scores":	[-6.356550590848]
								}, {
									"case":	214,
									"scores":	[-6.356550590848]
								}, {
									"case":	215,
									"scores":	[-6.356550590848]
								}, {
									"case":	216,
									"scores":	[-6.356550590848]
								}, {
									"case":	217,
									"scores":	[-6.356550590848]
								}, {
									"case":	218,
									"scores":	[-6.356550590848]
								}, {
									"case":	219,
									"scores":	[-6.356550590848]
								}, {
									"case":	220,
									"scores":	[-6.356550590848]
								}, {
									"case":	221,
									"scores":	[-6.356550590848]
								}, {
									"case":	222,
									"scores":	[-6.356550590848]
								}, {
									"case":	223,
									"scores":	[-6.356550590848]
								}, {
									"case":	224,
									"scores":	[-6.356550590848]
								}, {
									"case":	225,
									"scores":	[-6.356550590848]
								}, {
									"case":	226,
									"scores":	[-6.356550590848]
								}, {
									"case":	227,
									"scores":	[-6.356550590848]
								}, {
									"case":	228,
									"scores":	[-6.356550590848]
								}, {
									"case":	229,
									"scores":	[-6.356550590848]
								}, {
									"case":	230,
									"scores":	[-6.356550590848]
								}, {
									"case":	231,
									"scores":	[-6.356550590848]
								}, {
									"case":	232,
									"scores":	[-6.356550590848]
								}, {
									"case":	233,
									"scores":	[-6.356550590848]
								}, {
									"case":	234,
									"scores":	[-6.356550590848]
								}, {
									"case":	235,
									"scores":	[-6.356550590848]
								}, {
									"case":	236,
									"scores":	[-6.356550590848]
								}, {
									"case":	237,
									"scores":	[-6.356550590848]
								}, {
									"case":	238,
									"scores":	[-6.356550590848]
								}, {
									"case":	239,
									"scores":	[-6.356550590848]
								}, {
									"case":	240,
									"scores":	[-6.356550590848]
								}, {
									"case":	241,
									"scores":	[-6.356550590848]
								}, {
									"case":	242,
									"scores":	[-6.356550590848]
								}, {
									"case":	243,
									"scores":	[-6.356550590848]
								}, {
									"case":	244,
									"scores":	[-6.356550590848]
								}, {
									"case":	245,
									"scores":	[-6.356550590848]
								}, {
									"case":	246,
									"scores":	[-6.356550590848]
								}, {
									"case":	247,
									"scores":	[-6.356550590848]
								}, {
									"case":	248,
									"scores":	[-6.356550590848]
								}, {
									"case":	249,
									"scores":	[-6.356550590848]
								}, {
									"case":	250,
									"scores":	[-6.356550590848]
								}, {
									"case":	251,
									"scores":	[-6.356550590848]
								}, {
									"case":	252,
									"scores":	[-6.356550590848]
								}, {
									"case":	253,
									"scores":	[-6.356550590848]
								}, {
									"case":	254,
									"scores":	[-6.356550590848]
								}, {
									"case":	255,
									"scores":	[-6.356550590848]
								}, {
									"case":	256,
									"scores":	[-6.356550590848]
								}, {
									"case":	257,
									"scores":	[-6.356550590848]
								}, {
									"case":	258,
									"scores":	[-6.356550590848]
								}, {
									"case":	259,
									"scores":	[-6.356550590848]
								}, {
									"case":	260,
									"scores":	[-6.356550590848]
								}, {
									"case":	261,
									"scores":	[-6.356550590848]
								}, {
									"case":	262,
									"scores":	[-6.356550590848]
								}, {
									"case":	263,
									"scores":	[-6.356550590848]
								}, {
									"case":	264,
									"scores":	[-6.356550590848]
								}, {
									"case":	265,
									"scores":	[-6.356550590848]
								}, {
									"case":	266,
									"scores":	[-6.356550590848]
								}, {
									"case":	267,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}, {
									"case":	268,
									"scores":	[-8.843498309548, -9.072253009548, -8.894990169548, -8.686787239848]
								}, {
									"case":	269,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}, {
									"case":	270,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}, {
									"case":	271,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}, {
									"case":	272,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}, {
									"case":	273,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}, {
									"case":	274,
									"scores":	[-11.106280109548, -11.335034809548, -11.157771969548, -10.949569039848]
								}]
						}, {
							"switch":	83,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	389,
							"begin_column":	2,
							"end_line":	389,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L389\", 4, &(srv), sizeof (srv), &(con), sizeof (con), &(sess), sizeof (sess), &(p), sizeof (p)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.049094213548, -8.303617144548, -8.038835644548, -7.952719792848]
								}]
						}]
				}, {
					"line":	705,
					"switches":	[{
							"switch":	86,
							"types":	[[], [], [], [], [486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], [], [], [], [418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], [], [], [], [], [], []],
							"begin_line":	706,
							"begin_column":	2,
							"end_line":	706,
							"end_column":	2,
							"patch_codes":	["memset(&cgi_handler->ptr, 0, sizeof (*(&cgi_handler->ptr)))", "memset(&cgi_handler->size, 0, sizeof (*(&cgi_handler->size)))", "memset(&cgi_handler->used, 0, sizeof (*(&cgi_handler->used)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr.ipv4, 0, sizeof (*(&con->dst_addr.ipv4)))", "memset(&con->dst_addr.ipv4.sin_addr, 0, sizeof (*(&con->dst_addr.ipv4.sin_addr)))", "memset(&con->dst_addr.ipv4.sin_family, 0, sizeof (*(&con->dst_addr.ipv4.sin_family)))", "memset(&con->dst_addr.ipv4.sin_port, 0, sizeof (*(&con->dst_addr.ipv4.sin_port)))", "memset(&con->dst_addr.ipv4.sin_zero, 0, sizeof (*(&con->dst_addr.ipv4.sin_zero)))", "memset(&con->dst_addr.ipv6, 0, sizeof (*(&con->dst_addr.ipv6)))", "memset(&con->dst_addr.ipv6.sin6_addr, 0, sizeof (*(&con->dst_addr.ipv6.sin6_addr)))", "memset(&con->dst_addr.ipv6.sin6_family, 0, sizeof (*(&con->dst_addr.ipv6.sin6_family)))", "memset(&con->dst_addr.ipv6.sin6_flowinfo, 0, sizeof (*(&con->dst_addr.ipv6.sin6_flowinfo)))", "memset(&con->dst_addr.ipv6.sin6_port, 0, sizeof (*(&con->dst_addr.ipv6.sin6_port)))", "memset(&con->dst_addr.ipv6.sin6_scope_id, 0, sizeof (*(&con->dst_addr.ipv6.sin6_scope_id)))", "memset(&con->dst_addr.plain, 0, sizeof (*(&con->dst_addr.plain)))", "memset(&con->dst_addr.plain.sa_data, 0, sizeof (*(&con->dst_addr.plain.sa_data)))", "memset(&con->dst_addr.plain.sa_family, 0, sizeof (*(&con->dst_addr.plain.sa_family)))", "memset(&con->dst_addr.un, 0, sizeof (*(&con->dst_addr.un)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->environment->data, 0, sizeof (*(&con->environment->data)))", "memset(&con->environment->is_weakref, 0, sizeof (*(&con->environment->is_weakref)))", "memset(&con->environment->next_power_of_2, 0, sizeof (*(&con->environment->next_power_of_2)))", "memset(&con->environment->size, 0, sizeof (*(&con->environment->size)))", "memset(&con->environment->sorted, 0, sizeof (*(&con->environment->sorted)))", "memset(&con->environment->unique_ndx, 0, sizeof (*(&con->environment->unique_ndx)))", "memset(&con->environment->used, 0, sizeof (*(&con->environment->used)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.doc_root->ptr, 0, sizeof (*(&con->physical.doc_root->ptr)))", "memset(&con->physical.doc_root->size, 0, sizeof (*(&con->physical.doc_root->size)))", "memset(&con->physical.doc_root->used, 0, sizeof (*(&con->physical.doc_root->used)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.path->ptr, 0, sizeof (*(&con->physical.path->ptr)))", "memset(&con->physical.path->size, 0, sizeof (*(&con->physical.path->size)))", "memset(&con->physical.path->used, 0, sizeof (*(&con->physical.path->used)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.headers->data, 0, sizeof (*(&con->request.headers->data)))", "memset(&con->request.headers->is_weakref, 0, sizeof (*(&con->request.headers->is_weakref)))", "memset(&con->request.headers->next_power_of_2, 0, sizeof (*(&con->request.headers->next_power_of_2)))", "memset(&con->request.headers->size, 0, sizeof (*(&con->request.headers->size)))", "memset(&con->request.headers->sorted, 0, sizeof (*(&con->request.headers->sorted)))", "memset(&con->request.headers->unique_ndx, 0, sizeof (*(&con->request.headers->unique_ndx)))", "memset(&con->request.headers->used, 0, sizeof (*(&con->request.headers->used)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.query->ptr, 0, sizeof (*(&con->uri.query->ptr)))", "memset(&con->uri.query->size, 0, sizeof (*(&con->uri.query->size)))", "memset(&con->uri.query->used, 0, sizeof (*(&con->uri.query->used)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&env, 0, sizeof (*(&env)))", "memset(&env.ptr, 0, sizeof (*(&env.ptr)))", "memset(&env.size, 0, sizeof (*(&env.size)))", "memset(&env.used, 0, sizeof (*(&env.used)))", "memset(&srv_sock->addr, 0, sizeof (*(&srv_sock->addr)))", "memset(&srv_sock->addr.ipv4, 0, sizeof (*(&srv_sock->addr.ipv4)))", "memset(&srv_sock->addr.ipv4.sin_addr, 0, sizeof (*(&srv_sock->addr.ipv4.sin_addr)))", "memset(&srv_sock->addr.ipv4.sin_family, 0, sizeof (*(&srv_sock->addr.ipv4.sin_family)))", "memset(&srv_sock->addr.ipv4.sin_port, 0, sizeof (*(&srv_sock->addr.ipv4.sin_port)))", "memset(&srv_sock->addr.ipv4.sin_zero, 0, sizeof (*(&srv_sock->addr.ipv4.sin_zero)))", "memset(&srv_sock->addr.ipv6, 0, sizeof (*(&srv_sock->addr.ipv6)))", "memset(&srv_sock->addr.ipv6.sin6_addr, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_addr)))", "memset(&srv_sock->addr.ipv6.sin6_family, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_family)))", "memset(&srv_sock->addr.ipv6.sin6_flowinfo, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_flowinfo)))", "memset(&srv_sock->addr.ipv6.sin6_port, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_port)))", "memset(&srv_sock->addr.ipv6.sin6_scope_id, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_scope_id)))", "memset(&srv_sock->addr.plain, 0, sizeof (*(&srv_sock->addr.plain)))", "memset(&srv_sock->addr.plain.sa_data, 0, sizeof (*(&srv_sock->addr.plain.sa_data)))", "memset(&srv_sock->addr.plain.sa_family, 0, sizeof (*(&srv_sock->addr.plain.sa_family)))", "memset(&srv_sock->addr.un, 0, sizeof (*(&srv_sock->addr.un)))", "memset(&srv_sock->is_ssl, 0, sizeof (*(&srv_sock->is_ssl)))", "memset(&srv_sock->sock, 0, sizeof (*(&srv_sock->sock)))", "memset(&srv_sock->srv_token, 0, sizeof (*(&srv_sock->srv_token)))", "memset(&srv_sock->ssl_ca_file, 0, sizeof (*(&srv_sock->ssl_ca_file)))", "memset(&srv_sock->ssl_ctx, 0, sizeof (*(&srv_sock->ssl_ctx)))", "memset(&srv_sock->ssl_pemfile, 0, sizeof (*(&srv_sock->ssl_pemfile)))", "memset(&srv_sock->use_ipv6, 0, sizeof (*(&srv_sock->use_ipv6)))", "memset(cgi_handler->ptr, 0, sizeof (*(cgi_handler->ptr)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->environment->data, 0, sizeof (*(con->environment->data)))", "memset(con->environment->sorted, 0, sizeof (*(con->environment->sorted)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.doc_root->ptr, 0, sizeof (*(con->physical.doc_root->ptr)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.path->ptr, 0, sizeof (*(con->physical.path->ptr)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.headers->data, 0, sizeof (*(con->request.headers->data)))", "memset(con->request.headers->sorted, 0, sizeof (*(con->request.headers->sorted)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.query->ptr, 0, sizeof (*(con->uri.query->ptr)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(env.ptr, 0, sizeof (*(env.ptr)))", "memset(srv_sock->sock, 0, sizeof (*(srv_sock->sock)))", "memset(srv_sock->srv_token, 0, sizeof (*(srv_sock->srv_token)))", "memset(srv_sock->ssl_ca_file, 0, sizeof (*(srv_sock->ssl_ca_file)))", "memset(srv_sock->ssl_ctx, 0, sizeof (*(srv_sock->ssl_ctx)))", "memset(srv_sock->ssl_pemfile, 0, sizeof (*(srv_sock->ssl_pemfile)))", "(p)->tmp_buf->used--", "argc = (-1)", "argc = (-128)", "argc = (-33)", "argc = (0)", "argc = (1)", "argc = (10)", "argc = (128)", "argc = (16)", "argc = (2)", "argc = (255)", "argc = (256)", "argc = (3)", "argc = (32)", "argc = (46)", "argc = (47)", "argc = (600)", "argc = (608)", "argc = (613)", "argc = (8)", "argc = (850)", "argc = (864)", "argc = (869)", "argc = (887)", "argc = (895)", "argc = (argc)", "argc = (i)", "argc = (pid)", "args = (args)", "args[i++] = (c)", "args[i++] = (cgi_handler)->ptr", "args[i++] = (con)->physical.path->ptr", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, (con)->physical.doc_root->ptr, con->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, (con)->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, con->physical.doc_root->used ? (con)->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, (con)->request.pathinfo->ptr, con->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, (con)->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, con->request.pathinfo->used ? (con)->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (con)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (con)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (con)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, (con)->authed_user->ptr, con->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, (con)->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, con->authed_user->used ? (con)->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, (con)->request.orig_uri->ptr, con->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, (con)->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, con->request.orig_uri->used ? (con)->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, (con)->physical.path->ptr, con->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, (con)->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, con->physical.path->used ? (con)->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, (con)->uri.path->ptr, con->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, (con)->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, con->uri.path->used ? (con)->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, (con)->server_name->ptr, con->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, (con)->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, con->server_name->used ? (con)->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, s, strlen((s)))", "chunkqueue_remove_finished_chunks((con)->recv)", "con->mode = (-1)", "con->mode = (-128)", "con->mode = (-33)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (128)", "con->mode = (16)", "con->mode = (2)", "con->mode = (255)", "con->mode = (256)", "con->mode = (3)", "con->mode = (32)", "con->mode = (46)", "con->mode = (47)", "con->mode = (600)", "con->mode = (608)", "con->mode = (613)", "con->mode = (8)", "con->mode = (850)", "con->mode = (864)", "con->mode = (869)", "con->mode = (887)", "con->mode = (895)", "con->mode = (p)->id", "env.ptr = (args)", "env.ptr[env.used] = (c)", "env.size = (-1)", "env.size = (-128)", "env.size = (-33)", "env.size = (0)", "env.size = (1)", "env.size = (10)", "env.size = (128)", "env.size = (16)", "env.size = (2)", "env.size = (255)", "env.size = (256)", "env.size = (3)", "env.size = (32)", "env.size = (46)", "env.size = (47)", "env.size = (600)", "env.size = (608)", "env.size = (613)", "env.size = (8)", "env.size = (850)", "env.size = (864)", "env.size = (869)", "env.size = (887)", "env.size = (895)", "env.size = (n)", "env.used = (-1)", "env.used = (-128)", "env.used = (-33)", "env.used = (0)", "env.used = (1)", "env.used = (10)", "env.used = (128)", "env.used = (16)", "env.used = (2)", "env.used = (255)", "env.used = (256)", "env.used = (3)", "env.used = (32)", "env.used = (46)", "env.used = (47)", "env.used = (600)", "env.used = (608)", "env.used = (613)", "env.used = (8)", "env.used = (850)", "env.used = (864)", "env.used = (869)", "env.used = (887)", "env.used = (895)", "env.used = (n)", "execve((args)[0], args, env.ptr)", "execve(args[0], (args), env.ptr)", "free((p))", "free((p)->config_storage)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "i = (-1)", "i = (-128)", "i = (-33)", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (255)", "i = (256)", "i = (3)", "i = (32)", "i = (46)", "i = (47)", "i = (600)", "i = (608)", "i = (613)", "i = (8)", "i = (850)", "i = (864)", "i = (869)", "i = (887)", "i = (895)", "i = (argc)", "i = (i)", "i = (pid)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", cgi_handler, \"failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), con->physical.path)", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", (cgi_handler), \"failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), (con)->physical.path)", "ltostr(buf, (con)->request.content_length)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-1)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-128)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-33)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (0)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (1)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (10)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (128)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (16)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (2)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (255)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (256)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (3)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (32)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (46)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (47)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (600)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (608)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (613)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (8)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (850)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (864)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (869)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (887)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (895)", "s = (s)", "s = get_http_method_name((con)->request.http_method)", "s = get_http_version_name((con)->request.http_version)", "s = inet_ntop((con)->dst_addr.plain.sa_family, con->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop((srv_sock)->addr.plain.sa_family, srv_sock->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(con->dst_addr.plain.sa_family, (con)->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(srv_sock->addr.plain.sa_family, (srv_sock)->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "argc = 3", "args = malloc(sizeof (*args) * argc)", "args[i++] = ((void *)0)", "args[i++] = cgi_handler->ptr", "args[i++] = con->physical.path->ptr", "buffer_copy_string(p->tmp_buf, \"HTTP_\")", "buffer_reset(con->physical.path)", "buffer_reset(p->tmp_buf)", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, con->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"GATEWAY_INTERFACE\", \"GATEWAY_INTERFACE\" ? sizeof (\"GATEWAY_INTERFACE\") - 1 : 0, \"CGI/1.1\", \"CGI/1.1\" ? sizeof (\"CGI/1.1\") - 1 : 0)", "cgi_env_add(&env, \"HTTPS\", \"HTTPS\" ? sizeof (\"HTTPS\") - 1 : 0, \"on\", \"on\" ? sizeof (\"on\") - 1 : 0)", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, con->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"REDIRECT_STATUS\", \"REDIRECT_STATUS\" ? sizeof (\"REDIRECT_STATUS\") - 1 : 0, \"200\", \"200\" ? sizeof (\"200\") - 1 : 0)", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"REMOTE_PORT\", \"REMOTE_PORT\" ? sizeof (\"REMOTE_PORT\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, con->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, con->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, con->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, con->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, con->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_PORT\", \"SERVER_PORT\" ? sizeof (\"SERVER_PORT\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_SOFTWARE\", \"SERVER_SOFTWARE\" ? sizeof (\"SERVER_SOFTWARE\") - 1 : 0, \"lighttpd/1.5.0\", \"lighttpd/1.5.0\" ? sizeof (\"lighttpd/1.5.0\") - 1 : 0)", "close(0)", "close(1)", "close(2)", "close(from_cgi_fds[0])", "close(from_cgi_fds[1])", "close(i)", "close(to_cgi_fds[0])", "close(to_cgi_fds[1])", "con->mode = p->id", "dup2(from_cgi_fds[1], 1)", "dup2(to_cgi_fds[0], 0)", "env.ptr = ((void *)0)", "env.ptr = realloc(env.ptr, env.size * sizeof (*env.ptr))", "env.ptr[env.used] = ((void *)0)", "env.size = 0", "env.used = 0", "execve(args[0], args, env.ptr)", "i = 0", "log_error_write(srv, \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", cgi_handler, \"failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), con->physical.path)", "log_error_write(srv, \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "ltostr(buf, (__extension__ ({\n    unsigned short __v, __x = (unsigned short)(con->dst_addr.plain.sa_family == 10 ? con->dst_addr.ipv6.sin6_port : con->dst_addr.ipv4.sin_port);\n    if (__builtin_constant_p(__x))\n        __v = ((unsigned short)((((__x) >> 8) & 255) | (((__x) & 255) << 8)));\n    else\n        __asm__(\"rorw $8, %w0\":\"=r\"( (__v)):\"0\"( (__x)):\"cc\");\n    __v;\n})))", "ltostr(buf, (__extension__ ({\n    unsigned short __v, __x = (unsigned short)(srv_sock->addr.plain.sa_family == 10 ? srv_sock->addr.ipv6.sin6_port : srv_sock->addr.ipv4.sin_port);\n    if (__builtin_constant_p(__x))\n        __v = ((unsigned short)((((__x) >> 8) & 255) | (((__x) & 255) << 8)));\n    else\n        __asm__(\"rorw $8, %w0\":\"=r\"( (__v)):\"0\"( (__x)):\"cc\");\n    __v;\n})))", "ltostr(buf, con->request.content_length)", "p->tmp_buf->ptr[p->tmp_buf->used++] = '\\x00'", "p->tmp_buf->used--", "s = get_http_method_name(con->request.http_method)", "s = get_http_version_name(con->request.http_version)", "s = inet_ntop(con->dst_addr.plain.sa_family, con->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(srv_sock->addr.plain.sa_family, srv_sock->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return -128;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return -1;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return -33;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 0;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 10;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 128;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 16;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 1;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 255;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 256;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 2;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 32;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 3;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 46;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 47;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 600;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 608;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 613;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 850;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 864;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 869;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 887;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 895;\n", "if (__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.427226054242106]
								}, {
									"case":	2,
									"scores":	[-5.427226054242106]
								}, {
									"case":	3,
									"scores":	[-5.427226054242106]
								}, {
									"case":	4,
									"scores":	[-5.427226054242106]
								}, {
									"case":	5,
									"scores":	[-5.427226054242106]
								}, {
									"case":	6,
									"scores":	[-5.427226054242106]
								}, {
									"case":	7,
									"scores":	[-5.427226054242106]
								}, {
									"case":	8,
									"scores":	[-5.427226054242106]
								}, {
									"case":	9,
									"scores":	[-5.427226054242106]
								}, {
									"case":	10,
									"scores":	[-5.427226054242106]
								}, {
									"case":	11,
									"scores":	[-5.427226054242106]
								}, {
									"case":	12,
									"scores":	[-5.427226054242106]
								}, {
									"case":	13,
									"scores":	[-5.427226054242106]
								}, {
									"case":	14,
									"scores":	[-5.427226054242106]
								}, {
									"case":	15,
									"scores":	[-5.427226054242106]
								}, {
									"case":	16,
									"scores":	[-5.427226054242106]
								}, {
									"case":	17,
									"scores":	[-5.427226054242106]
								}, {
									"case":	18,
									"scores":	[-5.427226054242106]
								}, {
									"case":	19,
									"scores":	[-5.427226054242106]
								}, {
									"case":	20,
									"scores":	[-5.427226054242106]
								}, {
									"case":	21,
									"scores":	[-5.427226054242106]
								}, {
									"case":	22,
									"scores":	[-5.427226054242106]
								}, {
									"case":	23,
									"scores":	[-5.427226054242106]
								}, {
									"case":	24,
									"scores":	[-5.427226054242106]
								}, {
									"case":	25,
									"scores":	[-5.427226054242106]
								}, {
									"case":	26,
									"scores":	[-5.427226054242106]
								}, {
									"case":	27,
									"scores":	[-5.427226054242106]
								}, {
									"case":	28,
									"scores":	[-5.427226054242106]
								}, {
									"case":	29,
									"scores":	[-5.427226054242106]
								}, {
									"case":	30,
									"scores":	[-5.427226054242106]
								}, {
									"case":	31,
									"scores":	[-5.427226054242106]
								}, {
									"case":	32,
									"scores":	[-5.427226054242106]
								}, {
									"case":	33,
									"scores":	[-5.427226054242106]
								}, {
									"case":	34,
									"scores":	[-5.427226054242106]
								}, {
									"case":	35,
									"scores":	[-5.427226054242106]
								}, {
									"case":	36,
									"scores":	[-5.427226054242106]
								}, {
									"case":	37,
									"scores":	[-5.427226054242106]
								}, {
									"case":	38,
									"scores":	[-5.427226054242106]
								}, {
									"case":	39,
									"scores":	[-5.427226054242106]
								}, {
									"case":	40,
									"scores":	[-5.427226054242106]
								}, {
									"case":	41,
									"scores":	[-5.427226054242106]
								}, {
									"case":	42,
									"scores":	[-5.427226054242106]
								}, {
									"case":	43,
									"scores":	[-5.427226054242106]
								}, {
									"case":	44,
									"scores":	[-5.427226054242106]
								}, {
									"case":	45,
									"scores":	[-5.427226054242106]
								}, {
									"case":	46,
									"scores":	[-5.427226054242106]
								}, {
									"case":	47,
									"scores":	[-5.427226054242106]
								}, {
									"case":	48,
									"scores":	[-5.427226054242106]
								}, {
									"case":	49,
									"scores":	[-5.427226054242106]
								}, {
									"case":	50,
									"scores":	[-5.427226054242106]
								}, {
									"case":	51,
									"scores":	[-5.427226054242106]
								}, {
									"case":	52,
									"scores":	[-5.427226054242106]
								}, {
									"case":	53,
									"scores":	[-5.427226054242106]
								}, {
									"case":	54,
									"scores":	[-5.427226054242106]
								}, {
									"case":	55,
									"scores":	[-5.427226054242106]
								}, {
									"case":	56,
									"scores":	[-5.427226054242106]
								}, {
									"case":	57,
									"scores":	[-5.427226054242106]
								}, {
									"case":	58,
									"scores":	[-5.427226054242106]
								}, {
									"case":	59,
									"scores":	[-5.427226054242106]
								}, {
									"case":	60,
									"scores":	[-5.427226054242106]
								}, {
									"case":	61,
									"scores":	[-5.427226054242106]
								}, {
									"case":	62,
									"scores":	[-5.427226054242106]
								}, {
									"case":	63,
									"scores":	[-5.427226054242106]
								}, {
									"case":	64,
									"scores":	[-5.427226054242106]
								}, {
									"case":	65,
									"scores":	[-5.427226054242106]
								}, {
									"case":	66,
									"scores":	[-5.427226054242106]
								}, {
									"case":	67,
									"scores":	[-5.427226054242106]
								}, {
									"case":	68,
									"scores":	[-5.427226054242106]
								}, {
									"case":	69,
									"scores":	[-5.427226054242106]
								}, {
									"case":	70,
									"scores":	[-5.427226054242106]
								}, {
									"case":	71,
									"scores":	[-5.427226054242106]
								}, {
									"case":	72,
									"scores":	[-5.427226054242106]
								}, {
									"case":	73,
									"scores":	[-5.427226054242106]
								}, {
									"case":	74,
									"scores":	[-5.427226054242106]
								}, {
									"case":	75,
									"scores":	[-5.427226054242106]
								}, {
									"case":	76,
									"scores":	[-5.427226054242106]
								}, {
									"case":	77,
									"scores":	[-5.427226054242106]
								}, {
									"case":	78,
									"scores":	[-5.427226054242106]
								}, {
									"case":	79,
									"scores":	[-5.427226054242106]
								}, {
									"case":	80,
									"scores":	[-5.427226054242106]
								}, {
									"case":	81,
									"scores":	[-5.427226054242106]
								}, {
									"case":	82,
									"scores":	[-5.427226054242106]
								}, {
									"case":	83,
									"scores":	[-5.427226054242106]
								}, {
									"case":	84,
									"scores":	[-5.427226054242106]
								}, {
									"case":	85,
									"scores":	[-5.427226054242106]
								}, {
									"case":	86,
									"scores":	[-5.427226054242106]
								}, {
									"case":	87,
									"scores":	[-5.427226054242106]
								}, {
									"case":	88,
									"scores":	[-5.427226054242106]
								}, {
									"case":	89,
									"scores":	[-5.427226054242106]
								}, {
									"case":	90,
									"scores":	[-5.427226054242106]
								}, {
									"case":	91,
									"scores":	[-5.427226054242106]
								}, {
									"case":	92,
									"scores":	[-5.427226054242106]
								}, {
									"case":	93,
									"scores":	[-5.427226054242106]
								}, {
									"case":	94,
									"scores":	[-5.427226054242106]
								}, {
									"case":	95,
									"scores":	[-5.427226054242106]
								}, {
									"case":	96,
									"scores":	[-5.427226054242106]
								}, {
									"case":	97,
									"scores":	[-5.427226054242106]
								}, {
									"case":	98,
									"scores":	[-5.427226054242106]
								}, {
									"case":	99,
									"scores":	[-5.427226054242106]
								}, {
									"case":	100,
									"scores":	[-5.427226054242106]
								}, {
									"case":	101,
									"scores":	[-5.427226054242106]
								}, {
									"case":	102,
									"scores":	[-5.427226054242106]
								}, {
									"case":	103,
									"scores":	[-5.427226054242106]
								}, {
									"case":	104,
									"scores":	[-5.427226054242106]
								}, {
									"case":	105,
									"scores":	[-5.427226054242106]
								}, {
									"case":	106,
									"scores":	[-5.427226054242106]
								}, {
									"case":	107,
									"scores":	[-5.427226054242106]
								}, {
									"case":	108,
									"scores":	[-5.427226054242106]
								}, {
									"case":	109,
									"scores":	[-5.427226054242106]
								}, {
									"case":	110,
									"scores":	[-5.427226054242106]
								}, {
									"case":	111,
									"scores":	[-5.427226054242106]
								}, {
									"case":	112,
									"scores":	[-5.427226054242106]
								}, {
									"case":	113,
									"scores":	[-5.427226054242106]
								}, {
									"case":	114,
									"scores":	[-5.427226054242106]
								}, {
									"case":	115,
									"scores":	[-5.427226054242106]
								}, {
									"case":	116,
									"scores":	[-5.427226054242106]
								}, {
									"case":	117,
									"scores":	[-5.427226054242106]
								}, {
									"case":	118,
									"scores":	[-5.427226054242106]
								}, {
									"case":	119,
									"scores":	[-5.427226054242106]
								}, {
									"case":	120,
									"scores":	[-5.427226054242106]
								}, {
									"case":	121,
									"scores":	[-5.427226054242106]
								}, {
									"case":	122,
									"scores":	[-5.427226054242106]
								}, {
									"case":	123,
									"scores":	[-5.427226054242106]
								}, {
									"case":	124,
									"scores":	[-5.427226054242106]
								}, {
									"case":	125,
									"scores":	[-5.427226054242106]
								}, {
									"case":	126,
									"scores":	[-5.427226054242106]
								}, {
									"case":	127,
									"scores":	[-5.427226054242106]
								}, {
									"case":	128,
									"scores":	[-5.427226054242106]
								}, {
									"case":	129,
									"scores":	[-5.427226054242106]
								}, {
									"case":	130,
									"scores":	[-5.427226054242106]
								}, {
									"case":	131,
									"scores":	[-5.427226054242106]
								}, {
									"case":	132,
									"scores":	[-5.427226054242106]
								}, {
									"case":	133,
									"scores":	[-5.427226054242106]
								}, {
									"case":	134,
									"scores":	[-5.427226054242106]
								}, {
									"case":	135,
									"scores":	[-5.427226054242106]
								}, {
									"case":	136,
									"scores":	[-5.427226054242106]
								}, {
									"case":	137,
									"scores":	[-5.427226054242106]
								}, {
									"case":	138,
									"scores":	[-5.427226054242106]
								}, {
									"case":	139,
									"scores":	[-5.427226054242106]
								}, {
									"case":	140,
									"scores":	[-5.427226054242106]
								}, {
									"case":	141,
									"scores":	[-5.427226054242106]
								}, {
									"case":	142,
									"scores":	[-5.427226054242106]
								}, {
									"case":	143,
									"scores":	[-5.427226054242106]
								}, {
									"case":	144,
									"scores":	[-5.427226054242106]
								}, {
									"case":	145,
									"scores":	[-5.427226054242106]
								}, {
									"case":	146,
									"scores":	[-5.427226054242106]
								}, {
									"case":	147,
									"scores":	[-5.427226054242106]
								}, {
									"case":	148,
									"scores":	[-5.427226054242106]
								}, {
									"case":	149,
									"scores":	[-5.427226054242106]
								}, {
									"case":	150,
									"scores":	[-5.427226054242106]
								}, {
									"case":	151,
									"scores":	[-5.427226054242106]
								}, {
									"case":	152,
									"scores":	[-5.427226054242106]
								}, {
									"case":	153,
									"scores":	[-5.427226054242106]
								}, {
									"case":	154,
									"scores":	[-5.427226054242106]
								}, {
									"case":	155,
									"scores":	[-5.427226054242106]
								}, {
									"case":	156,
									"scores":	[-5.427226054242106]
								}, {
									"case":	157,
									"scores":	[-5.427226054242106]
								}, {
									"case":	158,
									"scores":	[-5.427226054242106]
								}, {
									"case":	159,
									"scores":	[-5.427226054242106]
								}, {
									"case":	160,
									"scores":	[-5.427226054242106]
								}, {
									"case":	161,
									"scores":	[-5.427226054242106]
								}, {
									"case":	162,
									"scores":	[-5.427226054242106]
								}, {
									"case":	163,
									"scores":	[-5.427226054242106]
								}, {
									"case":	164,
									"scores":	[-5.427226054242106]
								}, {
									"case":	165,
									"scores":	[-5.427226054242106]
								}, {
									"case":	166,
									"scores":	[-5.427226054242106]
								}, {
									"case":	167,
									"scores":	[-5.427226054242106]
								}, {
									"case":	168,
									"scores":	[-5.427226054242106]
								}, {
									"case":	169,
									"scores":	[-5.427226054242106]
								}, {
									"case":	170,
									"scores":	[-5.427226054242106]
								}, {
									"case":	171,
									"scores":	[-5.427226054242106]
								}, {
									"case":	172,
									"scores":	[-5.427226054242106]
								}, {
									"case":	173,
									"scores":	[-5.427226054242106]
								}, {
									"case":	174,
									"scores":	[-5.427226054242106]
								}, {
									"case":	175,
									"scores":	[-5.427226054242106]
								}, {
									"case":	176,
									"scores":	[-5.427226054242106]
								}, {
									"case":	177,
									"scores":	[-5.427226054242106]
								}, {
									"case":	178,
									"scores":	[-5.427226054242106]
								}, {
									"case":	179,
									"scores":	[-5.427226054242106]
								}, {
									"case":	180,
									"scores":	[-5.427226054242106]
								}, {
									"case":	181,
									"scores":	[-5.427226054242106]
								}, {
									"case":	182,
									"scores":	[-5.427226054242106]
								}, {
									"case":	183,
									"scores":	[-5.427226054242106]
								}, {
									"case":	184,
									"scores":	[-5.427226054242106]
								}, {
									"case":	185,
									"scores":	[-5.427226054242106]
								}, {
									"case":	186,
									"scores":	[-5.427226054242106]
								}, {
									"case":	187,
									"scores":	[-5.427226054242106]
								}, {
									"case":	188,
									"scores":	[-5.427226054242106]
								}, {
									"case":	189,
									"scores":	[-5.427226054242106]
								}, {
									"case":	190,
									"scores":	[-5.427226054242106]
								}, {
									"case":	191,
									"scores":	[-5.427226054242106]
								}, {
									"case":	192,
									"scores":	[-5.427226054242106]
								}, {
									"case":	193,
									"scores":	[-5.427226054242106]
								}, {
									"case":	194,
									"scores":	[-5.427226054242106]
								}, {
									"case":	195,
									"scores":	[-5.427226054242106]
								}, {
									"case":	196,
									"scores":	[-5.427226054242106]
								}, {
									"case":	197,
									"scores":	[-5.427226054242106]
								}, {
									"case":	198,
									"scores":	[-5.427226054242106]
								}, {
									"case":	199,
									"scores":	[-5.427226054242106]
								}, {
									"case":	200,
									"scores":	[-5.427226054242106]
								}, {
									"case":	201,
									"scores":	[-5.427226054242106]
								}, {
									"case":	202,
									"scores":	[-5.427226054242106]
								}, {
									"case":	203,
									"scores":	[-5.427226054242106]
								}, {
									"case":	204,
									"scores":	[-5.427226054242106]
								}, {
									"case":	205,
									"scores":	[-5.427226054242106]
								}, {
									"case":	206,
									"scores":	[-5.427226054242106]
								}, {
									"case":	207,
									"scores":	[-5.427226054242106]
								}, {
									"case":	208,
									"scores":	[-5.427226054242106]
								}, {
									"case":	209,
									"scores":	[-5.427226054242106]
								}, {
									"case":	210,
									"scores":	[-5.427226054242106]
								}, {
									"case":	211,
									"scores":	[-5.427226054242106]
								}, {
									"case":	212,
									"scores":	[-5.427226054242106]
								}, {
									"case":	213,
									"scores":	[-5.427226054242106]
								}, {
									"case":	214,
									"scores":	[-5.427226054242106]
								}, {
									"case":	215,
									"scores":	[-5.427226054242106]
								}, {
									"case":	216,
									"scores":	[-5.427226054242106]
								}, {
									"case":	217,
									"scores":	[-5.427226054242106]
								}, {
									"case":	218,
									"scores":	[-5.427226054242106]
								}, {
									"case":	219,
									"scores":	[-5.427226054242106]
								}, {
									"case":	220,
									"scores":	[-5.427226054242106]
								}, {
									"case":	221,
									"scores":	[-5.427226054242106]
								}, {
									"case":	222,
									"scores":	[-5.427226054242106]
								}, {
									"case":	223,
									"scores":	[-5.427226054242106]
								}, {
									"case":	224,
									"scores":	[-5.427226054242106]
								}, {
									"case":	225,
									"scores":	[-5.427226054242106]
								}, {
									"case":	226,
									"scores":	[-5.427226054242106]
								}, {
									"case":	227,
									"scores":	[-5.427226054242106]
								}, {
									"case":	228,
									"scores":	[-5.427226054242106]
								}, {
									"case":	229,
									"scores":	[-5.427226054242106]
								}, {
									"case":	230,
									"scores":	[-5.427226054242106]
								}, {
									"case":	231,
									"scores":	[-5.427226054242106]
								}, {
									"case":	232,
									"scores":	[-5.427226054242106]
								}, {
									"case":	233,
									"scores":	[-5.427226054242106]
								}, {
									"case":	234,
									"scores":	[-5.427226054242106]
								}, {
									"case":	235,
									"scores":	[-5.427226054242106]
								}, {
									"case":	236,
									"scores":	[-5.427226054242106]
								}, {
									"case":	237,
									"scores":	[-5.427226054242106]
								}, {
									"case":	238,
									"scores":	[-5.427226054242106]
								}, {
									"case":	239,
									"scores":	[-5.427226054242106]
								}, {
									"case":	240,
									"scores":	[-5.427226054242106]
								}, {
									"case":	241,
									"scores":	[-5.427226054242106]
								}, {
									"case":	242,
									"scores":	[-5.427226054242106]
								}, {
									"case":	243,
									"scores":	[-5.427226054242106]
								}, {
									"case":	244,
									"scores":	[-5.427226054242106]
								}, {
									"case":	245,
									"scores":	[-5.427226054242106]
								}, {
									"case":	246,
									"scores":	[-5.427226054242106]
								}, {
									"case":	247,
									"scores":	[-5.427226054242106]
								}, {
									"case":	248,
									"scores":	[-5.427226054242106]
								}, {
									"case":	249,
									"scores":	[-5.427226054242106]
								}, {
									"case":	250,
									"scores":	[-5.427226054242106]
								}, {
									"case":	251,
									"scores":	[-5.427226054242106]
								}, {
									"case":	252,
									"scores":	[-5.427226054242106]
								}, {
									"case":	253,
									"scores":	[-5.427226054242106]
								}, {
									"case":	254,
									"scores":	[-5.427226054242106]
								}, {
									"case":	255,
									"scores":	[-5.427226054242106]
								}, {
									"case":	256,
									"scores":	[-5.427226054242106]
								}, {
									"case":	257,
									"scores":	[-5.427226054242106]
								}, {
									"case":	258,
									"scores":	[-5.427226054242106]
								}, {
									"case":	259,
									"scores":	[-5.427226054242106]
								}, {
									"case":	260,
									"scores":	[-5.427226054242106]
								}, {
									"case":	261,
									"scores":	[-5.427226054242106]
								}, {
									"case":	262,
									"scores":	[-5.427226054242106]
								}, {
									"case":	263,
									"scores":	[-5.427226054242106]
								}, {
									"case":	264,
									"scores":	[-5.427226054242106]
								}, {
									"case":	265,
									"scores":	[-5.427226054242106]
								}, {
									"case":	266,
									"scores":	[-5.427226054242106]
								}, {
									"case":	267,
									"scores":	[-5.427226054242106]
								}, {
									"case":	268,
									"scores":	[-5.427226054242106]
								}, {
									"case":	269,
									"scores":	[-5.427226054242106]
								}, {
									"case":	270,
									"scores":	[-5.427226054242106]
								}, {
									"case":	271,
									"scores":	[-5.427226054242106]
								}, {
									"case":	272,
									"scores":	[-5.427226054242106]
								}, {
									"case":	273,
									"scores":	[-5.427226054242106]
								}, {
									"case":	274,
									"scores":	[-5.427226054242106]
								}, {
									"case":	275,
									"scores":	[-5.427226054242106]
								}, {
									"case":	276,
									"scores":	[-5.427226054242106]
								}, {
									"case":	277,
									"scores":	[-5.427226054242106]
								}, {
									"case":	278,
									"scores":	[-5.427226054242106]
								}, {
									"case":	279,
									"scores":	[-5.427226054242106]
								}, {
									"case":	280,
									"scores":	[-5.427226054242106]
								}, {
									"case":	281,
									"scores":	[-5.427226054242106]
								}, {
									"case":	282,
									"scores":	[-5.427226054242106]
								}, {
									"case":	283,
									"scores":	[-5.427226054242106]
								}, {
									"case":	284,
									"scores":	[-5.427226054242106]
								}, {
									"case":	285,
									"scores":	[-5.427226054242106]
								}, {
									"case":	286,
									"scores":	[-5.427226054242106]
								}, {
									"case":	287,
									"scores":	[-5.427226054242106]
								}, {
									"case":	288,
									"scores":	[-5.427226054242106]
								}, {
									"case":	289,
									"scores":	[-5.427226054242106]
								}, {
									"case":	290,
									"scores":	[-5.427226054242106]
								}, {
									"case":	291,
									"scores":	[-5.427226054242106]
								}, {
									"case":	292,
									"scores":	[-5.427226054242106]
								}, {
									"case":	293,
									"scores":	[-5.427226054242106]
								}, {
									"case":	294,
									"scores":	[-5.427226054242106]
								}, {
									"case":	295,
									"scores":	[-5.427226054242106]
								}, {
									"case":	296,
									"scores":	[-5.427226054242106]
								}, {
									"case":	297,
									"scores":	[-5.427226054242106]
								}, {
									"case":	298,
									"scores":	[-5.427226054242106]
								}, {
									"case":	299,
									"scores":	[-5.427226054242106]
								}, {
									"case":	300,
									"scores":	[-5.427226054242106]
								}, {
									"case":	301,
									"scores":	[-5.427226054242106]
								}, {
									"case":	302,
									"scores":	[-5.427226054242106]
								}, {
									"case":	303,
									"scores":	[-5.427226054242106]
								}, {
									"case":	304,
									"scores":	[-5.427226054242106]
								}, {
									"case":	305,
									"scores":	[-5.427226054242106]
								}, {
									"case":	306,
									"scores":	[-5.427226054242106]
								}, {
									"case":	307,
									"scores":	[-5.427226054242106]
								}, {
									"case":	308,
									"scores":	[-5.427226054242106]
								}, {
									"case":	309,
									"scores":	[-5.427226054242106]
								}, {
									"case":	310,
									"scores":	[-5.427226054242106]
								}, {
									"case":	311,
									"scores":	[-5.427226054242106]
								}, {
									"case":	312,
									"scores":	[-5.427226054242106]
								}, {
									"case":	313,
									"scores":	[-5.427226054242106]
								}, {
									"case":	314,
									"scores":	[-5.427226054242106]
								}, {
									"case":	315,
									"scores":	[-5.427226054242106]
								}, {
									"case":	316,
									"scores":	[-5.427226054242106]
								}, {
									"case":	317,
									"scores":	[-5.427226054242106]
								}, {
									"case":	318,
									"scores":	[-5.427226054242106]
								}, {
									"case":	319,
									"scores":	[-5.427226054242106]
								}, {
									"case":	320,
									"scores":	[-5.427226054242106]
								}, {
									"case":	321,
									"scores":	[-5.427226054242106]
								}, {
									"case":	322,
									"scores":	[-5.427226054242106]
								}, {
									"case":	323,
									"scores":	[-5.427226054242106]
								}, {
									"case":	324,
									"scores":	[-5.427226054242106]
								}, {
									"case":	325,
									"scores":	[-5.427226054242106]
								}, {
									"case":	326,
									"scores":	[-5.427226054242106]
								}, {
									"case":	327,
									"scores":	[-5.427226054242106]
								}, {
									"case":	328,
									"scores":	[-5.427226054242106]
								}, {
									"case":	329,
									"scores":	[-5.427226054242106]
								}, {
									"case":	330,
									"scores":	[-5.427226054242106]
								}, {
									"case":	331,
									"scores":	[-5.427226054242106]
								}, {
									"case":	332,
									"scores":	[-5.427226054242106]
								}, {
									"case":	333,
									"scores":	[-5.427226054242106]
								}, {
									"case":	334,
									"scores":	[-5.427226054242106]
								}, {
									"case":	335,
									"scores":	[-5.427226054242106]
								}, {
									"case":	336,
									"scores":	[-5.427226054242106]
								}, {
									"case":	337,
									"scores":	[-5.427226054242106]
								}, {
									"case":	338,
									"scores":	[-5.427226054242106]
								}, {
									"case":	339,
									"scores":	[-5.427226054242106]
								}, {
									"case":	340,
									"scores":	[-5.427226054242106]
								}, {
									"case":	341,
									"scores":	[-5.427226054242106]
								}, {
									"case":	342,
									"scores":	[-5.427226054242106]
								}, {
									"case":	343,
									"scores":	[-5.427226054242106]
								}, {
									"case":	344,
									"scores":	[-5.427226054242106]
								}, {
									"case":	345,
									"scores":	[-5.427226054242106]
								}, {
									"case":	346,
									"scores":	[-5.427226054242106]
								}, {
									"case":	347,
									"scores":	[-5.427226054242106]
								}, {
									"case":	348,
									"scores":	[-5.427226054242106]
								}, {
									"case":	349,
									"scores":	[-5.427226054242106]
								}, {
									"case":	350,
									"scores":	[-5.427226054242106]
								}, {
									"case":	351,
									"scores":	[-5.427226054242106]
								}, {
									"case":	352,
									"scores":	[-5.427226054242106]
								}, {
									"case":	353,
									"scores":	[-5.427226054242106]
								}, {
									"case":	354,
									"scores":	[-5.427226054242106]
								}, {
									"case":	355,
									"scores":	[-5.427226054242106]
								}, {
									"case":	356,
									"scores":	[-5.427226054242106]
								}, {
									"case":	357,
									"scores":	[-5.427226054242106]
								}, {
									"case":	358,
									"scores":	[-5.427226054242106]
								}, {
									"case":	359,
									"scores":	[-5.427226054242106]
								}, {
									"case":	360,
									"scores":	[-5.427226054242106]
								}, {
									"case":	361,
									"scores":	[-5.427226054242106]
								}, {
									"case":	362,
									"scores":	[-5.427226054242106]
								}, {
									"case":	363,
									"scores":	[-5.427226054242106]
								}, {
									"case":	364,
									"scores":	[-5.427226054242106]
								}, {
									"case":	365,
									"scores":	[-5.427226054242106]
								}, {
									"case":	366,
									"scores":	[-5.427226054242106]
								}, {
									"case":	367,
									"scores":	[-5.427226054242106]
								}, {
									"case":	368,
									"scores":	[-5.427226054242106]
								}, {
									"case":	369,
									"scores":	[-5.427226054242106]
								}, {
									"case":	370,
									"scores":	[-5.427226054242106]
								}, {
									"case":	371,
									"scores":	[-5.427226054242106]
								}, {
									"case":	372,
									"scores":	[-5.427226054242106]
								}, {
									"case":	373,
									"scores":	[-5.427226054242106]
								}, {
									"case":	374,
									"scores":	[-5.427226054242106]
								}, {
									"case":	375,
									"scores":	[-5.427226054242106]
								}, {
									"case":	376,
									"scores":	[-5.427226054242106]
								}, {
									"case":	377,
									"scores":	[-5.427226054242106]
								}, {
									"case":	378,
									"scores":	[-5.427226054242106]
								}, {
									"case":	379,
									"scores":	[-5.427226054242106]
								}, {
									"case":	380,
									"scores":	[-5.427226054242106]
								}, {
									"case":	381,
									"scores":	[-5.427226054242106]
								}, {
									"case":	382,
									"scores":	[-5.427226054242106]
								}, {
									"case":	383,
									"scores":	[-5.427226054242106]
								}, {
									"case":	384,
									"scores":	[-5.427226054242106]
								}, {
									"case":	385,
									"scores":	[-5.427226054242106]
								}, {
									"case":	386,
									"scores":	[-5.427226054242106]
								}, {
									"case":	387,
									"scores":	[-5.427226054242106]
								}, {
									"case":	388,
									"scores":	[-5.427226054242106]
								}, {
									"case":	389,
									"scores":	[-5.427226054242106]
								}, {
									"case":	390,
									"scores":	[-5.427226054242106]
								}, {
									"case":	391,
									"scores":	[-5.427226054242106]
								}, {
									"case":	392,
									"scores":	[-5.427226054242106]
								}, {
									"case":	393,
									"scores":	[-5.427226054242106]
								}, {
									"case":	394,
									"scores":	[-5.427226054242106]
								}, {
									"case":	395,
									"scores":	[-5.427226054242106]
								}, {
									"case":	396,
									"scores":	[-5.427226054242106]
								}, {
									"case":	397,
									"scores":	[-5.427226054242106]
								}, {
									"case":	398,
									"scores":	[-5.427226054242106]
								}, {
									"case":	399,
									"scores":	[-5.427226054242106]
								}, {
									"case":	400,
									"scores":	[-5.427226054242106]
								}, {
									"case":	401,
									"scores":	[-5.427226054242106]
								}, {
									"case":	402,
									"scores":	[-5.427226054242106]
								}, {
									"case":	403,
									"scores":	[-5.427226054242106]
								}, {
									"case":	404,
									"scores":	[-5.427226054242106]
								}, {
									"case":	405,
									"scores":	[-5.427226054242106]
								}, {
									"case":	406,
									"scores":	[-5.427226054242106]
								}, {
									"case":	407,
									"scores":	[-5.427226054242106]
								}, {
									"case":	408,
									"scores":	[-5.427226054242106]
								}, {
									"case":	409,
									"scores":	[-5.427226054242106]
								}, {
									"case":	410,
									"scores":	[-5.427226054242106]
								}, {
									"case":	411,
									"scores":	[-5.427226054242106]
								}, {
									"case":	412,
									"scores":	[-5.427226054242106]
								}, {
									"case":	413,
									"scores":	[-5.427226054242106]
								}, {
									"case":	414,
									"scores":	[-5.427226054242106]
								}, {
									"case":	415,
									"scores":	[-5.427226054242106]
								}, {
									"case":	416,
									"scores":	[-5.427226054242106]
								}, {
									"case":	417,
									"scores":	[-5.427226054242106]
								}, {
									"case":	418,
									"scores":	[-5.427226054242106]
								}, {
									"case":	419,
									"scores":	[-5.427226054242106]
								}, {
									"case":	420,
									"scores":	[-5.427226054242106]
								}, {
									"case":	421,
									"scores":	[-5.427226054242106]
								}, {
									"case":	422,
									"scores":	[-5.427226054242106]
								}, {
									"case":	423,
									"scores":	[-5.427226054242106]
								}, {
									"case":	424,
									"scores":	[-5.427226054242106]
								}, {
									"case":	425,
									"scores":	[-5.427226054242106]
								}, {
									"case":	426,
									"scores":	[-5.427226054242106]
								}, {
									"case":	427,
									"scores":	[-5.427226054242106]
								}, {
									"case":	428,
									"scores":	[-5.427226054242106]
								}, {
									"case":	429,
									"scores":	[-5.427226054242106]
								}, {
									"case":	430,
									"scores":	[-5.427226054242106]
								}, {
									"case":	431,
									"scores":	[-5.427226054242106]
								}, {
									"case":	432,
									"scores":	[-5.427226054242106]
								}, {
									"case":	433,
									"scores":	[-5.427226054242106]
								}, {
									"case":	434,
									"scores":	[-5.427226054242106]
								}, {
									"case":	435,
									"scores":	[-5.427226054242106]
								}, {
									"case":	436,
									"scores":	[-5.427226054242106]
								}, {
									"case":	437,
									"scores":	[-5.427226054242106]
								}, {
									"case":	438,
									"scores":	[-5.427226054242106]
								}, {
									"case":	439,
									"scores":	[-5.427226054242106]
								}, {
									"case":	440,
									"scores":	[-5.427226054242106]
								}, {
									"case":	441,
									"scores":	[-5.427226054242106]
								}, {
									"case":	442,
									"scores":	[-5.427226054242106]
								}, {
									"case":	443,
									"scores":	[-5.427226054242106]
								}, {
									"case":	444,
									"scores":	[-5.427226054242106]
								}, {
									"case":	445,
									"scores":	[-5.427226054242106]
								}, {
									"case":	446,
									"scores":	[-5.427226054242106]
								}, {
									"case":	447,
									"scores":	[-5.427226054242106]
								}, {
									"case":	448,
									"scores":	[-5.427226054242106]
								}, {
									"case":	449,
									"scores":	[-5.427226054242106]
								}, {
									"case":	450,
									"scores":	[-5.427226054242106]
								}, {
									"case":	451,
									"scores":	[-5.427226054242106]
								}, {
									"case":	452,
									"scores":	[-5.427226054242106]
								}, {
									"case":	453,
									"scores":	[-5.427226054242106]
								}, {
									"case":	454,
									"scores":	[-5.427226054242106]
								}, {
									"case":	455,
									"scores":	[-5.427226054242106]
								}, {
									"case":	456,
									"scores":	[-5.427226054242106]
								}, {
									"case":	457,
									"scores":	[-5.427226054242106]
								}, {
									"case":	458,
									"scores":	[-5.427226054242106]
								}, {
									"case":	459,
									"scores":	[-5.427226054242106]
								}, {
									"case":	460,
									"scores":	[-5.427226054242106]
								}, {
									"case":	461,
									"scores":	[-5.427226054242106]
								}, {
									"case":	462,
									"scores":	[-5.427226054242106]
								}, {
									"case":	463,
									"scores":	[-5.427226054242106]
								}, {
									"case":	464,
									"scores":	[-5.427226054242106]
								}, {
									"case":	465,
									"scores":	[-5.427226054242106]
								}, {
									"case":	466,
									"scores":	[-5.427226054242106]
								}, {
									"case":	467,
									"scores":	[-5.427226054242106]
								}, {
									"case":	468,
									"scores":	[-5.427226054242106]
								}, {
									"case":	469,
									"scores":	[-5.427226054242106]
								}, {
									"case":	470,
									"scores":	[-5.427226054242106]
								}, {
									"case":	471,
									"scores":	[-5.427226054242106]
								}, {
									"case":	472,
									"scores":	[-5.427226054242106]
								}, {
									"case":	473,
									"scores":	[-5.427226054242106]
								}, {
									"case":	474,
									"scores":	[-5.427226054242106]
								}, {
									"case":	475,
									"scores":	[-5.427226054242106]
								}, {
									"case":	476,
									"scores":	[-5.427226054242106]
								}, {
									"case":	477,
									"scores":	[-5.427226054242106]
								}, {
									"case":	478,
									"scores":	[-5.427226054242106]
								}, {
									"case":	479,
									"scores":	[-5.427226054242106]
								}, {
									"case":	480,
									"scores":	[-5.427226054242106]
								}, {
									"case":	481,
									"scores":	[-5.427226054242106]
								}, {
									"case":	482,
									"scores":	[-5.427226054242106]
								}, {
									"case":	483,
									"scores":	[-5.427226054242106]
								}, {
									"case":	484,
									"scores":	[-5.427226054242106]
								}, {
									"case":	485,
									"scores":	[-5.427226054242106]
								}, {
									"case":	486,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	487,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	488,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	489,
									"scores":	[-7.4621577882421057, -6.871151664242106, -7.3613796402421059, -7.5663945482421058, -7.0968448642421063, -7.1980541642421061, -7.9714377642421059, -7.9714377642421059, -7.9714377642421059, -7.780805764242106, -7.780805764242106, -7.8702284642421061, -7.0074221642421062, -7.8672010042421059, -7.8702284642421061, -7.0074221642421062, -7.8672010042421059, -7.9714377642421059, -7.3753170042421061, -7.0074221642421062, -7.0968448642421063, -7.4993061642421059, -7.6899381642421059, -7.780805764242106, -7.8702284642421061, -7.780805764242106, -7.9714377642421059, -7.9714377642421059, -7.9714377642421059, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.9714377642421059, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.9714377642421059, -7.9714377642421059, -7.9714377642421059, -7.9714377642421059, -7.9714377642421059, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.780805764242106, -7.9714377642421059, -7.9714377642421059, -7.9714377642421059, -7.3246947642421061, -7.780805764242106, -7.780805764242106, -7.9714377642421059, -7.9714377642421059, -7.780805764242106, -7.780805764242106]
								}, {
									"case":	490,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	491,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	492,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	493,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	494,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	495,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	496,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	497,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	498,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	499,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	500,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	501,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	502,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	503,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	504,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	505,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	506,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	507,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	508,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}, {
									"case":	509,
									"scores":	[-9.7249395882421048, -9.1339334642421051, -9.624161440242105, -9.82917634824211, -9.3596266642421071, -9.460835964242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.133010264242106, -9.270203964242107, -10.129982804242108, -10.234219564242107, -9.6380988042421052, -9.270203964242107, -9.3596266642421071, -9.7620879642421059, -9.9527199642421067, -10.043587564242106, -10.133010264242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.234219564242107, -9.587476564242106, -10.043587564242106, -10.043587564242106, -10.234219564242107, -10.234219564242107, -10.043587564242106, -10.043587564242106]
								}]
						}, {
							"switch":	87,
							"types":	[[], [], [1], [], [], [], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [], [], [], [], [2]],
							"begin_line":	706,
							"begin_column":	4,
							"end_line":	706,
							"end_column":	82,
							"patch_codes":	["if (!__is_neg(\"\", \"L706\", 64, &(con), sizeof (con), &(con->uri.query->ptr), sizeof (con->uri.query->ptr), &(con->uri.query->used), sizeof (con->uri.query->used), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.query->size), sizeof (con->uri.query->size), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler)))\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n", "{\n}\n", "BIO_printf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "VALGRIND_PRINTF(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "VALGRIND_PRINTF_BACKTRACE(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "__builtin_va_start(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "array_append_key_value(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "array_set_key_value(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "execl(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "execle(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "execlp(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "fprintf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_build_filename(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_build_path(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_markup_printf_escaped(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_prefix_error(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_print(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_printerr(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_relation_exists(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_relation_insert(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_scanner_error(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_scanner_warn(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_strconcat(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_strdup_printf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_string_append_printf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_string_printf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_strjoin(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_test_message(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_builder_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_builder_add_parsed(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_get(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_iter_loop(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_iter_next(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_new(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_new_parsed(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "g_variant_new_printf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "log_trace(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "printf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "sprintf(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&(env), \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING or the directory does not exist\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (0 * argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (0 * i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (0 * n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (0 * pid) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc != i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc != n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc * i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc * n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc * pid) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc + 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc + i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc + n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc - 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc - i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc - n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc == i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (argc == n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (args != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (args == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (b2 != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (b2 == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (buf != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (buf == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (c != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (c == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (cgi_handler != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (cgi_handler == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (con != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (con == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (env != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (env == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (from_cgi_fds != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (from_cgi_fds == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i != n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i * argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i * n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i * pid) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i + 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i + n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i - 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i - n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (i == n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n * argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n * i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n * pid) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n + 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n - 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (n == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (p != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (p == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid != argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid != i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid != n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid * argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid * i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid * n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid + 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid + argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid + i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid + n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid - 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid - argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid - i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid - n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid == argc) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid == i) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (pid == n) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (s != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (s == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (srv != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (srv == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (srv_sock != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (srv_sock == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (st != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (st == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (to_cgi_fds != 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - (to_cgi_fds == 0) : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (0 * argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (0 * i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (0 * n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (0 * pid), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc != i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc != n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc * i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc * n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc * pid), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc + 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc + i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc + n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc - 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc - i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc - n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc == i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (argc == n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (args != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (args == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (b2 != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (b2 == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (buf != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (buf == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (c != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (c == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (cgi_handler != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (cgi_handler == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (con != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (con == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (env != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (env == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (from_cgi_fds != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (from_cgi_fds == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i != n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i * argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i * n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i * pid), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i + 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i + n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i - 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i - n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (i == n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n * argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n * i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n * pid), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n + 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n - 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (n == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (p != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (p == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid != argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid != i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid != n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid * argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid * i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid * n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid + 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid + argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid + i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid + n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid - 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid - argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid - i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid - n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid == argc), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid == i), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (pid == n), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (s != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (s == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (srv != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (srv == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (srv_sock != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (srv_sock == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (st != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (st == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (to_cgi_fds != 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : (to_cgi_fds == 0), con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&argc)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&args)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&b2)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&buf)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&c)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&cgi_handler)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&con)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&env)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&from_cgi_fds)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&i)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&n)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&p)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&pid)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&s)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&srv)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&srv_sock)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&st)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (&to_cgi_fds)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (con)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&argc)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&args)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&b2)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&buf)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&c)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&cgi_handler)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&con)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&env)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&from_cgi_fds)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&i)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&n)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&p)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&pid)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&s)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&srv)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&srv_sock)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&st)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (&to_cgi_fds)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (con)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&argc)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&args)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&b2)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&buf)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&c)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&cgi_handler)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&con)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&env)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&from_cgi_fds)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&i)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&n)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&p)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&pid)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&s)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&srv)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&srv_sock)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&st)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (&to_cgi_fds)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (con)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (0 * argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (0 * i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (0 * n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (0 * pid) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc != i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc != n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc * i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc * n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc * pid) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc + 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc + i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc + n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc - 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc - i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc - n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc == i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (argc == n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (args != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (args == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (b2 != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (b2 == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (buf != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (buf == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (c != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (c == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (cgi_handler != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (cgi_handler == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (con != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (con == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (env != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (env == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (from_cgi_fds != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (from_cgi_fds == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i != n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i * argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i * n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i * pid) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i + 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i + n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i - 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i - n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (i == n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n * argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n * i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n * pid) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n + 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n - 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (n == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (p != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (p == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid != argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid != i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid != n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid * argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid * i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid * n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid + 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid + argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid + i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid + n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid - 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid - argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid - i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid - n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid == argc) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid == i) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (pid == n) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (s != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (s == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (srv != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (srv == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (srv_sock != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (srv_sock == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (st != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (st == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (to_cgi_fds != 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - (to_cgi_fds == 0) : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (0 * argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (0 * i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (0 * n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (0 * pid))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc != i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc != n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc * i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc * n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc * pid))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc + 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc + i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc + n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc - 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc - i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc - n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc == i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (argc == n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (args != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (args == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (b2 != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (b2 == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (buf != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (buf == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (c != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (c == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (cgi_handler != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (cgi_handler == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (con != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (con == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (env != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (env == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (from_cgi_fds != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (from_cgi_fds == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i != n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i * argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i * n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i * pid))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i + 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i + n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i - 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i - n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (i == n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n * argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n * i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n * pid))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n + 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n - 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (n == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (p != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (p == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid != argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid != i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid != n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid * argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid * i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid * n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid + 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid + argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid + i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid + n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid - 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid - argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid - i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid - n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid == argc))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid == i))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (pid == n))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (s != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (s == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (srv != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (srv == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (srv_sock != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (srv_sock == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (st != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (st == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (to_cgi_fds != 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : (to_cgi_fds == 0))", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&argc) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&args) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&b2) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&buf) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&c) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&cgi_handler) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&con) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&env) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&from_cgi_fds) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&i) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&n) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&p) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&pid) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&s) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&srv) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&srv_sock) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&st) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (&to_cgi_fds) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", (0) ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&argc), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&args), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&b2), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&buf), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&c), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&cgi_handler), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&con), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&env), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&from_cgi_fds), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&i), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&n), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&p), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&pid), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&s), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&srv), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&srv_sock), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&st), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (&to_cgi_fds), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, (0), \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9472988442421064, -6.6776634442421061, -5.8225683442421063, -6.912058044242106, -6.5715733442421058, -6.9785133442421063, -7.7493470442421062, -7.7493470442421062, -7.7493470442421062, -6.9054420442421058, -6.9054420442421058, -7.3424070442421066, -6.134608344242106, -7.7845878442421057, -7.3424070442421066, -6.134608344242106, -7.7845878442421057, -7.7493470442421062, -7.2432948442421061, -6.134608344242106, -6.5715733442421058, -6.6759013442421065, -7.5198063442421059, -6.9054420442421058, -7.3424070442421066, -6.9054420442421058, -7.7493470442421062, -7.7493470442421062, -7.7493470442421062, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -7.7493470442421062, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -7.7493470442421062, -7.7493470442421062, -7.7493470442421062, -7.7493470442421062, -7.7493470442421062, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -6.9054420442421058, -7.7493470442421062, -7.7493470442421062, -7.7493470442421062, -6.6615151742421057, -6.9054420442421058, -6.9054420442421058, -7.7493470442421062, -7.7493470442421062, -6.9054420442421058, -6.9054420442421058]
								}, {
									"case":	2,
									"scores":	[-5.427226054242106]
								}, {
									"case":	3,
									"scores":	[-5.427226054242106]
								}, {
									"case":	4,
									"scores":	[-5.427226054242106]
								}, {
									"case":	5,
									"scores":	[-5.427226054242106]
								}, {
									"case":	6,
									"scores":	[-5.427226054242106]
								}, {
									"case":	7,
									"scores":	[-5.427226054242106]
								}, {
									"case":	8,
									"scores":	[-5.427226054242106]
								}, {
									"case":	9,
									"scores":	[-5.427226054242106]
								}, {
									"case":	10,
									"scores":	[-5.427226054242106]
								}, {
									"case":	11,
									"scores":	[-5.427226054242106]
								}, {
									"case":	12,
									"scores":	[-5.427226054242106]
								}, {
									"case":	13,
									"scores":	[-5.427226054242106]
								}, {
									"case":	14,
									"scores":	[-5.427226054242106]
								}, {
									"case":	15,
									"scores":	[-5.427226054242106]
								}, {
									"case":	16,
									"scores":	[-5.427226054242106]
								}, {
									"case":	17,
									"scores":	[-5.427226054242106]
								}, {
									"case":	18,
									"scores":	[-5.427226054242106]
								}, {
									"case":	19,
									"scores":	[-5.427226054242106]
								}, {
									"case":	20,
									"scores":	[-5.427226054242106]
								}, {
									"case":	21,
									"scores":	[-5.427226054242106]
								}, {
									"case":	22,
									"scores":	[-5.427226054242106]
								}, {
									"case":	23,
									"scores":	[-5.427226054242106]
								}, {
									"case":	24,
									"scores":	[-5.427226054242106]
								}, {
									"case":	25,
									"scores":	[-5.427226054242106]
								}, {
									"case":	26,
									"scores":	[-5.427226054242106]
								}, {
									"case":	27,
									"scores":	[-5.427226054242106]
								}, {
									"case":	28,
									"scores":	[-5.427226054242106]
								}, {
									"case":	29,
									"scores":	[-5.427226054242106]
								}, {
									"case":	30,
									"scores":	[-5.427226054242106]
								}, {
									"case":	31,
									"scores":	[-5.427226054242106]
								}, {
									"case":	32,
									"scores":	[-5.427226054242106]
								}, {
									"case":	33,
									"scores":	[-5.427226054242106]
								}, {
									"case":	34,
									"scores":	[-5.427226054242106]
								}, {
									"case":	35,
									"scores":	[-5.427226054242106]
								}, {
									"case":	36,
									"scores":	[-5.427226054242106]
								}, {
									"case":	37,
									"scores":	[-5.427226054242106]
								}, {
									"case":	38,
									"scores":	[-5.427226054242106]
								}, {
									"case":	39,
									"scores":	[-5.427226054242106]
								}, {
									"case":	40,
									"scores":	[-5.427226054242106]
								}, {
									"case":	41,
									"scores":	[-5.427226054242106]
								}, {
									"case":	42,
									"scores":	[-5.427226054242106]
								}, {
									"case":	43,
									"scores":	[-5.427226054242106]
								}, {
									"case":	44,
									"scores":	[-5.427226054242106]
								}, {
									"case":	45,
									"scores":	[-5.427226054242106]
								}, {
									"case":	46,
									"scores":	[-5.427226054242106]
								}, {
									"case":	47,
									"scores":	[-5.427226054242106]
								}, {
									"case":	48,
									"scores":	[-5.427226054242106]
								}, {
									"case":	49,
									"scores":	[-5.427226054242106]
								}, {
									"case":	50,
									"scores":	[-5.427226054242106]
								}, {
									"case":	51,
									"scores":	[-5.427226054242106]
								}, {
									"case":	52,
									"scores":	[-5.427226054242106]
								}, {
									"case":	53,
									"scores":	[-5.427226054242106]
								}, {
									"case":	54,
									"scores":	[-5.427226054242106]
								}, {
									"case":	55,
									"scores":	[-5.427226054242106]
								}, {
									"case":	56,
									"scores":	[-5.427226054242106]
								}, {
									"case":	57,
									"scores":	[-5.427226054242106]
								}, {
									"case":	58,
									"scores":	[-5.427226054242106]
								}, {
									"case":	59,
									"scores":	[-5.427226054242106]
								}, {
									"case":	60,
									"scores":	[-5.427226054242106]
								}, {
									"case":	61,
									"scores":	[-5.427226054242106]
								}, {
									"case":	62,
									"scores":	[-5.427226054242106]
								}, {
									"case":	63,
									"scores":	[-5.427226054242106]
								}, {
									"case":	64,
									"scores":	[-5.427226054242106]
								}, {
									"case":	65,
									"scores":	[-5.427226054242106]
								}, {
									"case":	66,
									"scores":	[-5.427226054242106]
								}, {
									"case":	67,
									"scores":	[-5.427226054242106]
								}, {
									"case":	68,
									"scores":	[-5.427226054242106]
								}, {
									"case":	69,
									"scores":	[-5.427226054242106]
								}, {
									"case":	70,
									"scores":	[-5.427226054242106]
								}, {
									"case":	71,
									"scores":	[-5.427226054242106]
								}, {
									"case":	72,
									"scores":	[-5.427226054242106]
								}, {
									"case":	73,
									"scores":	[-5.427226054242106]
								}, {
									"case":	74,
									"scores":	[-5.427226054242106]
								}, {
									"case":	75,
									"scores":	[-5.427226054242106]
								}, {
									"case":	76,
									"scores":	[-5.427226054242106]
								}, {
									"case":	77,
									"scores":	[-5.427226054242106]
								}, {
									"case":	78,
									"scores":	[-5.427226054242106]
								}, {
									"case":	79,
									"scores":	[-5.427226054242106]
								}, {
									"case":	80,
									"scores":	[-5.427226054242106]
								}, {
									"case":	81,
									"scores":	[-5.427226054242106]
								}, {
									"case":	82,
									"scores":	[-5.427226054242106]
								}, {
									"case":	83,
									"scores":	[-5.427226054242106]
								}, {
									"case":	84,
									"scores":	[-5.427226054242106]
								}, {
									"case":	85,
									"scores":	[-5.427226054242106]
								}, {
									"case":	86,
									"scores":	[-5.427226054242106]
								}, {
									"case":	87,
									"scores":	[-5.427226054242106]
								}, {
									"case":	88,
									"scores":	[-5.427226054242106]
								}, {
									"case":	89,
									"scores":	[-5.427226054242106]
								}, {
									"case":	90,
									"scores":	[-5.427226054242106]
								}, {
									"case":	91,
									"scores":	[-5.427226054242106]
								}, {
									"case":	92,
									"scores":	[-5.427226054242106]
								}, {
									"case":	93,
									"scores":	[-5.427226054242106]
								}, {
									"case":	94,
									"scores":	[-5.427226054242106]
								}, {
									"case":	95,
									"scores":	[-5.427226054242106]
								}, {
									"case":	96,
									"scores":	[-5.427226054242106]
								}, {
									"case":	97,
									"scores":	[-5.427226054242106]
								}, {
									"case":	98,
									"scores":	[-5.427226054242106]
								}, {
									"case":	99,
									"scores":	[-5.427226054242106]
								}, {
									"case":	100,
									"scores":	[-5.427226054242106]
								}, {
									"case":	101,
									"scores":	[-5.427226054242106]
								}, {
									"case":	102,
									"scores":	[-5.427226054242106]
								}, {
									"case":	103,
									"scores":	[-5.427226054242106]
								}, {
									"case":	104,
									"scores":	[-5.427226054242106]
								}, {
									"case":	105,
									"scores":	[-5.427226054242106]
								}, {
									"case":	106,
									"scores":	[-5.427226054242106]
								}, {
									"case":	107,
									"scores":	[-5.427226054242106]
								}, {
									"case":	108,
									"scores":	[-5.427226054242106]
								}, {
									"case":	109,
									"scores":	[-5.427226054242106]
								}, {
									"case":	110,
									"scores":	[-5.427226054242106]
								}, {
									"case":	111,
									"scores":	[-5.427226054242106]
								}, {
									"case":	112,
									"scores":	[-5.427226054242106]
								}, {
									"case":	113,
									"scores":	[-5.427226054242106]
								}, {
									"case":	114,
									"scores":	[-5.427226054242106]
								}, {
									"case":	115,
									"scores":	[-5.427226054242106]
								}, {
									"case":	116,
									"scores":	[-5.427226054242106]
								}, {
									"case":	117,
									"scores":	[-5.427226054242106]
								}, {
									"case":	118,
									"scores":	[-5.427226054242106]
								}, {
									"case":	119,
									"scores":	[-5.427226054242106]
								}, {
									"case":	120,
									"scores":	[-5.427226054242106]
								}, {
									"case":	121,
									"scores":	[-5.427226054242106]
								}, {
									"case":	122,
									"scores":	[-5.427226054242106]
								}, {
									"case":	123,
									"scores":	[-5.427226054242106]
								}, {
									"case":	124,
									"scores":	[-5.427226054242106]
								}, {
									"case":	125,
									"scores":	[-5.427226054242106]
								}, {
									"case":	126,
									"scores":	[-5.427226054242106]
								}, {
									"case":	127,
									"scores":	[-5.427226054242106]
								}, {
									"case":	128,
									"scores":	[-5.427226054242106]
								}, {
									"case":	129,
									"scores":	[-5.427226054242106]
								}, {
									"case":	130,
									"scores":	[-5.427226054242106]
								}, {
									"case":	131,
									"scores":	[-5.427226054242106]
								}, {
									"case":	132,
									"scores":	[-5.427226054242106]
								}, {
									"case":	133,
									"scores":	[-5.427226054242106]
								}, {
									"case":	134,
									"scores":	[-5.427226054242106]
								}, {
									"case":	135,
									"scores":	[-5.427226054242106]
								}, {
									"case":	136,
									"scores":	[-5.427226054242106]
								}, {
									"case":	137,
									"scores":	[-5.427226054242106]
								}, {
									"case":	138,
									"scores":	[-5.427226054242106]
								}, {
									"case":	139,
									"scores":	[-5.427226054242106]
								}, {
									"case":	140,
									"scores":	[-5.427226054242106]
								}, {
									"case":	141,
									"scores":	[-5.427226054242106]
								}, {
									"case":	142,
									"scores":	[-5.427226054242106]
								}, {
									"case":	143,
									"scores":	[-5.427226054242106]
								}, {
									"case":	144,
									"scores":	[-5.427226054242106]
								}, {
									"case":	145,
									"scores":	[-5.427226054242106]
								}, {
									"case":	146,
									"scores":	[-5.427226054242106]
								}, {
									"case":	147,
									"scores":	[-5.427226054242106]
								}, {
									"case":	148,
									"scores":	[-5.427226054242106]
								}, {
									"case":	149,
									"scores":	[-5.427226054242106]
								}, {
									"case":	150,
									"scores":	[-5.427226054242106]
								}, {
									"case":	151,
									"scores":	[-5.427226054242106]
								}, {
									"case":	152,
									"scores":	[-5.427226054242106]
								}, {
									"case":	153,
									"scores":	[-5.427226054242106]
								}, {
									"case":	154,
									"scores":	[-5.427226054242106]
								}, {
									"case":	155,
									"scores":	[-5.427226054242106]
								}, {
									"case":	156,
									"scores":	[-5.427226054242106]
								}, {
									"case":	157,
									"scores":	[-5.427226054242106]
								}, {
									"case":	158,
									"scores":	[-5.427226054242106]
								}, {
									"case":	159,
									"scores":	[-5.427226054242106]
								}, {
									"case":	160,
									"scores":	[-5.427226054242106]
								}, {
									"case":	161,
									"scores":	[-5.427226054242106]
								}, {
									"case":	162,
									"scores":	[-5.427226054242106]
								}, {
									"case":	163,
									"scores":	[-5.427226054242106]
								}, {
									"case":	164,
									"scores":	[-5.427226054242106]
								}, {
									"case":	165,
									"scores":	[-5.427226054242106]
								}, {
									"case":	166,
									"scores":	[-5.427226054242106]
								}, {
									"case":	167,
									"scores":	[-5.427226054242106]
								}, {
									"case":	168,
									"scores":	[-5.427226054242106]
								}, {
									"case":	169,
									"scores":	[-5.427226054242106]
								}, {
									"case":	170,
									"scores":	[-5.427226054242106]
								}, {
									"case":	171,
									"scores":	[-5.427226054242106]
								}, {
									"case":	172,
									"scores":	[-5.427226054242106]
								}, {
									"case":	173,
									"scores":	[-5.427226054242106]
								}, {
									"case":	174,
									"scores":	[-5.427226054242106]
								}, {
									"case":	175,
									"scores":	[-5.427226054242106]
								}, {
									"case":	176,
									"scores":	[-5.427226054242106]
								}, {
									"case":	177,
									"scores":	[-5.427226054242106]
								}, {
									"case":	178,
									"scores":	[-5.427226054242106]
								}, {
									"case":	179,
									"scores":	[-5.427226054242106]
								}, {
									"case":	180,
									"scores":	[-5.427226054242106]
								}, {
									"case":	181,
									"scores":	[-5.427226054242106]
								}, {
									"case":	182,
									"scores":	[-5.427226054242106]
								}, {
									"case":	183,
									"scores":	[-5.427226054242106]
								}, {
									"case":	184,
									"scores":	[-5.427226054242106]
								}, {
									"case":	185,
									"scores":	[-5.427226054242106]
								}, {
									"case":	186,
									"scores":	[-5.427226054242106]
								}, {
									"case":	187,
									"scores":	[-5.427226054242106]
								}, {
									"case":	188,
									"scores":	[-5.427226054242106]
								}, {
									"case":	189,
									"scores":	[-5.427226054242106]
								}, {
									"case":	190,
									"scores":	[-5.427226054242106]
								}, {
									"case":	191,
									"scores":	[-5.427226054242106]
								}, {
									"case":	192,
									"scores":	[-5.427226054242106]
								}, {
									"case":	193,
									"scores":	[-5.427226054242106]
								}, {
									"case":	194,
									"scores":	[-5.427226054242106]
								}, {
									"case":	195,
									"scores":	[-5.427226054242106]
								}, {
									"case":	196,
									"scores":	[-5.427226054242106]
								}, {
									"case":	197,
									"scores":	[-5.427226054242106]
								}, {
									"case":	198,
									"scores":	[-5.427226054242106]
								}, {
									"case":	199,
									"scores":	[-5.427226054242106]
								}, {
									"case":	200,
									"scores":	[-5.427226054242106]
								}, {
									"case":	201,
									"scores":	[-5.427226054242106]
								}, {
									"case":	202,
									"scores":	[-5.427226054242106]
								}, {
									"case":	203,
									"scores":	[-5.427226054242106]
								}, {
									"case":	204,
									"scores":	[-5.427226054242106]
								}, {
									"case":	205,
									"scores":	[-5.427226054242106]
								}, {
									"case":	206,
									"scores":	[-5.427226054242106]
								}, {
									"case":	207,
									"scores":	[-5.427226054242106]
								}, {
									"case":	208,
									"scores":	[-5.427226054242106]
								}, {
									"case":	209,
									"scores":	[-5.427226054242106]
								}, {
									"case":	210,
									"scores":	[-5.427226054242106]
								}, {
									"case":	211,
									"scores":	[-5.427226054242106]
								}, {
									"case":	212,
									"scores":	[-5.427226054242106]
								}, {
									"case":	213,
									"scores":	[-5.427226054242106]
								}, {
									"case":	214,
									"scores":	[-5.427226054242106]
								}, {
									"case":	215,
									"scores":	[-5.427226054242106]
								}, {
									"case":	216,
									"scores":	[-5.427226054242106]
								}, {
									"case":	217,
									"scores":	[-5.427226054242106]
								}, {
									"case":	218,
									"scores":	[-5.427226054242106]
								}, {
									"case":	219,
									"scores":	[-5.427226054242106]
								}, {
									"case":	220,
									"scores":	[-5.427226054242106]
								}, {
									"case":	221,
									"scores":	[-5.427226054242106]
								}, {
									"case":	222,
									"scores":	[-5.427226054242106]
								}, {
									"case":	223,
									"scores":	[-5.427226054242106]
								}, {
									"case":	224,
									"scores":	[-5.427226054242106]
								}, {
									"case":	225,
									"scores":	[-5.427226054242106]
								}, {
									"case":	226,
									"scores":	[-5.427226054242106]
								}, {
									"case":	227,
									"scores":	[-5.427226054242106]
								}, {
									"case":	228,
									"scores":	[-5.427226054242106]
								}, {
									"case":	229,
									"scores":	[-5.427226054242106]
								}, {
									"case":	230,
									"scores":	[-5.427226054242106]
								}, {
									"case":	231,
									"scores":	[-5.427226054242106]
								}, {
									"case":	232,
									"scores":	[-5.427226054242106]
								}, {
									"case":	233,
									"scores":	[-5.427226054242106]
								}, {
									"case":	234,
									"scores":	[-5.427226054242106]
								}, {
									"case":	235,
									"scores":	[-5.427226054242106]
								}, {
									"case":	236,
									"scores":	[-5.427226054242106]
								}, {
									"case":	237,
									"scores":	[-5.427226054242106]
								}, {
									"case":	238,
									"scores":	[-5.427226054242106]
								}, {
									"case":	239,
									"scores":	[-5.427226054242106]
								}, {
									"case":	240,
									"scores":	[-5.427226054242106]
								}, {
									"case":	241,
									"scores":	[-5.427226054242106]
								}, {
									"case":	242,
									"scores":	[-5.427226054242106]
								}, {
									"case":	243,
									"scores":	[-5.427226054242106]
								}, {
									"case":	244,
									"scores":	[-5.427226054242106]
								}, {
									"case":	245,
									"scores":	[-5.427226054242106]
								}, {
									"case":	246,
									"scores":	[-5.427226054242106]
								}, {
									"case":	247,
									"scores":	[-5.427226054242106]
								}, {
									"case":	248,
									"scores":	[-5.427226054242106]
								}, {
									"case":	249,
									"scores":	[-5.427226054242106]
								}, {
									"case":	250,
									"scores":	[-5.427226054242106]
								}, {
									"case":	251,
									"scores":	[-5.427226054242106]
								}, {
									"case":	252,
									"scores":	[-5.427226054242106]
								}, {
									"case":	253,
									"scores":	[-5.427226054242106]
								}, {
									"case":	254,
									"scores":	[-5.427226054242106]
								}, {
									"case":	255,
									"scores":	[-5.427226054242106]
								}, {
									"case":	256,
									"scores":	[-5.427226054242106]
								}, {
									"case":	257,
									"scores":	[-5.427226054242106]
								}, {
									"case":	258,
									"scores":	[-5.427226054242106]
								}, {
									"case":	259,
									"scores":	[-5.427226054242106]
								}, {
									"case":	260,
									"scores":	[-5.427226054242106]
								}, {
									"case":	261,
									"scores":	[-5.427226054242106]
								}, {
									"case":	262,
									"scores":	[-5.427226054242106]
								}, {
									"case":	263,
									"scores":	[-5.427226054242106]
								}, {
									"case":	264,
									"scores":	[-5.427226054242106]
								}, {
									"case":	265,
									"scores":	[-5.427226054242106]
								}, {
									"case":	266,
									"scores":	[-5.427226054242106]
								}, {
									"case":	267,
									"scores":	[-5.427226054242106]
								}, {
									"case":	268,
									"scores":	[-5.427226054242106]
								}, {
									"case":	269,
									"scores":	[-5.427226054242106]
								}, {
									"case":	270,
									"scores":	[-5.427226054242106]
								}, {
									"case":	271,
									"scores":	[-5.427226054242106]
								}, {
									"case":	272,
									"scores":	[-5.427226054242106]
								}, {
									"case":	273,
									"scores":	[-5.427226054242106]
								}, {
									"case":	274,
									"scores":	[-5.427226054242106]
								}, {
									"case":	275,
									"scores":	[-5.427226054242106]
								}, {
									"case":	276,
									"scores":	[-5.427226054242106]
								}, {
									"case":	277,
									"scores":	[-5.427226054242106]
								}, {
									"case":	278,
									"scores":	[-5.427226054242106]
								}, {
									"case":	279,
									"scores":	[-5.427226054242106]
								}, {
									"case":	280,
									"scores":	[-5.427226054242106]
								}, {
									"case":	281,
									"scores":	[-5.427226054242106]
								}, {
									"case":	282,
									"scores":	[-5.427226054242106]
								}, {
									"case":	283,
									"scores":	[-5.427226054242106]
								}, {
									"case":	284,
									"scores":	[-5.427226054242106]
								}, {
									"case":	285,
									"scores":	[-5.427226054242106]
								}, {
									"case":	286,
									"scores":	[-5.427226054242106]
								}, {
									"case":	287,
									"scores":	[-5.427226054242106]
								}, {
									"case":	288,
									"scores":	[-5.427226054242106]
								}, {
									"case":	289,
									"scores":	[-5.427226054242106]
								}, {
									"case":	290,
									"scores":	[-5.427226054242106]
								}, {
									"case":	291,
									"scores":	[-5.427226054242106]
								}, {
									"case":	292,
									"scores":	[-5.427226054242106]
								}, {
									"case":	293,
									"scores":	[-5.427226054242106]
								}, {
									"case":	294,
									"scores":	[-5.427226054242106]
								}, {
									"case":	295,
									"scores":	[-5.427226054242106]
								}, {
									"case":	296,
									"scores":	[-5.427226054242106]
								}, {
									"case":	297,
									"scores":	[-5.427226054242106]
								}, {
									"case":	298,
									"scores":	[-5.427226054242106]
								}, {
									"case":	299,
									"scores":	[-5.427226054242106]
								}, {
									"case":	300,
									"scores":	[-5.427226054242106]
								}, {
									"case":	301,
									"scores":	[-5.427226054242106]
								}, {
									"case":	302,
									"scores":	[-5.427226054242106]
								}, {
									"case":	303,
									"scores":	[-5.427226054242106]
								}, {
									"case":	304,
									"scores":	[-5.427226054242106]
								}, {
									"case":	305,
									"scores":	[-5.427226054242106]
								}, {
									"case":	306,
									"scores":	[-5.427226054242106]
								}, {
									"case":	307,
									"scores":	[-5.427226054242106]
								}, {
									"case":	308,
									"scores":	[-5.427226054242106]
								}, {
									"case":	309,
									"scores":	[-5.427226054242106]
								}, {
									"case":	310,
									"scores":	[-5.427226054242106]
								}, {
									"case":	311,
									"scores":	[-5.427226054242106]
								}, {
									"case":	312,
									"scores":	[-5.427226054242106]
								}, {
									"case":	313,
									"scores":	[-5.427226054242106]
								}, {
									"case":	314,
									"scores":	[-5.427226054242106]
								}, {
									"case":	315,
									"scores":	[-5.427226054242106]
								}, {
									"case":	316,
									"scores":	[-5.427226054242106]
								}, {
									"case":	317,
									"scores":	[-5.427226054242106]
								}, {
									"case":	318,
									"scores":	[-5.427226054242106]
								}, {
									"case":	319,
									"scores":	[-5.427226054242106]
								}, {
									"case":	320,
									"scores":	[-5.427226054242106]
								}, {
									"case":	321,
									"scores":	[-5.427226054242106]
								}, {
									"case":	322,
									"scores":	[-5.427226054242106]
								}, {
									"case":	323,
									"scores":	[-5.427226054242106]
								}, {
									"case":	324,
									"scores":	[-5.427226054242106]
								}, {
									"case":	325,
									"scores":	[-5.427226054242106]
								}, {
									"case":	326,
									"scores":	[-5.427226054242106]
								}, {
									"case":	327,
									"scores":	[-5.427226054242106]
								}, {
									"case":	328,
									"scores":	[-5.427226054242106]
								}, {
									"case":	329,
									"scores":	[-5.427226054242106]
								}, {
									"case":	330,
									"scores":	[-5.427226054242106]
								}, {
									"case":	331,
									"scores":	[-5.427226054242106]
								}, {
									"case":	332,
									"scores":	[-5.427226054242106]
								}, {
									"case":	333,
									"scores":	[-5.427226054242106]
								}, {
									"case":	334,
									"scores":	[-5.427226054242106]
								}, {
									"case":	335,
									"scores":	[-5.427226054242106]
								}, {
									"case":	336,
									"scores":	[-5.427226054242106]
								}, {
									"case":	337,
									"scores":	[-5.427226054242106]
								}, {
									"case":	338,
									"scores":	[-5.427226054242106]
								}, {
									"case":	339,
									"scores":	[-5.427226054242106]
								}, {
									"case":	340,
									"scores":	[-5.427226054242106]
								}, {
									"case":	341,
									"scores":	[-5.427226054242106]
								}, {
									"case":	342,
									"scores":	[-5.427226054242106]
								}, {
									"case":	343,
									"scores":	[-5.427226054242106]
								}, {
									"case":	344,
									"scores":	[-5.427226054242106]
								}, {
									"case":	345,
									"scores":	[-5.427226054242106]
								}, {
									"case":	346,
									"scores":	[-5.427226054242106]
								}, {
									"case":	347,
									"scores":	[-5.427226054242106]
								}, {
									"case":	348,
									"scores":	[-5.427226054242106]
								}, {
									"case":	349,
									"scores":	[-5.427226054242106]
								}, {
									"case":	350,
									"scores":	[-5.427226054242106]
								}, {
									"case":	351,
									"scores":	[-5.427226054242106]
								}, {
									"case":	352,
									"scores":	[-5.427226054242106]
								}, {
									"case":	353,
									"scores":	[-5.427226054242106]
								}, {
									"case":	354,
									"scores":	[-5.427226054242106]
								}, {
									"case":	355,
									"scores":	[-5.427226054242106]
								}, {
									"case":	356,
									"scores":	[-5.427226054242106]
								}, {
									"case":	357,
									"scores":	[-5.427226054242106]
								}, {
									"case":	358,
									"scores":	[-5.427226054242106]
								}, {
									"case":	359,
									"scores":	[-5.427226054242106]
								}, {
									"case":	360,
									"scores":	[-5.427226054242106]
								}, {
									"case":	361,
									"scores":	[-5.427226054242106]
								}, {
									"case":	362,
									"scores":	[-5.427226054242106]
								}, {
									"case":	363,
									"scores":	[-5.427226054242106]
								}, {
									"case":	364,
									"scores":	[-5.427226054242106]
								}, {
									"case":	365,
									"scores":	[-5.427226054242106]
								}, {
									"case":	366,
									"scores":	[-5.427226054242106]
								}, {
									"case":	367,
									"scores":	[-5.427226054242106]
								}, {
									"case":	368,
									"scores":	[-5.427226054242106]
								}, {
									"case":	369,
									"scores":	[-5.427226054242106]
								}, {
									"case":	370,
									"scores":	[-5.427226054242106]
								}, {
									"case":	371,
									"scores":	[-5.427226054242106]
								}, {
									"case":	372,
									"scores":	[-5.427226054242106]
								}, {
									"case":	373,
									"scores":	[-5.427226054242106]
								}, {
									"case":	374,
									"scores":	[-5.427226054242106]
								}, {
									"case":	375,
									"scores":	[-5.427226054242106]
								}, {
									"case":	376,
									"scores":	[-5.427226054242106]
								}, {
									"case":	377,
									"scores":	[-5.427226054242106]
								}, {
									"case":	378,
									"scores":	[-5.427226054242106]
								}, {
									"case":	379,
									"scores":	[-5.427226054242106]
								}, {
									"case":	380,
									"scores":	[-5.427226054242106]
								}, {
									"case":	381,
									"scores":	[-5.427226054242106]
								}, {
									"case":	382,
									"scores":	[-5.427226054242106]
								}, {
									"case":	383,
									"scores":	[-5.427226054242106]
								}, {
									"case":	384,
									"scores":	[-5.427226054242106]
								}, {
									"case":	385,
									"scores":	[-5.427226054242106]
								}, {
									"case":	386,
									"scores":	[-5.427226054242106]
								}, {
									"case":	387,
									"scores":	[-5.427226054242106]
								}, {
									"case":	388,
									"scores":	[-5.427226054242106]
								}, {
									"case":	389,
									"scores":	[-5.427226054242106]
								}, {
									"case":	390,
									"scores":	[-5.427226054242106]
								}, {
									"case":	391,
									"scores":	[-5.427226054242106]
								}, {
									"case":	392,
									"scores":	[-5.427226054242106]
								}, {
									"case":	393,
									"scores":	[-5.427226054242106]
								}, {
									"case":	394,
									"scores":	[-5.427226054242106]
								}, {
									"case":	395,
									"scores":	[-5.427226054242106]
								}, {
									"case":	396,
									"scores":	[-5.427226054242106]
								}, {
									"case":	397,
									"scores":	[-5.427226054242106]
								}, {
									"case":	398,
									"scores":	[-5.427226054242106]
								}, {
									"case":	399,
									"scores":	[-5.427226054242106]
								}, {
									"case":	400,
									"scores":	[-5.427226054242106]
								}, {
									"case":	401,
									"scores":	[-5.427226054242106]
								}, {
									"case":	402,
									"scores":	[-5.427226054242106]
								}, {
									"case":	403,
									"scores":	[-5.427226054242106]
								}, {
									"case":	404,
									"scores":	[-5.427226054242106]
								}, {
									"case":	405,
									"scores":	[-5.427226054242106]
								}, {
									"case":	406,
									"scores":	[-5.427226054242106]
								}, {
									"case":	407,
									"scores":	[-5.427226054242106]
								}, {
									"case":	408,
									"scores":	[-5.427226054242106]
								}, {
									"case":	409,
									"scores":	[-5.427226054242106]
								}, {
									"case":	410,
									"scores":	[-5.427226054242106]
								}, {
									"case":	411,
									"scores":	[-5.427226054242106]
								}, {
									"case":	412,
									"scores":	[-5.427226054242106]
								}, {
									"case":	413,
									"scores":	[-5.427226054242106]
								}, {
									"case":	414,
									"scores":	[-5.427226054242106]
								}, {
									"case":	415,
									"scores":	[-5.427226054242106]
								}, {
									"case":	416,
									"scores":	[-5.427226054242106]
								}, {
									"case":	417,
									"scores":	[-5.427226054242106]
								}, {
									"case":	418,
									"scores":	[-5.427226054242106]
								}, {
									"case":	419,
									"scores":	[-5.427226054242106]
								}, {
									"case":	420,
									"scores":	[-5.427226054242106]
								}, {
									"case":	421,
									"scores":	[-5.427226054242106]
								}, {
									"case":	422,
									"scores":	[-5.427226054242106]
								}, {
									"case":	423,
									"scores":	[-5.427226054242106]
								}, {
									"case":	424,
									"scores":	[-5.427226054242106]
								}, {
									"case":	425,
									"scores":	[-5.427226054242106]
								}, {
									"case":	426,
									"scores":	[-5.427226054242106]
								}, {
									"case":	427,
									"scores":	[-5.427226054242106]
								}, {
									"case":	428,
									"scores":	[-5.427226054242106]
								}, {
									"case":	429,
									"scores":	[-5.427226054242106]
								}, {
									"case":	430,
									"scores":	[-5.427226054242106]
								}, {
									"case":	431,
									"scores":	[-5.427226054242106]
								}, {
									"case":	432,
									"scores":	[-5.427226054242106]
								}, {
									"case":	433,
									"scores":	[-5.427226054242106]
								}, {
									"case":	434,
									"scores":	[-5.427226054242106]
								}, {
									"case":	435,
									"scores":	[-5.427226054242106]
								}, {
									"case":	436,
									"scores":	[-5.427226054242106]
								}, {
									"case":	437,
									"scores":	[-5.427226054242106]
								}, {
									"case":	438,
									"scores":	[-5.427226054242106]
								}, {
									"case":	439,
									"scores":	[-5.427226054242106]
								}, {
									"case":	440,
									"scores":	[-5.427226054242106]
								}, {
									"case":	441,
									"scores":	[-5.427226054242106]
								}, {
									"case":	442,
									"scores":	[-5.427226054242106]
								}, {
									"case":	443,
									"scores":	[-5.427226054242106]
								}, {
									"case":	444,
									"scores":	[-5.427226054242106]
								}, {
									"case":	445,
									"scores":	[-5.427226054242106]
								}, {
									"case":	446,
									"scores":	[-5.427226054242106]
								}, {
									"case":	447,
									"scores":	[-5.427226054242106]
								}, {
									"case":	448,
									"scores":	[-5.427226054242106]
								}, {
									"case":	449,
									"scores":	[-5.427226054242106]
								}, {
									"case":	450,
									"scores":	[-5.427226054242106]
								}, {
									"case":	451,
									"scores":	[-5.427226054242106]
								}, {
									"case":	452,
									"scores":	[-5.427226054242106]
								}, {
									"case":	453,
									"scores":	[-5.427226054242106]
								}, {
									"case":	454,
									"scores":	[-5.427226054242106]
								}, {
									"case":	455,
									"scores":	[-5.427226054242106]
								}, {
									"case":	456,
									"scores":	[-5.427226054242106]
								}, {
									"case":	457,
									"scores":	[-5.427226054242106]
								}, {
									"case":	458,
									"scores":	[-5.427226054242106]
								}, {
									"case":	459,
									"scores":	[-5.427226054242106]
								}, {
									"case":	460,
									"scores":	[-5.427226054242106]
								}, {
									"case":	461,
									"scores":	[-5.427226054242106]
								}, {
									"case":	462,
									"scores":	[-5.427226054242106]
								}, {
									"case":	463,
									"scores":	[-5.427226054242106]
								}, {
									"case":	464,
									"scores":	[-5.427226054242106]
								}, {
									"case":	465,
									"scores":	[-5.427226054242106]
								}, {
									"case":	466,
									"scores":	[-5.427226054242106]
								}, {
									"case":	467,
									"scores":	[-5.427226054242106]
								}, {
									"case":	468,
									"scores":	[-5.427226054242106]
								}, {
									"case":	469,
									"scores":	[-5.427226054242106]
								}, {
									"case":	470,
									"scores":	[-5.427226054242106]
								}, {
									"case":	471,
									"scores":	[-5.427226054242106]
								}, {
									"case":	472,
									"scores":	[-5.427226054242106]
								}, {
									"case":	473,
									"scores":	[-5.427226054242106]
								}, {
									"case":	474,
									"scores":	[-5.427226054242106]
								}, {
									"case":	475,
									"scores":	[-5.427226054242106]
								}, {
									"case":	476,
									"scores":	[-5.427226054242106]
								}, {
									"case":	477,
									"scores":	[-5.427226054242106]
								}]
						}]
				}, {
					"line":	704,
					"switches":	[{
							"switch":	84,
							"types":	[[], [], [], [], [], [], [], [], [], [229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228], [], [], [], [], [], []],
							"begin_line":	705,
							"begin_column":	1,
							"end_line":	705,
							"end_column":	1,
							"patch_codes":	["(p)->tmp_buf->used--", "argc = (-1)", "argc = (-128)", "argc = (-33)", "argc = (0)", "argc = (1)", "argc = (10)", "argc = (128)", "argc = (16)", "argc = (2)", "argc = (255)", "argc = (256)", "argc = (3)", "argc = (32)", "argc = (46)", "argc = (47)", "argc = (600)", "argc = (608)", "argc = (613)", "argc = (8)", "argc = (850)", "argc = (864)", "argc = (869)", "argc = (887)", "argc = (895)", "argc = (argc)", "argc = (i)", "argc = (pid)", "args = (args)", "args[i++] = (c)", "args[i++] = (cgi_handler)->ptr", "args[i++] = (con)->physical.path->ptr", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, (con)->physical.doc_root->ptr, con->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, (con)->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, con->physical.doc_root->used ? (con)->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, (con)->request.pathinfo->ptr, con->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, (con)->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, con->request.pathinfo->used ? (con)->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (con)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (con)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (con)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, (con)->authed_user->ptr, con->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, (con)->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, con->authed_user->used ? (con)->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, (con)->request.orig_uri->ptr, con->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, (con)->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, con->request.orig_uri->used ? (con)->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, (con)->physical.path->ptr, con->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, (con)->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, con->physical.path->used ? (con)->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, (con)->uri.path->ptr, con->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, (con)->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, con->uri.path->used ? (con)->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, (con)->server_name->ptr, con->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, (con)->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, con->server_name->used ? (con)->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, s, strlen((s)))", "chunkqueue_remove_finished_chunks((con)->recv)", "con->mode = (-1)", "con->mode = (-128)", "con->mode = (-33)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (128)", "con->mode = (16)", "con->mode = (2)", "con->mode = (255)", "con->mode = (256)", "con->mode = (3)", "con->mode = (32)", "con->mode = (46)", "con->mode = (47)", "con->mode = (600)", "con->mode = (608)", "con->mode = (613)", "con->mode = (8)", "con->mode = (850)", "con->mode = (864)", "con->mode = (869)", "con->mode = (887)", "con->mode = (895)", "con->mode = (p)->id", "env.ptr = (args)", "env.ptr[env.used] = (c)", "env.size = (-1)", "env.size = (-128)", "env.size = (-33)", "env.size = (0)", "env.size = (1)", "env.size = (10)", "env.size = (128)", "env.size = (16)", "env.size = (2)", "env.size = (255)", "env.size = (256)", "env.size = (3)", "env.size = (32)", "env.size = (46)", "env.size = (47)", "env.size = (600)", "env.size = (608)", "env.size = (613)", "env.size = (8)", "env.size = (850)", "env.size = (864)", "env.size = (869)", "env.size = (887)", "env.size = (895)", "env.size = (n)", "env.used = (-1)", "env.used = (-128)", "env.used = (-33)", "env.used = (0)", "env.used = (1)", "env.used = (10)", "env.used = (128)", "env.used = (16)", "env.used = (2)", "env.used = (255)", "env.used = (256)", "env.used = (3)", "env.used = (32)", "env.used = (46)", "env.used = (47)", "env.used = (600)", "env.used = (608)", "env.used = (613)", "env.used = (8)", "env.used = (850)", "env.used = (864)", "env.used = (869)", "env.used = (887)", "env.used = (895)", "env.used = (n)", "execve((args)[0], args, env.ptr)", "execve(args[0], (args), env.ptr)", "free((p))", "free((p)->config_storage)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "i = (-1)", "i = (-128)", "i = (-33)", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (255)", "i = (256)", "i = (3)", "i = (32)", "i = (46)", "i = (47)", "i = (600)", "i = (608)", "i = (613)", "i = (8)", "i = (850)", "i = (864)", "i = (869)", "i = (887)", "i = (895)", "i = (argc)", "i = (i)", "i = (pid)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", cgi_handler, \"failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), con->physical.path)", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", (cgi_handler), \"failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), (con)->physical.path)", "ltostr(buf, (con)->request.content_length)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-1)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-128)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-33)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (0)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (1)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (10)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (128)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (16)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (2)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (255)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (256)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (3)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (32)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (46)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (47)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (600)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (608)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (613)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (8)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (850)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (864)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (869)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (887)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (895)", "s = (s)", "s = get_http_method_name((con)->request.http_method)", "s = get_http_version_name((con)->request.http_version)", "s = inet_ntop((con)->dst_addr.plain.sa_family, con->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop((srv_sock)->addr.plain.sa_family, srv_sock->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(con->dst_addr.plain.sa_family, (con)->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(srv_sock->addr.plain.sa_family, (srv_sock)->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "argc = 3", "args = malloc(sizeof (*args) * argc)", "args[i++] = ((void *)0)", "args[i++] = cgi_handler->ptr", "args[i++] = con->physical.path->ptr", "buffer_copy_string(p->tmp_buf, \"HTTP_\")", "buffer_reset(con->physical.path)", "buffer_reset(p->tmp_buf)", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, con->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"GATEWAY_INTERFACE\", \"GATEWAY_INTERFACE\" ? sizeof (\"GATEWAY_INTERFACE\") - 1 : 0, \"CGI/1.1\", \"CGI/1.1\" ? sizeof (\"CGI/1.1\") - 1 : 0)", "cgi_env_add(&env, \"HTTPS\", \"HTTPS\" ? sizeof (\"HTTPS\") - 1 : 0, \"on\", \"on\" ? sizeof (\"on\") - 1 : 0)", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, con->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"REDIRECT_STATUS\", \"REDIRECT_STATUS\" ? sizeof (\"REDIRECT_STATUS\") - 1 : 0, \"200\", \"200\" ? sizeof (\"200\") - 1 : 0)", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"REMOTE_PORT\", \"REMOTE_PORT\" ? sizeof (\"REMOTE_PORT\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, con->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, con->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, con->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, con->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, con->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_PORT\", \"SERVER_PORT\" ? sizeof (\"SERVER_PORT\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_SOFTWARE\", \"SERVER_SOFTWARE\" ? sizeof (\"SERVER_SOFTWARE\") - 1 : 0, \"lighttpd/1.5.0\", \"lighttpd/1.5.0\" ? sizeof (\"lighttpd/1.5.0\") - 1 : 0)", "close(0)", "close(1)", "close(2)", "close(from_cgi_fds[0])", "close(from_cgi_fds[1])", "close(i)", "close(to_cgi_fds[0])", "close(to_cgi_fds[1])", "con->mode = p->id", "dup2(from_cgi_fds[1], 1)", "dup2(to_cgi_fds[0], 0)", "env.ptr = ((void *)0)", "env.ptr = realloc(env.ptr, env.size * sizeof (*env.ptr))", "env.ptr[env.used] = ((void *)0)", "env.size = 0", "env.used = 0", "execve(args[0], args, env.ptr)", "i = 0", "log_error_write(srv, \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", cgi_handler, \"failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), con->physical.path)", "log_error_write(srv, \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "ltostr(buf, (__extension__ ({\n    unsigned short __v, __x = (unsigned short)(con->dst_addr.plain.sa_family == 10 ? con->dst_addr.ipv6.sin6_port : con->dst_addr.ipv4.sin_port);\n    if (__builtin_constant_p(__x))\n        __v = ((unsigned short)((((__x) >> 8) & 255) | (((__x) & 255) << 8)));\n    else\n        __asm__(\"rorw $8, %w0\":\"=r\"( (__v)):\"0\"( (__x)):\"cc\");\n    __v;\n})))", "ltostr(buf, (__extension__ ({\n    unsigned short __v, __x = (unsigned short)(srv_sock->addr.plain.sa_family == 10 ? srv_sock->addr.ipv6.sin6_port : srv_sock->addr.ipv4.sin_port);\n    if (__builtin_constant_p(__x))\n        __v = ((unsigned short)((((__x) >> 8) & 255) | (((__x) & 255) << 8)));\n    else\n        __asm__(\"rorw $8, %w0\":\"=r\"( (__v)):\"0\"( (__x)):\"cc\");\n    __v;\n})))", "ltostr(buf, con->request.content_length)", "p->tmp_buf->ptr[p->tmp_buf->used++] = '\\x00'", "p->tmp_buf->used--", "s = get_http_method_name(con->request.http_method)", "s = get_http_version_name(con->request.http_version)", "s = inet_ntop(con->dst_addr.plain.sa_family, con->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(srv_sock->addr.plain.sa_family, srv_sock->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.427226054242106]
								}, {
									"case":	2,
									"scores":	[-5.427226054242106]
								}, {
									"case":	3,
									"scores":	[-5.427226054242106]
								}, {
									"case":	4,
									"scores":	[-5.427226054242106]
								}, {
									"case":	5,
									"scores":	[-5.427226054242106]
								}, {
									"case":	6,
									"scores":	[-5.427226054242106]
								}, {
									"case":	7,
									"scores":	[-5.427226054242106]
								}, {
									"case":	8,
									"scores":	[-5.427226054242106]
								}, {
									"case":	9,
									"scores":	[-5.427226054242106]
								}, {
									"case":	10,
									"scores":	[-5.427226054242106]
								}, {
									"case":	11,
									"scores":	[-5.427226054242106]
								}, {
									"case":	12,
									"scores":	[-5.427226054242106]
								}, {
									"case":	13,
									"scores":	[-5.427226054242106]
								}, {
									"case":	14,
									"scores":	[-5.427226054242106]
								}, {
									"case":	15,
									"scores":	[-5.427226054242106]
								}, {
									"case":	16,
									"scores":	[-5.427226054242106]
								}, {
									"case":	17,
									"scores":	[-5.427226054242106]
								}, {
									"case":	18,
									"scores":	[-5.427226054242106]
								}, {
									"case":	19,
									"scores":	[-5.427226054242106]
								}, {
									"case":	20,
									"scores":	[-5.427226054242106]
								}, {
									"case":	21,
									"scores":	[-5.427226054242106]
								}, {
									"case":	22,
									"scores":	[-5.427226054242106]
								}, {
									"case":	23,
									"scores":	[-5.427226054242106]
								}, {
									"case":	24,
									"scores":	[-5.427226054242106]
								}, {
									"case":	25,
									"scores":	[-5.427226054242106]
								}, {
									"case":	26,
									"scores":	[-5.427226054242106]
								}, {
									"case":	27,
									"scores":	[-5.427226054242106]
								}, {
									"case":	28,
									"scores":	[-5.427226054242106]
								}, {
									"case":	29,
									"scores":	[-5.427226054242106]
								}, {
									"case":	30,
									"scores":	[-5.427226054242106]
								}, {
									"case":	31,
									"scores":	[-5.427226054242106]
								}, {
									"case":	32,
									"scores":	[-5.427226054242106]
								}, {
									"case":	33,
									"scores":	[-5.427226054242106]
								}, {
									"case":	34,
									"scores":	[-5.427226054242106]
								}, {
									"case":	35,
									"scores":	[-5.427226054242106]
								}, {
									"case":	36,
									"scores":	[-5.427226054242106]
								}, {
									"case":	37,
									"scores":	[-5.427226054242106]
								}, {
									"case":	38,
									"scores":	[-5.427226054242106]
								}, {
									"case":	39,
									"scores":	[-5.427226054242106]
								}, {
									"case":	40,
									"scores":	[-5.427226054242106]
								}, {
									"case":	41,
									"scores":	[-5.427226054242106]
								}, {
									"case":	42,
									"scores":	[-5.427226054242106]
								}, {
									"case":	43,
									"scores":	[-5.427226054242106]
								}, {
									"case":	44,
									"scores":	[-5.427226054242106]
								}, {
									"case":	45,
									"scores":	[-5.427226054242106]
								}, {
									"case":	46,
									"scores":	[-5.427226054242106]
								}, {
									"case":	47,
									"scores":	[-5.427226054242106]
								}, {
									"case":	48,
									"scores":	[-5.427226054242106]
								}, {
									"case":	49,
									"scores":	[-5.427226054242106]
								}, {
									"case":	50,
									"scores":	[-5.427226054242106]
								}, {
									"case":	51,
									"scores":	[-5.427226054242106]
								}, {
									"case":	52,
									"scores":	[-5.427226054242106]
								}, {
									"case":	53,
									"scores":	[-5.427226054242106]
								}, {
									"case":	54,
									"scores":	[-5.427226054242106]
								}, {
									"case":	55,
									"scores":	[-5.427226054242106]
								}, {
									"case":	56,
									"scores":	[-5.427226054242106]
								}, {
									"case":	57,
									"scores":	[-5.427226054242106]
								}, {
									"case":	58,
									"scores":	[-5.427226054242106]
								}, {
									"case":	59,
									"scores":	[-5.427226054242106]
								}, {
									"case":	60,
									"scores":	[-5.427226054242106]
								}, {
									"case":	61,
									"scores":	[-5.427226054242106]
								}, {
									"case":	62,
									"scores":	[-5.427226054242106]
								}, {
									"case":	63,
									"scores":	[-5.427226054242106]
								}, {
									"case":	64,
									"scores":	[-5.427226054242106]
								}, {
									"case":	65,
									"scores":	[-5.427226054242106]
								}, {
									"case":	66,
									"scores":	[-5.427226054242106]
								}, {
									"case":	67,
									"scores":	[-5.427226054242106]
								}, {
									"case":	68,
									"scores":	[-5.427226054242106]
								}, {
									"case":	69,
									"scores":	[-5.427226054242106]
								}, {
									"case":	70,
									"scores":	[-5.427226054242106]
								}, {
									"case":	71,
									"scores":	[-5.427226054242106]
								}, {
									"case":	72,
									"scores":	[-5.427226054242106]
								}, {
									"case":	73,
									"scores":	[-5.427226054242106]
								}, {
									"case":	74,
									"scores":	[-5.427226054242106]
								}, {
									"case":	75,
									"scores":	[-5.427226054242106]
								}, {
									"case":	76,
									"scores":	[-5.427226054242106]
								}, {
									"case":	77,
									"scores":	[-5.427226054242106]
								}, {
									"case":	78,
									"scores":	[-5.427226054242106]
								}, {
									"case":	79,
									"scores":	[-5.427226054242106]
								}, {
									"case":	80,
									"scores":	[-5.427226054242106]
								}, {
									"case":	81,
									"scores":	[-5.427226054242106]
								}, {
									"case":	82,
									"scores":	[-5.427226054242106]
								}, {
									"case":	83,
									"scores":	[-5.427226054242106]
								}, {
									"case":	84,
									"scores":	[-5.427226054242106]
								}, {
									"case":	85,
									"scores":	[-5.427226054242106]
								}, {
									"case":	86,
									"scores":	[-5.427226054242106]
								}, {
									"case":	87,
									"scores":	[-5.427226054242106]
								}, {
									"case":	88,
									"scores":	[-5.427226054242106]
								}, {
									"case":	89,
									"scores":	[-5.427226054242106]
								}, {
									"case":	90,
									"scores":	[-5.427226054242106]
								}, {
									"case":	91,
									"scores":	[-5.427226054242106]
								}, {
									"case":	92,
									"scores":	[-5.427226054242106]
								}, {
									"case":	93,
									"scores":	[-5.427226054242106]
								}, {
									"case":	94,
									"scores":	[-5.427226054242106]
								}, {
									"case":	95,
									"scores":	[-5.427226054242106]
								}, {
									"case":	96,
									"scores":	[-5.427226054242106]
								}, {
									"case":	97,
									"scores":	[-5.427226054242106]
								}, {
									"case":	98,
									"scores":	[-5.427226054242106]
								}, {
									"case":	99,
									"scores":	[-5.427226054242106]
								}, {
									"case":	100,
									"scores":	[-5.427226054242106]
								}, {
									"case":	101,
									"scores":	[-5.427226054242106]
								}, {
									"case":	102,
									"scores":	[-5.427226054242106]
								}, {
									"case":	103,
									"scores":	[-5.427226054242106]
								}, {
									"case":	104,
									"scores":	[-5.427226054242106]
								}, {
									"case":	105,
									"scores":	[-5.427226054242106]
								}, {
									"case":	106,
									"scores":	[-5.427226054242106]
								}, {
									"case":	107,
									"scores":	[-5.427226054242106]
								}, {
									"case":	108,
									"scores":	[-5.427226054242106]
								}, {
									"case":	109,
									"scores":	[-5.427226054242106]
								}, {
									"case":	110,
									"scores":	[-5.427226054242106]
								}, {
									"case":	111,
									"scores":	[-5.427226054242106]
								}, {
									"case":	112,
									"scores":	[-5.427226054242106]
								}, {
									"case":	113,
									"scores":	[-5.427226054242106]
								}, {
									"case":	114,
									"scores":	[-5.427226054242106]
								}, {
									"case":	115,
									"scores":	[-5.427226054242106]
								}, {
									"case":	116,
									"scores":	[-5.427226054242106]
								}, {
									"case":	117,
									"scores":	[-5.427226054242106]
								}, {
									"case":	118,
									"scores":	[-5.427226054242106]
								}, {
									"case":	119,
									"scores":	[-5.427226054242106]
								}, {
									"case":	120,
									"scores":	[-5.427226054242106]
								}, {
									"case":	121,
									"scores":	[-5.427226054242106]
								}, {
									"case":	122,
									"scores":	[-5.427226054242106]
								}, {
									"case":	123,
									"scores":	[-5.427226054242106]
								}, {
									"case":	124,
									"scores":	[-5.427226054242106]
								}, {
									"case":	125,
									"scores":	[-5.427226054242106]
								}, {
									"case":	126,
									"scores":	[-5.427226054242106]
								}, {
									"case":	127,
									"scores":	[-5.427226054242106]
								}, {
									"case":	128,
									"scores":	[-5.427226054242106]
								}, {
									"case":	129,
									"scores":	[-5.427226054242106]
								}, {
									"case":	130,
									"scores":	[-5.427226054242106]
								}, {
									"case":	131,
									"scores":	[-5.427226054242106]
								}, {
									"case":	132,
									"scores":	[-5.427226054242106]
								}, {
									"case":	133,
									"scores":	[-5.427226054242106]
								}, {
									"case":	134,
									"scores":	[-5.427226054242106]
								}, {
									"case":	135,
									"scores":	[-5.427226054242106]
								}, {
									"case":	136,
									"scores":	[-5.427226054242106]
								}, {
									"case":	137,
									"scores":	[-5.427226054242106]
								}, {
									"case":	138,
									"scores":	[-5.427226054242106]
								}, {
									"case":	139,
									"scores":	[-5.427226054242106]
								}, {
									"case":	140,
									"scores":	[-5.427226054242106]
								}, {
									"case":	141,
									"scores":	[-5.427226054242106]
								}, {
									"case":	142,
									"scores":	[-5.427226054242106]
								}, {
									"case":	143,
									"scores":	[-5.427226054242106]
								}, {
									"case":	144,
									"scores":	[-5.427226054242106]
								}, {
									"case":	145,
									"scores":	[-5.427226054242106]
								}, {
									"case":	146,
									"scores":	[-5.427226054242106]
								}, {
									"case":	147,
									"scores":	[-5.427226054242106]
								}, {
									"case":	148,
									"scores":	[-5.427226054242106]
								}, {
									"case":	149,
									"scores":	[-5.427226054242106]
								}, {
									"case":	150,
									"scores":	[-5.427226054242106]
								}, {
									"case":	151,
									"scores":	[-5.427226054242106]
								}, {
									"case":	152,
									"scores":	[-5.427226054242106]
								}, {
									"case":	153,
									"scores":	[-5.427226054242106]
								}, {
									"case":	154,
									"scores":	[-5.427226054242106]
								}, {
									"case":	155,
									"scores":	[-5.427226054242106]
								}, {
									"case":	156,
									"scores":	[-5.427226054242106]
								}, {
									"case":	157,
									"scores":	[-5.427226054242106]
								}, {
									"case":	158,
									"scores":	[-5.427226054242106]
								}, {
									"case":	159,
									"scores":	[-5.427226054242106]
								}, {
									"case":	160,
									"scores":	[-5.427226054242106]
								}, {
									"case":	161,
									"scores":	[-5.427226054242106]
								}, {
									"case":	162,
									"scores":	[-5.427226054242106]
								}, {
									"case":	163,
									"scores":	[-5.427226054242106]
								}, {
									"case":	164,
									"scores":	[-5.427226054242106]
								}, {
									"case":	165,
									"scores":	[-5.427226054242106]
								}, {
									"case":	166,
									"scores":	[-5.427226054242106]
								}, {
									"case":	167,
									"scores":	[-5.427226054242106]
								}, {
									"case":	168,
									"scores":	[-5.427226054242106]
								}, {
									"case":	169,
									"scores":	[-5.427226054242106]
								}, {
									"case":	170,
									"scores":	[-5.427226054242106]
								}, {
									"case":	171,
									"scores":	[-5.427226054242106]
								}, {
									"case":	172,
									"scores":	[-5.427226054242106]
								}, {
									"case":	173,
									"scores":	[-5.427226054242106]
								}, {
									"case":	174,
									"scores":	[-5.427226054242106]
								}, {
									"case":	175,
									"scores":	[-5.427226054242106]
								}, {
									"case":	176,
									"scores":	[-5.427226054242106]
								}, {
									"case":	177,
									"scores":	[-5.427226054242106]
								}, {
									"case":	178,
									"scores":	[-5.427226054242106]
								}, {
									"case":	179,
									"scores":	[-5.427226054242106]
								}, {
									"case":	180,
									"scores":	[-5.427226054242106]
								}, {
									"case":	181,
									"scores":	[-5.427226054242106]
								}, {
									"case":	182,
									"scores":	[-5.427226054242106]
								}, {
									"case":	183,
									"scores":	[-5.427226054242106]
								}, {
									"case":	184,
									"scores":	[-5.427226054242106]
								}, {
									"case":	185,
									"scores":	[-5.427226054242106]
								}, {
									"case":	186,
									"scores":	[-5.427226054242106]
								}, {
									"case":	187,
									"scores":	[-5.427226054242106]
								}, {
									"case":	188,
									"scores":	[-5.427226054242106]
								}, {
									"case":	189,
									"scores":	[-5.427226054242106]
								}, {
									"case":	190,
									"scores":	[-5.427226054242106]
								}, {
									"case":	191,
									"scores":	[-5.427226054242106]
								}, {
									"case":	192,
									"scores":	[-5.427226054242106]
								}, {
									"case":	193,
									"scores":	[-5.427226054242106]
								}, {
									"case":	194,
									"scores":	[-5.427226054242106]
								}, {
									"case":	195,
									"scores":	[-5.427226054242106]
								}, {
									"case":	196,
									"scores":	[-5.427226054242106]
								}, {
									"case":	197,
									"scores":	[-5.427226054242106]
								}, {
									"case":	198,
									"scores":	[-5.427226054242106]
								}, {
									"case":	199,
									"scores":	[-5.427226054242106]
								}, {
									"case":	200,
									"scores":	[-5.427226054242106]
								}, {
									"case":	201,
									"scores":	[-5.427226054242106]
								}, {
									"case":	202,
									"scores":	[-5.427226054242106]
								}, {
									"case":	203,
									"scores":	[-5.427226054242106]
								}, {
									"case":	204,
									"scores":	[-5.427226054242106]
								}, {
									"case":	205,
									"scores":	[-5.427226054242106]
								}, {
									"case":	206,
									"scores":	[-5.427226054242106]
								}, {
									"case":	207,
									"scores":	[-5.427226054242106]
								}, {
									"case":	208,
									"scores":	[-5.427226054242106]
								}, {
									"case":	209,
									"scores":	[-5.427226054242106]
								}, {
									"case":	210,
									"scores":	[-5.427226054242106]
								}, {
									"case":	211,
									"scores":	[-5.427226054242106]
								}, {
									"case":	212,
									"scores":	[-5.427226054242106]
								}, {
									"case":	213,
									"scores":	[-5.427226054242106]
								}, {
									"case":	214,
									"scores":	[-5.427226054242106]
								}, {
									"case":	215,
									"scores":	[-5.427226054242106]
								}, {
									"case":	216,
									"scores":	[-5.427226054242106]
								}, {
									"case":	217,
									"scores":	[-5.427226054242106]
								}, {
									"case":	218,
									"scores":	[-5.427226054242106]
								}, {
									"case":	219,
									"scores":	[-5.427226054242106]
								}, {
									"case":	220,
									"scores":	[-5.427226054242106]
								}, {
									"case":	221,
									"scores":	[-5.427226054242106]
								}, {
									"case":	222,
									"scores":	[-5.427226054242106]
								}, {
									"case":	223,
									"scores":	[-5.427226054242106]
								}, {
									"case":	224,
									"scores":	[-5.427226054242106]
								}, {
									"case":	225,
									"scores":	[-5.427226054242106]
								}, {
									"case":	226,
									"scores":	[-5.427226054242106]
								}, {
									"case":	227,
									"scores":	[-5.427226054242106]
								}, {
									"case":	228,
									"scores":	[-5.427226054242106]
								}, {
									"case":	229,
									"scores":	[-5.427226054242106]
								}, {
									"case":	230,
									"scores":	[-5.427226054242106]
								}, {
									"case":	231,
									"scores":	[-5.427226054242106]
								}, {
									"case":	232,
									"scores":	[-5.427226054242106]
								}, {
									"case":	233,
									"scores":	[-5.427226054242106]
								}, {
									"case":	234,
									"scores":	[-5.427226054242106]
								}, {
									"case":	235,
									"scores":	[-5.427226054242106]
								}, {
									"case":	236,
									"scores":	[-5.427226054242106]
								}, {
									"case":	237,
									"scores":	[-5.427226054242106]
								}, {
									"case":	238,
									"scores":	[-5.427226054242106]
								}, {
									"case":	239,
									"scores":	[-5.427226054242106]
								}, {
									"case":	240,
									"scores":	[-5.427226054242106]
								}, {
									"case":	241,
									"scores":	[-5.427226054242106]
								}, {
									"case":	242,
									"scores":	[-5.427226054242106]
								}, {
									"case":	243,
									"scores":	[-5.427226054242106]
								}, {
									"case":	244,
									"scores":	[-5.427226054242106]
								}, {
									"case":	245,
									"scores":	[-5.427226054242106]
								}, {
									"case":	246,
									"scores":	[-5.427226054242106]
								}, {
									"case":	247,
									"scores":	[-5.427226054242106]
								}, {
									"case":	248,
									"scores":	[-5.427226054242106]
								}, {
									"case":	249,
									"scores":	[-5.427226054242106]
								}, {
									"case":	250,
									"scores":	[-5.427226054242106]
								}, {
									"case":	251,
									"scores":	[-5.427226054242106]
								}, {
									"case":	252,
									"scores":	[-5.427226054242106]
								}, {
									"case":	253,
									"scores":	[-5.427226054242106]
								}, {
									"case":	254,
									"scores":	[-5.427226054242106]
								}, {
									"case":	255,
									"scores":	[-5.427226054242106]
								}, {
									"case":	256,
									"scores":	[-5.427226054242106]
								}, {
									"case":	257,
									"scores":	[-5.427226054242106]
								}, {
									"case":	258,
									"scores":	[-5.427226054242106]
								}, {
									"case":	259,
									"scores":	[-5.427226054242106]
								}, {
									"case":	260,
									"scores":	[-5.427226054242106]
								}, {
									"case":	261,
									"scores":	[-5.427226054242106]
								}, {
									"case":	262,
									"scores":	[-5.427226054242106]
								}, {
									"case":	263,
									"scores":	[-5.427226054242106]
								}, {
									"case":	264,
									"scores":	[-5.427226054242106]
								}, {
									"case":	265,
									"scores":	[-5.427226054242106]
								}, {
									"case":	266,
									"scores":	[-5.427226054242106]
								}, {
									"case":	267,
									"scores":	[-5.427226054242106]
								}, {
									"case":	268,
									"scores":	[-5.427226054242106]
								}, {
									"case":	269,
									"scores":	[-5.427226054242106]
								}, {
									"case":	270,
									"scores":	[-5.427226054242106]
								}, {
									"case":	271,
									"scores":	[-5.427226054242106]
								}, {
									"case":	272,
									"scores":	[-5.427226054242106]
								}, {
									"case":	273,
									"scores":	[-5.427226054242106]
								}, {
									"case":	274,
									"scores":	[-5.427226054242106]
								}, {
									"case":	275,
									"scores":	[-5.427226054242106]
								}, {
									"case":	276,
									"scores":	[-5.427226054242106]
								}, {
									"case":	277,
									"scores":	[-5.427226054242106]
								}, {
									"case":	278,
									"scores":	[-5.427226054242106]
								}, {
									"case":	279,
									"scores":	[-5.427226054242106]
								}, {
									"case":	280,
									"scores":	[-5.427226054242106]
								}, {
									"case":	281,
									"scores":	[-5.427226054242106]
								}, {
									"case":	282,
									"scores":	[-5.427226054242106]
								}, {
									"case":	283,
									"scores":	[-5.427226054242106]
								}, {
									"case":	284,
									"scores":	[-5.427226054242106]
								}, {
									"case":	285,
									"scores":	[-5.427226054242106]
								}, {
									"case":	286,
									"scores":	[-5.427226054242106]
								}, {
									"case":	287,
									"scores":	[-5.427226054242106]
								}, {
									"case":	288,
									"scores":	[-5.427226054242106]
								}, {
									"case":	289,
									"scores":	[-5.427226054242106]
								}, {
									"case":	290,
									"scores":	[-5.427226054242106]
								}, {
									"case":	291,
									"scores":	[-5.427226054242106]
								}, {
									"case":	292,
									"scores":	[-5.427226054242106]
								}, {
									"case":	293,
									"scores":	[-5.427226054242106]
								}, {
									"case":	294,
									"scores":	[-5.427226054242106]
								}, {
									"case":	295,
									"scores":	[-5.427226054242106]
								}, {
									"case":	296,
									"scores":	[-5.427226054242106]
								}]
						}, {
							"switch":	85,
							"types":	[[10], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [2, 3, 4, 5, 6, 7, 8, 9], []],
							"begin_line":	705,
							"begin_column":	3,
							"end_line":	710,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L705\", 61, &(con), sizeof (con), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler))) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_isalnum(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_isalpha(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_isdigit(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_isxdigit(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_to_lower(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_to_upper(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_urldecode_path(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if (!buffer_urldecode_query(con->uri.query)) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n", "if ((!buffer_is_empty(con->uri.query)) && !__is_neg(\"\", \"L705\", 61, &(con), sizeof (con), &(con->uri.query), sizeof (con->uri.query), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(con->uri.path), sizeof (con->uri.path), &(con->server_name), sizeof (con->server_name), &(env.used), sizeof (env.used), &(env.size), sizeof (env.size), &(env.ptr), sizeof (env.ptr), &(n), sizeof (n), &(p), sizeof (p), &(con->srv_socket), sizeof (con->srv_socket), &(pid), sizeof (pid), &(srv), sizeof (srv), &(con->environment), sizeof (con->environment), &(cgi_handler), sizeof (cgi_handler), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(c), sizeof (c), &(con->mode), sizeof (con->mode), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->uri.scheme), sizeof (con->uri.scheme), &(con->uri.authority), sizeof (con->uri.authority), &(con->uri.path_raw), sizeof (con->uri.path_raw), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler))) {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0);\n} else {\n    cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5284325794281468, -5.5135910334281455, -5.0142961711281462, -5.3764589334281458, -6.1472926334281475, -6.1472926334281475, -6.1472926334281475, -5.3033876334281462, -5.3033876334281462, -5.7403526334281461, -4.5325539334281464, -6.1825334334281479, -5.7403526334281461, -4.5325539334281464, -6.1825334334281479, -6.1472926334281475, -5.6412404334281456, -4.5325539334281464, -4.9695189334281462, -5.073846933428146, -5.9177519334281463, -5.3033876334281462, -5.7403526334281461, -6.1472926334281475, -6.1472926334281475, -6.1472926334281475, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -6.1472926334281475, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -6.1472926334281475, -6.1472926334281475, -6.1472926334281475, -6.1472926334281475, -6.1472926334281475, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -5.3033876334281462, -6.1472926334281475, -6.1472926334281475, -6.1472926334281475, -5.0594607634281461, -5.3033876334281462, -5.3033876334281462, -6.1472926334281475, -6.1472926334281475, -5.3033876334281462, -5.3033876334281462]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-6.1692444014281467, -5.1544028554281454, -4.655107993128146, -5.0172707554281448, -5.7881044554281456, -5.7881044554281456, -5.7881044554281456, -4.9441994554281452, -4.9441994554281452, -5.381164455428145, -4.1733657554281454, -5.8233452554281451, -5.381164455428145, -4.1733657554281454, -5.8233452554281451, -5.7881044554281456, -5.2820522554281446, -4.1733657554281454, -4.6103307554281452, -4.7146587554281449, -5.5585637554281453, -4.9441994554281452, -5.381164455428145, -5.7881044554281456, -5.7881044554281456, -5.7881044554281456, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -5.7881044554281456, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -5.7881044554281456, -5.7881044554281456, -5.7881044554281456, -5.7881044554281456, -5.7881044554281456, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -4.9441994554281452, -5.7881044554281456, -5.7881044554281456, -5.7881044554281456, -4.7002725854281451, -4.9441994554281452, -4.9441994554281452, -5.7881044554281456, -5.7881044554281456, -4.9441994554281452, -4.9441994554281452]
								}]
						}]
				}, {
					"line":	748,
					"switches":	[{
							"switch":	88,
							"types":	[[], [], [], [], [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], [], [], [], [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [], [], [], [], [], []],
							"begin_line":	749,
							"begin_column":	1,
							"end_line":	749,
							"end_column":	1,
							"patch_codes":	["memset(&cgi_handler->ptr, 0, sizeof (*(&cgi_handler->ptr)))", "memset(&cgi_handler->size, 0, sizeof (*(&cgi_handler->size)))", "memset(&cgi_handler->used, 0, sizeof (*(&cgi_handler->used)))", "memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr.ipv4, 0, sizeof (*(&con->dst_addr.ipv4)))", "memset(&con->dst_addr.ipv4.sin_addr, 0, sizeof (*(&con->dst_addr.ipv4.sin_addr)))", "memset(&con->dst_addr.ipv4.sin_family, 0, sizeof (*(&con->dst_addr.ipv4.sin_family)))", "memset(&con->dst_addr.ipv4.sin_port, 0, sizeof (*(&con->dst_addr.ipv4.sin_port)))", "memset(&con->dst_addr.ipv4.sin_zero, 0, sizeof (*(&con->dst_addr.ipv4.sin_zero)))", "memset(&con->dst_addr.ipv6, 0, sizeof (*(&con->dst_addr.ipv6)))", "memset(&con->dst_addr.ipv6.sin6_addr, 0, sizeof (*(&con->dst_addr.ipv6.sin6_addr)))", "memset(&con->dst_addr.ipv6.sin6_family, 0, sizeof (*(&con->dst_addr.ipv6.sin6_family)))", "memset(&con->dst_addr.ipv6.sin6_flowinfo, 0, sizeof (*(&con->dst_addr.ipv6.sin6_flowinfo)))", "memset(&con->dst_addr.ipv6.sin6_port, 0, sizeof (*(&con->dst_addr.ipv6.sin6_port)))", "memset(&con->dst_addr.ipv6.sin6_scope_id, 0, sizeof (*(&con->dst_addr.ipv6.sin6_scope_id)))", "memset(&con->dst_addr.plain, 0, sizeof (*(&con->dst_addr.plain)))", "memset(&con->dst_addr.plain.sa_data, 0, sizeof (*(&con->dst_addr.plain.sa_data)))", "memset(&con->dst_addr.plain.sa_family, 0, sizeof (*(&con->dst_addr.plain.sa_family)))", "memset(&con->dst_addr.un, 0, sizeof (*(&con->dst_addr.un)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->environment->data, 0, sizeof (*(&con->environment->data)))", "memset(&con->environment->is_weakref, 0, sizeof (*(&con->environment->is_weakref)))", "memset(&con->environment->next_power_of_2, 0, sizeof (*(&con->environment->next_power_of_2)))", "memset(&con->environment->size, 0, sizeof (*(&con->environment->size)))", "memset(&con->environment->sorted, 0, sizeof (*(&con->environment->sorted)))", "memset(&con->environment->unique_ndx, 0, sizeof (*(&con->environment->unique_ndx)))", "memset(&con->environment->used, 0, sizeof (*(&con->environment->used)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->physical.basedir, 0, sizeof (*(&con->physical.basedir)))", "memset(&con->physical.doc_root, 0, sizeof (*(&con->physical.doc_root)))", "memset(&con->physical.doc_root->ptr, 0, sizeof (*(&con->physical.doc_root->ptr)))", "memset(&con->physical.doc_root->size, 0, sizeof (*(&con->physical.doc_root->size)))", "memset(&con->physical.doc_root->used, 0, sizeof (*(&con->physical.doc_root->used)))", "memset(&con->physical.etag, 0, sizeof (*(&con->physical.etag)))", "memset(&con->physical.path, 0, sizeof (*(&con->physical.path)))", "memset(&con->physical.path->ptr, 0, sizeof (*(&con->physical.path->ptr)))", "memset(&con->physical.path->size, 0, sizeof (*(&con->physical.path->size)))", "memset(&con->physical.path->used, 0, sizeof (*(&con->physical.path->used)))", "memset(&con->physical.rel_path, 0, sizeof (*(&con->physical.rel_path)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request.accept_encoding, 0, sizeof (*(&con->request.accept_encoding)))", "memset(&con->request.content_length, 0, sizeof (*(&con->request.content_length)))", "memset(&con->request.headers, 0, sizeof (*(&con->request.headers)))", "memset(&con->request.headers->data, 0, sizeof (*(&con->request.headers->data)))", "memset(&con->request.headers->is_weakref, 0, sizeof (*(&con->request.headers->is_weakref)))", "memset(&con->request.headers->next_power_of_2, 0, sizeof (*(&con->request.headers->next_power_of_2)))", "memset(&con->request.headers->size, 0, sizeof (*(&con->request.headers->size)))", "memset(&con->request.headers->sorted, 0, sizeof (*(&con->request.headers->sorted)))", "memset(&con->request.headers->unique_ndx, 0, sizeof (*(&con->request.headers->unique_ndx)))", "memset(&con->request.headers->used, 0, sizeof (*(&con->request.headers->used)))", "memset(&con->request.http_host, 0, sizeof (*(&con->request.http_host)))", "memset(&con->request.http_method, 0, sizeof (*(&con->request.http_method)))", "memset(&con->request.http_version, 0, sizeof (*(&con->request.http_version)))", "memset(&con->request.orig_uri, 0, sizeof (*(&con->request.orig_uri)))", "memset(&con->request.pathinfo, 0, sizeof (*(&con->request.pathinfo)))", "memset(&con->request.request, 0, sizeof (*(&con->request.request)))", "memset(&con->request.uri, 0, sizeof (*(&con->request.uri)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->uri.authority, 0, sizeof (*(&con->uri.authority)))", "memset(&con->uri.path, 0, sizeof (*(&con->uri.path)))", "memset(&con->uri.path->ptr, 0, sizeof (*(&con->uri.path->ptr)))", "memset(&con->uri.path->size, 0, sizeof (*(&con->uri.path->size)))", "memset(&con->uri.path->used, 0, sizeof (*(&con->uri.path->used)))", "memset(&con->uri.path_raw, 0, sizeof (*(&con->uri.path_raw)))", "memset(&con->uri.query, 0, sizeof (*(&con->uri.query)))", "memset(&con->uri.scheme, 0, sizeof (*(&con->uri.scheme)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&env, 0, sizeof (*(&env)))", "memset(&env.ptr, 0, sizeof (*(&env.ptr)))", "memset(&env.size, 0, sizeof (*(&env.size)))", "memset(&env.used, 0, sizeof (*(&env.used)))", "memset(&srv_sock->addr, 0, sizeof (*(&srv_sock->addr)))", "memset(&srv_sock->addr.ipv4, 0, sizeof (*(&srv_sock->addr.ipv4)))", "memset(&srv_sock->addr.ipv4.sin_addr, 0, sizeof (*(&srv_sock->addr.ipv4.sin_addr)))", "memset(&srv_sock->addr.ipv4.sin_family, 0, sizeof (*(&srv_sock->addr.ipv4.sin_family)))", "memset(&srv_sock->addr.ipv4.sin_port, 0, sizeof (*(&srv_sock->addr.ipv4.sin_port)))", "memset(&srv_sock->addr.ipv4.sin_zero, 0, sizeof (*(&srv_sock->addr.ipv4.sin_zero)))", "memset(&srv_sock->addr.ipv6, 0, sizeof (*(&srv_sock->addr.ipv6)))", "memset(&srv_sock->addr.ipv6.sin6_addr, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_addr)))", "memset(&srv_sock->addr.ipv6.sin6_family, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_family)))", "memset(&srv_sock->addr.ipv6.sin6_flowinfo, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_flowinfo)))", "memset(&srv_sock->addr.ipv6.sin6_port, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_port)))", "memset(&srv_sock->addr.ipv6.sin6_scope_id, 0, sizeof (*(&srv_sock->addr.ipv6.sin6_scope_id)))", "memset(&srv_sock->addr.plain, 0, sizeof (*(&srv_sock->addr.plain)))", "memset(&srv_sock->addr.plain.sa_data, 0, sizeof (*(&srv_sock->addr.plain.sa_data)))", "memset(&srv_sock->addr.plain.sa_family, 0, sizeof (*(&srv_sock->addr.plain.sa_family)))", "memset(&srv_sock->addr.un, 0, sizeof (*(&srv_sock->addr.un)))", "memset(&srv_sock->is_ssl, 0, sizeof (*(&srv_sock->is_ssl)))", "memset(&srv_sock->sock, 0, sizeof (*(&srv_sock->sock)))", "memset(&srv_sock->srv_token, 0, sizeof (*(&srv_sock->srv_token)))", "memset(&srv_sock->ssl_ca_file, 0, sizeof (*(&srv_sock->ssl_ca_file)))", "memset(&srv_sock->ssl_ctx, 0, sizeof (*(&srv_sock->ssl_ctx)))", "memset(&srv_sock->ssl_pemfile, 0, sizeof (*(&srv_sock->ssl_pemfile)))", "memset(&srv_sock->use_ipv6, 0, sizeof (*(&srv_sock->use_ipv6)))", "memset(cgi_handler->ptr, 0, sizeof (*(cgi_handler->ptr)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->environment->data, 0, sizeof (*(con->environment->data)))", "memset(con->environment->sorted, 0, sizeof (*(con->environment->sorted)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->physical.basedir, 0, sizeof (*(con->physical.basedir)))", "memset(con->physical.doc_root, 0, sizeof (*(con->physical.doc_root)))", "memset(con->physical.doc_root->ptr, 0, sizeof (*(con->physical.doc_root->ptr)))", "memset(con->physical.etag, 0, sizeof (*(con->physical.etag)))", "memset(con->physical.path, 0, sizeof (*(con->physical.path)))", "memset(con->physical.path->ptr, 0, sizeof (*(con->physical.path->ptr)))", "memset(con->physical.rel_path, 0, sizeof (*(con->physical.rel_path)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->request.headers, 0, sizeof (*(con->request.headers)))", "memset(con->request.headers->data, 0, sizeof (*(con->request.headers->data)))", "memset(con->request.headers->sorted, 0, sizeof (*(con->request.headers->sorted)))", "memset(con->request.http_host, 0, sizeof (*(con->request.http_host)))", "memset(con->request.orig_uri, 0, sizeof (*(con->request.orig_uri)))", "memset(con->request.pathinfo, 0, sizeof (*(con->request.pathinfo)))", "memset(con->request.request, 0, sizeof (*(con->request.request)))", "memset(con->request.uri, 0, sizeof (*(con->request.uri)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(con->uri.authority, 0, sizeof (*(con->uri.authority)))", "memset(con->uri.path, 0, sizeof (*(con->uri.path)))", "memset(con->uri.path->ptr, 0, sizeof (*(con->uri.path->ptr)))", "memset(con->uri.path_raw, 0, sizeof (*(con->uri.path_raw)))", "memset(con->uri.query, 0, sizeof (*(con->uri.query)))", "memset(con->uri.scheme, 0, sizeof (*(con->uri.scheme)))", "memset(env.ptr, 0, sizeof (*(env.ptr)))", "memset(srv_sock->sock, 0, sizeof (*(srv_sock->sock)))", "memset(srv_sock->srv_token, 0, sizeof (*(srv_sock->srv_token)))", "memset(srv_sock->ssl_ca_file, 0, sizeof (*(srv_sock->ssl_ca_file)))", "memset(srv_sock->ssl_ctx, 0, sizeof (*(srv_sock->ssl_ctx)))", "memset(srv_sock->ssl_pemfile, 0, sizeof (*(srv_sock->ssl_pemfile)))", "(p)->tmp_buf->used--", "argc = (-1)", "argc = (-128)", "argc = (-33)", "argc = (0)", "argc = (1)", "argc = (10)", "argc = (128)", "argc = (16)", "argc = (2)", "argc = (255)", "argc = (256)", "argc = (3)", "argc = (32)", "argc = (46)", "argc = (47)", "argc = (600)", "argc = (608)", "argc = (613)", "argc = (8)", "argc = (850)", "argc = (864)", "argc = (869)", "argc = (887)", "argc = (895)", "argc = (argc)", "argc = (i)", "argc = (pid)", "args = (args)", "args[i++] = (c)", "args[i++] = (cgi_handler)->ptr", "args[i++] = (con)->physical.path->ptr", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, (con)->physical.doc_root->ptr, con->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, (con)->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, con->physical.doc_root->used ? (con)->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, (con)->request.pathinfo->ptr, con->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, (con)->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, con->request.pathinfo->used ? (con)->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, (con)->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, (con)->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? (con)->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, (con)->authed_user->ptr, con->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, (con)->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, con->authed_user->used ? (con)->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, (con)->request.orig_uri->ptr, con->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, (con)->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, con->request.orig_uri->used ? (con)->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, (con)->physical.path->ptr, con->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, (con)->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, con->physical.path->used ? (con)->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, (con)->uri.path->ptr, con->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, (con)->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, con->uri.path->used ? (con)->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, (con)->server_name->ptr, con->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, (con)->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, con->server_name->used ? (con)->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, s, strlen((s)))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, (s), strlen(s))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, s, strlen((s)))", "chunkqueue_remove_finished_chunks((con)->recv)", "con->mode = (-1)", "con->mode = (-128)", "con->mode = (-33)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (128)", "con->mode = (16)", "con->mode = (2)", "con->mode = (255)", "con->mode = (256)", "con->mode = (3)", "con->mode = (32)", "con->mode = (46)", "con->mode = (47)", "con->mode = (600)", "con->mode = (608)", "con->mode = (613)", "con->mode = (8)", "con->mode = (850)", "con->mode = (864)", "con->mode = (869)", "con->mode = (887)", "con->mode = (895)", "con->mode = (p)->id", "env.ptr = (args)", "env.ptr[env.used] = (c)", "env.size = (-1)", "env.size = (-128)", "env.size = (-33)", "env.size = (0)", "env.size = (1)", "env.size = (10)", "env.size = (128)", "env.size = (16)", "env.size = (2)", "env.size = (255)", "env.size = (256)", "env.size = (3)", "env.size = (32)", "env.size = (46)", "env.size = (47)", "env.size = (600)", "env.size = (608)", "env.size = (613)", "env.size = (8)", "env.size = (850)", "env.size = (864)", "env.size = (869)", "env.size = (887)", "env.size = (895)", "env.size = (n)", "env.used = (-1)", "env.used = (-128)", "env.used = (-33)", "env.used = (0)", "env.used = (1)", "env.used = (10)", "env.used = (128)", "env.used = (16)", "env.used = (2)", "env.used = (255)", "env.used = (256)", "env.used = (3)", "env.used = (32)", "env.used = (46)", "env.used = (47)", "env.used = (600)", "env.used = (608)", "env.used = (613)", "env.used = (8)", "env.used = (850)", "env.used = (864)", "env.used = (869)", "env.used = (887)", "env.used = (895)", "env.used = (n)", "execve((args)[0], args, env.ptr)", "execve(args[0], (args), env.ptr)", "free((p))", "free((p)->config_storage)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "i = (-1)", "i = (-128)", "i = (-33)", "i = (0)", "i = (1)", "i = (10)", "i = (128)", "i = (16)", "i = (2)", "i = (255)", "i = (256)", "i = (3)", "i = (32)", "i = (46)", "i = (47)", "i = (600)", "i = (608)", "i = (613)", "i = (8)", "i = (850)", "i = (864)", "i = (869)", "i = (887)", "i = (895)", "i = (argc)", "i = (i)", "i = (pid)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", cgi_handler, \"failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), con->physical.path)", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", (cgi_handler), \"failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), (con)->physical.path)", "ltostr(buf, (con)->request.content_length)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-1)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-128)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (-33)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (0)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (1)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (10)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (128)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (16)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (2)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (255)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (256)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (3)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (32)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (46)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (47)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (600)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (608)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (613)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (8)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (850)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (864)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (869)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (887)", "p->tmp_buf->ptr[p->tmp_buf->used++] = (895)", "s = (s)", "s = get_http_method_name((con)->request.http_method)", "s = get_http_version_name((con)->request.http_version)", "s = inet_ntop((con)->dst_addr.plain.sa_family, con->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop((srv_sock)->addr.plain.sa_family, srv_sock->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(con->dst_addr.plain.sa_family, (con)->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(srv_sock->addr.plain.sa_family, (srv_sock)->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "argc = 3", "args = malloc(sizeof (*args) * argc)", "args[i++] = ((void *)0)", "args[i++] = cgi_handler->ptr", "args[i++] = con->physical.path->ptr", "buffer_copy_string(p->tmp_buf, \"HTTP_\")", "buffer_reset(con->physical.path)", "buffer_reset(p->tmp_buf)", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"DOCUMENT_ROOT\", \"DOCUMENT_ROOT\" ? sizeof (\"DOCUMENT_ROOT\") - 1 : 0, con->physical.doc_root->ptr, con->physical.doc_root->used ? con->physical.doc_root->used - 1 : 0)", "cgi_env_add(&env, \"GATEWAY_INTERFACE\", \"GATEWAY_INTERFACE\" ? sizeof (\"GATEWAY_INTERFACE\") - 1 : 0, \"CGI/1.1\", \"CGI/1.1\" ? sizeof (\"CGI/1.1\") - 1 : 0)", "cgi_env_add(&env, \"HTTPS\", \"HTTPS\" ? sizeof (\"HTTPS\") - 1 : 0, \"on\", \"on\" ? sizeof (\"on\") - 1 : 0)", "cgi_env_add(&env, \"LD_LIBRARY_PATH\", \"LD_LIBRARY_PATH\" ? sizeof (\"LD_LIBRARY_PATH\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"LD_PRELOAD\", \"LD_PRELOAD\" ? sizeof (\"LD_PRELOAD\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"PATH_INFO\", \"PATH_INFO\" ? sizeof (\"PATH_INFO\") - 1 : 0, con->request.pathinfo->ptr, con->request.pathinfo->used ? con->request.pathinfo->used - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, \"\", \"\" ? sizeof (\"\") - 1 : 0)", "cgi_env_add(&env, \"QUERY_STRING\", \"QUERY_STRING\" ? sizeof (\"QUERY_STRING\") - 1 : 0, con->uri.query->ptr, con->uri.query->used ? con->uri.query->used - 1 : 0)", "cgi_env_add(&env, \"REDIRECT_STATUS\", \"REDIRECT_STATUS\" ? sizeof (\"REDIRECT_STATUS\") - 1 : 0, \"200\", \"200\" ? sizeof (\"200\") - 1 : 0)", "cgi_env_add(&env, \"REMOTE_ADDR\", \"REMOTE_ADDR\" ? sizeof (\"REMOTE_ADDR\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"REMOTE_PORT\", \"REMOTE_PORT\" ? sizeof (\"REMOTE_PORT\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"REMOTE_USER\", \"REMOTE_USER\" ? sizeof (\"REMOTE_USER\") - 1 : 0, con->authed_user->ptr, con->authed_user->used ? con->authed_user->used - 1 : 0)", "cgi_env_add(&env, \"REQUEST_METHOD\", \"REQUEST_METHOD\" ? sizeof (\"REQUEST_METHOD\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"REQUEST_URI\", \"REQUEST_URI\" ? sizeof (\"REQUEST_URI\") - 1 : 0, con->request.orig_uri->ptr, con->request.orig_uri->used ? con->request.orig_uri->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_FILENAME\", \"SCRIPT_FILENAME\" ? sizeof (\"SCRIPT_FILENAME\") - 1 : 0, con->physical.path->ptr, con->physical.path->used ? con->physical.path->used - 1 : 0)", "cgi_env_add(&env, \"SCRIPT_NAME\", \"SCRIPT_NAME\" ? sizeof (\"SCRIPT_NAME\") - 1 : 0, con->uri.path->ptr, con->uri.path->used ? con->uri.path->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_ADDR\", \"SERVER_ADDR\" ? sizeof (\"SERVER_ADDR\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, con->server_name->ptr, con->server_name->used ? con->server_name->used - 1 : 0)", "cgi_env_add(&env, \"SERVER_NAME\", \"SERVER_NAME\" ? sizeof (\"SERVER_NAME\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_PORT\", \"SERVER_PORT\" ? sizeof (\"SERVER_PORT\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"SERVER_PROTOCOL\", \"SERVER_PROTOCOL\" ? sizeof (\"SERVER_PROTOCOL\") - 1 : 0, s, strlen(s))", "cgi_env_add(&env, \"SERVER_SOFTWARE\", \"SERVER_SOFTWARE\" ? sizeof (\"SERVER_SOFTWARE\") - 1 : 0, \"lighttpd/1.5.0\", \"lighttpd/1.5.0\" ? sizeof (\"lighttpd/1.5.0\") - 1 : 0)", "close(0)", "close(1)", "close(2)", "close(from_cgi_fds[0])", "close(from_cgi_fds[1])", "close(i)", "close(to_cgi_fds[0])", "close(to_cgi_fds[1])", "con->mode = p->id", "dup2(from_cgi_fds[1], 1)", "dup2(to_cgi_fds[0], 0)", "env.ptr = ((void *)0)", "env.ptr = realloc(env.ptr, env.size * sizeof (*env.ptr))", "env.ptr[env.used] = ((void *)0)", "env.size = 0", "env.used = 0", "execve(args[0], args, env.ptr)", "i = 0", "log_error_write(srv, \"src/mod_cgi.c\", 600, \"sbss\", \"stat for cgi-handler\", cgi_handler, \"failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 850, \"ssb\", \"chdir failed:\", strerror((*__errno_location())), con->physical.path)", "log_error_write(srv, \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "ltostr(buf, (__extension__ ({\n    unsigned short __v, __x = (unsigned short)(con->dst_addr.plain.sa_family == 10 ? con->dst_addr.ipv6.sin6_port : con->dst_addr.ipv4.sin_port);\n    if (__builtin_constant_p(__x))\n        __v = ((unsigned short)((((__x) >> 8) & 255) | (((__x) & 255) << 8)));\n    else\n        __asm__(\"rorw $8, %w0\":\"=r\"( (__v)):\"0\"( (__x)):\"cc\");\n    __v;\n})))", "ltostr(buf, (__extension__ ({\n    unsigned short __v, __x = (unsigned short)(srv_sock->addr.plain.sa_family == 10 ? srv_sock->addr.ipv6.sin6_port : srv_sock->addr.ipv4.sin_port);\n    if (__builtin_constant_p(__x))\n        __v = ((unsigned short)((((__x) >> 8) & 255) | (((__x) & 255) << 8)));\n    else\n        __asm__(\"rorw $8, %w0\":\"=r\"( (__v)):\"0\"( (__x)):\"cc\");\n    __v;\n})))", "ltostr(buf, con->request.content_length)", "p->tmp_buf->ptr[p->tmp_buf->used++] = '\\x00'", "p->tmp_buf->used--", "s = get_http_method_name(con->request.http_method)", "s = get_http_version_name(con->request.http_version)", "s = inet_ntop(con->dst_addr.plain.sa_family, con->dst_addr.plain.sa_family == 10 ? (const void *)&(con->dst_addr.ipv6.sin6_addr) : (const void *)&(con->dst_addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "s = inet_ntop(srv_sock->addr.plain.sa_family, srv_sock->addr.plain.sa_family == 10 ? (const void *)&(srv_sock->addr.ipv6.sin6_addr) : (const void *)&(srv_sock->addr.ipv4.sin_addr), b2, sizeof (b2) - 1)", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return -128;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return -1;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return -33;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 0;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 10;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 128;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 16;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 1;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 255;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 256;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 2;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 32;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 3;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 46;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 47;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 600;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 608;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 613;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 850;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 864;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 869;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 887;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 895;\n", "if (__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	372,
									"scores":	[-3.912023005428146]
								}, {
									"case":	373,
									"scores":	[-3.912023005428146]
								}, {
									"case":	374,
									"scores":	[-3.912023005428146]
								}, {
									"case":	375,
									"scores":	[-3.912023005428146]
								}, {
									"case":	376,
									"scores":	[-3.912023005428146]
								}, {
									"case":	377,
									"scores":	[-3.912023005428146]
								}, {
									"case":	378,
									"scores":	[-3.912023005428146]
								}, {
									"case":	379,
									"scores":	[-3.912023005428146]
								}, {
									"case":	380,
									"scores":	[-3.912023005428146]
								}, {
									"case":	381,
									"scores":	[-3.912023005428146]
								}, {
									"case":	382,
									"scores":	[-3.912023005428146]
								}, {
									"case":	383,
									"scores":	[-3.912023005428146]
								}, {
									"case":	384,
									"scores":	[-3.912023005428146]
								}, {
									"case":	385,
									"scores":	[-3.912023005428146]
								}, {
									"case":	386,
									"scores":	[-3.912023005428146]
								}, {
									"case":	387,
									"scores":	[-3.912023005428146]
								}, {
									"case":	388,
									"scores":	[-3.912023005428146]
								}, {
									"case":	389,
									"scores":	[-3.912023005428146]
								}, {
									"case":	390,
									"scores":	[-3.912023005428146]
								}, {
									"case":	391,
									"scores":	[-3.912023005428146]
								}, {
									"case":	392,
									"scores":	[-3.912023005428146]
								}, {
									"case":	393,
									"scores":	[-3.912023005428146]
								}, {
									"case":	394,
									"scores":	[-3.912023005428146]
								}, {
									"case":	395,
									"scores":	[-3.912023005428146]
								}, {
									"case":	396,
									"scores":	[-3.912023005428146]
								}, {
									"case":	397,
									"scores":	[-3.912023005428146]
								}, {
									"case":	398,
									"scores":	[-3.912023005428146]
								}, {
									"case":	399,
									"scores":	[-3.912023005428146]
								}, {
									"case":	400,
									"scores":	[-3.912023005428146]
								}, {
									"case":	401,
									"scores":	[-3.912023005428146]
								}, {
									"case":	402,
									"scores":	[-3.912023005428146]
								}, {
									"case":	403,
									"scores":	[-3.912023005428146]
								}, {
									"case":	404,
									"scores":	[-3.912023005428146]
								}, {
									"case":	405,
									"scores":	[-3.912023005428146]
								}, {
									"case":	406,
									"scores":	[-3.912023005428146]
								}, {
									"case":	407,
									"scores":	[-3.912023005428146]
								}, {
									"case":	408,
									"scores":	[-3.912023005428146]
								}, {
									"case":	409,
									"scores":	[-3.912023005428146]
								}, {
									"case":	410,
									"scores":	[-3.912023005428146]
								}, {
									"case":	411,
									"scores":	[-3.912023005428146]
								}, {
									"case":	412,
									"scores":	[-3.912023005428146]
								}, {
									"case":	413,
									"scores":	[-3.912023005428146]
								}, {
									"case":	414,
									"scores":	[-3.912023005428146]
								}, {
									"case":	415,
									"scores":	[-3.912023005428146]
								}, {
									"case":	416,
									"scores":	[-3.912023005428146]
								}, {
									"case":	417,
									"scores":	[-3.912023005428146]
								}, {
									"case":	418,
									"scores":	[-3.912023005428146]
								}, {
									"case":	419,
									"scores":	[-3.912023005428146]
								}, {
									"case":	420,
									"scores":	[-3.912023005428146]
								}, {
									"case":	421,
									"scores":	[-3.912023005428146]
								}, {
									"case":	422,
									"scores":	[-3.912023005428146]
								}, {
									"case":	423,
									"scores":	[-3.912023005428146]
								}, {
									"case":	424,
									"scores":	[-3.912023005428146]
								}, {
									"case":	425,
									"scores":	[-3.912023005428146]
								}, {
									"case":	426,
									"scores":	[-3.912023005428146]
								}, {
									"case":	427,
									"scores":	[-3.912023005428146]
								}, {
									"case":	428,
									"scores":	[-3.912023005428146]
								}, {
									"case":	429,
									"scores":	[-3.912023005428146]
								}, {
									"case":	430,
									"scores":	[-3.912023005428146]
								}, {
									"case":	431,
									"scores":	[-3.912023005428146]
								}, {
									"case":	432,
									"scores":	[-3.912023005428146]
								}, {
									"case":	433,
									"scores":	[-3.912023005428146]
								}, {
									"case":	434,
									"scores":	[-3.912023005428146]
								}, {
									"case":	435,
									"scores":	[-3.912023005428146]
								}, {
									"case":	436,
									"scores":	[-3.912023005428146]
								}, {
									"case":	437,
									"scores":	[-3.912023005428146]
								}, {
									"case":	438,
									"scores":	[-3.912023005428146]
								}, {
									"case":	439,
									"scores":	[-3.912023005428146]
								}, {
									"case":	440,
									"scores":	[-3.912023005428146]
								}, {
									"case":	441,
									"scores":	[-3.912023005428146]
								}, {
									"case":	442,
									"scores":	[-3.912023005428146]
								}, {
									"case":	443,
									"scores":	[-3.912023005428146]
								}, {
									"case":	444,
									"scores":	[-3.912023005428146]
								}, {
									"case":	445,
									"scores":	[-3.912023005428146]
								}, {
									"case":	446,
									"scores":	[-3.912023005428146]
								}, {
									"case":	447,
									"scores":	[-3.912023005428146]
								}, {
									"case":	448,
									"scores":	[-3.912023005428146]
								}, {
									"case":	449,
									"scores":	[-3.912023005428146]
								}, {
									"case":	450,
									"scores":	[-3.912023005428146]
								}, {
									"case":	451,
									"scores":	[-3.912023005428146]
								}, {
									"case":	452,
									"scores":	[-3.912023005428146]
								}, {
									"case":	453,
									"scores":	[-3.912023005428146]
								}, {
									"case":	454,
									"scores":	[-3.912023005428146]
								}, {
									"case":	455,
									"scores":	[-3.912023005428146]
								}, {
									"case":	456,
									"scores":	[-3.912023005428146]
								}, {
									"case":	457,
									"scores":	[-3.912023005428146]
								}, {
									"case":	458,
									"scores":	[-3.912023005428146]
								}, {
									"case":	459,
									"scores":	[-3.912023005428146]
								}, {
									"case":	460,
									"scores":	[-3.912023005428146]
								}, {
									"case":	461,
									"scores":	[-3.912023005428146]
								}, {
									"case":	462,
									"scores":	[-3.912023005428146]
								}, {
									"case":	463,
									"scores":	[-3.912023005428146]
								}, {
									"case":	464,
									"scores":	[-3.912023005428146]
								}, {
									"case":	465,
									"scores":	[-3.912023005428146]
								}, {
									"case":	466,
									"scores":	[-3.912023005428146]
								}, {
									"case":	467,
									"scores":	[-3.912023005428146]
								}, {
									"case":	468,
									"scores":	[-3.912023005428146]
								}, {
									"case":	469,
									"scores":	[-3.912023005428146]
								}, {
									"case":	470,
									"scores":	[-3.912023005428146]
								}, {
									"case":	471,
									"scores":	[-3.912023005428146]
								}, {
									"case":	472,
									"scores":	[-3.912023005428146]
								}, {
									"case":	473,
									"scores":	[-3.912023005428146]
								}, {
									"case":	474,
									"scores":	[-3.912023005428146]
								}, {
									"case":	475,
									"scores":	[-3.912023005428146]
								}, {
									"case":	476,
									"scores":	[-3.912023005428146]
								}, {
									"case":	477,
									"scores":	[-3.912023005428146]
								}, {
									"case":	478,
									"scores":	[-3.912023005428146]
								}, {
									"case":	479,
									"scores":	[-3.912023005428146]
								}, {
									"case":	480,
									"scores":	[-3.912023005428146]
								}, {
									"case":	481,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	482,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	483,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	484,
									"scores":	[-8.7112657394281445, -6.925222685128146, -8.0491679994281462, -7.4287644154281463, -7.4350349154281457, -8.0491679994281462, -6.5068098154281451, -7.2196748154281458, -8.183621385128145, -6.417387115428145, -7.3814027154281465, -7.2771659554281456, -7.3814027154281465, -7.3814027154281465, -7.1907707154281457, -7.3814027154281465, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.2801934154281458, -6.417387115428145, -6.5068098154281451, -6.9092711154281456, -6.7852819554281449, -7.3814027154281465, -7.0999031154281464, -7.2771659554281456, -7.2801934154281458, -7.1907707154281457, -6.417387115428145, -7.2801934154281458, -7.3814027154281465, -7.3814027154281465, -7.3814027154281465, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.3814027154281465, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.3814027154281465, -7.3814027154281465, -7.3814027154281465, -7.3814027154281465, -7.3814027154281465, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.1907707154281457, -7.3814027154281465, -7.3814027154281465, -7.3814027154281465, -6.7346597154281458, -7.1907707154281457, -7.1907707154281457, -7.3814027154281465, -7.3814027154281465, -7.1907707154281457, -7.1907707154281457, -7.3814027154281465, -7.3814027154281465, -7.3814027154281465, -7.1907707154281457]
								}, {
									"case":	485,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	486,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	487,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	488,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	489,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	490,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	491,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	492,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	493,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	494,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	495,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	496,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	497,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	498,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	499,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	500,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	501,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	502,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	503,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}, {
									"case":	504,
									"scores":	[-10.974047539428145, -9.1880044851281468, -10.311949799428147, -9.6915462154281471, -9.6978167154281465, -10.311949799428147, -8.7695916154281459, -9.4824566154281449, -10.446403185128146, -8.6801689154281458, -9.6441845154281456, -9.5399477554281464, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.5429752154281466, -8.6801689154281458, -8.7695916154281459, -9.1720529154281465, -9.0480637554281458, -9.6441845154281456, -9.3626849154281455, -9.5399477554281464, -9.5429752154281466, -9.4535525154281466, -8.6801689154281458, -9.5429752154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -8.9974415154281466, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466, -9.4535525154281466, -9.6441845154281456, -9.6441845154281456, -9.6441845154281456, -9.4535525154281466]
								}]
						}, {
							"switch":	89,
							"types":	[[], [], [1], [], [], [], [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], [], [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [57]],
							"begin_line":	749,
							"begin_column":	3,
							"end_line":	749,
							"end_column":	70,
							"patch_codes":	["if (!__is_neg(\"\", \"L749\", 74, &(con), sizeof (con), &(con->request.content_length), sizeof (con->request.content_length), &(con->physical.path), sizeof (con->physical.path), &(con->physical.path->ptr), sizeof (con->physical.path->ptr), &(con->physical.path->used), sizeof (con->physical.path->used), &(con->physical.doc_root), sizeof (con->physical.doc_root), &(s), sizeof (s), &(srv_sock), sizeof (srv_sock), &(con->authed_user), sizeof (con->authed_user), &(n), sizeof (n), &(con->request.headers), sizeof (con->request.headers), &(p), sizeof (p), &(con->request.orig_uri), sizeof (con->request.orig_uri), &(con->request.pathinfo), sizeof (con->request.pathinfo), &(con->request.http_method), sizeof (con->request.http_method), &(con->environment), sizeof (con->environment), &(con->request.http_version), sizeof (con->request.http_version), &(env.size), sizeof (env.size), &(env.used), sizeof (env.used), &(env.ptr), sizeof (env.ptr), &(argc), sizeof (argc), &(args), sizeof (args), &(i), sizeof (i), &(cgi_handler), sizeof (cgi_handler), &(con->server_name), sizeof (con->server_name), &(c), sizeof (c), &(srv), sizeof (srv), &(con->srv_socket), sizeof (con->srv_socket), &(con->mode), sizeof (con->mode), &(pid), sizeof (pid), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(con->request.request), sizeof (con->request.request), &(con->request.uri), sizeof (con->request.uri), &(con->request.http_host), sizeof (con->request.http_host), &(con->request.accept_encoding), sizeof (con->request.accept_encoding), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->file_started), sizeof (con->file_started), &(con->send), sizeof (con->send), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->http_status), sizeof (con->http_status), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->physical.basedir), sizeof (con->physical.basedir), &(con->physical.rel_path), sizeof (con->physical.rel_path), &(con->physical.etag), sizeof (con->physical.etag), &(con->physical.path->size), sizeof (con->physical.path->size)))\n    cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf));\n", "OPENSSL_strnlen(buf, -1)", "OPENSSL_strnlen(buf, -128)", "OPENSSL_strnlen(buf, -33)", "OPENSSL_strnlen(buf, 0)", "OPENSSL_strnlen(buf, 1)", "OPENSSL_strnlen(buf, 10)", "OPENSSL_strnlen(buf, 128)", "OPENSSL_strnlen(buf, 16)", "OPENSSL_strnlen(buf, 2)", "OPENSSL_strnlen(buf, 255)", "OPENSSL_strnlen(buf, 256)", "OPENSSL_strnlen(buf, 3)", "OPENSSL_strnlen(buf, 32)", "OPENSSL_strnlen(buf, 46)", "OPENSSL_strnlen(buf, 47)", "OPENSSL_strnlen(buf, 600)", "OPENSSL_strnlen(buf, 608)", "OPENSSL_strnlen(buf, 613)", "OPENSSL_strnlen(buf, 8)", "OPENSSL_strnlen(buf, 850)", "OPENSSL_strnlen(buf, 864)", "OPENSSL_strnlen(buf, 869)", "OPENSSL_strnlen(buf, 887)", "OPENSSL_strnlen(buf, 895)", "OPENSSL_strnlen(buf, n)", "g_printf_string_upper_bound(buf, 0)", "strcspn(buf, 0)", "strcspn(buf, s)", "strnlen(buf, -1)", "strnlen(buf, -128)", "strnlen(buf, -33)", "strnlen(buf, 0)", "strnlen(buf, 1)", "strnlen(buf, 10)", "strnlen(buf, 128)", "strnlen(buf, 16)", "strnlen(buf, 2)", "strnlen(buf, 255)", "strnlen(buf, 256)", "strnlen(buf, 3)", "strnlen(buf, 32)", "strnlen(buf, 46)", "strnlen(buf, 47)", "strnlen(buf, 600)", "strnlen(buf, 608)", "strnlen(buf, 613)", "strnlen(buf, 8)", "strnlen(buf, 850)", "strnlen(buf, 864)", "strnlen(buf, 869)", "strnlen(buf, 887)", "strnlen(buf, 895)", "strnlen(buf, n)", "strspn(buf, 0)", "strspn(buf, s)", "{\n}\n", "BIO_printf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "VALGRIND_PRINTF(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "VALGRIND_PRINTF_BACKTRACE(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "__builtin_va_start(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "array_append_key_value(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "array_set_key_value(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, OPENSSL_LH_strhash(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, g_variant_type_string_get_depth_(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "execl(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "execle(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "execlp(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "fprintf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_build_filename(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_build_path(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_markup_printf_escaped(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_prefix_error(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_print(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_printerr(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_relation_exists(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_relation_insert(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_scanner_error(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_scanner_warn(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_strconcat(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_strdup_printf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_string_append_printf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_string_printf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_strjoin(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_test_message(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_builder_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_builder_add_parsed(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_get(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_iter_loop(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_iter_next(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_new(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_new_parsed(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "g_variant_new_printf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "log_trace(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "printf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "sprintf(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&(env), \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH or the directory does not exist\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (0 * argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (0 * i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (0 * n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (0 * pid) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc != i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc != n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc * i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc * n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc * pid) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc + 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc + i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc + n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc - 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc - i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc - n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc == i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (argc == n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (args != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (args == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (b2 != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (b2 == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (buf != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (buf == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (c != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (c == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (cgi_handler != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (cgi_handler == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (con != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (con == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (env != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (env == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (from_cgi_fds != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (from_cgi_fds == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i != n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i * argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i * n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i * pid) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i + 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i + n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i - 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i - n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (i == n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n * argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n * i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n * pid) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n + 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n - 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (n == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (p != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (p == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid != argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid != i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid != n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid * argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid * i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid * n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid + 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid + argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid + i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid + n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid - 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid - argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid - i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid - n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid == argc) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid == i) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (pid == n) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (s != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (s == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (srv != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (srv == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (srv_sock != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (srv_sock == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (st != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (st == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (to_cgi_fds != 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - (to_cgi_fds == 0) : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (0 * argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (0 * i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (0 * n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (0 * pid), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc != i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc != n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc * i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc * n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc * pid), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc + 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc + i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc + n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc - 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc - i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc - n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc == i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (argc == n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (args != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (args == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (b2 != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (b2 == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (buf != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (buf == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (c != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (c == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (cgi_handler != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (cgi_handler == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (con != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (con == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (env != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (env == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (from_cgi_fds != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (from_cgi_fds == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i != n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i * argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i * n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i * pid), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i + 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i + n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i - 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i - n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (i == n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n * argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n * i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n * pid), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n + 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n - 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (n == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (p != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (p == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid != argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid != i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid != n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid * argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid * i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid * n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid + 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid + argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid + i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid + n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid - 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid - argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid - i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid - n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid == argc), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid == i), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (pid == n), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (s != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (s == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (srv != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (srv == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (srv_sock != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (srv_sock == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (st != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (st == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (to_cgi_fds != 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : (to_cgi_fds == 0), buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&argc), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&args), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&b2), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&buf), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&c), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&cgi_handler), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&con), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&env), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&from_cgi_fds), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&i), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&n), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&p), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&pid), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&s), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&srv), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&srv_sock), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&st), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (&to_cgi_fds), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, (buf), strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&argc)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&args)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&b2)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&buf)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&c)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&cgi_handler)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&con)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&env)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&from_cgi_fds)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&i)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&n)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&p)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&pid)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&s)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&srv)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&srv_sock)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&st)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((&to_cgi_fds)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen((buf)))", "cgi_env_add(&env, \"CONTENT_LENGTH\", \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&argc) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&args) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&b2) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&buf) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&c) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&cgi_handler) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&con) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&env) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&from_cgi_fds) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&i) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&n) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&p) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&pid) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&s) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&srv) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&srv_sock) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&st) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (&to_cgi_fds) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, \"CONTENT_LENGTH\", (0) ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&argc), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&args), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&b2), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&buf), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&c), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&cgi_handler), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&con), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&env), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&from_cgi_fds), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&i), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&n), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&p), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&pid), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&s), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&srv), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&srv_sock), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&st), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (&to_cgi_fds), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))", "cgi_env_add(&env, (0), \"CONTENT_LENGTH\" ? sizeof (\"CONTENT_LENGTH\") - 1 : 0, buf, strlen(buf))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7612300414281457, -5.1268607451281456, -6.1932713604281471, -5.2453798954281456, -4.7331664954281463, -7.0305603604281455, -5.0489915954281459, -5.9258842264281464, -6.6846452461281451, -4.6120265954281461, -6.2267652954281463, -6.2620060954281467, -6.2267652954281463, -6.2267652954281463, -5.3828602954281459, -6.2267652954281463, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.8198252954281458, -4.6120265954281461, -5.0489915954281459, -5.1533195954281457, -5.7207130954281453, -6.2267652954281463, -5.997224595428146, -6.2620060954281467, -5.8198252954281458, -5.3828602954281459, -4.6120265954281461, -5.8198252954281458, -6.2267652954281463, -6.2267652954281463, -6.2267652954281463, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -6.2267652954281463, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -6.2267652954281463, -6.2267652954281463, -6.2267652954281463, -6.2267652954281463, -6.2267652954281463, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -5.3828602954281459, -6.2267652954281463, -6.2267652954281463, -6.2267652954281463, -5.1389334254281458, -5.3828602954281459, -5.3828602954281459, -6.2267652954281463, -6.2267652954281463, -5.3828602954281459, -5.3828602954281459, -6.2267652954281463, -6.2267652954281463, -6.2267652954281463, -5.3828602954281459]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	346,
									"scores":	[-3.912023005428146]
								}]
						}]
				}, {
					"line":	999,
					"switches":	[]
				}, {
					"line":	1000,
					"switches":	[]
				}, {
					"line":	1004,
					"switches":	[{
							"switch":	90,
							"types":	[[], [], [], [], [44, 45, 46, 47, 48, 49], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [], [], [], [], [], []],
							"begin_line":	1005,
							"begin_column":	0,
							"end_line":	1005,
							"end_column":	0,
							"patch_codes":	["memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->cgi_pid.ptr, 0, sizeof (*(&p->cgi_pid.ptr)))", "memset(&p->cgi_pid.size, 0, sizeof (*(&p->cgi_pid.size)))", "memset(&p->cgi_pid.used, 0, sizeof (*(&p->cgi_pid.used)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(p, 0, sizeof (*(p)))", "memset(p->cgi_pid.ptr, 0, sizeof (*(p->cgi_pid.ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((p)->tmp_buf)", "cgi_pid_del((srv), p, p->cgi_pid.ptr[ndx])", "cgi_pid_del(srv, (p), p->cgi_pid.ptr[ndx])", "cgi_pid_del(srv, p, (p)->cgi_pid.ptr[ndx])", "free((p))", "free((p)->config_storage)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_pid_del(srv, p, p->cgi_pid.ptr[ndx])", "close(0)", "close(1)", "close(2)", "log_error_write(srv, \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "ndx--", "if (__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    return -1;\n", "if (__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    return 0;\n", "if (__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    return 1016;\n", "if (__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    return 1026;\n", "if (__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    return 127;\n", "if (__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-7.078170119493886, -6.8762401086938851, -7.7083486454938859, -8.2335373304938848, -8.2853111754938862, -7.8793276754938857, -8.7920092354938859, -8.9826412354938867, -8.9826412354938867, -8.881431935493886, -8.7920092354938859]
								}, {
									"case":	45,
									"scores":	[-4.815388319493886, -4.6134583086938852, -5.4455668454938859, -5.9707555304938857, -6.0225293754938853, -5.6165458754938857, -6.529227435493886, -6.7198594354938859, -6.7198594354938859, -6.6186501354938851, -6.529227435493886]
								}, {
									"case":	46,
									"scores":	[-7.078170119493886, -6.8762401086938851, -7.7083486454938859, -8.2335373304938848, -8.2853111754938862, -7.8793276754938857, -8.7920092354938859, -8.9826412354938867, -8.9826412354938867, -8.881431935493886, -8.7920092354938859]
								}, {
									"case":	47,
									"scores":	[-7.078170119493886, -6.8762401086938851, -7.7083486454938859, -8.2335373304938848, -8.2853111754938862, -7.8793276754938857, -8.7920092354938859, -8.9826412354938867, -8.9826412354938867, -8.881431935493886, -8.7920092354938859]
								}, {
									"case":	48,
									"scores":	[-7.078170119493886, -6.8762401086938851, -7.7083486454938859, -8.2335373304938848, -8.2853111754938862, -7.8793276754938857, -8.7920092354938859, -8.9826412354938867, -8.9826412354938867, -8.881431935493886, -8.7920092354938859]
								}, {
									"case":	49,
									"scores":	[-7.078170119493886, -6.8762401086938851, -7.7083486454938859, -8.2335373304938848, -8.2853111754938862, -7.8793276754938857, -8.7920092354938859, -8.9826412354938867, -8.9826412354938867, -8.881431935493886, -8.7920092354938859]
								}]
						}, {
							"switch":	91,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1005,
							"begin_column":	2,
							"end_line":	1036,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1005\", 11, &(p), sizeof (p), &(ndx), sizeof (ndx), &(p->cgi_pid.used), sizeof (p->cgi_pid.used), &(p->cgi_pid.ptr), sizeof (p->cgi_pid.ptr), &(p_d), sizeof (p_d), &(srv), sizeof (srv), &(p->id), sizeof (p->id), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage), &(p->cgi_pid.size), sizeof (p->cgi_pid.size)))\n    for (ndx = 0; ndx < p->cgi_pid.used; ndx++) {\n        int status;\n        switch (waitpid(p->cgi_pid.ptr[ndx], &status, 1)) {\n          case 0:\n            break;\n          case -1:\n            log_error_write(srv, \"src/mod_cgi.c\", 1016, \"ss\", \"waitpid failed: \", strerror((*__errno_location())));\n            return HANDLER_ERROR;\n          default:\n            if ((((status) & 127) == 0)) {\n            } else {\n                log_error_write(srv, \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\");\n            }\n            cgi_pid_del(srv, p, p->cgi_pid.ptr[ndx]);\n            ndx--;\n        }\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3239553764938856, -3.8984296824938856, -5.2041256764938852, -4.5751416764938853, -5.7030904764938857, -5.9865798764938853, -5.7721776764938859, -6.6160826764938854, -6.6160826764938854, -6.2091426764938857, -5.7721776764938859]
								}]
						}]
				}, {
					"line":	1037,
					"switches":	[{
							"switch":	92,
							"types":	[[], [], [], [], [43, 44, 45, 46, 47, 48], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [], [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [], [], [], [], [], []],
							"begin_line":	1038,
							"begin_column":	0,
							"end_line":	1038,
							"end_column":	0,
							"patch_codes":	["memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->cgi_pid.ptr, 0, sizeof (*(&p->cgi_pid.ptr)))", "memset(&p->cgi_pid.size, 0, sizeof (*(&p->cgi_pid.size)))", "memset(&p->cgi_pid.used, 0, sizeof (*(&p->cgi_pid.used)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(p->cgi_pid.ptr, 0, sizeof (*(p->cgi_pid.ptr)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((p)->tmp_buf)", "cgi_pid_del((srv), p, p->cgi_pid.ptr[ndx])", "cgi_pid_del(srv, (p), p->cgi_pid.ptr[ndx])", "cgi_pid_del(srv, p, (p)->cgi_pid.ptr[ndx])", "free((p))", "free((p)->config_storage)", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_pid_del(srv, p, p->cgi_pid.ptr[ndx])", "close(0)", "close(1)", "close(2)", "log_error_write(srv, \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "ndx--", "if (__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return -1;\n", "if (__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 1016;\n", "if (__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 1026;\n", "if (__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 127;\n", "if (__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.659523176176366]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-7.228224596176366, -9.1673196948763653, -9.7440149548763664, -8.3836634251763655]
								}, {
									"case":	44,
									"scores":	[-4.9654427961763661, -6.9045378948763663, -7.4812331548763655, -6.1208816251763656]
								}, {
									"case":	45,
									"scores":	[-7.228224596176366, -9.1673196948763653, -9.7440149548763664, -8.3836634251763655]
								}, {
									"case":	46,
									"scores":	[-7.228224596176366, -9.1673196948763653, -9.7440149548763664, -8.3836634251763655]
								}, {
									"case":	47,
									"scores":	[-7.228224596176366, -9.1673196948763653, -9.7440149548763664, -8.3836634251763655]
								}, {
									"case":	48,
									"scores":	[-7.228224596176366, -9.1673196948763653, -9.7440149548763664, -8.3836634251763655]
								}]
						}, {
							"switch":	93,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1038,
							"begin_column":	2,
							"end_line":	1038,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L1038\", 4, &(ndx), sizeof (ndx), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return HANDLER_GO_ON;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.801259918176366, -6.6175687988763663, -6.9382976478763663, -5.6814084791763664]
								}]
						}]
				}, {
					"line":	1076,
					"switches":	[{
							"switch":	94,
							"types":	[[], [], [], [], [262, 263, 264, 265, 266, 267, 268, 269, 270], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], [], [], [], [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [], [], []],
							"begin_line":	1077,
							"begin_column":	1,
							"end_line":	1077,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return -1;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 0;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 10;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 127;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 1;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 4;\n", "if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.80101015183343]
								}, {
									"case":	2,
									"scores":	[-6.80101015183343]
								}, {
									"case":	3,
									"scores":	[-6.80101015183343]
								}, {
									"case":	4,
									"scores":	[-6.80101015183343]
								}, {
									"case":	5,
									"scores":	[-6.80101015183343]
								}, {
									"case":	6,
									"scores":	[-6.80101015183343]
								}, {
									"case":	7,
									"scores":	[-6.80101015183343]
								}, {
									"case":	8,
									"scores":	[-6.80101015183343]
								}, {
									"case":	9,
									"scores":	[-6.80101015183343]
								}, {
									"case":	10,
									"scores":	[-6.80101015183343]
								}, {
									"case":	11,
									"scores":	[-6.80101015183343]
								}, {
									"case":	12,
									"scores":	[-6.80101015183343]
								}, {
									"case":	13,
									"scores":	[-6.80101015183343]
								}, {
									"case":	14,
									"scores":	[-6.80101015183343]
								}, {
									"case":	15,
									"scores":	[-6.80101015183343]
								}, {
									"case":	16,
									"scores":	[-6.80101015183343]
								}, {
									"case":	17,
									"scores":	[-6.80101015183343]
								}, {
									"case":	18,
									"scores":	[-6.80101015183343]
								}, {
									"case":	19,
									"scores":	[-6.80101015183343]
								}, {
									"case":	20,
									"scores":	[-6.80101015183343]
								}, {
									"case":	21,
									"scores":	[-6.80101015183343]
								}, {
									"case":	22,
									"scores":	[-6.80101015183343]
								}, {
									"case":	23,
									"scores":	[-6.80101015183343]
								}, {
									"case":	24,
									"scores":	[-6.80101015183343]
								}, {
									"case":	25,
									"scores":	[-6.80101015183343]
								}, {
									"case":	26,
									"scores":	[-6.80101015183343]
								}, {
									"case":	27,
									"scores":	[-6.80101015183343]
								}, {
									"case":	28,
									"scores":	[-6.80101015183343]
								}, {
									"case":	29,
									"scores":	[-6.80101015183343]
								}, {
									"case":	30,
									"scores":	[-6.80101015183343]
								}, {
									"case":	31,
									"scores":	[-6.80101015183343]
								}, {
									"case":	32,
									"scores":	[-6.80101015183343]
								}, {
									"case":	33,
									"scores":	[-6.80101015183343]
								}, {
									"case":	34,
									"scores":	[-6.80101015183343]
								}, {
									"case":	35,
									"scores":	[-6.80101015183343]
								}, {
									"case":	36,
									"scores":	[-6.80101015183343]
								}, {
									"case":	37,
									"scores":	[-6.80101015183343]
								}, {
									"case":	38,
									"scores":	[-6.80101015183343]
								}, {
									"case":	39,
									"scores":	[-6.80101015183343]
								}, {
									"case":	40,
									"scores":	[-6.80101015183343]
								}, {
									"case":	41,
									"scores":	[-6.80101015183343]
								}, {
									"case":	42,
									"scores":	[-6.80101015183343]
								}, {
									"case":	43,
									"scores":	[-6.80101015183343]
								}, {
									"case":	44,
									"scores":	[-6.80101015183343]
								}, {
									"case":	45,
									"scores":	[-6.80101015183343]
								}, {
									"case":	46,
									"scores":	[-6.80101015183343]
								}, {
									"case":	47,
									"scores":	[-6.80101015183343]
								}, {
									"case":	48,
									"scores":	[-6.80101015183343]
								}, {
									"case":	49,
									"scores":	[-6.80101015183343]
								}, {
									"case":	50,
									"scores":	[-6.80101015183343]
								}, {
									"case":	51,
									"scores":	[-6.80101015183343]
								}, {
									"case":	52,
									"scores":	[-6.80101015183343]
								}, {
									"case":	53,
									"scores":	[-6.80101015183343]
								}, {
									"case":	54,
									"scores":	[-6.80101015183343]
								}, {
									"case":	55,
									"scores":	[-6.80101015183343]
								}, {
									"case":	56,
									"scores":	[-6.80101015183343]
								}, {
									"case":	57,
									"scores":	[-6.80101015183343]
								}, {
									"case":	58,
									"scores":	[-6.80101015183343]
								}, {
									"case":	59,
									"scores":	[-6.80101015183343]
								}, {
									"case":	60,
									"scores":	[-6.80101015183343]
								}, {
									"case":	61,
									"scores":	[-6.80101015183343]
								}, {
									"case":	62,
									"scores":	[-6.80101015183343]
								}, {
									"case":	63,
									"scores":	[-6.80101015183343]
								}, {
									"case":	64,
									"scores":	[-6.80101015183343]
								}, {
									"case":	65,
									"scores":	[-6.80101015183343]
								}, {
									"case":	66,
									"scores":	[-6.80101015183343]
								}, {
									"case":	67,
									"scores":	[-6.80101015183343]
								}, {
									"case":	68,
									"scores":	[-6.80101015183343]
								}, {
									"case":	69,
									"scores":	[-6.80101015183343]
								}, {
									"case":	70,
									"scores":	[-6.80101015183343]
								}, {
									"case":	71,
									"scores":	[-6.80101015183343]
								}, {
									"case":	72,
									"scores":	[-6.80101015183343]
								}, {
									"case":	73,
									"scores":	[-6.80101015183343]
								}, {
									"case":	74,
									"scores":	[-6.80101015183343]
								}, {
									"case":	75,
									"scores":	[-6.80101015183343]
								}, {
									"case":	76,
									"scores":	[-6.80101015183343]
								}, {
									"case":	77,
									"scores":	[-6.80101015183343]
								}, {
									"case":	78,
									"scores":	[-6.80101015183343]
								}, {
									"case":	79,
									"scores":	[-6.80101015183343]
								}, {
									"case":	80,
									"scores":	[-6.80101015183343]
								}, {
									"case":	81,
									"scores":	[-6.80101015183343]
								}, {
									"case":	82,
									"scores":	[-6.80101015183343]
								}, {
									"case":	83,
									"scores":	[-6.80101015183343]
								}, {
									"case":	84,
									"scores":	[-6.80101015183343]
								}, {
									"case":	85,
									"scores":	[-6.80101015183343]
								}, {
									"case":	86,
									"scores":	[-6.80101015183343]
								}, {
									"case":	87,
									"scores":	[-6.80101015183343]
								}, {
									"case":	88,
									"scores":	[-6.80101015183343]
								}, {
									"case":	89,
									"scores":	[-6.80101015183343]
								}, {
									"case":	90,
									"scores":	[-6.80101015183343]
								}, {
									"case":	91,
									"scores":	[-6.80101015183343]
								}, {
									"case":	92,
									"scores":	[-6.80101015183343]
								}, {
									"case":	93,
									"scores":	[-6.80101015183343]
								}, {
									"case":	94,
									"scores":	[-6.80101015183343]
								}, {
									"case":	95,
									"scores":	[-6.80101015183343]
								}, {
									"case":	96,
									"scores":	[-6.80101015183343]
								}, {
									"case":	97,
									"scores":	[-6.80101015183343]
								}, {
									"case":	98,
									"scores":	[-6.80101015183343]
								}, {
									"case":	99,
									"scores":	[-6.80101015183343]
								}, {
									"case":	100,
									"scores":	[-6.80101015183343]
								}, {
									"case":	101,
									"scores":	[-6.80101015183343]
								}, {
									"case":	102,
									"scores":	[-6.80101015183343]
								}, {
									"case":	103,
									"scores":	[-6.80101015183343]
								}, {
									"case":	104,
									"scores":	[-6.80101015183343]
								}, {
									"case":	105,
									"scores":	[-6.80101015183343]
								}, {
									"case":	106,
									"scores":	[-6.80101015183343]
								}, {
									"case":	107,
									"scores":	[-6.80101015183343]
								}, {
									"case":	108,
									"scores":	[-6.80101015183343]
								}, {
									"case":	109,
									"scores":	[-6.80101015183343]
								}, {
									"case":	110,
									"scores":	[-6.80101015183343]
								}, {
									"case":	111,
									"scores":	[-6.80101015183343]
								}, {
									"case":	112,
									"scores":	[-6.80101015183343]
								}, {
									"case":	113,
									"scores":	[-6.80101015183343]
								}, {
									"case":	114,
									"scores":	[-6.80101015183343]
								}, {
									"case":	115,
									"scores":	[-6.80101015183343]
								}, {
									"case":	116,
									"scores":	[-6.80101015183343]
								}, {
									"case":	117,
									"scores":	[-6.80101015183343]
								}, {
									"case":	118,
									"scores":	[-6.80101015183343]
								}, {
									"case":	119,
									"scores":	[-6.80101015183343]
								}, {
									"case":	120,
									"scores":	[-6.80101015183343]
								}, {
									"case":	121,
									"scores":	[-6.80101015183343]
								}, {
									"case":	122,
									"scores":	[-6.80101015183343]
								}, {
									"case":	123,
									"scores":	[-6.80101015183343]
								}, {
									"case":	124,
									"scores":	[-6.80101015183343]
								}, {
									"case":	125,
									"scores":	[-6.80101015183343]
								}, {
									"case":	126,
									"scores":	[-6.80101015183343]
								}, {
									"case":	127,
									"scores":	[-6.80101015183343]
								}, {
									"case":	128,
									"scores":	[-6.80101015183343]
								}, {
									"case":	129,
									"scores":	[-6.80101015183343]
								}, {
									"case":	130,
									"scores":	[-6.80101015183343]
								}, {
									"case":	131,
									"scores":	[-6.80101015183343]
								}, {
									"case":	132,
									"scores":	[-6.80101015183343]
								}, {
									"case":	133,
									"scores":	[-6.80101015183343]
								}, {
									"case":	134,
									"scores":	[-6.80101015183343]
								}, {
									"case":	135,
									"scores":	[-6.80101015183343]
								}, {
									"case":	136,
									"scores":	[-6.80101015183343]
								}, {
									"case":	137,
									"scores":	[-6.80101015183343]
								}, {
									"case":	138,
									"scores":	[-6.80101015183343]
								}, {
									"case":	139,
									"scores":	[-6.80101015183343]
								}, {
									"case":	140,
									"scores":	[-6.80101015183343]
								}, {
									"case":	141,
									"scores":	[-6.80101015183343]
								}, {
									"case":	142,
									"scores":	[-6.80101015183343]
								}, {
									"case":	143,
									"scores":	[-6.80101015183343]
								}, {
									"case":	144,
									"scores":	[-6.80101015183343]
								}, {
									"case":	145,
									"scores":	[-6.80101015183343]
								}, {
									"case":	146,
									"scores":	[-6.80101015183343]
								}, {
									"case":	147,
									"scores":	[-6.80101015183343]
								}, {
									"case":	148,
									"scores":	[-6.80101015183343]
								}, {
									"case":	149,
									"scores":	[-6.80101015183343]
								}, {
									"case":	150,
									"scores":	[-6.80101015183343]
								}, {
									"case":	151,
									"scores":	[-6.80101015183343]
								}, {
									"case":	152,
									"scores":	[-6.80101015183343]
								}, {
									"case":	153,
									"scores":	[-6.80101015183343]
								}, {
									"case":	154,
									"scores":	[-6.80101015183343]
								}, {
									"case":	155,
									"scores":	[-6.80101015183343]
								}, {
									"case":	156,
									"scores":	[-6.80101015183343]
								}, {
									"case":	157,
									"scores":	[-6.80101015183343]
								}, {
									"case":	158,
									"scores":	[-6.80101015183343]
								}, {
									"case":	159,
									"scores":	[-6.80101015183343]
								}, {
									"case":	160,
									"scores":	[-6.80101015183343]
								}, {
									"case":	161,
									"scores":	[-6.80101015183343]
								}, {
									"case":	162,
									"scores":	[-6.80101015183343]
								}, {
									"case":	163,
									"scores":	[-6.80101015183343]
								}, {
									"case":	164,
									"scores":	[-6.80101015183343]
								}, {
									"case":	165,
									"scores":	[-6.80101015183343]
								}, {
									"case":	166,
									"scores":	[-6.80101015183343]
								}, {
									"case":	167,
									"scores":	[-6.80101015183343]
								}, {
									"case":	168,
									"scores":	[-6.80101015183343]
								}, {
									"case":	169,
									"scores":	[-6.80101015183343]
								}, {
									"case":	170,
									"scores":	[-6.80101015183343]
								}, {
									"case":	171,
									"scores":	[-6.80101015183343]
								}, {
									"case":	172,
									"scores":	[-6.80101015183343]
								}, {
									"case":	173,
									"scores":	[-6.80101015183343]
								}, {
									"case":	174,
									"scores":	[-6.80101015183343]
								}, {
									"case":	175,
									"scores":	[-6.80101015183343]
								}, {
									"case":	176,
									"scores":	[-6.80101015183343]
								}, {
									"case":	177,
									"scores":	[-6.80101015183343]
								}, {
									"case":	178,
									"scores":	[-6.80101015183343]
								}, {
									"case":	179,
									"scores":	[-6.80101015183343]
								}, {
									"case":	180,
									"scores":	[-6.80101015183343]
								}, {
									"case":	181,
									"scores":	[-6.80101015183343]
								}, {
									"case":	182,
									"scores":	[-6.80101015183343]
								}, {
									"case":	183,
									"scores":	[-6.80101015183343]
								}, {
									"case":	184,
									"scores":	[-6.80101015183343]
								}, {
									"case":	185,
									"scores":	[-6.80101015183343]
								}, {
									"case":	186,
									"scores":	[-6.80101015183343]
								}, {
									"case":	187,
									"scores":	[-6.80101015183343]
								}, {
									"case":	188,
									"scores":	[-6.80101015183343]
								}, {
									"case":	189,
									"scores":	[-6.80101015183343]
								}, {
									"case":	190,
									"scores":	[-6.80101015183343]
								}, {
									"case":	191,
									"scores":	[-6.80101015183343]
								}, {
									"case":	192,
									"scores":	[-6.80101015183343]
								}, {
									"case":	193,
									"scores":	[-6.80101015183343]
								}, {
									"case":	194,
									"scores":	[-6.80101015183343]
								}, {
									"case":	195,
									"scores":	[-6.80101015183343]
								}, {
									"case":	196,
									"scores":	[-6.80101015183343]
								}, {
									"case":	197,
									"scores":	[-6.80101015183343]
								}, {
									"case":	198,
									"scores":	[-6.80101015183343]
								}, {
									"case":	199,
									"scores":	[-6.80101015183343]
								}, {
									"case":	200,
									"scores":	[-6.80101015183343]
								}, {
									"case":	201,
									"scores":	[-6.80101015183343]
								}, {
									"case":	202,
									"scores":	[-6.80101015183343]
								}, {
									"case":	203,
									"scores":	[-6.80101015183343]
								}, {
									"case":	204,
									"scores":	[-6.80101015183343]
								}, {
									"case":	205,
									"scores":	[-6.80101015183343]
								}, {
									"case":	206,
									"scores":	[-6.80101015183343]
								}, {
									"case":	207,
									"scores":	[-6.80101015183343]
								}, {
									"case":	208,
									"scores":	[-6.80101015183343]
								}, {
									"case":	209,
									"scores":	[-6.80101015183343]
								}, {
									"case":	210,
									"scores":	[-6.80101015183343]
								}, {
									"case":	211,
									"scores":	[-6.80101015183343]
								}, {
									"case":	212,
									"scores":	[-6.80101015183343]
								}, {
									"case":	213,
									"scores":	[-6.80101015183343]
								}, {
									"case":	214,
									"scores":	[-6.80101015183343]
								}, {
									"case":	215,
									"scores":	[-6.80101015183343]
								}, {
									"case":	216,
									"scores":	[-6.80101015183343]
								}, {
									"case":	217,
									"scores":	[-6.80101015183343]
								}, {
									"case":	218,
									"scores":	[-6.80101015183343]
								}, {
									"case":	219,
									"scores":	[-6.80101015183343]
								}, {
									"case":	220,
									"scores":	[-6.80101015183343]
								}, {
									"case":	221,
									"scores":	[-6.80101015183343]
								}, {
									"case":	222,
									"scores":	[-6.80101015183343]
								}, {
									"case":	223,
									"scores":	[-6.80101015183343]
								}, {
									"case":	224,
									"scores":	[-6.80101015183343]
								}, {
									"case":	225,
									"scores":	[-6.80101015183343]
								}, {
									"case":	226,
									"scores":	[-6.80101015183343]
								}, {
									"case":	227,
									"scores":	[-6.80101015183343]
								}, {
									"case":	228,
									"scores":	[-6.80101015183343]
								}, {
									"case":	229,
									"scores":	[-6.80101015183343]
								}, {
									"case":	230,
									"scores":	[-6.80101015183343]
								}, {
									"case":	231,
									"scores":	[-6.80101015183343]
								}, {
									"case":	232,
									"scores":	[-6.80101015183343]
								}, {
									"case":	233,
									"scores":	[-6.80101015183343]
								}, {
									"case":	234,
									"scores":	[-6.80101015183343]
								}, {
									"case":	235,
									"scores":	[-6.80101015183343]
								}, {
									"case":	236,
									"scores":	[-6.80101015183343]
								}, {
									"case":	237,
									"scores":	[-6.80101015183343]
								}, {
									"case":	238,
									"scores":	[-6.80101015183343]
								}, {
									"case":	239,
									"scores":	[-6.80101015183343]
								}, {
									"case":	240,
									"scores":	[-6.80101015183343]
								}, {
									"case":	241,
									"scores":	[-6.80101015183343]
								}, {
									"case":	242,
									"scores":	[-6.80101015183343]
								}, {
									"case":	243,
									"scores":	[-6.80101015183343]
								}, {
									"case":	244,
									"scores":	[-6.80101015183343]
								}, {
									"case":	245,
									"scores":	[-6.80101015183343]
								}, {
									"case":	246,
									"scores":	[-6.80101015183343]
								}, {
									"case":	247,
									"scores":	[-6.80101015183343]
								}, {
									"case":	248,
									"scores":	[-6.80101015183343]
								}, {
									"case":	249,
									"scores":	[-6.80101015183343]
								}, {
									"case":	250,
									"scores":	[-6.80101015183343]
								}, {
									"case":	251,
									"scores":	[-6.80101015183343]
								}, {
									"case":	252,
									"scores":	[-6.80101015183343]
								}, {
									"case":	253,
									"scores":	[-6.80101015183343]
								}, {
									"case":	254,
									"scores":	[-6.80101015183343]
								}, {
									"case":	255,
									"scores":	[-6.80101015183343]
								}, {
									"case":	256,
									"scores":	[-6.80101015183343]
								}, {
									"case":	257,
									"scores":	[-6.80101015183343]
								}, {
									"case":	258,
									"scores":	[-6.80101015183343]
								}, {
									"case":	259,
									"scores":	[-6.80101015183343]
								}, {
									"case":	260,
									"scores":	[-6.80101015183343]
								}, {
									"case":	261,
									"scores":	[-6.80101015183343]
								}, {
									"case":	262,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	263,
									"scores":	[-11.602226665833427, -11.293291741833428, -11.09480772583343, -12.179866741833429, -11.011792141833428, -11.202424141833429, -11.37968698183343, -11.293291741833428, -11.293291741833428, -11.202424141833429, -11.382714441833429, -11.278477681833429, -11.483923741833429, -11.483923741833429, -11.483923741833429, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.483923741833429, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.483923741833429, -11.483923741833429, -11.483923741833429, -11.483923741833429, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.293291741833428, -11.483923741833429, -11.483923741833429, -11.483923741833429, -10.83718074183343, -11.483923741833429, -11.483923741833429, -11.293291741833428, -11.293291741833428, -11.483923741833429, -11.483923741833429, -11.483923741833429, -11.293291741833428, -11.293291741833428, -11.382714441833429]
								}, {
									"case":	264,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	265,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	266,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	267,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	268,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	269,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}, {
									"case":	270,
									"scores":	[-13.865008465833428, -13.556073541833429, -13.357589525833429, -14.44264854183343, -13.274573941833429, -13.46520594183343, -13.642468781833429, -13.556073541833429, -13.556073541833429, -13.46520594183343, -13.645496241833429, -13.54125948183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.099962541833431, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.74670554183343, -13.74670554183343, -13.74670554183343, -13.556073541833429, -13.556073541833429, -13.645496241833429]
								}]
						}, {
							"switch":	95,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1077,
							"begin_column":	3,
							"end_line":	1077,
							"end_column":	36,
							"patch_codes":	["if (__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return HANDLER_FINISHED;\n", "if ((con->send->is_closed) || __is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return HANDLER_FINISHED;\n", "if ((con->send->is_closed) && !__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    return HANDLER_FINISHED;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.766035891428146, -5.025856895428146, -5.9008038954281457, -6.0354478954281454, -4.7963161954281457, -5.640221195428146, -5.9050026954281458, -5.025856895428146, -5.025856895428146, -5.640221195428146, -5.4628218954281458, -5.4980626954281462, -5.8697618954281463, -5.8697618954281463, -5.8697618954281463, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.8697618954281463, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.8697618954281463, -5.8697618954281463, -5.8697618954281463, -5.8697618954281463, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.025856895428146, -5.8697618954281463, -5.8697618954281463, -5.8697618954281463, -4.7819300254281458, -5.8697618954281463, -5.8697618954281463, -5.025856895428146, -5.025856895428146, -5.8697618954281463, -5.8697618954281463, -5.8697618954281463, -5.025856895428146, -5.025856895428146, -5.4628218954281458]
								}, {
									"case":	2,
									"scores":	[-7.9657295664281449, -6.2255505704281457, -7.1004975704281454, -7.2351415704281452, -5.9960098704281455, -6.8399148704281458, -7.1046963704281456, -6.2255505704281457, -6.2255505704281457, -6.8399148704281458, -6.6625155704281447, -6.6977563704281451, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -5.9816237004281447, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.6625155704281447]
								}, {
									"case":	3,
									"scores":	[-7.9657295664281449, -6.2255505704281457, -7.1004975704281454, -7.2351415704281452, -5.9960098704281455, -6.8399148704281458, -7.1046963704281456, -6.2255505704281457, -6.2255505704281457, -6.8399148704281458, -6.6625155704281447, -6.6977563704281451, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -5.9816237004281447, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -7.0694555704281452, -7.0694555704281452, -7.0694555704281452, -6.2255505704281457, -6.2255505704281457, -6.6625155704281447]
								}]
						}, {
							"switch":	96,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1077,
							"begin_column":	3,
							"end_line":	1077,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L1077\", 53, &(con), sizeof (con), &(con->send->is_closed), sizeof (con->send->is_closed), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->mode), sizeof (con->mode), &(con->http_status), sizeof (con->http_status), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p_d), sizeof (p_d), &(con->send->first), sizeof (con->send->first), &(con->send->last), sizeof (con->send->last), &(con->send->tempdirs), sizeof (con->send->tempdirs), &(con->send->bytes_in), sizeof (con->send->bytes_in), &(con->send->bytes_out), sizeof (con->send->bytes_out), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket)))\n    if (con->send->is_closed)\n        return HANDLER_FINISHED;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.844661420833429, -9.10448242483343, -9.97942942483343, -10.114073424833428, -8.87494172483343, -9.71884672483343, -9.98362822483343, -9.10448242483343, -9.10448242483343, -9.71884672483343, -9.54144742483343, -9.57668822483343, -9.94838742483343, -9.94838742483343, -9.94838742483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.94838742483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.94838742483343, -9.94838742483343, -9.94838742483343, -9.94838742483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.10448242483343, -9.94838742483343, -9.94838742483343, -9.94838742483343, -8.86055555483343, -9.94838742483343, -9.94838742483343, -9.10448242483343, -9.10448242483343, -9.94838742483343, -9.94838742483343, -9.94838742483343, -9.10448242483343, -9.10448242483343, -9.54144742483343]
								}]
						}]
				}, {
					"line":	1078,
					"switches":	[{
							"switch":	97,
							"types":	[[], [], [], [], [261, 262, 263, 264, 265, 266, 267, 268, 269], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], [], [], [], [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [], [], [], [], [], []],
							"begin_line":	1079,
							"begin_column":	1,
							"end_line":	1079,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return -1;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 10;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 127;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 1;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 4;\n", "if (__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.78080744451591]
								}, {
									"case":	2,
									"scores":	[-6.78080744451591]
								}, {
									"case":	3,
									"scores":	[-6.78080744451591]
								}, {
									"case":	4,
									"scores":	[-6.78080744451591]
								}, {
									"case":	5,
									"scores":	[-6.78080744451591]
								}, {
									"case":	6,
									"scores":	[-6.78080744451591]
								}, {
									"case":	7,
									"scores":	[-6.78080744451591]
								}, {
									"case":	8,
									"scores":	[-6.78080744451591]
								}, {
									"case":	9,
									"scores":	[-6.78080744451591]
								}, {
									"case":	10,
									"scores":	[-6.78080744451591]
								}, {
									"case":	11,
									"scores":	[-6.78080744451591]
								}, {
									"case":	12,
									"scores":	[-6.78080744451591]
								}, {
									"case":	13,
									"scores":	[-6.78080744451591]
								}, {
									"case":	14,
									"scores":	[-6.78080744451591]
								}, {
									"case":	15,
									"scores":	[-6.78080744451591]
								}, {
									"case":	16,
									"scores":	[-6.78080744451591]
								}, {
									"case":	17,
									"scores":	[-6.78080744451591]
								}, {
									"case":	18,
									"scores":	[-6.78080744451591]
								}, {
									"case":	19,
									"scores":	[-6.78080744451591]
								}, {
									"case":	20,
									"scores":	[-6.78080744451591]
								}, {
									"case":	21,
									"scores":	[-6.78080744451591]
								}, {
									"case":	22,
									"scores":	[-6.78080744451591]
								}, {
									"case":	23,
									"scores":	[-6.78080744451591]
								}, {
									"case":	24,
									"scores":	[-6.78080744451591]
								}, {
									"case":	25,
									"scores":	[-6.78080744451591]
								}, {
									"case":	26,
									"scores":	[-6.78080744451591]
								}, {
									"case":	27,
									"scores":	[-6.78080744451591]
								}, {
									"case":	28,
									"scores":	[-6.78080744451591]
								}, {
									"case":	29,
									"scores":	[-6.78080744451591]
								}, {
									"case":	30,
									"scores":	[-6.78080744451591]
								}, {
									"case":	31,
									"scores":	[-6.78080744451591]
								}, {
									"case":	32,
									"scores":	[-6.78080744451591]
								}, {
									"case":	33,
									"scores":	[-6.78080744451591]
								}, {
									"case":	34,
									"scores":	[-6.78080744451591]
								}, {
									"case":	35,
									"scores":	[-6.78080744451591]
								}, {
									"case":	36,
									"scores":	[-6.78080744451591]
								}, {
									"case":	37,
									"scores":	[-6.78080744451591]
								}, {
									"case":	38,
									"scores":	[-6.78080744451591]
								}, {
									"case":	39,
									"scores":	[-6.78080744451591]
								}, {
									"case":	40,
									"scores":	[-6.78080744451591]
								}, {
									"case":	41,
									"scores":	[-6.78080744451591]
								}, {
									"case":	42,
									"scores":	[-6.78080744451591]
								}, {
									"case":	43,
									"scores":	[-6.78080744451591]
								}, {
									"case":	44,
									"scores":	[-6.78080744451591]
								}, {
									"case":	45,
									"scores":	[-6.78080744451591]
								}, {
									"case":	46,
									"scores":	[-6.78080744451591]
								}, {
									"case":	47,
									"scores":	[-6.78080744451591]
								}, {
									"case":	48,
									"scores":	[-6.78080744451591]
								}, {
									"case":	49,
									"scores":	[-6.78080744451591]
								}, {
									"case":	50,
									"scores":	[-6.78080744451591]
								}, {
									"case":	51,
									"scores":	[-6.78080744451591]
								}, {
									"case":	52,
									"scores":	[-6.78080744451591]
								}, {
									"case":	53,
									"scores":	[-6.78080744451591]
								}, {
									"case":	54,
									"scores":	[-6.78080744451591]
								}, {
									"case":	55,
									"scores":	[-6.78080744451591]
								}, {
									"case":	56,
									"scores":	[-6.78080744451591]
								}, {
									"case":	57,
									"scores":	[-6.78080744451591]
								}, {
									"case":	58,
									"scores":	[-6.78080744451591]
								}, {
									"case":	59,
									"scores":	[-6.78080744451591]
								}, {
									"case":	60,
									"scores":	[-6.78080744451591]
								}, {
									"case":	61,
									"scores":	[-6.78080744451591]
								}, {
									"case":	62,
									"scores":	[-6.78080744451591]
								}, {
									"case":	63,
									"scores":	[-6.78080744451591]
								}, {
									"case":	64,
									"scores":	[-6.78080744451591]
								}, {
									"case":	65,
									"scores":	[-6.78080744451591]
								}, {
									"case":	66,
									"scores":	[-6.78080744451591]
								}, {
									"case":	67,
									"scores":	[-6.78080744451591]
								}, {
									"case":	68,
									"scores":	[-6.78080744451591]
								}, {
									"case":	69,
									"scores":	[-6.78080744451591]
								}, {
									"case":	70,
									"scores":	[-6.78080744451591]
								}, {
									"case":	71,
									"scores":	[-6.78080744451591]
								}, {
									"case":	72,
									"scores":	[-6.78080744451591]
								}, {
									"case":	73,
									"scores":	[-6.78080744451591]
								}, {
									"case":	74,
									"scores":	[-6.78080744451591]
								}, {
									"case":	75,
									"scores":	[-6.78080744451591]
								}, {
									"case":	76,
									"scores":	[-6.78080744451591]
								}, {
									"case":	77,
									"scores":	[-6.78080744451591]
								}, {
									"case":	78,
									"scores":	[-6.78080744451591]
								}, {
									"case":	79,
									"scores":	[-6.78080744451591]
								}, {
									"case":	80,
									"scores":	[-6.78080744451591]
								}, {
									"case":	81,
									"scores":	[-6.78080744451591]
								}, {
									"case":	82,
									"scores":	[-6.78080744451591]
								}, {
									"case":	83,
									"scores":	[-6.78080744451591]
								}, {
									"case":	84,
									"scores":	[-6.78080744451591]
								}, {
									"case":	85,
									"scores":	[-6.78080744451591]
								}, {
									"case":	86,
									"scores":	[-6.78080744451591]
								}, {
									"case":	87,
									"scores":	[-6.78080744451591]
								}, {
									"case":	88,
									"scores":	[-6.78080744451591]
								}, {
									"case":	89,
									"scores":	[-6.78080744451591]
								}, {
									"case":	90,
									"scores":	[-6.78080744451591]
								}, {
									"case":	91,
									"scores":	[-6.78080744451591]
								}, {
									"case":	92,
									"scores":	[-6.78080744451591]
								}, {
									"case":	93,
									"scores":	[-6.78080744451591]
								}, {
									"case":	94,
									"scores":	[-6.78080744451591]
								}, {
									"case":	95,
									"scores":	[-6.78080744451591]
								}, {
									"case":	96,
									"scores":	[-6.78080744451591]
								}, {
									"case":	97,
									"scores":	[-6.78080744451591]
								}, {
									"case":	98,
									"scores":	[-6.78080744451591]
								}, {
									"case":	99,
									"scores":	[-6.78080744451591]
								}, {
									"case":	100,
									"scores":	[-6.78080744451591]
								}, {
									"case":	101,
									"scores":	[-6.78080744451591]
								}, {
									"case":	102,
									"scores":	[-6.78080744451591]
								}, {
									"case":	103,
									"scores":	[-6.78080744451591]
								}, {
									"case":	104,
									"scores":	[-6.78080744451591]
								}, {
									"case":	105,
									"scores":	[-6.78080744451591]
								}, {
									"case":	106,
									"scores":	[-6.78080744451591]
								}, {
									"case":	107,
									"scores":	[-6.78080744451591]
								}, {
									"case":	108,
									"scores":	[-6.78080744451591]
								}, {
									"case":	109,
									"scores":	[-6.78080744451591]
								}, {
									"case":	110,
									"scores":	[-6.78080744451591]
								}, {
									"case":	111,
									"scores":	[-6.78080744451591]
								}, {
									"case":	112,
									"scores":	[-6.78080744451591]
								}, {
									"case":	113,
									"scores":	[-6.78080744451591]
								}, {
									"case":	114,
									"scores":	[-6.78080744451591]
								}, {
									"case":	115,
									"scores":	[-6.78080744451591]
								}, {
									"case":	116,
									"scores":	[-6.78080744451591]
								}, {
									"case":	117,
									"scores":	[-6.78080744451591]
								}, {
									"case":	118,
									"scores":	[-6.78080744451591]
								}, {
									"case":	119,
									"scores":	[-6.78080744451591]
								}, {
									"case":	120,
									"scores":	[-6.78080744451591]
								}, {
									"case":	121,
									"scores":	[-6.78080744451591]
								}, {
									"case":	122,
									"scores":	[-6.78080744451591]
								}, {
									"case":	123,
									"scores":	[-6.78080744451591]
								}, {
									"case":	124,
									"scores":	[-6.78080744451591]
								}, {
									"case":	125,
									"scores":	[-6.78080744451591]
								}, {
									"case":	126,
									"scores":	[-6.78080744451591]
								}, {
									"case":	127,
									"scores":	[-6.78080744451591]
								}, {
									"case":	128,
									"scores":	[-6.78080744451591]
								}, {
									"case":	129,
									"scores":	[-6.78080744451591]
								}, {
									"case":	130,
									"scores":	[-6.78080744451591]
								}, {
									"case":	131,
									"scores":	[-6.78080744451591]
								}, {
									"case":	132,
									"scores":	[-6.78080744451591]
								}, {
									"case":	133,
									"scores":	[-6.78080744451591]
								}, {
									"case":	134,
									"scores":	[-6.78080744451591]
								}, {
									"case":	135,
									"scores":	[-6.78080744451591]
								}, {
									"case":	136,
									"scores":	[-6.78080744451591]
								}, {
									"case":	137,
									"scores":	[-6.78080744451591]
								}, {
									"case":	138,
									"scores":	[-6.78080744451591]
								}, {
									"case":	139,
									"scores":	[-6.78080744451591]
								}, {
									"case":	140,
									"scores":	[-6.78080744451591]
								}, {
									"case":	141,
									"scores":	[-6.78080744451591]
								}, {
									"case":	142,
									"scores":	[-6.78080744451591]
								}, {
									"case":	143,
									"scores":	[-6.78080744451591]
								}, {
									"case":	144,
									"scores":	[-6.78080744451591]
								}, {
									"case":	145,
									"scores":	[-6.78080744451591]
								}, {
									"case":	146,
									"scores":	[-6.78080744451591]
								}, {
									"case":	147,
									"scores":	[-6.78080744451591]
								}, {
									"case":	148,
									"scores":	[-6.78080744451591]
								}, {
									"case":	149,
									"scores":	[-6.78080744451591]
								}, {
									"case":	150,
									"scores":	[-6.78080744451591]
								}, {
									"case":	151,
									"scores":	[-6.78080744451591]
								}, {
									"case":	152,
									"scores":	[-6.78080744451591]
								}, {
									"case":	153,
									"scores":	[-6.78080744451591]
								}, {
									"case":	154,
									"scores":	[-6.78080744451591]
								}, {
									"case":	155,
									"scores":	[-6.78080744451591]
								}, {
									"case":	156,
									"scores":	[-6.78080744451591]
								}, {
									"case":	157,
									"scores":	[-6.78080744451591]
								}, {
									"case":	158,
									"scores":	[-6.78080744451591]
								}, {
									"case":	159,
									"scores":	[-6.78080744451591]
								}, {
									"case":	160,
									"scores":	[-6.78080744451591]
								}, {
									"case":	161,
									"scores":	[-6.78080744451591]
								}, {
									"case":	162,
									"scores":	[-6.78080744451591]
								}, {
									"case":	163,
									"scores":	[-6.78080744451591]
								}, {
									"case":	164,
									"scores":	[-6.78080744451591]
								}, {
									"case":	165,
									"scores":	[-6.78080744451591]
								}, {
									"case":	166,
									"scores":	[-6.78080744451591]
								}, {
									"case":	167,
									"scores":	[-6.78080744451591]
								}, {
									"case":	168,
									"scores":	[-6.78080744451591]
								}, {
									"case":	169,
									"scores":	[-6.78080744451591]
								}, {
									"case":	170,
									"scores":	[-6.78080744451591]
								}, {
									"case":	171,
									"scores":	[-6.78080744451591]
								}, {
									"case":	172,
									"scores":	[-6.78080744451591]
								}, {
									"case":	173,
									"scores":	[-6.78080744451591]
								}, {
									"case":	174,
									"scores":	[-6.78080744451591]
								}, {
									"case":	175,
									"scores":	[-6.78080744451591]
								}, {
									"case":	176,
									"scores":	[-6.78080744451591]
								}, {
									"case":	177,
									"scores":	[-6.78080744451591]
								}, {
									"case":	178,
									"scores":	[-6.78080744451591]
								}, {
									"case":	179,
									"scores":	[-6.78080744451591]
								}, {
									"case":	180,
									"scores":	[-6.78080744451591]
								}, {
									"case":	181,
									"scores":	[-6.78080744451591]
								}, {
									"case":	182,
									"scores":	[-6.78080744451591]
								}, {
									"case":	183,
									"scores":	[-6.78080744451591]
								}, {
									"case":	184,
									"scores":	[-6.78080744451591]
								}, {
									"case":	185,
									"scores":	[-6.78080744451591]
								}, {
									"case":	186,
									"scores":	[-6.78080744451591]
								}, {
									"case":	187,
									"scores":	[-6.78080744451591]
								}, {
									"case":	188,
									"scores":	[-6.78080744451591]
								}, {
									"case":	189,
									"scores":	[-6.78080744451591]
								}, {
									"case":	190,
									"scores":	[-6.78080744451591]
								}, {
									"case":	191,
									"scores":	[-6.78080744451591]
								}, {
									"case":	192,
									"scores":	[-6.78080744451591]
								}, {
									"case":	193,
									"scores":	[-6.78080744451591]
								}, {
									"case":	194,
									"scores":	[-6.78080744451591]
								}, {
									"case":	195,
									"scores":	[-6.78080744451591]
								}, {
									"case":	196,
									"scores":	[-6.78080744451591]
								}, {
									"case":	197,
									"scores":	[-6.78080744451591]
								}, {
									"case":	198,
									"scores":	[-6.78080744451591]
								}, {
									"case":	199,
									"scores":	[-6.78080744451591]
								}, {
									"case":	200,
									"scores":	[-6.78080744451591]
								}, {
									"case":	201,
									"scores":	[-6.78080744451591]
								}, {
									"case":	202,
									"scores":	[-6.78080744451591]
								}, {
									"case":	203,
									"scores":	[-6.78080744451591]
								}, {
									"case":	204,
									"scores":	[-6.78080744451591]
								}, {
									"case":	205,
									"scores":	[-6.78080744451591]
								}, {
									"case":	206,
									"scores":	[-6.78080744451591]
								}, {
									"case":	207,
									"scores":	[-6.78080744451591]
								}, {
									"case":	208,
									"scores":	[-6.78080744451591]
								}, {
									"case":	209,
									"scores":	[-6.78080744451591]
								}, {
									"case":	210,
									"scores":	[-6.78080744451591]
								}, {
									"case":	211,
									"scores":	[-6.78080744451591]
								}, {
									"case":	212,
									"scores":	[-6.78080744451591]
								}, {
									"case":	213,
									"scores":	[-6.78080744451591]
								}, {
									"case":	214,
									"scores":	[-6.78080744451591]
								}, {
									"case":	215,
									"scores":	[-6.78080744451591]
								}, {
									"case":	216,
									"scores":	[-6.78080744451591]
								}, {
									"case":	217,
									"scores":	[-6.78080744451591]
								}, {
									"case":	218,
									"scores":	[-6.78080744451591]
								}, {
									"case":	219,
									"scores":	[-6.78080744451591]
								}, {
									"case":	220,
									"scores":	[-6.78080744451591]
								}, {
									"case":	221,
									"scores":	[-6.78080744451591]
								}, {
									"case":	222,
									"scores":	[-6.78080744451591]
								}, {
									"case":	223,
									"scores":	[-6.78080744451591]
								}, {
									"case":	224,
									"scores":	[-6.78080744451591]
								}, {
									"case":	225,
									"scores":	[-6.78080744451591]
								}, {
									"case":	226,
									"scores":	[-6.78080744451591]
								}, {
									"case":	227,
									"scores":	[-6.78080744451591]
								}, {
									"case":	228,
									"scores":	[-6.78080744451591]
								}, {
									"case":	229,
									"scores":	[-6.78080744451591]
								}, {
									"case":	230,
									"scores":	[-6.78080744451591]
								}, {
									"case":	231,
									"scores":	[-6.78080744451591]
								}, {
									"case":	232,
									"scores":	[-6.78080744451591]
								}, {
									"case":	233,
									"scores":	[-6.78080744451591]
								}, {
									"case":	234,
									"scores":	[-6.78080744451591]
								}, {
									"case":	235,
									"scores":	[-6.78080744451591]
								}, {
									"case":	236,
									"scores":	[-6.78080744451591]
								}, {
									"case":	237,
									"scores":	[-6.78080744451591]
								}, {
									"case":	238,
									"scores":	[-6.78080744451591]
								}, {
									"case":	239,
									"scores":	[-6.78080744451591]
								}, {
									"case":	240,
									"scores":	[-6.78080744451591]
								}, {
									"case":	241,
									"scores":	[-6.78080744451591]
								}, {
									"case":	242,
									"scores":	[-6.78080744451591]
								}, {
									"case":	243,
									"scores":	[-6.78080744451591]
								}, {
									"case":	244,
									"scores":	[-6.78080744451591]
								}, {
									"case":	245,
									"scores":	[-6.78080744451591]
								}, {
									"case":	246,
									"scores":	[-6.78080744451591]
								}, {
									"case":	247,
									"scores":	[-6.78080744451591]
								}, {
									"case":	248,
									"scores":	[-6.78080744451591]
								}, {
									"case":	249,
									"scores":	[-6.78080744451591]
								}, {
									"case":	250,
									"scores":	[-6.78080744451591]
								}, {
									"case":	251,
									"scores":	[-6.78080744451591]
								}, {
									"case":	252,
									"scores":	[-6.78080744451591]
								}, {
									"case":	253,
									"scores":	[-6.78080744451591]
								}, {
									"case":	254,
									"scores":	[-6.78080744451591]
								}, {
									"case":	255,
									"scores":	[-6.78080744451591]
								}, {
									"case":	256,
									"scores":	[-6.78080744451591]
								}, {
									"case":	257,
									"scores":	[-6.78080744451591]
								}, {
									"case":	258,
									"scores":	[-6.78080744451591]
								}, {
									"case":	259,
									"scores":	[-6.78080744451591]
								}, {
									"case":	260,
									"scores":	[-6.78080744451591]
								}, {
									"case":	261,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	262,
									"scores":	[-11.642022177515909, -10.545784353515909, -10.73641635351591, -11.06225019351591, -10.73641635351591, -10.81246989351591]
								}, {
									"case":	263,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	264,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	265,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	266,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	267,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	268,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}, {
									"case":	269,
									"scores":	[-13.904803977515909, -12.80856615351591, -12.999198153515909, -13.325031993515911, -12.999198153515909, -13.075251693515909]
								}]
						}, {
							"switch":	98,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1079,
							"begin_column":	3,
							"end_line":	1079,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L1079\", 6, &(con), sizeof (con), &(status), sizeof (status), &(sess), sizeof (sess), &(srv), sizeof (srv), &(p), sizeof (p), &(p_d), sizeof (p_d)))\n    return HANDLER_GO_ON;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.70679722351591, -8.76811952751591, -9.61202452751591, -9.96710422751591, -9.61202452751591, -9.46986602751591]
								}]
						}]
				}, {
					"line":	1107,
					"switches":	[{
							"switch":	99,
							"types":	[[], [], [], [], [263, 264, 265, 266, 267, 268, 269, 270, 271], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [], [], []],
							"begin_line":	1108,
							"begin_column":	1,
							"end_line":	1108,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv, 0, sizeof (*(srv)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return -1;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 0;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 10;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 127;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 1;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 4;\n", "if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	2,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	3,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	4,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	5,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	6,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	7,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	8,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	9,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	10,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	11,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	12,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	13,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	14,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	15,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	16,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	17,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	18,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	19,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	20,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	21,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	22,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	23,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	24,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	25,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	26,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	27,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	28,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	29,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	30,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	31,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	32,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	33,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	34,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	35,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	36,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	37,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	38,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	39,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	40,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	41,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	42,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	43,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	44,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	45,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	46,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	47,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	48,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	49,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	50,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	51,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	52,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	53,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	54,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	55,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	56,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	57,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	58,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	59,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	60,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	61,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	62,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	63,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	64,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	65,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	66,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	67,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	68,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	69,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	70,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	71,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	72,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	73,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	74,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	75,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	76,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	77,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	78,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	79,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	80,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	81,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	82,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	83,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	84,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	85,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	86,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	87,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	88,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	89,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	90,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	91,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	92,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	93,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	94,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	95,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	96,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	97,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	98,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	99,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	100,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	101,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	102,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	103,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	104,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	105,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	106,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	107,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	108,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	109,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	110,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	111,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	112,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	113,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	114,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	115,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	116,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	117,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	118,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	119,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	120,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	121,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	122,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	123,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	124,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	125,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	126,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	127,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	128,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	129,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	130,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	131,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	132,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	133,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	134,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	135,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	136,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	137,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	138,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	139,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	140,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	141,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	142,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	143,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	144,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	145,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	146,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	147,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	148,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	149,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	150,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	151,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	152,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	153,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	154,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	155,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	156,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	157,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	158,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	159,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	160,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	161,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	162,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	163,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	164,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	165,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	166,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	167,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	168,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	169,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	170,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	171,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	172,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	173,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	174,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	175,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	176,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	177,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	178,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	179,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	180,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	181,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	182,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	183,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	184,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	185,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	186,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	187,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	188,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	189,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	190,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	191,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	192,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	193,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	194,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	195,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	196,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	197,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	198,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	199,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	200,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	201,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	202,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	203,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	204,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	205,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	206,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	207,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	208,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	209,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	210,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	211,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	212,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	213,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	214,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	215,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	216,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	217,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	218,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	219,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	220,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	221,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	222,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	223,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	224,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	225,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	226,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	227,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	228,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	229,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	230,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	231,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	232,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	233,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	234,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	235,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	236,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	237,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	238,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	239,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	240,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	241,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	242,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	243,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	244,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	245,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	246,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	247,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	248,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	249,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	250,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	251,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	252,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	253,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	254,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	255,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	256,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	257,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	258,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	259,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	260,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	261,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	262,
									"scores":	[-6.3363478835304825]
								}, {
									"case":	263,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	264,
									"scores":	[-9.86495708353048, -9.2071600175304837, -9.35046240753048, -10.284343783530481, -10.635840777530483, -10.131642623530482]
								}, {
									"case":	265,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	266,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	267,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	268,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	269,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	270,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}, {
									"case":	271,
									"scores":	[-12.127738883530483, -11.469941817530483, -11.613244207530483, -12.547125583530482, -12.898622577530483, -12.394424423530483]
								}]
						}, {
							"switch":	100,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1108,
							"begin_column":	3,
							"end_line":	1116,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d))) {\n} else {\n    log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\");\n    con->mode = DIRECT;\n    con->http_status = 500;\n}\n", "if (((((status) & 127) == 0)) || __is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d))) {\n} else {\n    log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\");\n    con->mode = DIRECT;\n    con->http_status = 500;\n}\n", "if (((((status) & 127) == 0)) && !__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d))) {\n} else {\n    log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\");\n    con->mode = DIRECT;\n    con->http_status = 500;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.02474869813048, -8.9658621021304832, -9.2724866631304828, -9.1231766291304837, -9.51912396313048, -8.72649519813048]
								}, {
									"case":	2,
									"scores":	[-6.6214901615304829, -7.5626035655304822, -7.8692281265304826, -7.7199180925304827, -8.1158654265304833, -7.3232366615304825]
								}, {
									"case":	3,
									"scores":	[-6.6214901615304829, -7.5626035655304822, -7.8692281265304826, -7.7199180925304827, -8.1158654265304833, -7.3232366615304825]
								}]
						}, {
							"switch":	101,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1108,
							"begin_column":	3,
							"end_line":	1116,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)))\n    if ((((status) & 127) == 0)) {\n    } else {\n        log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\");\n        con->mode = DIRECT;\n        con->http_status = 500;\n    }\n", "if (!__is_neg(\"\", \"L1108\", 6, &(status), sizeof (status), &(con), sizeof (con), &(srv), sizeof (srv), &(p), sizeof (p), &(sess), sizeof (sess), &(p_d), sizeof (p_d)) && ((((status) & 127) == 0))) {\n} else {\n    log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\");\n    con->mode = DIRECT;\n    con->http_status = 500;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9376601835304825, -8.87877358753048, -9.18539814853048, -9.03608811453048, -9.00993942153048, -8.63940668353048]
								}, {
									"case":	2,
									"scores":	[-7.5208506835304823, -8.46196408753048, -8.76858864853048, -8.6192786145304829, -9.01522594853048, -8.22259718353048]
								}]
						}]
				}, {
					"line":	1117,
					"switches":	[{
							"switch":	102,
							"types":	[[], [], [], [], [262, 263, 264, 265, 266, 267, 268, 269, 270], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], [], [], [], [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [], [], []],
							"begin_line":	1118,
							"begin_column":	1,
							"end_line":	1118,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return -1;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 0;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 10;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 127;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 4;\n", "if (__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.316145176212963]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}, {
									"case":	28,
									"scores":	[-6.316145176212963]
								}, {
									"case":	29,
									"scores":	[-6.316145176212963]
								}, {
									"case":	30,
									"scores":	[-6.316145176212963]
								}, {
									"case":	31,
									"scores":	[-6.316145176212963]
								}, {
									"case":	32,
									"scores":	[-6.316145176212963]
								}, {
									"case":	33,
									"scores":	[-6.316145176212963]
								}, {
									"case":	34,
									"scores":	[-6.316145176212963]
								}, {
									"case":	35,
									"scores":	[-6.316145176212963]
								}, {
									"case":	36,
									"scores":	[-6.316145176212963]
								}, {
									"case":	37,
									"scores":	[-6.316145176212963]
								}, {
									"case":	38,
									"scores":	[-6.316145176212963]
								}, {
									"case":	39,
									"scores":	[-6.316145176212963]
								}, {
									"case":	40,
									"scores":	[-6.316145176212963]
								}, {
									"case":	41,
									"scores":	[-6.316145176212963]
								}, {
									"case":	42,
									"scores":	[-6.316145176212963]
								}, {
									"case":	43,
									"scores":	[-6.316145176212963]
								}, {
									"case":	44,
									"scores":	[-6.316145176212963]
								}, {
									"case":	45,
									"scores":	[-6.316145176212963]
								}, {
									"case":	46,
									"scores":	[-6.316145176212963]
								}, {
									"case":	47,
									"scores":	[-6.316145176212963]
								}, {
									"case":	48,
									"scores":	[-6.316145176212963]
								}, {
									"case":	49,
									"scores":	[-6.316145176212963]
								}, {
									"case":	50,
									"scores":	[-6.316145176212963]
								}, {
									"case":	51,
									"scores":	[-6.316145176212963]
								}, {
									"case":	52,
									"scores":	[-6.316145176212963]
								}, {
									"case":	53,
									"scores":	[-6.316145176212963]
								}, {
									"case":	54,
									"scores":	[-6.316145176212963]
								}, {
									"case":	55,
									"scores":	[-6.316145176212963]
								}, {
									"case":	56,
									"scores":	[-6.316145176212963]
								}, {
									"case":	57,
									"scores":	[-6.316145176212963]
								}, {
									"case":	58,
									"scores":	[-6.316145176212963]
								}, {
									"case":	59,
									"scores":	[-6.316145176212963]
								}, {
									"case":	60,
									"scores":	[-6.316145176212963]
								}, {
									"case":	61,
									"scores":	[-6.316145176212963]
								}, {
									"case":	62,
									"scores":	[-6.316145176212963]
								}, {
									"case":	63,
									"scores":	[-6.316145176212963]
								}, {
									"case":	64,
									"scores":	[-6.316145176212963]
								}, {
									"case":	65,
									"scores":	[-6.316145176212963]
								}, {
									"case":	66,
									"scores":	[-6.316145176212963]
								}, {
									"case":	67,
									"scores":	[-6.316145176212963]
								}, {
									"case":	68,
									"scores":	[-6.316145176212963]
								}, {
									"case":	69,
									"scores":	[-6.316145176212963]
								}, {
									"case":	70,
									"scores":	[-6.316145176212963]
								}, {
									"case":	71,
									"scores":	[-6.316145176212963]
								}, {
									"case":	72,
									"scores":	[-6.316145176212963]
								}, {
									"case":	73,
									"scores":	[-6.316145176212963]
								}, {
									"case":	74,
									"scores":	[-6.316145176212963]
								}, {
									"case":	75,
									"scores":	[-6.316145176212963]
								}, {
									"case":	76,
									"scores":	[-6.316145176212963]
								}, {
									"case":	77,
									"scores":	[-6.316145176212963]
								}, {
									"case":	78,
									"scores":	[-6.316145176212963]
								}, {
									"case":	79,
									"scores":	[-6.316145176212963]
								}, {
									"case":	80,
									"scores":	[-6.316145176212963]
								}, {
									"case":	81,
									"scores":	[-6.316145176212963]
								}, {
									"case":	82,
									"scores":	[-6.316145176212963]
								}, {
									"case":	83,
									"scores":	[-6.316145176212963]
								}, {
									"case":	84,
									"scores":	[-6.316145176212963]
								}, {
									"case":	85,
									"scores":	[-6.316145176212963]
								}, {
									"case":	86,
									"scores":	[-6.316145176212963]
								}, {
									"case":	87,
									"scores":	[-6.316145176212963]
								}, {
									"case":	88,
									"scores":	[-6.316145176212963]
								}, {
									"case":	89,
									"scores":	[-6.316145176212963]
								}, {
									"case":	90,
									"scores":	[-6.316145176212963]
								}, {
									"case":	91,
									"scores":	[-6.316145176212963]
								}, {
									"case":	92,
									"scores":	[-6.316145176212963]
								}, {
									"case":	93,
									"scores":	[-6.316145176212963]
								}, {
									"case":	94,
									"scores":	[-6.316145176212963]
								}, {
									"case":	95,
									"scores":	[-6.316145176212963]
								}, {
									"case":	96,
									"scores":	[-6.316145176212963]
								}, {
									"case":	97,
									"scores":	[-6.316145176212963]
								}, {
									"case":	98,
									"scores":	[-6.316145176212963]
								}, {
									"case":	99,
									"scores":	[-6.316145176212963]
								}, {
									"case":	100,
									"scores":	[-6.316145176212963]
								}, {
									"case":	101,
									"scores":	[-6.316145176212963]
								}, {
									"case":	102,
									"scores":	[-6.316145176212963]
								}, {
									"case":	103,
									"scores":	[-6.316145176212963]
								}, {
									"case":	104,
									"scores":	[-6.316145176212963]
								}, {
									"case":	105,
									"scores":	[-6.316145176212963]
								}, {
									"case":	106,
									"scores":	[-6.316145176212963]
								}, {
									"case":	107,
									"scores":	[-6.316145176212963]
								}, {
									"case":	108,
									"scores":	[-6.316145176212963]
								}, {
									"case":	109,
									"scores":	[-6.316145176212963]
								}, {
									"case":	110,
									"scores":	[-6.316145176212963]
								}, {
									"case":	111,
									"scores":	[-6.316145176212963]
								}, {
									"case":	112,
									"scores":	[-6.316145176212963]
								}, {
									"case":	113,
									"scores":	[-6.316145176212963]
								}, {
									"case":	114,
									"scores":	[-6.316145176212963]
								}, {
									"case":	115,
									"scores":	[-6.316145176212963]
								}, {
									"case":	116,
									"scores":	[-6.316145176212963]
								}, {
									"case":	117,
									"scores":	[-6.316145176212963]
								}, {
									"case":	118,
									"scores":	[-6.316145176212963]
								}, {
									"case":	119,
									"scores":	[-6.316145176212963]
								}, {
									"case":	120,
									"scores":	[-6.316145176212963]
								}, {
									"case":	121,
									"scores":	[-6.316145176212963]
								}, {
									"case":	122,
									"scores":	[-6.316145176212963]
								}, {
									"case":	123,
									"scores":	[-6.316145176212963]
								}, {
									"case":	124,
									"scores":	[-6.316145176212963]
								}, {
									"case":	125,
									"scores":	[-6.316145176212963]
								}, {
									"case":	126,
									"scores":	[-6.316145176212963]
								}, {
									"case":	127,
									"scores":	[-6.316145176212963]
								}, {
									"case":	128,
									"scores":	[-6.316145176212963]
								}, {
									"case":	129,
									"scores":	[-6.316145176212963]
								}, {
									"case":	130,
									"scores":	[-6.316145176212963]
								}, {
									"case":	131,
									"scores":	[-6.316145176212963]
								}, {
									"case":	132,
									"scores":	[-6.316145176212963]
								}, {
									"case":	133,
									"scores":	[-6.316145176212963]
								}, {
									"case":	134,
									"scores":	[-6.316145176212963]
								}, {
									"case":	135,
									"scores":	[-6.316145176212963]
								}, {
									"case":	136,
									"scores":	[-6.316145176212963]
								}, {
									"case":	137,
									"scores":	[-6.316145176212963]
								}, {
									"case":	138,
									"scores":	[-6.316145176212963]
								}, {
									"case":	139,
									"scores":	[-6.316145176212963]
								}, {
									"case":	140,
									"scores":	[-6.316145176212963]
								}, {
									"case":	141,
									"scores":	[-6.316145176212963]
								}, {
									"case":	142,
									"scores":	[-6.316145176212963]
								}, {
									"case":	143,
									"scores":	[-6.316145176212963]
								}, {
									"case":	144,
									"scores":	[-6.316145176212963]
								}, {
									"case":	145,
									"scores":	[-6.316145176212963]
								}, {
									"case":	146,
									"scores":	[-6.316145176212963]
								}, {
									"case":	147,
									"scores":	[-6.316145176212963]
								}, {
									"case":	148,
									"scores":	[-6.316145176212963]
								}, {
									"case":	149,
									"scores":	[-6.316145176212963]
								}, {
									"case":	150,
									"scores":	[-6.316145176212963]
								}, {
									"case":	151,
									"scores":	[-6.316145176212963]
								}, {
									"case":	152,
									"scores":	[-6.316145176212963]
								}, {
									"case":	153,
									"scores":	[-6.316145176212963]
								}, {
									"case":	154,
									"scores":	[-6.316145176212963]
								}, {
									"case":	155,
									"scores":	[-6.316145176212963]
								}, {
									"case":	156,
									"scores":	[-6.316145176212963]
								}, {
									"case":	157,
									"scores":	[-6.316145176212963]
								}, {
									"case":	158,
									"scores":	[-6.316145176212963]
								}, {
									"case":	159,
									"scores":	[-6.316145176212963]
								}, {
									"case":	160,
									"scores":	[-6.316145176212963]
								}, {
									"case":	161,
									"scores":	[-6.316145176212963]
								}, {
									"case":	162,
									"scores":	[-6.316145176212963]
								}, {
									"case":	163,
									"scores":	[-6.316145176212963]
								}, {
									"case":	164,
									"scores":	[-6.316145176212963]
								}, {
									"case":	165,
									"scores":	[-6.316145176212963]
								}, {
									"case":	166,
									"scores":	[-6.316145176212963]
								}, {
									"case":	167,
									"scores":	[-6.316145176212963]
								}, {
									"case":	168,
									"scores":	[-6.316145176212963]
								}, {
									"case":	169,
									"scores":	[-6.316145176212963]
								}, {
									"case":	170,
									"scores":	[-6.316145176212963]
								}, {
									"case":	171,
									"scores":	[-6.316145176212963]
								}, {
									"case":	172,
									"scores":	[-6.316145176212963]
								}, {
									"case":	173,
									"scores":	[-6.316145176212963]
								}, {
									"case":	174,
									"scores":	[-6.316145176212963]
								}, {
									"case":	175,
									"scores":	[-6.316145176212963]
								}, {
									"case":	176,
									"scores":	[-6.316145176212963]
								}, {
									"case":	177,
									"scores":	[-6.316145176212963]
								}, {
									"case":	178,
									"scores":	[-6.316145176212963]
								}, {
									"case":	179,
									"scores":	[-6.316145176212963]
								}, {
									"case":	180,
									"scores":	[-6.316145176212963]
								}, {
									"case":	181,
									"scores":	[-6.316145176212963]
								}, {
									"case":	182,
									"scores":	[-6.316145176212963]
								}, {
									"case":	183,
									"scores":	[-6.316145176212963]
								}, {
									"case":	184,
									"scores":	[-6.316145176212963]
								}, {
									"case":	185,
									"scores":	[-6.316145176212963]
								}, {
									"case":	186,
									"scores":	[-6.316145176212963]
								}, {
									"case":	187,
									"scores":	[-6.316145176212963]
								}, {
									"case":	188,
									"scores":	[-6.316145176212963]
								}, {
									"case":	189,
									"scores":	[-6.316145176212963]
								}, {
									"case":	190,
									"scores":	[-6.316145176212963]
								}, {
									"case":	191,
									"scores":	[-6.316145176212963]
								}, {
									"case":	192,
									"scores":	[-6.316145176212963]
								}, {
									"case":	193,
									"scores":	[-6.316145176212963]
								}, {
									"case":	194,
									"scores":	[-6.316145176212963]
								}, {
									"case":	195,
									"scores":	[-6.316145176212963]
								}, {
									"case":	196,
									"scores":	[-6.316145176212963]
								}, {
									"case":	197,
									"scores":	[-6.316145176212963]
								}, {
									"case":	198,
									"scores":	[-6.316145176212963]
								}, {
									"case":	199,
									"scores":	[-6.316145176212963]
								}, {
									"case":	200,
									"scores":	[-6.316145176212963]
								}, {
									"case":	201,
									"scores":	[-6.316145176212963]
								}, {
									"case":	202,
									"scores":	[-6.316145176212963]
								}, {
									"case":	203,
									"scores":	[-6.316145176212963]
								}, {
									"case":	204,
									"scores":	[-6.316145176212963]
								}, {
									"case":	205,
									"scores":	[-6.316145176212963]
								}, {
									"case":	206,
									"scores":	[-6.316145176212963]
								}, {
									"case":	207,
									"scores":	[-6.316145176212963]
								}, {
									"case":	208,
									"scores":	[-6.316145176212963]
								}, {
									"case":	209,
									"scores":	[-6.316145176212963]
								}, {
									"case":	210,
									"scores":	[-6.316145176212963]
								}, {
									"case":	211,
									"scores":	[-6.316145176212963]
								}, {
									"case":	212,
									"scores":	[-6.316145176212963]
								}, {
									"case":	213,
									"scores":	[-6.316145176212963]
								}, {
									"case":	214,
									"scores":	[-6.316145176212963]
								}, {
									"case":	215,
									"scores":	[-6.316145176212963]
								}, {
									"case":	216,
									"scores":	[-6.316145176212963]
								}, {
									"case":	217,
									"scores":	[-6.316145176212963]
								}, {
									"case":	218,
									"scores":	[-6.316145176212963]
								}, {
									"case":	219,
									"scores":	[-6.316145176212963]
								}, {
									"case":	220,
									"scores":	[-6.316145176212963]
								}, {
									"case":	221,
									"scores":	[-6.316145176212963]
								}, {
									"case":	222,
									"scores":	[-6.316145176212963]
								}, {
									"case":	223,
									"scores":	[-6.316145176212963]
								}, {
									"case":	224,
									"scores":	[-6.316145176212963]
								}, {
									"case":	225,
									"scores":	[-6.316145176212963]
								}, {
									"case":	226,
									"scores":	[-6.316145176212963]
								}, {
									"case":	227,
									"scores":	[-6.316145176212963]
								}, {
									"case":	228,
									"scores":	[-6.316145176212963]
								}, {
									"case":	229,
									"scores":	[-6.316145176212963]
								}, {
									"case":	230,
									"scores":	[-6.316145176212963]
								}, {
									"case":	231,
									"scores":	[-6.316145176212963]
								}, {
									"case":	232,
									"scores":	[-6.316145176212963]
								}, {
									"case":	233,
									"scores":	[-6.316145176212963]
								}, {
									"case":	234,
									"scores":	[-6.316145176212963]
								}, {
									"case":	235,
									"scores":	[-6.316145176212963]
								}, {
									"case":	236,
									"scores":	[-6.316145176212963]
								}, {
									"case":	237,
									"scores":	[-6.316145176212963]
								}, {
									"case":	238,
									"scores":	[-6.316145176212963]
								}, {
									"case":	239,
									"scores":	[-6.316145176212963]
								}, {
									"case":	240,
									"scores":	[-6.316145176212963]
								}, {
									"case":	241,
									"scores":	[-6.316145176212963]
								}, {
									"case":	242,
									"scores":	[-6.316145176212963]
								}, {
									"case":	243,
									"scores":	[-6.316145176212963]
								}, {
									"case":	244,
									"scores":	[-6.316145176212963]
								}, {
									"case":	245,
									"scores":	[-6.316145176212963]
								}, {
									"case":	246,
									"scores":	[-6.316145176212963]
								}, {
									"case":	247,
									"scores":	[-6.316145176212963]
								}, {
									"case":	248,
									"scores":	[-6.316145176212963]
								}, {
									"case":	249,
									"scores":	[-6.316145176212963]
								}, {
									"case":	250,
									"scores":	[-6.316145176212963]
								}, {
									"case":	251,
									"scores":	[-6.316145176212963]
								}, {
									"case":	252,
									"scores":	[-6.316145176212963]
								}, {
									"case":	253,
									"scores":	[-6.316145176212963]
								}, {
									"case":	254,
									"scores":	[-6.316145176212963]
								}, {
									"case":	255,
									"scores":	[-6.316145176212963]
								}, {
									"case":	256,
									"scores":	[-6.316145176212963]
								}, {
									"case":	257,
									"scores":	[-6.316145176212963]
								}, {
									"case":	258,
									"scores":	[-6.316145176212963]
								}, {
									"case":	259,
									"scores":	[-6.316145176212963]
								}, {
									"case":	260,
									"scores":	[-6.316145176212963]
								}, {
									"case":	261,
									"scores":	[-6.316145176212963]
								}, {
									"case":	262,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	263,
									"scores":	[-7.9680176602129631, -9.47318339891296, -10.109484359912962, -9.5039638662129633, -9.4799108062129633, -9.0738932662129628, -8.88326126621296, -9.149946806212963, -9.3553928662129628, -9.3553928662129628, -9.3553928662129628, -9.16476086621296, -9.3553928662129628]
								}, {
									"case":	264,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	265,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	266,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	267,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	268,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	269,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}, {
									"case":	270,
									"scores":	[-10.230799460212964, -11.735965198912963, -12.372266159912963, -11.766745666212962, -11.742692606212962, -11.336675066212964, -11.146043066212963, -11.412728606212964, -11.618174666212964, -11.618174666212964, -11.618174666212964, -11.427542666212963, -11.618174666212964]
								}]
						}, {
							"switch":	103,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1118,
							"begin_column":	3,
							"end_line":	1118,
							"end_column":	15,
							"patch_codes":	["if (!__is_neg(\"\", \"L1118\", 13, &(sess), sizeof (sess), &(sess->pid), sizeof (sess->pid), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    sess->pid = 0;\n", "{\n}\n", "sess->pid = (-1)", "sess->pid = (0 * status)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (con != 0)", "sess->pid = (con == 0)", "sess->pid = (p != 0)", "sess->pid = (p == 0)", "sess->pid = (p_d != 0)", "sess->pid = (p_d == 0)", "sess->pid = (sess != 0)", "sess->pid = (sess == 0)", "sess->pid = (srv != 0)", "sess->pid = (srv == 0)", "sess->pid = (status != 0)", "sess->pid = (status + 0)", "sess->pid = (status - 0)", "sess->pid = (status == 0)", "sess->pid = (status)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7381495042129629, -8.87210393921296, -8.7974546509129627, -8.23333506621296, -9.09754419721296, -8.5782397662129632, -7.7343347662129629, -8.43608126621296, -8.8077804662129644, -8.8077804662129644, -8.8077804662129644, -7.9638754662129632, -8.8077804662129644]
								}, {
									"case":	2,
									"scores":	[-6.316145176212963]
								}, {
									"case":	3,
									"scores":	[-6.316145176212963]
								}, {
									"case":	4,
									"scores":	[-6.316145176212963]
								}, {
									"case":	5,
									"scores":	[-6.316145176212963]
								}, {
									"case":	6,
									"scores":	[-6.316145176212963]
								}, {
									"case":	7,
									"scores":	[-6.316145176212963]
								}, {
									"case":	8,
									"scores":	[-6.316145176212963]
								}, {
									"case":	9,
									"scores":	[-6.316145176212963]
								}, {
									"case":	10,
									"scores":	[-6.316145176212963]
								}, {
									"case":	11,
									"scores":	[-6.316145176212963]
								}, {
									"case":	12,
									"scores":	[-6.316145176212963]
								}, {
									"case":	13,
									"scores":	[-6.316145176212963]
								}, {
									"case":	14,
									"scores":	[-6.316145176212963]
								}, {
									"case":	15,
									"scores":	[-6.316145176212963]
								}, {
									"case":	16,
									"scores":	[-6.316145176212963]
								}, {
									"case":	17,
									"scores":	[-6.316145176212963]
								}, {
									"case":	18,
									"scores":	[-6.316145176212963]
								}, {
									"case":	19,
									"scores":	[-6.316145176212963]
								}, {
									"case":	20,
									"scores":	[-6.316145176212963]
								}, {
									"case":	21,
									"scores":	[-6.316145176212963]
								}, {
									"case":	22,
									"scores":	[-6.316145176212963]
								}, {
									"case":	23,
									"scores":	[-6.316145176212963]
								}, {
									"case":	24,
									"scores":	[-6.316145176212963]
								}, {
									"case":	25,
									"scores":	[-6.316145176212963]
								}, {
									"case":	26,
									"scores":	[-6.316145176212963]
								}, {
									"case":	27,
									"scores":	[-6.316145176212963]
								}]
						}]
				}, {
					"line":	1119,
					"switches":	[{
							"switch":	104,
							"types":	[[], [], [], [], [263, 264, 265, 266, 267, 268, 269, 270, 271], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [], [], []],
							"begin_line":	1120,
							"begin_column":	1,
							"end_line":	1120,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv, 0, sizeof (*(srv)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return -1;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 0;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 10;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 127;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 4;\n", "if (__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	112,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	113,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	114,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	115,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	116,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	117,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	118,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	119,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	120,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	121,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	122,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	123,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	124,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	125,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	126,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	127,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	128,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	129,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	130,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	131,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	132,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	133,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	134,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	135,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	136,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	137,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	138,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	139,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	140,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	141,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	142,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	143,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	144,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	145,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	146,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	147,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	148,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	149,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	150,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	151,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	152,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	153,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	154,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	155,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	156,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	157,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	158,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	159,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	160,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	161,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	162,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	163,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	164,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	165,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	166,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	167,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	168,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	169,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	170,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	171,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	172,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	173,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	174,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	175,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	176,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	177,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	178,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	179,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	180,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	181,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	182,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	183,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	184,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	185,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	186,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	187,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	188,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	189,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	190,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	191,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	192,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	193,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	194,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	195,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	196,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	197,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	198,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	199,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	200,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	201,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	202,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	203,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	204,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	205,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	206,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	207,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	208,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	209,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	210,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	211,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	212,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	213,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	214,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	215,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	216,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	217,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	218,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	219,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	220,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	221,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	222,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	223,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	224,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	225,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	226,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	227,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	228,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	229,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	230,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	231,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	232,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	233,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	234,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	235,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	236,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	237,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	238,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	239,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	240,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	241,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	242,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	243,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	244,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	245,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	246,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	247,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	248,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	249,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	250,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	251,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	252,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	253,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	254,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	255,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	256,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	257,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	258,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	259,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	260,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	261,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	262,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	263,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	264,
									"scores":	[-9.8513341725954433, -9.6038710828954432, -9.1709743788954441, -9.1709743788954441, -8.5800356668954443, -10.294569118895442, -9.8885515788954432, -9.6979195788954442, -9.9646051188954434, -10.170051178895443, -10.068841878895444, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -9.7139401788954434, -10.170051178895443, -10.170051178895443, -10.170051178895443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.068841878895444, -9.9794191788954443, -9.9794191788954443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -9.9794191788954443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -9.9794191788954443, -9.9794191788954443, -10.170051178895443, -10.170051178895443, -10.170051178895443, -9.9794191788954443, -10.170051178895443]
								}, {
									"case":	265,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	266,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	267,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	268,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	269,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	270,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}, {
									"case":	271,
									"scores":	[-12.114115972595444, -11.866652882895444, -11.433756178895443, -11.433756178895443, -10.842817466895443, -12.557350918895443, -12.151333378895444, -11.960701378895443, -12.227386918895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -11.976721978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.331623678895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.242200978895443, -12.432832978895444, -12.432832978895444, -12.432832978895444, -12.242200978895443, -12.432832978895444]
								}]
						}, {
							"switch":	105,
							"types":	[[], [], [1], [], [], [], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [12]],
							"begin_line":	1120,
							"begin_column":	3,
							"end_line":	1120,
							"end_column":	40,
							"patch_codes":	["if (!__is_neg(\"\", \"L1120\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    fdevent_event_del(srv->ev, sess->sock);\n", "fdevent_event_add(srv->ev, sess->sock, -1)", "fdevent_event_add(srv->ev, sess->sock, 0)", "fdevent_event_add(srv->ev, sess->sock, 1)", "fdevent_event_add(srv->ev, sess->sock, 10)", "fdevent_event_add(srv->ev, sess->sock, 1090)", "fdevent_event_add(srv->ev, sess->sock, 1111)", "fdevent_event_add(srv->ev, sess->sock, 127)", "fdevent_event_add(srv->ev, sess->sock, 4)", "fdevent_event_add(srv->ev, sess->sock, 500)", "fdevent_event_add(srv->ev, sess->sock, status)", "{\n}\n", "VALGRIND_PRINTF(srv->ev, sess->sock)", "VALGRIND_PRINTF_BACKTRACE(srv->ev, sess->sock)", "__builtin_va_start(srv->ev, sess->sock)", "fdevent_fcntl_set(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "g_build_filename(srv->ev, sess->sock)", "g_markup_printf_escaped(srv->ev, sess->sock)", "g_print(srv->ev, sess->sock)", "g_printerr(srv->ev, sess->sock)", "g_relation_exists(srv->ev, sess->sock)", "g_relation_insert(srv->ev, sess->sock)", "g_strconcat(srv->ev, sess->sock)", "g_strdup_printf(srv->ev, sess->sock)", "g_strjoin(srv->ev, sess->sock)", "g_test_message(srv->ev, sess->sock)", "g_variant_new(srv->ev, sess->sock)", "g_variant_new_parsed(srv->ev, sess->sock)", "g_variant_new_printf(srv->ev, sess->sock)", "log_trace(srv->ev, sess->sock)", "printf(srv->ev, sess->sock)", "fdevent_event_del((&con)->ev, sess->sock)", "fdevent_event_del((&p)->ev, sess->sock)", "fdevent_event_del((&p_d)->ev, sess->sock)", "fdevent_event_del((&sess)->ev, sess->sock)", "fdevent_event_del((&srv)->ev, sess->sock)", "fdevent_event_del((&status)->ev, sess->sock)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (&con)->sock)", "fdevent_event_del(srv->ev, (&p)->sock)", "fdevent_event_del(srv->ev, (&p_d)->sock)", "fdevent_event_del(srv->ev, (&sess)->sock)", "fdevent_event_del(srv->ev, (&srv)->sock)", "fdevent_event_del(srv->ev, (&status)->sock)", "fdevent_event_del(srv->ev, (sess)->sock)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.696487943595443, -8.3113954728954429, -8.1323683588954427, -8.1323683588954427, -8.4817827058954443, -8.9965774898954436, -8.4772730588954435, -7.633368058895444, -8.3351145588954445, -8.7068137588954428, -8.2998737588954441, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.4628868888954436, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.2998737588954441, -7.8629087588954434, -7.8629087588954434, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -7.8629087588954434, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -7.8629087588954434, -7.8629087588954434, -8.7068137588954428, -8.7068137588954428, -8.7068137588954428, -7.8629087588954434, -8.7068137588954428]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}]
						}]
				}, {
					"line":	1120,
					"switches":	[{
							"switch":	106,
							"types":	[[], [], [], [], [263, 264, 265, 266, 267, 268, 269, 270, 271], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [], [], []],
							"begin_line":	1121,
							"begin_column":	1,
							"end_line":	1121,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv, 0, sizeof (*(srv)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return -1;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 0;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 10;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 127;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 4;\n", "if (__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.275739761577924]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}, {
									"case":	47,
									"scores":	[-6.275739761577924]
								}, {
									"case":	48,
									"scores":	[-6.275739761577924]
								}, {
									"case":	49,
									"scores":	[-6.275739761577924]
								}, {
									"case":	50,
									"scores":	[-6.275739761577924]
								}, {
									"case":	51,
									"scores":	[-6.275739761577924]
								}, {
									"case":	52,
									"scores":	[-6.275739761577924]
								}, {
									"case":	53,
									"scores":	[-6.275739761577924]
								}, {
									"case":	54,
									"scores":	[-6.275739761577924]
								}, {
									"case":	55,
									"scores":	[-6.275739761577924]
								}, {
									"case":	56,
									"scores":	[-6.275739761577924]
								}, {
									"case":	57,
									"scores":	[-6.275739761577924]
								}, {
									"case":	58,
									"scores":	[-6.275739761577924]
								}, {
									"case":	59,
									"scores":	[-6.275739761577924]
								}, {
									"case":	60,
									"scores":	[-6.275739761577924]
								}, {
									"case":	61,
									"scores":	[-6.275739761577924]
								}, {
									"case":	62,
									"scores":	[-6.275739761577924]
								}, {
									"case":	63,
									"scores":	[-6.275739761577924]
								}, {
									"case":	64,
									"scores":	[-6.275739761577924]
								}, {
									"case":	65,
									"scores":	[-6.275739761577924]
								}, {
									"case":	66,
									"scores":	[-6.275739761577924]
								}, {
									"case":	67,
									"scores":	[-6.275739761577924]
								}, {
									"case":	68,
									"scores":	[-6.275739761577924]
								}, {
									"case":	69,
									"scores":	[-6.275739761577924]
								}, {
									"case":	70,
									"scores":	[-6.275739761577924]
								}, {
									"case":	71,
									"scores":	[-6.275739761577924]
								}, {
									"case":	72,
									"scores":	[-6.275739761577924]
								}, {
									"case":	73,
									"scores":	[-6.275739761577924]
								}, {
									"case":	74,
									"scores":	[-6.275739761577924]
								}, {
									"case":	75,
									"scores":	[-6.275739761577924]
								}, {
									"case":	76,
									"scores":	[-6.275739761577924]
								}, {
									"case":	77,
									"scores":	[-6.275739761577924]
								}, {
									"case":	78,
									"scores":	[-6.275739761577924]
								}, {
									"case":	79,
									"scores":	[-6.275739761577924]
								}, {
									"case":	80,
									"scores":	[-6.275739761577924]
								}, {
									"case":	81,
									"scores":	[-6.275739761577924]
								}, {
									"case":	82,
									"scores":	[-6.275739761577924]
								}, {
									"case":	83,
									"scores":	[-6.275739761577924]
								}, {
									"case":	84,
									"scores":	[-6.275739761577924]
								}, {
									"case":	85,
									"scores":	[-6.275739761577924]
								}, {
									"case":	86,
									"scores":	[-6.275739761577924]
								}, {
									"case":	87,
									"scores":	[-6.275739761577924]
								}, {
									"case":	88,
									"scores":	[-6.275739761577924]
								}, {
									"case":	89,
									"scores":	[-6.275739761577924]
								}, {
									"case":	90,
									"scores":	[-6.275739761577924]
								}, {
									"case":	91,
									"scores":	[-6.275739761577924]
								}, {
									"case":	92,
									"scores":	[-6.275739761577924]
								}, {
									"case":	93,
									"scores":	[-6.275739761577924]
								}, {
									"case":	94,
									"scores":	[-6.275739761577924]
								}, {
									"case":	95,
									"scores":	[-6.275739761577924]
								}, {
									"case":	96,
									"scores":	[-6.275739761577924]
								}, {
									"case":	97,
									"scores":	[-6.275739761577924]
								}, {
									"case":	98,
									"scores":	[-6.275739761577924]
								}, {
									"case":	99,
									"scores":	[-6.275739761577924]
								}, {
									"case":	100,
									"scores":	[-6.275739761577924]
								}, {
									"case":	101,
									"scores":	[-6.275739761577924]
								}, {
									"case":	102,
									"scores":	[-6.275739761577924]
								}, {
									"case":	103,
									"scores":	[-6.275739761577924]
								}, {
									"case":	104,
									"scores":	[-6.275739761577924]
								}, {
									"case":	105,
									"scores":	[-6.275739761577924]
								}, {
									"case":	106,
									"scores":	[-6.275739761577924]
								}, {
									"case":	107,
									"scores":	[-6.275739761577924]
								}, {
									"case":	108,
									"scores":	[-6.275739761577924]
								}, {
									"case":	109,
									"scores":	[-6.275739761577924]
								}, {
									"case":	110,
									"scores":	[-6.275739761577924]
								}, {
									"case":	111,
									"scores":	[-6.275739761577924]
								}, {
									"case":	112,
									"scores":	[-6.275739761577924]
								}, {
									"case":	113,
									"scores":	[-6.275739761577924]
								}, {
									"case":	114,
									"scores":	[-6.275739761577924]
								}, {
									"case":	115,
									"scores":	[-6.275739761577924]
								}, {
									"case":	116,
									"scores":	[-6.275739761577924]
								}, {
									"case":	117,
									"scores":	[-6.275739761577924]
								}, {
									"case":	118,
									"scores":	[-6.275739761577924]
								}, {
									"case":	119,
									"scores":	[-6.275739761577924]
								}, {
									"case":	120,
									"scores":	[-6.275739761577924]
								}, {
									"case":	121,
									"scores":	[-6.275739761577924]
								}, {
									"case":	122,
									"scores":	[-6.275739761577924]
								}, {
									"case":	123,
									"scores":	[-6.275739761577924]
								}, {
									"case":	124,
									"scores":	[-6.275739761577924]
								}, {
									"case":	125,
									"scores":	[-6.275739761577924]
								}, {
									"case":	126,
									"scores":	[-6.275739761577924]
								}, {
									"case":	127,
									"scores":	[-6.275739761577924]
								}, {
									"case":	128,
									"scores":	[-6.275739761577924]
								}, {
									"case":	129,
									"scores":	[-6.275739761577924]
								}, {
									"case":	130,
									"scores":	[-6.275739761577924]
								}, {
									"case":	131,
									"scores":	[-6.275739761577924]
								}, {
									"case":	132,
									"scores":	[-6.275739761577924]
								}, {
									"case":	133,
									"scores":	[-6.275739761577924]
								}, {
									"case":	134,
									"scores":	[-6.275739761577924]
								}, {
									"case":	135,
									"scores":	[-6.275739761577924]
								}, {
									"case":	136,
									"scores":	[-6.275739761577924]
								}, {
									"case":	137,
									"scores":	[-6.275739761577924]
								}, {
									"case":	138,
									"scores":	[-6.275739761577924]
								}, {
									"case":	139,
									"scores":	[-6.275739761577924]
								}, {
									"case":	140,
									"scores":	[-6.275739761577924]
								}, {
									"case":	141,
									"scores":	[-6.275739761577924]
								}, {
									"case":	142,
									"scores":	[-6.275739761577924]
								}, {
									"case":	143,
									"scores":	[-6.275739761577924]
								}, {
									"case":	144,
									"scores":	[-6.275739761577924]
								}, {
									"case":	145,
									"scores":	[-6.275739761577924]
								}, {
									"case":	146,
									"scores":	[-6.275739761577924]
								}, {
									"case":	147,
									"scores":	[-6.275739761577924]
								}, {
									"case":	148,
									"scores":	[-6.275739761577924]
								}, {
									"case":	149,
									"scores":	[-6.275739761577924]
								}, {
									"case":	150,
									"scores":	[-6.275739761577924]
								}, {
									"case":	151,
									"scores":	[-6.275739761577924]
								}, {
									"case":	152,
									"scores":	[-6.275739761577924]
								}, {
									"case":	153,
									"scores":	[-6.275739761577924]
								}, {
									"case":	154,
									"scores":	[-6.275739761577924]
								}, {
									"case":	155,
									"scores":	[-6.275739761577924]
								}, {
									"case":	156,
									"scores":	[-6.275739761577924]
								}, {
									"case":	157,
									"scores":	[-6.275739761577924]
								}, {
									"case":	158,
									"scores":	[-6.275739761577924]
								}, {
									"case":	159,
									"scores":	[-6.275739761577924]
								}, {
									"case":	160,
									"scores":	[-6.275739761577924]
								}, {
									"case":	161,
									"scores":	[-6.275739761577924]
								}, {
									"case":	162,
									"scores":	[-6.275739761577924]
								}, {
									"case":	163,
									"scores":	[-6.275739761577924]
								}, {
									"case":	164,
									"scores":	[-6.275739761577924]
								}, {
									"case":	165,
									"scores":	[-6.275739761577924]
								}, {
									"case":	166,
									"scores":	[-6.275739761577924]
								}, {
									"case":	167,
									"scores":	[-6.275739761577924]
								}, {
									"case":	168,
									"scores":	[-6.275739761577924]
								}, {
									"case":	169,
									"scores":	[-6.275739761577924]
								}, {
									"case":	170,
									"scores":	[-6.275739761577924]
								}, {
									"case":	171,
									"scores":	[-6.275739761577924]
								}, {
									"case":	172,
									"scores":	[-6.275739761577924]
								}, {
									"case":	173,
									"scores":	[-6.275739761577924]
								}, {
									"case":	174,
									"scores":	[-6.275739761577924]
								}, {
									"case":	175,
									"scores":	[-6.275739761577924]
								}, {
									"case":	176,
									"scores":	[-6.275739761577924]
								}, {
									"case":	177,
									"scores":	[-6.275739761577924]
								}, {
									"case":	178,
									"scores":	[-6.275739761577924]
								}, {
									"case":	179,
									"scores":	[-6.275739761577924]
								}, {
									"case":	180,
									"scores":	[-6.275739761577924]
								}, {
									"case":	181,
									"scores":	[-6.275739761577924]
								}, {
									"case":	182,
									"scores":	[-6.275739761577924]
								}, {
									"case":	183,
									"scores":	[-6.275739761577924]
								}, {
									"case":	184,
									"scores":	[-6.275739761577924]
								}, {
									"case":	185,
									"scores":	[-6.275739761577924]
								}, {
									"case":	186,
									"scores":	[-6.275739761577924]
								}, {
									"case":	187,
									"scores":	[-6.275739761577924]
								}, {
									"case":	188,
									"scores":	[-6.275739761577924]
								}, {
									"case":	189,
									"scores":	[-6.275739761577924]
								}, {
									"case":	190,
									"scores":	[-6.275739761577924]
								}, {
									"case":	191,
									"scores":	[-6.275739761577924]
								}, {
									"case":	192,
									"scores":	[-6.275739761577924]
								}, {
									"case":	193,
									"scores":	[-6.275739761577924]
								}, {
									"case":	194,
									"scores":	[-6.275739761577924]
								}, {
									"case":	195,
									"scores":	[-6.275739761577924]
								}, {
									"case":	196,
									"scores":	[-6.275739761577924]
								}, {
									"case":	197,
									"scores":	[-6.275739761577924]
								}, {
									"case":	198,
									"scores":	[-6.275739761577924]
								}, {
									"case":	199,
									"scores":	[-6.275739761577924]
								}, {
									"case":	200,
									"scores":	[-6.275739761577924]
								}, {
									"case":	201,
									"scores":	[-6.275739761577924]
								}, {
									"case":	202,
									"scores":	[-6.275739761577924]
								}, {
									"case":	203,
									"scores":	[-6.275739761577924]
								}, {
									"case":	204,
									"scores":	[-6.275739761577924]
								}, {
									"case":	205,
									"scores":	[-6.275739761577924]
								}, {
									"case":	206,
									"scores":	[-6.275739761577924]
								}, {
									"case":	207,
									"scores":	[-6.275739761577924]
								}, {
									"case":	208,
									"scores":	[-6.275739761577924]
								}, {
									"case":	209,
									"scores":	[-6.275739761577924]
								}, {
									"case":	210,
									"scores":	[-6.275739761577924]
								}, {
									"case":	211,
									"scores":	[-6.275739761577924]
								}, {
									"case":	212,
									"scores":	[-6.275739761577924]
								}, {
									"case":	213,
									"scores":	[-6.275739761577924]
								}, {
									"case":	214,
									"scores":	[-6.275739761577924]
								}, {
									"case":	215,
									"scores":	[-6.275739761577924]
								}, {
									"case":	216,
									"scores":	[-6.275739761577924]
								}, {
									"case":	217,
									"scores":	[-6.275739761577924]
								}, {
									"case":	218,
									"scores":	[-6.275739761577924]
								}, {
									"case":	219,
									"scores":	[-6.275739761577924]
								}, {
									"case":	220,
									"scores":	[-6.275739761577924]
								}, {
									"case":	221,
									"scores":	[-6.275739761577924]
								}, {
									"case":	222,
									"scores":	[-6.275739761577924]
								}, {
									"case":	223,
									"scores":	[-6.275739761577924]
								}, {
									"case":	224,
									"scores":	[-6.275739761577924]
								}, {
									"case":	225,
									"scores":	[-6.275739761577924]
								}, {
									"case":	226,
									"scores":	[-6.275739761577924]
								}, {
									"case":	227,
									"scores":	[-6.275739761577924]
								}, {
									"case":	228,
									"scores":	[-6.275739761577924]
								}, {
									"case":	229,
									"scores":	[-6.275739761577924]
								}, {
									"case":	230,
									"scores":	[-6.275739761577924]
								}, {
									"case":	231,
									"scores":	[-6.275739761577924]
								}, {
									"case":	232,
									"scores":	[-6.275739761577924]
								}, {
									"case":	233,
									"scores":	[-6.275739761577924]
								}, {
									"case":	234,
									"scores":	[-6.275739761577924]
								}, {
									"case":	235,
									"scores":	[-6.275739761577924]
								}, {
									"case":	236,
									"scores":	[-6.275739761577924]
								}, {
									"case":	237,
									"scores":	[-6.275739761577924]
								}, {
									"case":	238,
									"scores":	[-6.275739761577924]
								}, {
									"case":	239,
									"scores":	[-6.275739761577924]
								}, {
									"case":	240,
									"scores":	[-6.275739761577924]
								}, {
									"case":	241,
									"scores":	[-6.275739761577924]
								}, {
									"case":	242,
									"scores":	[-6.275739761577924]
								}, {
									"case":	243,
									"scores":	[-6.275739761577924]
								}, {
									"case":	244,
									"scores":	[-6.275739761577924]
								}, {
									"case":	245,
									"scores":	[-6.275739761577924]
								}, {
									"case":	246,
									"scores":	[-6.275739761577924]
								}, {
									"case":	247,
									"scores":	[-6.275739761577924]
								}, {
									"case":	248,
									"scores":	[-6.275739761577924]
								}, {
									"case":	249,
									"scores":	[-6.275739761577924]
								}, {
									"case":	250,
									"scores":	[-6.275739761577924]
								}, {
									"case":	251,
									"scores":	[-6.275739761577924]
								}, {
									"case":	252,
									"scores":	[-6.275739761577924]
								}, {
									"case":	253,
									"scores":	[-6.275739761577924]
								}, {
									"case":	254,
									"scores":	[-6.275739761577924]
								}, {
									"case":	255,
									"scores":	[-6.275739761577924]
								}, {
									"case":	256,
									"scores":	[-6.275739761577924]
								}, {
									"case":	257,
									"scores":	[-6.275739761577924]
								}, {
									"case":	258,
									"scores":	[-6.275739761577924]
								}, {
									"case":	259,
									"scores":	[-6.275739761577924]
								}, {
									"case":	260,
									"scores":	[-6.275739761577924]
								}, {
									"case":	261,
									"scores":	[-6.275739761577924]
								}, {
									"case":	262,
									"scores":	[-6.275739761577924]
								}, {
									"case":	263,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	264,
									"scores":	[-10.684720165277923, -9.9802801755779242, -9.5832676412779243, -9.5832676412779243, -8.8017659595779243, -10.545473105577923, -10.139455565577922, -9.9196498715779242, -10.186335411577923, -10.391781471577923, -10.290572171577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.391781471577923, -9.9356704715779234, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.290572171577924, -10.201149471577924, -10.201149471577924, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.201149471577924, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.201149471577924, -10.201149471577924, -10.391781471577923, -10.391781471577923, -10.391781471577923, -10.201149471577924, -10.391781471577923]
								}, {
									"case":	265,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	266,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	267,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	268,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	269,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	270,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}, {
									"case":	271,
									"scores":	[-12.947501965277924, -12.243061975577923, -11.846049441277923, -11.846049441277923, -11.064547759577923, -12.808254905577924, -12.402237365577923, -12.182431671577923, -12.449117211577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.198452271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.553353971577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.463931271577923, -12.654563271577924, -12.654563271577924, -12.654563271577924, -12.463931271577923, -12.654563271577924]
								}]
						}, {
							"switch":	107,
							"types":	[[], [], [1], [], [], [], [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [12]],
							"begin_line":	1121,
							"begin_column":	3,
							"end_line":	1121,
							"end_column":	41,
							"patch_codes":	["if (!__is_neg(\"\", \"L1121\", 62, &(srv), sizeof (srv), &(sess), sizeof (sess), &(srv->ev), sizeof (srv->ev), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(con), sizeof (con), &(p), sizeof (p), &(status), sizeof (status), &(p_d), sizeof (p_d), &(srv->ev_ins), sizeof (srv->ev_ins), &(srv->plugin_slots), sizeof (srv->plugin_slots), &(srv->con_opened), sizeof (srv->con_opened), &(srv->con_read), sizeof (srv->con_read), &(srv->con_written), sizeof (srv->con_written), &(srv->con_closed), sizeof (srv->con_closed), &(srv->ssl_is_init), sizeof (srv->ssl_is_init), &(srv->max_fds), sizeof (srv->max_fds), &(srv->sockets_disabled), sizeof (srv->sockets_disabled), &(srv->max_conns), sizeof (srv->max_conns), &(srv->parse_full_path), sizeof (srv->parse_full_path), &(srv->response_header), sizeof (srv->response_header), &(srv->response_range), sizeof (srv->response_range), &(srv->tmp_buf), sizeof (srv->tmp_buf), &(srv->tmp_chunk_len), sizeof (srv->tmp_chunk_len), &(srv->empty_string), sizeof (srv->empty_string), &(srv->cond_check_buf), sizeof (srv->cond_check_buf), &(srv->split_vals), sizeof (srv->split_vals), &(srv->cur_ts), sizeof (srv->cur_ts), &(srv->last_generated_date_ts), sizeof (srv->last_generated_date_ts), &(srv->last_generated_debug_ts), sizeof (srv->last_generated_debug_ts), &(srv->startup_ts), sizeof (srv->startup_ts), &(srv->ts_debug_str), sizeof (srv->ts_debug_str), &(srv->ts_date_str), sizeof (srv->ts_date_str), &(srv->config), sizeof (srv->config), &(srv->config_touched), sizeof (srv->config_touched), &(srv->config_context), sizeof (srv->config_context), &(srv->config_storage), sizeof (srv->config_storage), &(srv->config_deprecated), sizeof (srv->config_deprecated), &(srv->config_unsupported), sizeof (srv->config_unsupported), &(srv->conns), sizeof (srv->conns), &(srv->joblist), sizeof (srv->joblist), &(srv->joblist_prev), sizeof (srv->joblist_prev), &(srv->fdwaitqueue), sizeof (srv->fdwaitqueue), &(srv->stat_cache), sizeof (srv->stat_cache), &(srv->event_handler), sizeof (srv->event_handler), &(srv->network_backend_write), sizeof (srv->network_backend_write), &(srv->network_backend_read), sizeof (srv->network_backend_read), &(srv->network_ssl_backend_write), sizeof (srv->network_ssl_backend_write), &(srv->network_ssl_backend_read), sizeof (srv->network_ssl_backend_read), &(srv->uid), sizeof (srv->uid), &(srv->gid), sizeof (srv->gid), &(srv->posix_aio_iocbs), sizeof (srv->posix_aio_iocbs), &(srv->stat_queue), sizeof (srv->stat_queue), &(srv->joblist_queue), sizeof (srv->joblist_queue), &(srv->aio_write_queue), sizeof (srv->aio_write_queue), &(srv->network_backend), sizeof (srv->network_backend), &(srv->is_shutdown), sizeof (srv->is_shutdown), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    fdevent_unregister(srv->ev, sess->sock);\n", "fdevent_event_add(srv->ev, sess->sock, -1)", "fdevent_event_add(srv->ev, sess->sock, 0)", "fdevent_event_add(srv->ev, sess->sock, 1)", "fdevent_event_add(srv->ev, sess->sock, 10)", "fdevent_event_add(srv->ev, sess->sock, 1090)", "fdevent_event_add(srv->ev, sess->sock, 1111)", "fdevent_event_add(srv->ev, sess->sock, 127)", "fdevent_event_add(srv->ev, sess->sock, 4)", "fdevent_event_add(srv->ev, sess->sock, 500)", "fdevent_event_add(srv->ev, sess->sock, status)", "{\n}\n", "VALGRIND_PRINTF(srv->ev, sess->sock)", "VALGRIND_PRINTF_BACKTRACE(srv->ev, sess->sock)", "__builtin_va_start(srv->ev, sess->sock)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_fcntl_set(srv->ev, sess->sock)", "g_build_filename(srv->ev, sess->sock)", "g_markup_printf_escaped(srv->ev, sess->sock)", "g_print(srv->ev, sess->sock)", "g_printerr(srv->ev, sess->sock)", "g_relation_exists(srv->ev, sess->sock)", "g_relation_insert(srv->ev, sess->sock)", "g_strconcat(srv->ev, sess->sock)", "g_strdup_printf(srv->ev, sess->sock)", "g_strjoin(srv->ev, sess->sock)", "g_test_message(srv->ev, sess->sock)", "g_variant_new(srv->ev, sess->sock)", "g_variant_new_parsed(srv->ev, sess->sock)", "g_variant_new_printf(srv->ev, sess->sock)", "log_trace(srv->ev, sess->sock)", "printf(srv->ev, sess->sock)", "fdevent_unregister((&con)->ev, sess->sock)", "fdevent_unregister((&p)->ev, sess->sock)", "fdevent_unregister((&p_d)->ev, sess->sock)", "fdevent_unregister((&sess)->ev, sess->sock)", "fdevent_unregister((&srv)->ev, sess->sock)", "fdevent_unregister((&status)->ev, sess->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (&con)->sock)", "fdevent_unregister(srv->ev, (&p)->sock)", "fdevent_unregister(srv->ev, (&p_d)->sock)", "fdevent_unregister(srv->ev, (&sess)->sock)", "fdevent_unregister(srv->ev, (&srv)->sock)", "fdevent_unregister(srv->ev, (&status)->sock)", "fdevent_unregister(srv->ev, (sess)->sock)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0769408022779245, -7.9320048505779237, -7.7442927712779248, -7.7442927712779248, -8.1960779985779233, -8.9175865475779243, -8.3982821165779242, -7.3476633515779239, -8.0494098515779235, -8.4211090515779237, -8.0141690515779231, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.1771821815779244, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.0141690515779231, -7.5772040515779242, -7.5772040515779242, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -7.5772040515779242, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -7.5772040515779242, -7.5772040515779242, -8.4211090515779237, -8.4211090515779237, -8.4211090515779237, -7.5772040515779242, -8.4211090515779237]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}]
						}]
				}, {
					"line":	1122,
					"switches":	[{
							"switch":	108,
							"types":	[[], [], [], [], [262, 263, 264, 265, 266, 267, 268, 269, 270], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], [], [], [], [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [], [], []],
							"begin_line":	1123,
							"begin_column":	1,
							"end_line":	1123,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return -1;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 0;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 10;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 127;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 4;\n", "if (__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	10,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	11,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	12,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	13,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	14,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	15,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	16,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	17,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	18,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	19,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	20,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	21,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	22,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	23,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	24,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	25,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	26,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	27,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	28,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	29,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	30,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	31,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	32,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	33,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	34,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	35,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	36,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	37,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	38,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	39,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	40,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	41,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	42,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	43,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	44,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	45,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	46,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	47,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	48,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	49,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	50,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	51,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	52,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	53,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	54,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	55,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	56,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	57,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	58,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	59,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	60,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	61,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	62,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	63,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	64,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	65,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	66,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	67,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	68,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	69,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	70,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	71,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	72,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	73,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	74,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	75,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	76,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	77,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	78,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	79,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	80,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	81,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	82,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	83,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	84,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	85,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	86,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	87,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	88,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	89,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	90,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	91,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	92,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	93,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	94,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	95,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	96,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	97,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	98,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	99,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	100,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	101,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	102,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	103,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	104,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	105,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	106,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	107,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	108,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	109,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	110,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	111,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	112,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	113,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	114,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	115,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	116,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	117,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	118,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	119,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	120,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	121,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	122,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	123,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	124,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	125,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	126,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	127,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	128,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	129,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	130,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	131,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	132,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	133,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	134,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	135,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	136,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	137,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	138,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	139,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	140,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	141,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	142,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	143,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	144,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	145,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	146,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	147,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	148,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	149,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	150,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	151,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	152,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	153,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	154,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	155,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	156,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	157,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	158,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	159,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	160,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	161,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	162,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	163,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	164,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	165,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	166,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	167,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	168,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	169,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	170,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	171,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	172,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	173,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	174,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	175,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	176,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	177,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	178,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	179,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	180,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	181,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	182,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	183,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	184,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	185,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	186,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	187,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	188,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	189,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	190,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	191,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	192,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	193,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	194,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	195,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	196,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	197,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	198,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	199,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	200,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	201,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	202,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	203,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	204,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	205,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	206,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	207,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	208,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	209,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	210,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	211,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	212,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	213,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	214,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	215,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	216,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	217,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	218,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	219,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	220,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	221,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	222,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	223,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	224,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	225,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	226,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	227,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	228,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	229,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	230,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	231,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	232,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	233,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	234,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	235,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	236,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	237,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	238,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	239,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	240,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	241,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	242,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	243,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	244,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	245,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	246,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	247,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	248,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	249,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	250,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	251,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	252,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	253,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	254,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	255,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	256,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	257,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	258,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	259,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	260,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	261,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	262,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	263,
									"scores":	[-8.9755148842604058, -10.240640504260405, -9.769105733960405, -9.5034796982604046, -9.3262168582604055, -7.9885272522604049, -9.106411164260404, -9.373096704260405, -9.5785427642604049, -9.5785427642604049, -9.5785427642604049, -9.3879107642604041, -9.5785427642604049]
								}, {
									"case":	264,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	265,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	266,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	267,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	268,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	269,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}, {
									"case":	270,
									"scores":	[-11.238296684260405, -12.503422304260404, -12.031887533960404, -11.766261498260405, -11.588998658260405, -10.251309052260405, -11.369192964260405, -11.635878504260404, -11.841324564260404, -11.841324564260404, -11.841324564260404, -11.650692564260405, -11.841324564260404]
								}]
						}, {
							"switch":	109,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1123,
							"begin_column":	3,
							"end_line":	1123,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L1123\", 13, &(sess), sizeof (sess), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(con), sizeof (con), &(p), sizeof (p), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    cgi_session_free(sess);\n", "{\n}\n", "cgi_session_free((&con))", "cgi_session_free((&p))", "cgi_session_free((&p_d))", "cgi_session_free((&sess))", "cgi_session_free((&srv))", "cgi_session_free((&status))", "cgi_session_free((sess))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7305553162604044, -7.8380657252604049, -7.2580343639604044, -7.5120616092604049, -7.2472801092604042, -7.0450759912604051, -6.1966613442604048, -6.8984078442604044, -7.2701070442604045, -7.2701070442604045, -7.2701070442604045, -6.4262020442604042, -7.2701070442604045]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}]
						}]
				}, {
					"line":	1123,
					"switches":	[{
							"switch":	110,
							"types":	[[], [], [], [], [262, 263, 264, 265, 266, 267, 268, 269, 270], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], [], [], [], [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243], [], [], [], [], [], []],
							"begin_line":	1124,
							"begin_column":	1,
							"end_line":	1124,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess, 0, sizeof (*(sess)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return -1;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 0;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 10;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 127;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 1;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 4;\n", "if (__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.235334346942885]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}, {
									"case":	5,
									"scores":	[-6.235334346942885]
								}, {
									"case":	6,
									"scores":	[-6.235334346942885]
								}, {
									"case":	7,
									"scores":	[-6.235334346942885]
								}, {
									"case":	8,
									"scores":	[-6.235334346942885]
								}, {
									"case":	9,
									"scores":	[-6.235334346942885]
								}, {
									"case":	10,
									"scores":	[-6.235334346942885]
								}, {
									"case":	11,
									"scores":	[-6.235334346942885]
								}, {
									"case":	12,
									"scores":	[-6.235334346942885]
								}, {
									"case":	13,
									"scores":	[-6.235334346942885]
								}, {
									"case":	14,
									"scores":	[-6.235334346942885]
								}, {
									"case":	15,
									"scores":	[-6.235334346942885]
								}, {
									"case":	16,
									"scores":	[-6.235334346942885]
								}, {
									"case":	17,
									"scores":	[-6.235334346942885]
								}, {
									"case":	18,
									"scores":	[-6.235334346942885]
								}, {
									"case":	19,
									"scores":	[-6.235334346942885]
								}, {
									"case":	20,
									"scores":	[-6.235334346942885]
								}, {
									"case":	21,
									"scores":	[-6.235334346942885]
								}, {
									"case":	22,
									"scores":	[-6.235334346942885]
								}, {
									"case":	23,
									"scores":	[-6.235334346942885]
								}, {
									"case":	24,
									"scores":	[-6.235334346942885]
								}, {
									"case":	25,
									"scores":	[-6.235334346942885]
								}, {
									"case":	26,
									"scores":	[-6.235334346942885]
								}, {
									"case":	27,
									"scores":	[-6.235334346942885]
								}, {
									"case":	28,
									"scores":	[-6.235334346942885]
								}, {
									"case":	29,
									"scores":	[-6.235334346942885]
								}, {
									"case":	30,
									"scores":	[-6.235334346942885]
								}, {
									"case":	31,
									"scores":	[-6.235334346942885]
								}, {
									"case":	32,
									"scores":	[-6.235334346942885]
								}, {
									"case":	33,
									"scores":	[-6.235334346942885]
								}, {
									"case":	34,
									"scores":	[-6.235334346942885]
								}, {
									"case":	35,
									"scores":	[-6.235334346942885]
								}, {
									"case":	36,
									"scores":	[-6.235334346942885]
								}, {
									"case":	37,
									"scores":	[-6.235334346942885]
								}, {
									"case":	38,
									"scores":	[-6.235334346942885]
								}, {
									"case":	39,
									"scores":	[-6.235334346942885]
								}, {
									"case":	40,
									"scores":	[-6.235334346942885]
								}, {
									"case":	41,
									"scores":	[-6.235334346942885]
								}, {
									"case":	42,
									"scores":	[-6.235334346942885]
								}, {
									"case":	43,
									"scores":	[-6.235334346942885]
								}, {
									"case":	44,
									"scores":	[-6.235334346942885]
								}, {
									"case":	45,
									"scores":	[-6.235334346942885]
								}, {
									"case":	46,
									"scores":	[-6.235334346942885]
								}, {
									"case":	47,
									"scores":	[-6.235334346942885]
								}, {
									"case":	48,
									"scores":	[-6.235334346942885]
								}, {
									"case":	49,
									"scores":	[-6.235334346942885]
								}, {
									"case":	50,
									"scores":	[-6.235334346942885]
								}, {
									"case":	51,
									"scores":	[-6.235334346942885]
								}, {
									"case":	52,
									"scores":	[-6.235334346942885]
								}, {
									"case":	53,
									"scores":	[-6.235334346942885]
								}, {
									"case":	54,
									"scores":	[-6.235334346942885]
								}, {
									"case":	55,
									"scores":	[-6.235334346942885]
								}, {
									"case":	56,
									"scores":	[-6.235334346942885]
								}, {
									"case":	57,
									"scores":	[-6.235334346942885]
								}, {
									"case":	58,
									"scores":	[-6.235334346942885]
								}, {
									"case":	59,
									"scores":	[-6.235334346942885]
								}, {
									"case":	60,
									"scores":	[-6.235334346942885]
								}, {
									"case":	61,
									"scores":	[-6.235334346942885]
								}, {
									"case":	62,
									"scores":	[-6.235334346942885]
								}, {
									"case":	63,
									"scores":	[-6.235334346942885]
								}, {
									"case":	64,
									"scores":	[-6.235334346942885]
								}, {
									"case":	65,
									"scores":	[-6.235334346942885]
								}, {
									"case":	66,
									"scores":	[-6.235334346942885]
								}, {
									"case":	67,
									"scores":	[-6.235334346942885]
								}, {
									"case":	68,
									"scores":	[-6.235334346942885]
								}, {
									"case":	69,
									"scores":	[-6.235334346942885]
								}, {
									"case":	70,
									"scores":	[-6.235334346942885]
								}, {
									"case":	71,
									"scores":	[-6.235334346942885]
								}, {
									"case":	72,
									"scores":	[-6.235334346942885]
								}, {
									"case":	73,
									"scores":	[-6.235334346942885]
								}, {
									"case":	74,
									"scores":	[-6.235334346942885]
								}, {
									"case":	75,
									"scores":	[-6.235334346942885]
								}, {
									"case":	76,
									"scores":	[-6.235334346942885]
								}, {
									"case":	77,
									"scores":	[-6.235334346942885]
								}, {
									"case":	78,
									"scores":	[-6.235334346942885]
								}, {
									"case":	79,
									"scores":	[-6.235334346942885]
								}, {
									"case":	80,
									"scores":	[-6.235334346942885]
								}, {
									"case":	81,
									"scores":	[-6.235334346942885]
								}, {
									"case":	82,
									"scores":	[-6.235334346942885]
								}, {
									"case":	83,
									"scores":	[-6.235334346942885]
								}, {
									"case":	84,
									"scores":	[-6.235334346942885]
								}, {
									"case":	85,
									"scores":	[-6.235334346942885]
								}, {
									"case":	86,
									"scores":	[-6.235334346942885]
								}, {
									"case":	87,
									"scores":	[-6.235334346942885]
								}, {
									"case":	88,
									"scores":	[-6.235334346942885]
								}, {
									"case":	89,
									"scores":	[-6.235334346942885]
								}, {
									"case":	90,
									"scores":	[-6.235334346942885]
								}, {
									"case":	91,
									"scores":	[-6.235334346942885]
								}, {
									"case":	92,
									"scores":	[-6.235334346942885]
								}, {
									"case":	93,
									"scores":	[-6.235334346942885]
								}, {
									"case":	94,
									"scores":	[-6.235334346942885]
								}, {
									"case":	95,
									"scores":	[-6.235334346942885]
								}, {
									"case":	96,
									"scores":	[-6.235334346942885]
								}, {
									"case":	97,
									"scores":	[-6.235334346942885]
								}, {
									"case":	98,
									"scores":	[-6.235334346942885]
								}, {
									"case":	99,
									"scores":	[-6.235334346942885]
								}, {
									"case":	100,
									"scores":	[-6.235334346942885]
								}, {
									"case":	101,
									"scores":	[-6.235334346942885]
								}, {
									"case":	102,
									"scores":	[-6.235334346942885]
								}, {
									"case":	103,
									"scores":	[-6.235334346942885]
								}, {
									"case":	104,
									"scores":	[-6.235334346942885]
								}, {
									"case":	105,
									"scores":	[-6.235334346942885]
								}, {
									"case":	106,
									"scores":	[-6.235334346942885]
								}, {
									"case":	107,
									"scores":	[-6.235334346942885]
								}, {
									"case":	108,
									"scores":	[-6.235334346942885]
								}, {
									"case":	109,
									"scores":	[-6.235334346942885]
								}, {
									"case":	110,
									"scores":	[-6.235334346942885]
								}, {
									"case":	111,
									"scores":	[-6.235334346942885]
								}, {
									"case":	112,
									"scores":	[-6.235334346942885]
								}, {
									"case":	113,
									"scores":	[-6.235334346942885]
								}, {
									"case":	114,
									"scores":	[-6.235334346942885]
								}, {
									"case":	115,
									"scores":	[-6.235334346942885]
								}, {
									"case":	116,
									"scores":	[-6.235334346942885]
								}, {
									"case":	117,
									"scores":	[-6.235334346942885]
								}, {
									"case":	118,
									"scores":	[-6.235334346942885]
								}, {
									"case":	119,
									"scores":	[-6.235334346942885]
								}, {
									"case":	120,
									"scores":	[-6.235334346942885]
								}, {
									"case":	121,
									"scores":	[-6.235334346942885]
								}, {
									"case":	122,
									"scores":	[-6.235334346942885]
								}, {
									"case":	123,
									"scores":	[-6.235334346942885]
								}, {
									"case":	124,
									"scores":	[-6.235334346942885]
								}, {
									"case":	125,
									"scores":	[-6.235334346942885]
								}, {
									"case":	126,
									"scores":	[-6.235334346942885]
								}, {
									"case":	127,
									"scores":	[-6.235334346942885]
								}, {
									"case":	128,
									"scores":	[-6.235334346942885]
								}, {
									"case":	129,
									"scores":	[-6.235334346942885]
								}, {
									"case":	130,
									"scores":	[-6.235334346942885]
								}, {
									"case":	131,
									"scores":	[-6.235334346942885]
								}, {
									"case":	132,
									"scores":	[-6.235334346942885]
								}, {
									"case":	133,
									"scores":	[-6.235334346942885]
								}, {
									"case":	134,
									"scores":	[-6.235334346942885]
								}, {
									"case":	135,
									"scores":	[-6.235334346942885]
								}, {
									"case":	136,
									"scores":	[-6.235334346942885]
								}, {
									"case":	137,
									"scores":	[-6.235334346942885]
								}, {
									"case":	138,
									"scores":	[-6.235334346942885]
								}, {
									"case":	139,
									"scores":	[-6.235334346942885]
								}, {
									"case":	140,
									"scores":	[-6.235334346942885]
								}, {
									"case":	141,
									"scores":	[-6.235334346942885]
								}, {
									"case":	142,
									"scores":	[-6.235334346942885]
								}, {
									"case":	143,
									"scores":	[-6.235334346942885]
								}, {
									"case":	144,
									"scores":	[-6.235334346942885]
								}, {
									"case":	145,
									"scores":	[-6.235334346942885]
								}, {
									"case":	146,
									"scores":	[-6.235334346942885]
								}, {
									"case":	147,
									"scores":	[-6.235334346942885]
								}, {
									"case":	148,
									"scores":	[-6.235334346942885]
								}, {
									"case":	149,
									"scores":	[-6.235334346942885]
								}, {
									"case":	150,
									"scores":	[-6.235334346942885]
								}, {
									"case":	151,
									"scores":	[-6.235334346942885]
								}, {
									"case":	152,
									"scores":	[-6.235334346942885]
								}, {
									"case":	153,
									"scores":	[-6.235334346942885]
								}, {
									"case":	154,
									"scores":	[-6.235334346942885]
								}, {
									"case":	155,
									"scores":	[-6.235334346942885]
								}, {
									"case":	156,
									"scores":	[-6.235334346942885]
								}, {
									"case":	157,
									"scores":	[-6.235334346942885]
								}, {
									"case":	158,
									"scores":	[-6.235334346942885]
								}, {
									"case":	159,
									"scores":	[-6.235334346942885]
								}, {
									"case":	160,
									"scores":	[-6.235334346942885]
								}, {
									"case":	161,
									"scores":	[-6.235334346942885]
								}, {
									"case":	162,
									"scores":	[-6.235334346942885]
								}, {
									"case":	163,
									"scores":	[-6.235334346942885]
								}, {
									"case":	164,
									"scores":	[-6.235334346942885]
								}, {
									"case":	165,
									"scores":	[-6.235334346942885]
								}, {
									"case":	166,
									"scores":	[-6.235334346942885]
								}, {
									"case":	167,
									"scores":	[-6.235334346942885]
								}, {
									"case":	168,
									"scores":	[-6.235334346942885]
								}, {
									"case":	169,
									"scores":	[-6.235334346942885]
								}, {
									"case":	170,
									"scores":	[-6.235334346942885]
								}, {
									"case":	171,
									"scores":	[-6.235334346942885]
								}, {
									"case":	172,
									"scores":	[-6.235334346942885]
								}, {
									"case":	173,
									"scores":	[-6.235334346942885]
								}, {
									"case":	174,
									"scores":	[-6.235334346942885]
								}, {
									"case":	175,
									"scores":	[-6.235334346942885]
								}, {
									"case":	176,
									"scores":	[-6.235334346942885]
								}, {
									"case":	177,
									"scores":	[-6.235334346942885]
								}, {
									"case":	178,
									"scores":	[-6.235334346942885]
								}, {
									"case":	179,
									"scores":	[-6.235334346942885]
								}, {
									"case":	180,
									"scores":	[-6.235334346942885]
								}, {
									"case":	181,
									"scores":	[-6.235334346942885]
								}, {
									"case":	182,
									"scores":	[-6.235334346942885]
								}, {
									"case":	183,
									"scores":	[-6.235334346942885]
								}, {
									"case":	184,
									"scores":	[-6.235334346942885]
								}, {
									"case":	185,
									"scores":	[-6.235334346942885]
								}, {
									"case":	186,
									"scores":	[-6.235334346942885]
								}, {
									"case":	187,
									"scores":	[-6.235334346942885]
								}, {
									"case":	188,
									"scores":	[-6.235334346942885]
								}, {
									"case":	189,
									"scores":	[-6.235334346942885]
								}, {
									"case":	190,
									"scores":	[-6.235334346942885]
								}, {
									"case":	191,
									"scores":	[-6.235334346942885]
								}, {
									"case":	192,
									"scores":	[-6.235334346942885]
								}, {
									"case":	193,
									"scores":	[-6.235334346942885]
								}, {
									"case":	194,
									"scores":	[-6.235334346942885]
								}, {
									"case":	195,
									"scores":	[-6.235334346942885]
								}, {
									"case":	196,
									"scores":	[-6.235334346942885]
								}, {
									"case":	197,
									"scores":	[-6.235334346942885]
								}, {
									"case":	198,
									"scores":	[-6.235334346942885]
								}, {
									"case":	199,
									"scores":	[-6.235334346942885]
								}, {
									"case":	200,
									"scores":	[-6.235334346942885]
								}, {
									"case":	201,
									"scores":	[-6.235334346942885]
								}, {
									"case":	202,
									"scores":	[-6.235334346942885]
								}, {
									"case":	203,
									"scores":	[-6.235334346942885]
								}, {
									"case":	204,
									"scores":	[-6.235334346942885]
								}, {
									"case":	205,
									"scores":	[-6.235334346942885]
								}, {
									"case":	206,
									"scores":	[-6.235334346942885]
								}, {
									"case":	207,
									"scores":	[-6.235334346942885]
								}, {
									"case":	208,
									"scores":	[-6.235334346942885]
								}, {
									"case":	209,
									"scores":	[-6.235334346942885]
								}, {
									"case":	210,
									"scores":	[-6.235334346942885]
								}, {
									"case":	211,
									"scores":	[-6.235334346942885]
								}, {
									"case":	212,
									"scores":	[-6.235334346942885]
								}, {
									"case":	213,
									"scores":	[-6.235334346942885]
								}, {
									"case":	214,
									"scores":	[-6.235334346942885]
								}, {
									"case":	215,
									"scores":	[-6.235334346942885]
								}, {
									"case":	216,
									"scores":	[-6.235334346942885]
								}, {
									"case":	217,
									"scores":	[-6.235334346942885]
								}, {
									"case":	218,
									"scores":	[-6.235334346942885]
								}, {
									"case":	219,
									"scores":	[-6.235334346942885]
								}, {
									"case":	220,
									"scores":	[-6.235334346942885]
								}, {
									"case":	221,
									"scores":	[-6.235334346942885]
								}, {
									"case":	222,
									"scores":	[-6.235334346942885]
								}, {
									"case":	223,
									"scores":	[-6.235334346942885]
								}, {
									"case":	224,
									"scores":	[-6.235334346942885]
								}, {
									"case":	225,
									"scores":	[-6.235334346942885]
								}, {
									"case":	226,
									"scores":	[-6.235334346942885]
								}, {
									"case":	227,
									"scores":	[-6.235334346942885]
								}, {
									"case":	228,
									"scores":	[-6.235334346942885]
								}, {
									"case":	229,
									"scores":	[-6.235334346942885]
								}, {
									"case":	230,
									"scores":	[-6.235334346942885]
								}, {
									"case":	231,
									"scores":	[-6.235334346942885]
								}, {
									"case":	232,
									"scores":	[-6.235334346942885]
								}, {
									"case":	233,
									"scores":	[-6.235334346942885]
								}, {
									"case":	234,
									"scores":	[-6.235334346942885]
								}, {
									"case":	235,
									"scores":	[-6.235334346942885]
								}, {
									"case":	236,
									"scores":	[-6.235334346942885]
								}, {
									"case":	237,
									"scores":	[-6.235334346942885]
								}, {
									"case":	238,
									"scores":	[-6.235334346942885]
								}, {
									"case":	239,
									"scores":	[-6.235334346942885]
								}, {
									"case":	240,
									"scores":	[-6.235334346942885]
								}, {
									"case":	241,
									"scores":	[-6.235334346942885]
								}, {
									"case":	242,
									"scores":	[-6.235334346942885]
								}, {
									"case":	243,
									"scores":	[-6.235334346942885]
								}, {
									"case":	244,
									"scores":	[-6.235334346942885]
								}, {
									"case":	245,
									"scores":	[-6.235334346942885]
								}, {
									"case":	246,
									"scores":	[-6.235334346942885]
								}, {
									"case":	247,
									"scores":	[-6.235334346942885]
								}, {
									"case":	248,
									"scores":	[-6.235334346942885]
								}, {
									"case":	249,
									"scores":	[-6.235334346942885]
								}, {
									"case":	250,
									"scores":	[-6.235334346942885]
								}, {
									"case":	251,
									"scores":	[-6.235334346942885]
								}, {
									"case":	252,
									"scores":	[-6.235334346942885]
								}, {
									"case":	253,
									"scores":	[-6.235334346942885]
								}, {
									"case":	254,
									"scores":	[-6.235334346942885]
								}, {
									"case":	255,
									"scores":	[-6.235334346942885]
								}, {
									"case":	256,
									"scores":	[-6.235334346942885]
								}, {
									"case":	257,
									"scores":	[-6.235334346942885]
								}, {
									"case":	258,
									"scores":	[-6.235334346942885]
								}, {
									"case":	259,
									"scores":	[-6.235334346942885]
								}, {
									"case":	260,
									"scores":	[-6.235334346942885]
								}, {
									"case":	261,
									"scores":	[-6.235334346942885]
								}, {
									"case":	262,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	263,
									"scores":	[-8.8332508338428859, -8.5157399709428852, -8.3384771309428842, -9.2529007769428837, -8.7813660066428838, -8.4001710369428864, -8.1186714369428845, -8.3853569769428855, -8.5908030369428854, -8.5908030369428854, -8.5908030369428854, -8.4001710369428864, -8.5908030369428854]
								}, {
									"case":	264,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	265,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	266,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	267,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	268,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	269,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}, {
									"case":	270,
									"scores":	[-11.096032633842885, -10.778521770942884, -10.601258930942885, -11.515682576942885, -11.044147806642885, -10.662952836942885, -10.381453236942885, -10.648138776942886, -10.853584836942886, -10.853584836942886, -10.853584836942886, -10.662952836942885, -10.853584836942886]
								}]
						}, {
							"switch":	111,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1124,
							"begin_column":	3,
							"end_line":	1124,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L1124\", 13, &(sess), sizeof (sess), &(con), sizeof (con), &(p), sizeof (p), &(srv), sizeof (srv), &(sess->sock), sizeof (sess->sock), &(sess->pid), sizeof (sess->pid), &(status), sizeof (status), &(p_d), sizeof (p_d), &(sess->wb_sock), sizeof (sess->wb_sock), &(sess->rb), sizeof (sess->rb), &(sess->wb), sizeof (sess->wb), &(sess->state), sizeof (sess->state), &(sess->remote_con), sizeof (sess->remote_con)))\n    sess = ((void *)0);\n", "{\n}\n", "sess = ((void *)0)", "sess = (sess)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4250267606428855, -6.9456533749428857, -6.6808718749428859, -7.6937535179428851, -7.1137221566428854, -6.2818898369428853, -6.052349136942885, -6.7540956369428855, -7.1257948369428856, -7.1257948369428856, -7.1257948369428856, -6.2818898369428853, -7.1257948369428856]
								}, {
									"case":	2,
									"scores":	[-6.235334346942885]
								}, {
									"case":	3,
									"scores":	[-6.235334346942885]
								}, {
									"case":	4,
									"scores":	[-6.235334346942885]
								}]
						}]
				}, {
					"line":	1125,
					"switches":	[{
							"switch":	112,
							"types":	[[], [], [], [], [263, 264, 265, 266, 267, 268, 269, 270, 271], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], [], [], [], [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [], [], [], [], []],
							"begin_line":	1126,
							"begin_column":	1,
							"end_line":	1126,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con, 0, sizeof (*(con)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p, 0, sizeof (*(p)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return -1;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 0;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 10;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 127;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 1;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 4;\n", "if (__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	2,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	3,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	4,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	5,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	6,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	7,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	8,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	9,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	10,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	11,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	12,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	13,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	14,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	15,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	16,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	17,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	18,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	19,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	20,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	21,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	22,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	23,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	24,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	25,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	26,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	27,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	28,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	29,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	30,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	31,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	32,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	33,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	34,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	35,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	36,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	37,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	38,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	39,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	40,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	41,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	42,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	43,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	44,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	45,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	46,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	47,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	48,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	49,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	50,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	51,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	52,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	53,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	54,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	55,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	56,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	57,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	58,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	59,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	60,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	61,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	62,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	63,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	64,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	65,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	66,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	67,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	68,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	69,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	70,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	71,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	72,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	73,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	74,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	75,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	76,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	77,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	78,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	79,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	80,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	81,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	82,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	83,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	84,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	85,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	86,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	87,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	88,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	89,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	90,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	91,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	92,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	93,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	94,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	95,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	96,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	97,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	98,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	99,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	100,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	101,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	102,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	103,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	104,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	105,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	106,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	107,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	108,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	109,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	110,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	111,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	112,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	113,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	114,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	115,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	116,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	117,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	118,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	119,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	120,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	121,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	122,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	123,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	124,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	125,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	126,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	127,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	128,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	129,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	130,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	131,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	132,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	133,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	134,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	135,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	136,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	137,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	138,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	139,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	140,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	141,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	142,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	143,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	144,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	145,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	146,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	147,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	148,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	149,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	150,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	151,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	152,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	153,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	154,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	155,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	156,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	157,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	158,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	159,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	160,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	161,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	162,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	163,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	164,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	165,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	166,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	167,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	168,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	169,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	170,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	171,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	172,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	173,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	174,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	175,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	176,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	177,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	178,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	179,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	180,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	181,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	182,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	183,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	184,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	185,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	186,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	187,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	188,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	189,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	190,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	191,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	192,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	193,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	194,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	195,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	196,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	197,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	198,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	199,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	200,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	201,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	202,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	203,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	204,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	205,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	206,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	207,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	208,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	209,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	210,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	211,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	212,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	213,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	214,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	215,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	216,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	217,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	218,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	219,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	220,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	221,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	222,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	223,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	224,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	225,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	226,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	227,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	228,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	229,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	230,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	231,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	232,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	233,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	234,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	235,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	236,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	237,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	238,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	239,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	240,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	241,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	242,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	243,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	244,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	245,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	246,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	247,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	248,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	249,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	250,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	251,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	252,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	253,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	254,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	255,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	256,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	257,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	258,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	259,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	260,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	261,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	262,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	263,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	264,
									"scores":	[-8.105606963625366, -7.9283441236253651, -7.8657830346253652, -8.3747605970253645, -7.7101243993253661, -10.126388069625365, -9.2736583296253663, -9.2736583296253663, -8.9921587296253662, -9.4642903296253653, -9.2736583296253663, -9.2588442696253654, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.4642903296253653, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.4642903296253653, -9.4642903296253653, -9.4642903296253653, -9.4642903296253653, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.2736583296253663, -9.4642903296253653, -9.4642903296253653, -9.4642903296253653, -8.8175473296253664, -9.4642903296253653, -9.4642903296253653, -9.2736583296253663, -9.2736583296253663, -9.4642903296253653, -9.4642903296253653, -9.4642903296253653, -9.2736583296253663, -9.2736583296253663, -9.3630810296253664, -9.4642903296253653, -9.4642903296253653, -9.3630810296253664]
								}, {
									"case":	265,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	266,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	267,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	268,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	269,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	270,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}, {
									"case":	271,
									"scores":	[-10.368388763625365, -10.191125923625364, -10.128564834625365, -10.637542397025365, -9.9729061993253652, -12.389169869625366, -11.536440129625365, -11.536440129625365, -11.254940529625365, -11.727072129625366, -11.536440129625365, -11.521626069625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.080329129625365, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.727072129625366, -11.727072129625366, -11.727072129625366, -11.536440129625365, -11.536440129625365, -11.625862829625365, -11.727072129625366, -11.727072129625366, -11.625862829625365]
								}]
						}, {
							"switch":	113,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1126,
							"begin_column":	3,
							"end_line":	1126,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L1126\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    con->plugin_ctx[p->id] = ((void *)0);\n", "{\n}\n", "con->plugin_ctx[p->id] = ((void *)0)", "con->plugin_ctx[p->id] = (p_d)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6942892056253651, -7.4295077056253653, -6.4553964056253657, -6.6468397056253661, -7.5961248303253655, -8.6491031136253653, -7.2372394326253655, -7.2372394326253655, -7.0076987326253652, -8.081144432625365, -7.2372394326253655, -7.7094452326253649, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -8.081144432625365, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -8.081144432625365, -8.081144432625365, -8.081144432625365, -8.081144432625365, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -7.2372394326253655, -8.081144432625365, -8.081144432625365, -8.081144432625365, -6.9933125626253654, -8.081144432625365, -8.081144432625365, -7.2372394326253655, -7.2372394326253655, -8.081144432625365, -8.081144432625365, -8.081144432625365, -7.2372394326253655, -7.2372394326253655, -7.6742044326253653, -8.081144432625365, -8.081144432625365, -7.6742044326253653]
								}, {
									"case":	2,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	3,
									"scores":	[-6.2151316396253655]
								}, {
									"case":	4,
									"scores":	[-6.2151316396253655]
								}]
						}]
				}, {
					"line":	1126,
					"switches":	[{
							"switch":	114,
							"types":	[[], [], [], [], [261, 262, 263, 264, 265, 266, 267, 268, 269], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], [], [], [], [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], [], [], [], [], [], []],
							"begin_line":	1127,
							"begin_column":	1,
							"end_line":	1127,
							"end_column":	1,
							"patch_codes":	["memset(&con->authed_user, 0, sizeof (*(&con->authed_user)))", "memset(&con->bytes_header, 0, sizeof (*(&con->bytes_header)))", "memset(&con->bytes_read, 0, sizeof (*(&con->bytes_read)))", "memset(&con->bytes_written, 0, sizeof (*(&con->bytes_written)))", "memset(&con->bytes_written_cur_second, 0, sizeof (*(&con->bytes_written_cur_second)))", "memset(&con->close_timeout_ts, 0, sizeof (*(&con->close_timeout_ts)))", "memset(&con->cond_cache, 0, sizeof (*(&con->cond_cache)))", "memset(&con->conditional_is_valid, 0, sizeof (*(&con->conditional_is_valid)))", "memset(&con->conf, 0, sizeof (*(&con->conf)))", "memset(&con->connection_start, 0, sizeof (*(&con->connection_start)))", "memset(&con->dst_addr, 0, sizeof (*(&con->dst_addr)))", "memset(&con->dst_addr_buf, 0, sizeof (*(&con->dst_addr_buf)))", "memset(&con->environment, 0, sizeof (*(&con->environment)))", "memset(&con->error_handler, 0, sizeof (*(&con->error_handler)))", "memset(&con->error_handler_saved_status, 0, sizeof (*(&con->error_handler_saved_status)))", "memset(&con->file_started, 0, sizeof (*(&con->file_started)))", "memset(&con->got_response, 0, sizeof (*(&con->got_response)))", "memset(&con->header_len, 0, sizeof (*(&con->header_len)))", "memset(&con->http_req, 0, sizeof (*(&con->http_req)))", "memset(&con->http_status, 0, sizeof (*(&con->http_status)))", "memset(&con->in_error_handler, 0, sizeof (*(&con->in_error_handler)))", "memset(&con->in_joblist, 0, sizeof (*(&con->in_joblist)))", "memset(&con->is_readable, 0, sizeof (*(&con->is_readable)))", "memset(&con->is_writable, 0, sizeof (*(&con->is_writable)))", "memset(&con->keep_alive, 0, sizeof (*(&con->keep_alive)))", "memset(&con->loops_per_request, 0, sizeof (*(&con->loops_per_request)))", "memset(&con->mode, 0, sizeof (*(&con->mode)))", "memset(&con->ndx, 0, sizeof (*(&con->ndx)))", "memset(&con->parse_request, 0, sizeof (*(&con->parse_request)))", "memset(&con->physical, 0, sizeof (*(&con->physical)))", "memset(&con->plugin_ctx, 0, sizeof (*(&con->plugin_ctx)))", "memset(&con->read_idle_ts, 0, sizeof (*(&con->read_idle_ts)))", "memset(&con->recv, 0, sizeof (*(&con->recv)))", "memset(&con->recv_raw, 0, sizeof (*(&con->recv_raw)))", "memset(&con->request, 0, sizeof (*(&con->request)))", "memset(&con->request_count, 0, sizeof (*(&con->request_count)))", "memset(&con->request_start, 0, sizeof (*(&con->request_start)))", "memset(&con->response, 0, sizeof (*(&con->response)))", "memset(&con->send, 0, sizeof (*(&con->send)))", "memset(&con->send->bytes_in, 0, sizeof (*(&con->send->bytes_in)))", "memset(&con->send->bytes_out, 0, sizeof (*(&con->send->bytes_out)))", "memset(&con->send->first, 0, sizeof (*(&con->send->first)))", "memset(&con->send->is_closed, 0, sizeof (*(&con->send->is_closed)))", "memset(&con->send->last, 0, sizeof (*(&con->send->last)))", "memset(&con->send->tempdirs, 0, sizeof (*(&con->send->tempdirs)))", "memset(&con->send_filters, 0, sizeof (*(&con->send_filters)))", "memset(&con->send_raw, 0, sizeof (*(&con->send_raw)))", "memset(&con->server_name, 0, sizeof (*(&con->server_name)))", "memset(&con->sock, 0, sizeof (*(&con->sock)))", "memset(&con->srv_socket, 0, sizeof (*(&con->srv_socket)))", "memset(&con->start_tv, 0, sizeof (*(&con->start_tv)))", "memset(&con->state, 0, sizeof (*(&con->state)))", "memset(&con->timestamps, 0, sizeof (*(&con->timestamps)))", "memset(&con->traffic_limit_reached, 0, sizeof (*(&con->traffic_limit_reached)))", "memset(&con->uri, 0, sizeof (*(&con->uri)))", "memset(&con->write_request_ts, 0, sizeof (*(&con->write_request_ts)))", "memset(&p->cgi_pid, 0, sizeof (*(&p->cgi_pid)))", "memset(&p->conf, 0, sizeof (*(&p->conf)))", "memset(&p->config_storage, 0, sizeof (*(&p->config_storage)))", "memset(&p->id, 0, sizeof (*(&p->id)))", "memset(&p->resp, 0, sizeof (*(&p->resp)))", "memset(&p->tmp_buf, 0, sizeof (*(&p->tmp_buf)))", "memset(&sess->pid, 0, sizeof (*(&sess->pid)))", "memset(&sess->rb, 0, sizeof (*(&sess->rb)))", "memset(&sess->remote_con, 0, sizeof (*(&sess->remote_con)))", "memset(&sess->sock, 0, sizeof (*(&sess->sock)))", "memset(&sess->state, 0, sizeof (*(&sess->state)))", "memset(&sess->wb, 0, sizeof (*(&sess->wb)))", "memset(&sess->wb_sock, 0, sizeof (*(&sess->wb_sock)))", "memset(&srv->aio_write_queue, 0, sizeof (*(&srv->aio_write_queue)))", "memset(&srv->con_closed, 0, sizeof (*(&srv->con_closed)))", "memset(&srv->con_opened, 0, sizeof (*(&srv->con_opened)))", "memset(&srv->con_read, 0, sizeof (*(&srv->con_read)))", "memset(&srv->con_written, 0, sizeof (*(&srv->con_written)))", "memset(&srv->cond_check_buf, 0, sizeof (*(&srv->cond_check_buf)))", "memset(&srv->config, 0, sizeof (*(&srv->config)))", "memset(&srv->config_context, 0, sizeof (*(&srv->config_context)))", "memset(&srv->config_deprecated, 0, sizeof (*(&srv->config_deprecated)))", "memset(&srv->config_storage, 0, sizeof (*(&srv->config_storage)))", "memset(&srv->config_touched, 0, sizeof (*(&srv->config_touched)))", "memset(&srv->config_unsupported, 0, sizeof (*(&srv->config_unsupported)))", "memset(&srv->conns, 0, sizeof (*(&srv->conns)))", "memset(&srv->cur_ts, 0, sizeof (*(&srv->cur_ts)))", "memset(&srv->empty_string, 0, sizeof (*(&srv->empty_string)))", "memset(&srv->ev, 0, sizeof (*(&srv->ev)))", "memset(&srv->ev_ins, 0, sizeof (*(&srv->ev_ins)))", "memset(&srv->event_handler, 0, sizeof (*(&srv->event_handler)))", "memset(&srv->fdwaitqueue, 0, sizeof (*(&srv->fdwaitqueue)))", "memset(&srv->gid, 0, sizeof (*(&srv->gid)))", "memset(&srv->inet_ntop_cache, 0, sizeof (*(&srv->inet_ntop_cache)))", "memset(&srv->is_shutdown, 0, sizeof (*(&srv->is_shutdown)))", "memset(&srv->joblist, 0, sizeof (*(&srv->joblist)))", "memset(&srv->joblist_prev, 0, sizeof (*(&srv->joblist_prev)))", "memset(&srv->joblist_queue, 0, sizeof (*(&srv->joblist_queue)))", "memset(&srv->last_generated_date_ts, 0, sizeof (*(&srv->last_generated_date_ts)))", "memset(&srv->last_generated_debug_ts, 0, sizeof (*(&srv->last_generated_debug_ts)))", "memset(&srv->max_conns, 0, sizeof (*(&srv->max_conns)))", "memset(&srv->max_fds, 0, sizeof (*(&srv->max_fds)))", "memset(&srv->mtime_cache, 0, sizeof (*(&srv->mtime_cache)))", "memset(&srv->network_backend, 0, sizeof (*(&srv->network_backend)))", "memset(&srv->network_backend_read, 0, sizeof (*(&srv->network_backend_read)))", "memset(&srv->network_backend_write, 0, sizeof (*(&srv->network_backend_write)))", "memset(&srv->network_ssl_backend_read, 0, sizeof (*(&srv->network_ssl_backend_read)))", "memset(&srv->network_ssl_backend_write, 0, sizeof (*(&srv->network_ssl_backend_write)))", "memset(&srv->parse_full_path, 0, sizeof (*(&srv->parse_full_path)))", "memset(&srv->plugin_slots, 0, sizeof (*(&srv->plugin_slots)))", "memset(&srv->plugins, 0, sizeof (*(&srv->plugins)))", "memset(&srv->posix_aio_iocbs, 0, sizeof (*(&srv->posix_aio_iocbs)))", "memset(&srv->response_header, 0, sizeof (*(&srv->response_header)))", "memset(&srv->response_range, 0, sizeof (*(&srv->response_range)))", "memset(&srv->sockets_disabled, 0, sizeof (*(&srv->sockets_disabled)))", "memset(&srv->split_vals, 0, sizeof (*(&srv->split_vals)))", "memset(&srv->srv_sockets, 0, sizeof (*(&srv->srv_sockets)))", "memset(&srv->srvconf, 0, sizeof (*(&srv->srvconf)))", "memset(&srv->ssl_is_init, 0, sizeof (*(&srv->ssl_is_init)))", "memset(&srv->startup_ts, 0, sizeof (*(&srv->startup_ts)))", "memset(&srv->stat_cache, 0, sizeof (*(&srv->stat_cache)))", "memset(&srv->stat_queue, 0, sizeof (*(&srv->stat_queue)))", "memset(&srv->tmp_buf, 0, sizeof (*(&srv->tmp_buf)))", "memset(&srv->tmp_chunk_len, 0, sizeof (*(&srv->tmp_chunk_len)))", "memset(&srv->ts_date_str, 0, sizeof (*(&srv->ts_date_str)))", "memset(&srv->ts_debug_str, 0, sizeof (*(&srv->ts_debug_str)))", "memset(&srv->uid, 0, sizeof (*(&srv->uid)))", "memset(con->authed_user, 0, sizeof (*(con->authed_user)))", "memset(con->cond_cache, 0, sizeof (*(con->cond_cache)))", "memset(con->dst_addr_buf, 0, sizeof (*(con->dst_addr_buf)))", "memset(con->environment, 0, sizeof (*(con->environment)))", "memset(con->error_handler, 0, sizeof (*(con->error_handler)))", "memset(con->http_req, 0, sizeof (*(con->http_req)))", "memset(con->parse_request, 0, sizeof (*(con->parse_request)))", "memset(con->plugin_ctx, 0, sizeof (*(con->plugin_ctx)))", "memset(con->recv, 0, sizeof (*(con->recv)))", "memset(con->recv_raw, 0, sizeof (*(con->recv_raw)))", "memset(con->send, 0, sizeof (*(con->send)))", "memset(con->send->first, 0, sizeof (*(con->send->first)))", "memset(con->send->last, 0, sizeof (*(con->send->last)))", "memset(con->send->tempdirs, 0, sizeof (*(con->send->tempdirs)))", "memset(con->send_filters, 0, sizeof (*(con->send_filters)))", "memset(con->send_raw, 0, sizeof (*(con->send_raw)))", "memset(con->server_name, 0, sizeof (*(con->server_name)))", "memset(con->sock, 0, sizeof (*(con->sock)))", "memset(con->srv_socket, 0, sizeof (*(con->srv_socket)))", "memset(p->config_storage, 0, sizeof (*(p->config_storage)))", "memset(p->resp, 0, sizeof (*(p->resp)))", "memset(p->tmp_buf, 0, sizeof (*(p->tmp_buf)))", "memset(sess->rb, 0, sizeof (*(sess->rb)))", "memset(sess->remote_con, 0, sizeof (*(sess->remote_con)))", "memset(sess->sock, 0, sizeof (*(sess->sock)))", "memset(sess->wb, 0, sizeof (*(sess->wb)))", "memset(sess->wb_sock, 0, sizeof (*(sess->wb_sock)))", "memset(srv->aio_write_queue, 0, sizeof (*(srv->aio_write_queue)))", "memset(srv->cond_check_buf, 0, sizeof (*(srv->cond_check_buf)))", "memset(srv->config, 0, sizeof (*(srv->config)))", "memset(srv->config_context, 0, sizeof (*(srv->config_context)))", "memset(srv->config_storage, 0, sizeof (*(srv->config_storage)))", "memset(srv->config_touched, 0, sizeof (*(srv->config_touched)))", "memset(srv->conns, 0, sizeof (*(srv->conns)))", "memset(srv->empty_string, 0, sizeof (*(srv->empty_string)))", "memset(srv->ev, 0, sizeof (*(srv->ev)))", "memset(srv->ev_ins, 0, sizeof (*(srv->ev_ins)))", "memset(srv->fdwaitqueue, 0, sizeof (*(srv->fdwaitqueue)))", "memset(srv->joblist, 0, sizeof (*(srv->joblist)))", "memset(srv->joblist_prev, 0, sizeof (*(srv->joblist_prev)))", "memset(srv->joblist_queue, 0, sizeof (*(srv->joblist_queue)))", "memset(srv->network_backend_read, 0, sizeof (*(srv->network_backend_read)))", "memset(srv->network_backend_write, 0, sizeof (*(srv->network_backend_write)))", "memset(srv->network_ssl_backend_read, 0, sizeof (*(srv->network_ssl_backend_read)))", "memset(srv->network_ssl_backend_write, 0, sizeof (*(srv->network_ssl_backend_write)))", "memset(srv->parse_full_path, 0, sizeof (*(srv->parse_full_path)))", "memset(srv->plugin_slots, 0, sizeof (*(srv->plugin_slots)))", "memset(srv->posix_aio_iocbs, 0, sizeof (*(srv->posix_aio_iocbs)))", "memset(srv->response_header, 0, sizeof (*(srv->response_header)))", "memset(srv->response_range, 0, sizeof (*(srv->response_range)))", "memset(srv->split_vals, 0, sizeof (*(srv->split_vals)))", "memset(srv->stat_cache, 0, sizeof (*(srv->stat_cache)))", "memset(srv->stat_queue, 0, sizeof (*(srv->stat_queue)))", "memset(srv->tmp_buf, 0, sizeof (*(srv->tmp_buf)))", "memset(srv->tmp_chunk_len, 0, sizeof (*(srv->tmp_chunk_len)))", "memset(srv->ts_date_str, 0, sizeof (*(srv->ts_date_str)))", "memset(srv->ts_debug_str, 0, sizeof (*(srv->ts_debug_str)))", "(p)->tmp_buf->used--", "buffer_copy_string((p)->tmp_buf, \"HTTP_\")", "buffer_free((p)->tmp_buf)", "buffer_reset((con)->physical.path)", "buffer_reset((p)->tmp_buf)", "cgi_session_free((sess))", "chunkqueue_free((sess)->rb)", "chunkqueue_free((sess)->wb)", "chunkqueue_remove_finished_chunks((con)->recv)", "chunkqueue_remove_finished_chunks((sess)->rb)", "close((sess)->wb_sock->fd)", "con->http_status = (-1)", "con->http_status = (0)", "con->http_status = (1)", "con->http_status = (10)", "con->http_status = (1090)", "con->http_status = (1111)", "con->http_status = (127)", "con->http_status = (4)", "con->http_status = (500)", "con->http_status = (status)", "con->mode = (-1)", "con->mode = (0)", "con->mode = (1)", "con->mode = (10)", "con->mode = (1090)", "con->mode = (1111)", "con->mode = (127)", "con->mode = (4)", "con->mode = (500)", "con->mode = (DIRECT)", "con->mode = (EXTERNAL)", "con->plugin_ctx[p->id] = (p_d)", "fdevent_event_del((srv)->ev, sess->sock)", "fdevent_event_del(srv->ev, (sess)->sock)", "fdevent_unregister((srv)->ev, sess->sock)", "fdevent_unregister(srv->ev, (sess)->sock)", "free((p))", "free((p)->config_storage)", "free((sess))", "http_response_free((p)->resp)", "http_response_reset((p)->resp)", "iosocket_free((sess)->sock)", "iosocket_free((sess)->wb_sock)", "log_error_write((srv), \"src/mod_cgi.c\", 1026, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_error_write((srv), \"src/mod_cgi.c\", 454, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 608, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 613, \"ss\", \"pipe failed:\", strerror((*__errno_location())))", "log_error_write((srv), \"src/mod_cgi.c\", 895, \"ss\", \"fcntl failed: \", strerror((*__errno_location())))", "sess = (sess)", "sess->pid = (-1)", "sess->pid = (0)", "sess->pid = (1)", "sess->pid = (10)", "sess->pid = (1090)", "sess->pid = (1111)", "sess->pid = (127)", "sess->pid = (4)", "sess->pid = (500)", "sess->pid = (status)", "__assert_fail(\"p\", \"src/mod_cgi.c\", 122, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"s\", \"src/mod_cgi.c\", 182, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess\", \"src/mod_cgi.c\", 93, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"sess->sock\", \"src/mod_cgi.c\", 887, __extension__ __PRETTY_FUNCTION__)", "cgi_session_free(sess)", "close(0)", "close(1)", "close(2)", "con->http_status = 500", "con->mode = DIRECT", "con->plugin_ctx[p->id] = ((void *)0)", "fdevent_event_del(srv->ev, sess->sock)", "fdevent_unregister(srv->ev, sess->sock)", "log_error_write(srv, \"src/mod_cgi.c\", 1090, \"ss\", \"waitpid failed: \", strerror((*__errno_location())))", "log_error_write(srv, \"src/mod_cgi.c\", 1111, \"s\", \"cgi died ?\")", "log_trace(\"%s.%d: (trace) -- checking request in mod_%s\", remove_path(\"src/mod_cgi.c\"), 963, \"cgi\")", "sess = ((void *)0)", "sess->pid = 0", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return -1;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 0;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 1090;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 10;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 1111;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 127;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 1;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 4;\n", "if (__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return 500;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.194928932307846]
								}, {
									"case":	2,
									"scores":	[-6.194928932307846]
								}, {
									"case":	3,
									"scores":	[-6.194928932307846]
								}, {
									"case":	4,
									"scores":	[-6.194928932307846]
								}, {
									"case":	5,
									"scores":	[-6.194928932307846]
								}, {
									"case":	6,
									"scores":	[-6.194928932307846]
								}, {
									"case":	7,
									"scores":	[-6.194928932307846]
								}, {
									"case":	8,
									"scores":	[-6.194928932307846]
								}, {
									"case":	9,
									"scores":	[-6.194928932307846]
								}, {
									"case":	10,
									"scores":	[-6.194928932307846]
								}, {
									"case":	11,
									"scores":	[-6.194928932307846]
								}, {
									"case":	12,
									"scores":	[-6.194928932307846]
								}, {
									"case":	13,
									"scores":	[-6.194928932307846]
								}, {
									"case":	14,
									"scores":	[-6.194928932307846]
								}, {
									"case":	15,
									"scores":	[-6.194928932307846]
								}, {
									"case":	16,
									"scores":	[-6.194928932307846]
								}, {
									"case":	17,
									"scores":	[-6.194928932307846]
								}, {
									"case":	18,
									"scores":	[-6.194928932307846]
								}, {
									"case":	19,
									"scores":	[-6.194928932307846]
								}, {
									"case":	20,
									"scores":	[-6.194928932307846]
								}, {
									"case":	21,
									"scores":	[-6.194928932307846]
								}, {
									"case":	22,
									"scores":	[-6.194928932307846]
								}, {
									"case":	23,
									"scores":	[-6.194928932307846]
								}, {
									"case":	24,
									"scores":	[-6.194928932307846]
								}, {
									"case":	25,
									"scores":	[-6.194928932307846]
								}, {
									"case":	26,
									"scores":	[-6.194928932307846]
								}, {
									"case":	27,
									"scores":	[-6.194928932307846]
								}, {
									"case":	28,
									"scores":	[-6.194928932307846]
								}, {
									"case":	29,
									"scores":	[-6.194928932307846]
								}, {
									"case":	30,
									"scores":	[-6.194928932307846]
								}, {
									"case":	31,
									"scores":	[-6.194928932307846]
								}, {
									"case":	32,
									"scores":	[-6.194928932307846]
								}, {
									"case":	33,
									"scores":	[-6.194928932307846]
								}, {
									"case":	34,
									"scores":	[-6.194928932307846]
								}, {
									"case":	35,
									"scores":	[-6.194928932307846]
								}, {
									"case":	36,
									"scores":	[-6.194928932307846]
								}, {
									"case":	37,
									"scores":	[-6.194928932307846]
								}, {
									"case":	38,
									"scores":	[-6.194928932307846]
								}, {
									"case":	39,
									"scores":	[-6.194928932307846]
								}, {
									"case":	40,
									"scores":	[-6.194928932307846]
								}, {
									"case":	41,
									"scores":	[-6.194928932307846]
								}, {
									"case":	42,
									"scores":	[-6.194928932307846]
								}, {
									"case":	43,
									"scores":	[-6.194928932307846]
								}, {
									"case":	44,
									"scores":	[-6.194928932307846]
								}, {
									"case":	45,
									"scores":	[-6.194928932307846]
								}, {
									"case":	46,
									"scores":	[-6.194928932307846]
								}, {
									"case":	47,
									"scores":	[-6.194928932307846]
								}, {
									"case":	48,
									"scores":	[-6.194928932307846]
								}, {
									"case":	49,
									"scores":	[-6.194928932307846]
								}, {
									"case":	50,
									"scores":	[-6.194928932307846]
								}, {
									"case":	51,
									"scores":	[-6.194928932307846]
								}, {
									"case":	52,
									"scores":	[-6.194928932307846]
								}, {
									"case":	53,
									"scores":	[-6.194928932307846]
								}, {
									"case":	54,
									"scores":	[-6.194928932307846]
								}, {
									"case":	55,
									"scores":	[-6.194928932307846]
								}, {
									"case":	56,
									"scores":	[-6.194928932307846]
								}, {
									"case":	57,
									"scores":	[-6.194928932307846]
								}, {
									"case":	58,
									"scores":	[-6.194928932307846]
								}, {
									"case":	59,
									"scores":	[-6.194928932307846]
								}, {
									"case":	60,
									"scores":	[-6.194928932307846]
								}, {
									"case":	61,
									"scores":	[-6.194928932307846]
								}, {
									"case":	62,
									"scores":	[-6.194928932307846]
								}, {
									"case":	63,
									"scores":	[-6.194928932307846]
								}, {
									"case":	64,
									"scores":	[-6.194928932307846]
								}, {
									"case":	65,
									"scores":	[-6.194928932307846]
								}, {
									"case":	66,
									"scores":	[-6.194928932307846]
								}, {
									"case":	67,
									"scores":	[-6.194928932307846]
								}, {
									"case":	68,
									"scores":	[-6.194928932307846]
								}, {
									"case":	69,
									"scores":	[-6.194928932307846]
								}, {
									"case":	70,
									"scores":	[-6.194928932307846]
								}, {
									"case":	71,
									"scores":	[-6.194928932307846]
								}, {
									"case":	72,
									"scores":	[-6.194928932307846]
								}, {
									"case":	73,
									"scores":	[-6.194928932307846]
								}, {
									"case":	74,
									"scores":	[-6.194928932307846]
								}, {
									"case":	75,
									"scores":	[-6.194928932307846]
								}, {
									"case":	76,
									"scores":	[-6.194928932307846]
								}, {
									"case":	77,
									"scores":	[-6.194928932307846]
								}, {
									"case":	78,
									"scores":	[-6.194928932307846]
								}, {
									"case":	79,
									"scores":	[-6.194928932307846]
								}, {
									"case":	80,
									"scores":	[-6.194928932307846]
								}, {
									"case":	81,
									"scores":	[-6.194928932307846]
								}, {
									"case":	82,
									"scores":	[-6.194928932307846]
								}, {
									"case":	83,
									"scores":	[-6.194928932307846]
								}, {
									"case":	84,
									"scores":	[-6.194928932307846]
								}, {
									"case":	85,
									"scores":	[-6.194928932307846]
								}, {
									"case":	86,
									"scores":	[-6.194928932307846]
								}, {
									"case":	87,
									"scores":	[-6.194928932307846]
								}, {
									"case":	88,
									"scores":	[-6.194928932307846]
								}, {
									"case":	89,
									"scores":	[-6.194928932307846]
								}, {
									"case":	90,
									"scores":	[-6.194928932307846]
								}, {
									"case":	91,
									"scores":	[-6.194928932307846]
								}, {
									"case":	92,
									"scores":	[-6.194928932307846]
								}, {
									"case":	93,
									"scores":	[-6.194928932307846]
								}, {
									"case":	94,
									"scores":	[-6.194928932307846]
								}, {
									"case":	95,
									"scores":	[-6.194928932307846]
								}, {
									"case":	96,
									"scores":	[-6.194928932307846]
								}, {
									"case":	97,
									"scores":	[-6.194928932307846]
								}, {
									"case":	98,
									"scores":	[-6.194928932307846]
								}, {
									"case":	99,
									"scores":	[-6.194928932307846]
								}, {
									"case":	100,
									"scores":	[-6.194928932307846]
								}, {
									"case":	101,
									"scores":	[-6.194928932307846]
								}, {
									"case":	102,
									"scores":	[-6.194928932307846]
								}, {
									"case":	103,
									"scores":	[-6.194928932307846]
								}, {
									"case":	104,
									"scores":	[-6.194928932307846]
								}, {
									"case":	105,
									"scores":	[-6.194928932307846]
								}, {
									"case":	106,
									"scores":	[-6.194928932307846]
								}, {
									"case":	107,
									"scores":	[-6.194928932307846]
								}, {
									"case":	108,
									"scores":	[-6.194928932307846]
								}, {
									"case":	109,
									"scores":	[-6.194928932307846]
								}, {
									"case":	110,
									"scores":	[-6.194928932307846]
								}, {
									"case":	111,
									"scores":	[-6.194928932307846]
								}, {
									"case":	112,
									"scores":	[-6.194928932307846]
								}, {
									"case":	113,
									"scores":	[-6.194928932307846]
								}, {
									"case":	114,
									"scores":	[-6.194928932307846]
								}, {
									"case":	115,
									"scores":	[-6.194928932307846]
								}, {
									"case":	116,
									"scores":	[-6.194928932307846]
								}, {
									"case":	117,
									"scores":	[-6.194928932307846]
								}, {
									"case":	118,
									"scores":	[-6.194928932307846]
								}, {
									"case":	119,
									"scores":	[-6.194928932307846]
								}, {
									"case":	120,
									"scores":	[-6.194928932307846]
								}, {
									"case":	121,
									"scores":	[-6.194928932307846]
								}, {
									"case":	122,
									"scores":	[-6.194928932307846]
								}, {
									"case":	123,
									"scores":	[-6.194928932307846]
								}, {
									"case":	124,
									"scores":	[-6.194928932307846]
								}, {
									"case":	125,
									"scores":	[-6.194928932307846]
								}, {
									"case":	126,
									"scores":	[-6.194928932307846]
								}, {
									"case":	127,
									"scores":	[-6.194928932307846]
								}, {
									"case":	128,
									"scores":	[-6.194928932307846]
								}, {
									"case":	129,
									"scores":	[-6.194928932307846]
								}, {
									"case":	130,
									"scores":	[-6.194928932307846]
								}, {
									"case":	131,
									"scores":	[-6.194928932307846]
								}, {
									"case":	132,
									"scores":	[-6.194928932307846]
								}, {
									"case":	133,
									"scores":	[-6.194928932307846]
								}, {
									"case":	134,
									"scores":	[-6.194928932307846]
								}, {
									"case":	135,
									"scores":	[-6.194928932307846]
								}, {
									"case":	136,
									"scores":	[-6.194928932307846]
								}, {
									"case":	137,
									"scores":	[-6.194928932307846]
								}, {
									"case":	138,
									"scores":	[-6.194928932307846]
								}, {
									"case":	139,
									"scores":	[-6.194928932307846]
								}, {
									"case":	140,
									"scores":	[-6.194928932307846]
								}, {
									"case":	141,
									"scores":	[-6.194928932307846]
								}, {
									"case":	142,
									"scores":	[-6.194928932307846]
								}, {
									"case":	143,
									"scores":	[-6.194928932307846]
								}, {
									"case":	144,
									"scores":	[-6.194928932307846]
								}, {
									"case":	145,
									"scores":	[-6.194928932307846]
								}, {
									"case":	146,
									"scores":	[-6.194928932307846]
								}, {
									"case":	147,
									"scores":	[-6.194928932307846]
								}, {
									"case":	148,
									"scores":	[-6.194928932307846]
								}, {
									"case":	149,
									"scores":	[-6.194928932307846]
								}, {
									"case":	150,
									"scores":	[-6.194928932307846]
								}, {
									"case":	151,
									"scores":	[-6.194928932307846]
								}, {
									"case":	152,
									"scores":	[-6.194928932307846]
								}, {
									"case":	153,
									"scores":	[-6.194928932307846]
								}, {
									"case":	154,
									"scores":	[-6.194928932307846]
								}, {
									"case":	155,
									"scores":	[-6.194928932307846]
								}, {
									"case":	156,
									"scores":	[-6.194928932307846]
								}, {
									"case":	157,
									"scores":	[-6.194928932307846]
								}, {
									"case":	158,
									"scores":	[-6.194928932307846]
								}, {
									"case":	159,
									"scores":	[-6.194928932307846]
								}, {
									"case":	160,
									"scores":	[-6.194928932307846]
								}, {
									"case":	161,
									"scores":	[-6.194928932307846]
								}, {
									"case":	162,
									"scores":	[-6.194928932307846]
								}, {
									"case":	163,
									"scores":	[-6.194928932307846]
								}, {
									"case":	164,
									"scores":	[-6.194928932307846]
								}, {
									"case":	165,
									"scores":	[-6.194928932307846]
								}, {
									"case":	166,
									"scores":	[-6.194928932307846]
								}, {
									"case":	167,
									"scores":	[-6.194928932307846]
								}, {
									"case":	168,
									"scores":	[-6.194928932307846]
								}, {
									"case":	169,
									"scores":	[-6.194928932307846]
								}, {
									"case":	170,
									"scores":	[-6.194928932307846]
								}, {
									"case":	171,
									"scores":	[-6.194928932307846]
								}, {
									"case":	172,
									"scores":	[-6.194928932307846]
								}, {
									"case":	173,
									"scores":	[-6.194928932307846]
								}, {
									"case":	174,
									"scores":	[-6.194928932307846]
								}, {
									"case":	175,
									"scores":	[-6.194928932307846]
								}, {
									"case":	176,
									"scores":	[-6.194928932307846]
								}, {
									"case":	177,
									"scores":	[-6.194928932307846]
								}, {
									"case":	178,
									"scores":	[-6.194928932307846]
								}, {
									"case":	179,
									"scores":	[-6.194928932307846]
								}, {
									"case":	180,
									"scores":	[-6.194928932307846]
								}, {
									"case":	181,
									"scores":	[-6.194928932307846]
								}, {
									"case":	182,
									"scores":	[-6.194928932307846]
								}, {
									"case":	183,
									"scores":	[-6.194928932307846]
								}, {
									"case":	184,
									"scores":	[-6.194928932307846]
								}, {
									"case":	185,
									"scores":	[-6.194928932307846]
								}, {
									"case":	186,
									"scores":	[-6.194928932307846]
								}, {
									"case":	187,
									"scores":	[-6.194928932307846]
								}, {
									"case":	188,
									"scores":	[-6.194928932307846]
								}, {
									"case":	189,
									"scores":	[-6.194928932307846]
								}, {
									"case":	190,
									"scores":	[-6.194928932307846]
								}, {
									"case":	191,
									"scores":	[-6.194928932307846]
								}, {
									"case":	192,
									"scores":	[-6.194928932307846]
								}, {
									"case":	193,
									"scores":	[-6.194928932307846]
								}, {
									"case":	194,
									"scores":	[-6.194928932307846]
								}, {
									"case":	195,
									"scores":	[-6.194928932307846]
								}, {
									"case":	196,
									"scores":	[-6.194928932307846]
								}, {
									"case":	197,
									"scores":	[-6.194928932307846]
								}, {
									"case":	198,
									"scores":	[-6.194928932307846]
								}, {
									"case":	199,
									"scores":	[-6.194928932307846]
								}, {
									"case":	200,
									"scores":	[-6.194928932307846]
								}, {
									"case":	201,
									"scores":	[-6.194928932307846]
								}, {
									"case":	202,
									"scores":	[-6.194928932307846]
								}, {
									"case":	203,
									"scores":	[-6.194928932307846]
								}, {
									"case":	204,
									"scores":	[-6.194928932307846]
								}, {
									"case":	205,
									"scores":	[-6.194928932307846]
								}, {
									"case":	206,
									"scores":	[-6.194928932307846]
								}, {
									"case":	207,
									"scores":	[-6.194928932307846]
								}, {
									"case":	208,
									"scores":	[-6.194928932307846]
								}, {
									"case":	209,
									"scores":	[-6.194928932307846]
								}, {
									"case":	210,
									"scores":	[-6.194928932307846]
								}, {
									"case":	211,
									"scores":	[-6.194928932307846]
								}, {
									"case":	212,
									"scores":	[-6.194928932307846]
								}, {
									"case":	213,
									"scores":	[-6.194928932307846]
								}, {
									"case":	214,
									"scores":	[-6.194928932307846]
								}, {
									"case":	215,
									"scores":	[-6.194928932307846]
								}, {
									"case":	216,
									"scores":	[-6.194928932307846]
								}, {
									"case":	217,
									"scores":	[-6.194928932307846]
								}, {
									"case":	218,
									"scores":	[-6.194928932307846]
								}, {
									"case":	219,
									"scores":	[-6.194928932307846]
								}, {
									"case":	220,
									"scores":	[-6.194928932307846]
								}, {
									"case":	221,
									"scores":	[-6.194928932307846]
								}, {
									"case":	222,
									"scores":	[-6.194928932307846]
								}, {
									"case":	223,
									"scores":	[-6.194928932307846]
								}, {
									"case":	224,
									"scores":	[-6.194928932307846]
								}, {
									"case":	225,
									"scores":	[-6.194928932307846]
								}, {
									"case":	226,
									"scores":	[-6.194928932307846]
								}, {
									"case":	227,
									"scores":	[-6.194928932307846]
								}, {
									"case":	228,
									"scores":	[-6.194928932307846]
								}, {
									"case":	229,
									"scores":	[-6.194928932307846]
								}, {
									"case":	230,
									"scores":	[-6.194928932307846]
								}, {
									"case":	231,
									"scores":	[-6.194928932307846]
								}, {
									"case":	232,
									"scores":	[-6.194928932307846]
								}, {
									"case":	233,
									"scores":	[-6.194928932307846]
								}, {
									"case":	234,
									"scores":	[-6.194928932307846]
								}, {
									"case":	235,
									"scores":	[-6.194928932307846]
								}, {
									"case":	236,
									"scores":	[-6.194928932307846]
								}, {
									"case":	237,
									"scores":	[-6.194928932307846]
								}, {
									"case":	238,
									"scores":	[-6.194928932307846]
								}, {
									"case":	239,
									"scores":	[-6.194928932307846]
								}, {
									"case":	240,
									"scores":	[-6.194928932307846]
								}, {
									"case":	241,
									"scores":	[-6.194928932307846]
								}, {
									"case":	242,
									"scores":	[-6.194928932307846]
								}, {
									"case":	243,
									"scores":	[-6.194928932307846]
								}, {
									"case":	244,
									"scores":	[-6.194928932307846]
								}, {
									"case":	245,
									"scores":	[-6.194928932307846]
								}, {
									"case":	246,
									"scores":	[-6.194928932307846]
								}, {
									"case":	247,
									"scores":	[-6.194928932307846]
								}, {
									"case":	248,
									"scores":	[-6.194928932307846]
								}, {
									"case":	249,
									"scores":	[-6.194928932307846]
								}, {
									"case":	250,
									"scores":	[-6.194928932307846]
								}, {
									"case":	251,
									"scores":	[-6.194928932307846]
								}, {
									"case":	252,
									"scores":	[-6.194928932307846]
								}, {
									"case":	253,
									"scores":	[-6.194928932307846]
								}, {
									"case":	254,
									"scores":	[-6.194928932307846]
								}, {
									"case":	255,
									"scores":	[-6.194928932307846]
								}, {
									"case":	256,
									"scores":	[-6.194928932307846]
								}, {
									"case":	257,
									"scores":	[-6.194928932307846]
								}, {
									"case":	258,
									"scores":	[-6.194928932307846]
								}, {
									"case":	259,
									"scores":	[-6.194928932307846]
								}, {
									"case":	260,
									"scores":	[-6.194928932307846]
								}, {
									"case":	261,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	262,
									"scores":	[-9.4951601713078446, -9.3178973313078455, -9.2870999313078464, -9.039997720307845, -7.0048206010078458, -9.266405471307845, -9.1800102313078469, -9.1800102313078469, -8.8985106313078468, -9.3706422313078459, -9.1800102313078469, -9.165196171307846, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.3706422313078459, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.3706422313078459, -9.3706422313078459, -9.3706422313078459, -9.3706422313078459, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.1800102313078469, -9.3706422313078459, -9.3706422313078459, -9.3706422313078459, -8.7238992313078469, -9.3706422313078459, -9.3706422313078459, -9.1800102313078469, -9.1800102313078469, -9.3706422313078459, -9.3706422313078459, -9.3706422313078459, -9.1800102313078469, -9.1800102313078469, -9.269432931307847, -9.3706422313078459, -9.3706422313078459, -9.269432931307847]
								}, {
									"case":	263,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	264,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	265,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	266,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	267,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	268,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}, {
									"case":	269,
									"scores":	[-11.757941971307845, -11.580679131307846, -11.549881731307845, -11.302779520307846, -9.2676024010078457, -11.529187271307846, -11.442792031307846, -11.442792031307846, -11.161292431307846, -11.633424031307847, -11.442792031307846, -11.427977971307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -10.986681031307846, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.633424031307847, -11.633424031307847, -11.633424031307847, -11.442792031307846, -11.442792031307846, -11.532214731307846, -11.633424031307847, -11.633424031307847, -11.532214731307846]
								}]
						}, {
							"switch":	115,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1127,
							"begin_column":	3,
							"end_line":	1127,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L1127\", 51, &(con), sizeof (con), &(p), sizeof (p), &(con->plugin_ctx), sizeof (con->plugin_ctx), &(p->id), sizeof (p->id), &(sess), sizeof (sess), &(srv), sizeof (srv), &(con->http_status), sizeof (con->http_status), &(con->mode), sizeof (con->mode), &(status), sizeof (status), &(con->send), sizeof (con->send), &(con->file_started), sizeof (con->file_started), &(p_d), sizeof (p_d), &(con->state), sizeof (con->state), &(con->read_idle_ts), sizeof (con->read_idle_ts), &(con->close_timeout_ts), sizeof (con->close_timeout_ts), &(con->write_request_ts), sizeof (con->write_request_ts), &(con->connection_start), sizeof (con->connection_start), &(con->request_start), sizeof (con->request_start), &(con->request_count), sizeof (con->request_count), &(con->loops_per_request), sizeof (con->loops_per_request), &(con->sock), sizeof (con->sock), &(con->ndx), sizeof (con->ndx), &(con->is_readable), sizeof (con->is_readable), &(con->is_writable), sizeof (con->is_writable), &(con->keep_alive), sizeof (con->keep_alive), &(con->recv), sizeof (con->recv), &(con->send_filters), sizeof (con->send_filters), &(con->send_raw), sizeof (con->send_raw), &(con->recv_raw), sizeof (con->recv_raw), &(con->traffic_limit_reached), sizeof (con->traffic_limit_reached), &(con->bytes_written), sizeof (con->bytes_written), &(con->bytes_written_cur_second), sizeof (con->bytes_written_cur_second), &(con->bytes_read), sizeof (con->bytes_read), &(con->bytes_header), sizeof (con->bytes_header), &(con->dst_addr_buf), sizeof (con->dst_addr_buf), &(con->parse_request), sizeof (con->parse_request), &(con->http_req), sizeof (con->http_req), &(con->header_len), sizeof (con->header_len), &(con->authed_user), sizeof (con->authed_user), &(con->environment), sizeof (con->environment), &(con->got_response), sizeof (con->got_response), &(con->in_joblist), sizeof (con->in_joblist), &(con->cond_cache), sizeof (con->cond_cache), &(con->server_name), sizeof (con->server_name), &(con->error_handler), sizeof (con->error_handler), &(con->error_handler_saved_status), sizeof (con->error_handler_saved_status), &(con->in_error_handler), sizeof (con->in_error_handler), &(con->srv_socket), sizeof (con->srv_socket), &(p->tmp_buf), sizeof (p->tmp_buf), &(p->resp), sizeof (p->resp), &(p->config_storage), sizeof (p->config_storage)))\n    return HANDLER_FINISHED;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8256594563078465, -8.560877956307845, -8.2695469253078464, -7.9106060253078461, -7.5809234920078463, -8.5711365253078462, -7.6919907253078463, -7.6919907253078463, -7.4624500253078461, -8.5358957253078458, -7.6919907253078463, -8.1641965253078457, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -8.5358957253078458, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -8.5358957253078458, -8.5358957253078458, -8.5358957253078458, -8.5358957253078458, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -7.6919907253078463, -8.5358957253078458, -8.5358957253078458, -8.5358957253078458, -7.4480638553078462, -8.5358957253078458, -8.5358957253078458, -7.6919907253078463, -7.6919907253078463, -8.5358957253078458, -8.5358957253078458, -8.5358957253078458, -7.6919907253078463, -7.6919907253078463, -8.128955725307847, -8.5358957253078458, -8.5358957253078458, -8.128955725307847]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	80,
			"size":	5
		}, {
			"switch":	0,
			"case":	81,
			"size":	5
		}, {
			"switch":	1,
			"case":	1,
			"size":	5
		}, {
			"switch":	2,
			"case":	81,
			"size":	18
		}, {
			"switch":	2,
			"case":	82,
			"size":	18
		}, {
			"switch":	3,
			"case":	1,
			"size":	18
		}, {
			"switch":	4,
			"case":	82,
			"size":	22
		}, {
			"switch":	4,
			"case":	83,
			"size":	22
		}, {
			"switch":	5,
			"case":	160,
			"size":	25
		}, {
			"switch":	5,
			"case":	161,
			"size":	25
		}, {
			"switch":	5,
			"case":	162,
			"size":	25
		}, {
			"switch":	6,
			"case":	1,
			"size":	25
		}, {
			"switch":	6,
			"case":	2,
			"size":	25
		}, {
			"switch":	6,
			"case":	3,
			"size":	25
		}, {
			"switch":	7,
			"case":	1,
			"size":	25
		}, {
			"switch":	8,
			"case":	160,
			"size":	25
		}, {
			"switch":	8,
			"case":	161,
			"size":	25
		}, {
			"switch":	8,
			"case":	162,
			"size":	25
		}, {
			"switch":	9,
			"case":	1,
			"size":	25
		}, {
			"switch":	10,
			"case":	160,
			"size":	72
		}, {
			"switch":	10,
			"case":	161,
			"size":	72
		}, {
			"switch":	10,
			"case":	162,
			"size":	72
		}, {
			"switch":	11,
			"case":	1,
			"size":	72
		}, {
			"switch":	12,
			"case":	160,
			"size":	69
		}, {
			"switch":	12,
			"case":	161,
			"size":	69
		}, {
			"switch":	12,
			"case":	162,
			"size":	69
		}, {
			"switch":	13,
			"case":	1,
			"size":	69
		}, {
			"switch":	14,
			"case":	161,
			"size":	56
		}, {
			"switch":	14,
			"case":	162,
			"size":	56
		}, {
			"switch":	14,
			"case":	163,
			"size":	56
		}, {
			"switch":	15,
			"case":	1,
			"size":	56
		}, {
			"switch":	15,
			"case":	2,
			"size":	56
		}, {
			"switch":	15,
			"case":	3,
			"size":	56
		}, {
			"switch":	16,
			"case":	161,
			"size":	59
		}, {
			"switch":	16,
			"case":	162,
			"size":	59
		}, {
			"switch":	16,
			"case":	163,
			"size":	59
		}, {
			"switch":	17,
			"case":	1,
			"size":	59
		}, {
			"switch":	18,
			"case":	160,
			"size":	12
		}, {
			"switch":	18,
			"case":	161,
			"size":	12
		}, {
			"switch":	18,
			"case":	162,
			"size":	12
		}, {
			"switch":	19,
			"case":	1,
			"size":	12
		}, {
			"switch":	20,
			"case":	1,
			"size":	56
		}, {
			"switch":	20,
			"case":	2,
			"size":	56
		}, {
			"switch":	21,
			"case":	1,
			"size":	22
		}, {
			"switch":	22,
			"case":	81,
			"size":	18
		}, {
			"switch":	22,
			"case":	82,
			"size":	18
		}, {
			"switch":	23,
			"case":	1,
			"size":	18
		}, {
			"switch":	24,
			"case":	81,
			"size":	18
		}, {
			"switch":	24,
			"case":	82,
			"size":	18
		}, {
			"switch":	25,
			"case":	1,
			"size":	18
		}, {
			"switch":	25,
			"case":	2,
			"size":	18
		}, {
			"switch":	25,
			"case":	3,
			"size":	18
		}, {
			"switch":	26,
			"case":	156,
			"size":	65
		}, {
			"switch":	26,
			"case":	157,
			"size":	65
		}, {
			"switch":	27,
			"case":	1,
			"size":	65
		}, {
			"switch":	28,
			"case":	1,
			"size":	18
		}, {
			"switch":	29,
			"case":	80,
			"size":	5
		}, {
			"switch":	29,
			"case":	81,
			"size":	5
		}, {
			"switch":	30,
			"case":	1,
			"size":	5
		}, {
			"switch":	31,
			"case":	277,
			"size":	17
		}, {
			"switch":	31,
			"case":	278,
			"size":	17
		}, {
			"switch":	31,
			"case":	279,
			"size":	17
		}, {
			"switch":	31,
			"case":	280,
			"size":	17
		}, {
			"switch":	31,
			"case":	281,
			"size":	17
		}, {
			"switch":	31,
			"case":	282,
			"size":	17
		}, {
			"switch":	31,
			"case":	283,
			"size":	17
		}, {
			"switch":	31,
			"case":	284,
			"size":	17
		}, {
			"switch":	32,
			"case":	1,
			"size":	17
		}, {
			"switch":	33,
			"case":	276,
			"size":	17
		}, {
			"switch":	33,
			"case":	277,
			"size":	17
		}, {
			"switch":	33,
			"case":	278,
			"size":	17
		}, {
			"switch":	33,
			"case":	279,
			"size":	17
		}, {
			"switch":	33,
			"case":	280,
			"size":	17
		}, {
			"switch":	33,
			"case":	281,
			"size":	17
		}, {
			"switch":	33,
			"case":	282,
			"size":	17
		}, {
			"switch":	33,
			"case":	283,
			"size":	17
		}, {
			"switch":	34,
			"case":	312,
			"size":	13
		}, {
			"switch":	34,
			"case":	313,
			"size":	13
		}, {
			"switch":	34,
			"case":	314,
			"size":	13
		}, {
			"switch":	34,
			"case":	315,
			"size":	13
		}, {
			"switch":	34,
			"case":	316,
			"size":	13
		}, {
			"switch":	34,
			"case":	317,
			"size":	13
		}, {
			"switch":	34,
			"case":	318,
			"size":	13
		}, {
			"switch":	34,
			"case":	319,
			"size":	13
		}, {
			"switch":	35,
			"case":	1,
			"size":	13
		}, {
			"switch":	36,
			"case":	313,
			"size":	21
		}, {
			"switch":	36,
			"case":	314,
			"size":	21
		}, {
			"switch":	36,
			"case":	315,
			"size":	21
		}, {
			"switch":	36,
			"case":	316,
			"size":	21
		}, {
			"switch":	36,
			"case":	317,
			"size":	21
		}, {
			"switch":	36,
			"case":	318,
			"size":	21
		}, {
			"switch":	36,
			"case":	319,
			"size":	21
		}, {
			"switch":	36,
			"case":	320,
			"size":	21
		}, {
			"switch":	37,
			"case":	368,
			"size":	21
		}, {
			"switch":	37,
			"case":	369,
			"size":	21
		}, {
			"switch":	37,
			"case":	370,
			"size":	21
		}, {
			"switch":	37,
			"case":	371,
			"size":	21
		}, {
			"switch":	37,
			"case":	372,
			"size":	21
		}, {
			"switch":	37,
			"case":	373,
			"size":	21
		}, {
			"switch":	37,
			"case":	374,
			"size":	21
		}, {
			"switch":	37,
			"case":	375,
			"size":	21
		}, {
			"switch":	37,
			"case":	376,
			"size":	21
		}, {
			"switch":	38,
			"case":	368,
			"size":	21
		}, {
			"switch":	38,
			"case":	369,
			"size":	21
		}, {
			"switch":	38,
			"case":	370,
			"size":	21
		}, {
			"switch":	38,
			"case":	371,
			"size":	21
		}, {
			"switch":	38,
			"case":	372,
			"size":	21
		}, {
			"switch":	38,
			"case":	373,
			"size":	21
		}, {
			"switch":	38,
			"case":	374,
			"size":	21
		}, {
			"switch":	38,
			"case":	375,
			"size":	21
		}, {
			"switch":	38,
			"case":	376,
			"size":	21
		}, {
			"switch":	39,
			"case":	1,
			"size":	21
		}, {
			"switch":	39,
			"case":	2,
			"size":	21
		}, {
			"switch":	39,
			"case":	96,
			"size":	21
		}, {
			"switch":	40,
			"case":	1,
			"size":	21
		}, {
			"switch":	40,
			"case":	2,
			"size":	21
		}, {
			"switch":	41,
			"case":	1,
			"size":	21
		}, {
			"switch":	42,
			"case":	367,
			"size":	9
		}, {
			"switch":	42,
			"case":	368,
			"size":	9
		}, {
			"switch":	42,
			"case":	369,
			"size":	9
		}, {
			"switch":	42,
			"case":	370,
			"size":	9
		}, {
			"switch":	42,
			"case":	371,
			"size":	9
		}, {
			"switch":	42,
			"case":	372,
			"size":	9
		}, {
			"switch":	42,
			"case":	373,
			"size":	9
		}, {
			"switch":	42,
			"case":	374,
			"size":	9
		}, {
			"switch":	42,
			"case":	375,
			"size":	9
		}, {
			"switch":	43,
			"case":	1,
			"size":	9
		}, {
			"switch":	43,
			"case":	2,
			"size":	9
		}, {
			"switch":	43,
			"case":	3,
			"size":	9
		}, {
			"switch":	44,
			"case":	1,
			"size":	9
		}, {
			"switch":	45,
			"case":	369,
			"size":	21
		}, {
			"switch":	45,
			"case":	370,
			"size":	21
		}, {
			"switch":	45,
			"case":	371,
			"size":	21
		}, {
			"switch":	45,
			"case":	372,
			"size":	21
		}, {
			"switch":	45,
			"case":	373,
			"size":	21
		}, {
			"switch":	45,
			"case":	374,
			"size":	21
		}, {
			"switch":	45,
			"case":	375,
			"size":	21
		}, {
			"switch":	45,
			"case":	376,
			"size":	21
		}, {
			"switch":	45,
			"case":	377,
			"size":	21
		}, {
			"switch":	46,
			"case":	1,
			"size":	21
		}, {
			"switch":	46,
			"case":	2,
			"size":	21
		}, {
			"switch":	46,
			"case":	12,
			"size":	21
		}, {
			"switch":	47,
			"case":	368,
			"size":	62
		}, {
			"switch":	47,
			"case":	369,
			"size":	62
		}, {
			"switch":	47,
			"case":	370,
			"size":	62
		}, {
			"switch":	47,
			"case":	371,
			"size":	62
		}, {
			"switch":	47,
			"case":	372,
			"size":	62
		}, {
			"switch":	47,
			"case":	373,
			"size":	62
		}, {
			"switch":	47,
			"case":	374,
			"size":	62
		}, {
			"switch":	47,
			"case":	375,
			"size":	62
		}, {
			"switch":	47,
			"case":	376,
			"size":	62
		}, {
			"switch":	48,
			"case":	1,
			"size":	62
		}, {
			"switch":	48,
			"case":	2,
			"size":	62
		}, {
			"switch":	48,
			"case":	12,
			"size":	62
		}, {
			"switch":	49,
			"case":	367,
			"size":	21
		}, {
			"switch":	49,
			"case":	368,
			"size":	21
		}, {
			"switch":	49,
			"case":	369,
			"size":	21
		}, {
			"switch":	49,
			"case":	370,
			"size":	21
		}, {
			"switch":	49,
			"case":	371,
			"size":	21
		}, {
			"switch":	49,
			"case":	372,
			"size":	21
		}, {
			"switch":	49,
			"case":	373,
			"size":	21
		}, {
			"switch":	49,
			"case":	374,
			"size":	21
		}, {
			"switch":	49,
			"case":	375,
			"size":	21
		}, {
			"switch":	50,
			"case":	1,
			"size":	21
		}, {
			"switch":	51,
			"case":	1,
			"size":	62
		}, {
			"switch":	51,
			"case":	2,
			"size":	62
		}, {
			"switch":	52,
			"case":	1,
			"size":	21
		}, {
			"switch":	52,
			"case":	2,
			"size":	21
		}, {
			"switch":	53,
			"case":	369,
			"size":	63
		}, {
			"switch":	53,
			"case":	370,
			"size":	63
		}, {
			"switch":	53,
			"case":	371,
			"size":	63
		}, {
			"switch":	53,
			"case":	372,
			"size":	63
		}, {
			"switch":	53,
			"case":	373,
			"size":	63
		}, {
			"switch":	53,
			"case":	374,
			"size":	63
		}, {
			"switch":	53,
			"case":	375,
			"size":	63
		}, {
			"switch":	53,
			"case":	376,
			"size":	63
		}, {
			"switch":	53,
			"case":	377,
			"size":	63
		}, {
			"switch":	54,
			"case":	1,
			"size":	63
		}, {
			"switch":	54,
			"case":	2,
			"size":	63
		}, {
			"switch":	54,
			"case":	3,
			"size":	63
		}, {
			"switch":	55,
			"case":	368,
			"size":	63
		}, {
			"switch":	55,
			"case":	369,
			"size":	63
		}, {
			"switch":	55,
			"case":	370,
			"size":	63
		}, {
			"switch":	55,
			"case":	371,
			"size":	63
		}, {
			"switch":	55,
			"case":	372,
			"size":	63
		}, {
			"switch":	55,
			"case":	373,
			"size":	63
		}, {
			"switch":	55,
			"case":	374,
			"size":	63
		}, {
			"switch":	55,
			"case":	375,
			"size":	63
		}, {
			"switch":	55,
			"case":	376,
			"size":	63
		}, {
			"switch":	56,
			"case":	1,
			"size":	63
		}, {
			"switch":	57,
			"case":	1,
			"size":	63
		}, {
			"switch":	57,
			"case":	2,
			"size":	63
		}, {
			"switch":	58,
			"case":	369,
			"size":	30
		}, {
			"switch":	58,
			"case":	370,
			"size":	30
		}, {
			"switch":	58,
			"case":	371,
			"size":	30
		}, {
			"switch":	58,
			"case":	372,
			"size":	30
		}, {
			"switch":	58,
			"case":	373,
			"size":	30
		}, {
			"switch":	58,
			"case":	374,
			"size":	30
		}, {
			"switch":	58,
			"case":	375,
			"size":	30
		}, {
			"switch":	58,
			"case":	376,
			"size":	30
		}, {
			"switch":	58,
			"case":	377,
			"size":	30
		}, {
			"switch":	59,
			"case":	1,
			"size":	30
		}, {
			"switch":	60,
			"case":	369,
			"size":	30
		}, {
			"switch":	60,
			"case":	370,
			"size":	30
		}, {
			"switch":	60,
			"case":	371,
			"size":	30
		}, {
			"switch":	60,
			"case":	372,
			"size":	30
		}, {
			"switch":	60,
			"case":	373,
			"size":	30
		}, {
			"switch":	60,
			"case":	374,
			"size":	30
		}, {
			"switch":	60,
			"case":	375,
			"size":	30
		}, {
			"switch":	60,
			"case":	376,
			"size":	30
		}, {
			"switch":	60,
			"case":	377,
			"size":	30
		}, {
			"switch":	61,
			"case":	1,
			"size":	30
		}, {
			"switch":	62,
			"case":	369,
			"size":	63
		}, {
			"switch":	62,
			"case":	370,
			"size":	63
		}, {
			"switch":	62,
			"case":	371,
			"size":	63
		}, {
			"switch":	62,
			"case":	372,
			"size":	63
		}, {
			"switch":	62,
			"case":	373,
			"size":	63
		}, {
			"switch":	62,
			"case":	374,
			"size":	63
		}, {
			"switch":	62,
			"case":	375,
			"size":	63
		}, {
			"switch":	62,
			"case":	376,
			"size":	63
		}, {
			"switch":	62,
			"case":	377,
			"size":	63
		}, {
			"switch":	63,
			"case":	1,
			"size":	63
		}, {
			"switch":	64,
			"case":	1,
			"size":	21
		}, {
			"switch":	65,
			"case":	312,
			"size":	47
		}, {
			"switch":	65,
			"case":	313,
			"size":	47
		}, {
			"switch":	65,
			"case":	314,
			"size":	47
		}, {
			"switch":	65,
			"case":	315,
			"size":	47
		}, {
			"switch":	65,
			"case":	316,
			"size":	47
		}, {
			"switch":	65,
			"case":	317,
			"size":	47
		}, {
			"switch":	65,
			"case":	318,
			"size":	47
		}, {
			"switch":	65,
			"case":	319,
			"size":	47
		}, {
			"switch":	66,
			"case":	1,
			"size":	47
		}, {
			"switch":	67,
			"case":	312,
			"size":	54
		}, {
			"switch":	67,
			"case":	313,
			"size":	54
		}, {
			"switch":	67,
			"case":	314,
			"size":	54
		}, {
			"switch":	67,
			"case":	315,
			"size":	54
		}, {
			"switch":	67,
			"case":	316,
			"size":	54
		}, {
			"switch":	67,
			"case":	317,
			"size":	54
		}, {
			"switch":	67,
			"case":	318,
			"size":	54
		}, {
			"switch":	67,
			"case":	319,
			"size":	54
		}, {
			"switch":	68,
			"case":	1,
			"size":	54
		}, {
			"switch":	68,
			"case":	2,
			"size":	54
		}, {
			"switch":	68,
			"case":	3,
			"size":	54
		}, {
			"switch":	69,
			"case":	312,
			"size":	54
		}, {
			"switch":	69,
			"case":	313,
			"size":	54
		}, {
			"switch":	69,
			"case":	314,
			"size":	54
		}, {
			"switch":	69,
			"case":	315,
			"size":	54
		}, {
			"switch":	69,
			"case":	316,
			"size":	54
		}, {
			"switch":	69,
			"case":	317,
			"size":	54
		}, {
			"switch":	69,
			"case":	318,
			"size":	54
		}, {
			"switch":	69,
			"case":	319,
			"size":	54
		}, {
			"switch":	70,
			"case":	1,
			"size":	54
		}, {
			"switch":	71,
			"case":	1,
			"size":	54
		}, {
			"switch":	72,
			"case":	312,
			"size":	54
		}, {
			"switch":	72,
			"case":	313,
			"size":	54
		}, {
			"switch":	72,
			"case":	314,
			"size":	54
		}, {
			"switch":	72,
			"case":	315,
			"size":	54
		}, {
			"switch":	72,
			"case":	316,
			"size":	54
		}, {
			"switch":	72,
			"case":	317,
			"size":	54
		}, {
			"switch":	72,
			"case":	318,
			"size":	54
		}, {
			"switch":	72,
			"case":	319,
			"size":	54
		}, {
			"switch":	73,
			"case":	1,
			"size":	54
		}, {
			"switch":	74,
			"case":	312,
			"size":	57
		}, {
			"switch":	74,
			"case":	313,
			"size":	57
		}, {
			"switch":	74,
			"case":	314,
			"size":	57
		}, {
			"switch":	74,
			"case":	315,
			"size":	57
		}, {
			"switch":	74,
			"case":	316,
			"size":	57
		}, {
			"switch":	74,
			"case":	317,
			"size":	57
		}, {
			"switch":	74,
			"case":	318,
			"size":	57
		}, {
			"switch":	74,
			"case":	319,
			"size":	57
		}, {
			"switch":	75,
			"case":	1,
			"size":	57
		}, {
			"switch":	75,
			"case":	2,
			"size":	57
		}, {
			"switch":	75,
			"case":	3,
			"size":	57
		}, {
			"switch":	75,
			"case":	5,
			"size":	57
		}, {
			"switch":	76,
			"case":	1,
			"size":	57
		}, {
			"switch":	77,
			"case":	311,
			"size":	6
		}, {
			"switch":	77,
			"case":	312,
			"size":	6
		}, {
			"switch":	77,
			"case":	313,
			"size":	6
		}, {
			"switch":	77,
			"case":	314,
			"size":	6
		}, {
			"switch":	77,
			"case":	315,
			"size":	6
		}, {
			"switch":	77,
			"case":	316,
			"size":	6
		}, {
			"switch":	77,
			"case":	317,
			"size":	6
		}, {
			"switch":	77,
			"case":	318,
			"size":	6
		}, {
			"switch":	78,
			"case":	270,
			"size":	101
		}, {
			"switch":	78,
			"case":	271,
			"size":	101
		}, {
			"switch":	78,
			"case":	272,
			"size":	101
		}, {
			"switch":	78,
			"case":	273,
			"size":	101
		}, {
			"switch":	78,
			"case":	274,
			"size":	101
		}, {
			"switch":	78,
			"case":	275,
			"size":	101
		}, {
			"switch":	78,
			"case":	276,
			"size":	101
		}, {
			"switch":	78,
			"case":	277,
			"size":	101
		}, {
			"switch":	79,
			"case":	1,
			"size":	101
		}, {
			"switch":	80,
			"case":	269,
			"size":	94
		}, {
			"switch":	80,
			"case":	270,
			"size":	94
		}, {
			"switch":	80,
			"case":	271,
			"size":	94
		}, {
			"switch":	80,
			"case":	272,
			"size":	94
		}, {
			"switch":	80,
			"case":	273,
			"size":	94
		}, {
			"switch":	80,
			"case":	274,
			"size":	94
		}, {
			"switch":	80,
			"case":	275,
			"size":	94
		}, {
			"switch":	80,
			"case":	276,
			"size":	94
		}, {
			"switch":	81,
			"case":	1,
			"size":	94
		}, {
			"switch":	82,
			"case":	267,
			"size":	4
		}, {
			"switch":	82,
			"case":	268,
			"size":	4
		}, {
			"switch":	82,
			"case":	269,
			"size":	4
		}, {
			"switch":	82,
			"case":	270,
			"size":	4
		}, {
			"switch":	82,
			"case":	271,
			"size":	4
		}, {
			"switch":	82,
			"case":	272,
			"size":	4
		}, {
			"switch":	82,
			"case":	273,
			"size":	4
		}, {
			"switch":	82,
			"case":	274,
			"size":	4
		}, {
			"switch":	83,
			"case":	1,
			"size":	4
		}, {
			"switch":	85,
			"case":	1,
			"size":	61
		}, {
			"switch":	85,
			"case":	10,
			"size":	61
		}, {
			"switch":	86,
			"case":	486,
			"size":	64
		}, {
			"switch":	86,
			"case":	487,
			"size":	64
		}, {
			"switch":	86,
			"case":	488,
			"size":	64
		}, {
			"switch":	86,
			"case":	489,
			"size":	64
		}, {
			"switch":	86,
			"case":	490,
			"size":	64
		}, {
			"switch":	86,
			"case":	491,
			"size":	64
		}, {
			"switch":	86,
			"case":	492,
			"size":	64
		}, {
			"switch":	86,
			"case":	493,
			"size":	64
		}, {
			"switch":	86,
			"case":	494,
			"size":	64
		}, {
			"switch":	86,
			"case":	495,
			"size":	64
		}, {
			"switch":	86,
			"case":	496,
			"size":	64
		}, {
			"switch":	86,
			"case":	497,
			"size":	64
		}, {
			"switch":	86,
			"case":	498,
			"size":	64
		}, {
			"switch":	86,
			"case":	499,
			"size":	64
		}, {
			"switch":	86,
			"case":	500,
			"size":	64
		}, {
			"switch":	86,
			"case":	501,
			"size":	64
		}, {
			"switch":	86,
			"case":	502,
			"size":	64
		}, {
			"switch":	86,
			"case":	503,
			"size":	64
		}, {
			"switch":	86,
			"case":	504,
			"size":	64
		}, {
			"switch":	86,
			"case":	505,
			"size":	64
		}, {
			"switch":	86,
			"case":	506,
			"size":	64
		}, {
			"switch":	86,
			"case":	507,
			"size":	64
		}, {
			"switch":	86,
			"case":	508,
			"size":	64
		}, {
			"switch":	86,
			"case":	509,
			"size":	64
		}, {
			"switch":	87,
			"case":	1,
			"size":	64
		}, {
			"switch":	88,
			"case":	481,
			"size":	74
		}, {
			"switch":	88,
			"case":	482,
			"size":	74
		}, {
			"switch":	88,
			"case":	483,
			"size":	74
		}, {
			"switch":	88,
			"case":	484,
			"size":	74
		}, {
			"switch":	88,
			"case":	485,
			"size":	74
		}, {
			"switch":	88,
			"case":	486,
			"size":	74
		}, {
			"switch":	88,
			"case":	487,
			"size":	74
		}, {
			"switch":	88,
			"case":	488,
			"size":	74
		}, {
			"switch":	88,
			"case":	489,
			"size":	74
		}, {
			"switch":	88,
			"case":	490,
			"size":	74
		}, {
			"switch":	88,
			"case":	491,
			"size":	74
		}, {
			"switch":	88,
			"case":	492,
			"size":	74
		}, {
			"switch":	88,
			"case":	493,
			"size":	74
		}, {
			"switch":	88,
			"case":	494,
			"size":	74
		}, {
			"switch":	88,
			"case":	495,
			"size":	74
		}, {
			"switch":	88,
			"case":	496,
			"size":	74
		}, {
			"switch":	88,
			"case":	497,
			"size":	74
		}, {
			"switch":	88,
			"case":	498,
			"size":	74
		}, {
			"switch":	88,
			"case":	499,
			"size":	74
		}, {
			"switch":	88,
			"case":	500,
			"size":	74
		}, {
			"switch":	88,
			"case":	501,
			"size":	74
		}, {
			"switch":	88,
			"case":	502,
			"size":	74
		}, {
			"switch":	88,
			"case":	503,
			"size":	74
		}, {
			"switch":	88,
			"case":	504,
			"size":	74
		}, {
			"switch":	89,
			"case":	1,
			"size":	74
		}, {
			"switch":	90,
			"case":	44,
			"size":	11
		}, {
			"switch":	90,
			"case":	45,
			"size":	11
		}, {
			"switch":	90,
			"case":	46,
			"size":	11
		}, {
			"switch":	90,
			"case":	47,
			"size":	11
		}, {
			"switch":	90,
			"case":	48,
			"size":	11
		}, {
			"switch":	90,
			"case":	49,
			"size":	11
		}, {
			"switch":	91,
			"case":	1,
			"size":	11
		}, {
			"switch":	92,
			"case":	43,
			"size":	4
		}, {
			"switch":	92,
			"case":	44,
			"size":	4
		}, {
			"switch":	92,
			"case":	45,
			"size":	4
		}, {
			"switch":	92,
			"case":	46,
			"size":	4
		}, {
			"switch":	92,
			"case":	47,
			"size":	4
		}, {
			"switch":	92,
			"case":	48,
			"size":	4
		}, {
			"switch":	93,
			"case":	1,
			"size":	4
		}, {
			"switch":	94,
			"case":	262,
			"size":	53
		}, {
			"switch":	94,
			"case":	263,
			"size":	53
		}, {
			"switch":	94,
			"case":	264,
			"size":	53
		}, {
			"switch":	94,
			"case":	265,
			"size":	53
		}, {
			"switch":	94,
			"case":	266,
			"size":	53
		}, {
			"switch":	94,
			"case":	267,
			"size":	53
		}, {
			"switch":	94,
			"case":	268,
			"size":	53
		}, {
			"switch":	94,
			"case":	269,
			"size":	53
		}, {
			"switch":	94,
			"case":	270,
			"size":	53
		}, {
			"switch":	95,
			"case":	1,
			"size":	53
		}, {
			"switch":	95,
			"case":	2,
			"size":	53
		}, {
			"switch":	95,
			"case":	3,
			"size":	53
		}, {
			"switch":	96,
			"case":	1,
			"size":	53
		}, {
			"switch":	97,
			"case":	261,
			"size":	6
		}, {
			"switch":	97,
			"case":	262,
			"size":	6
		}, {
			"switch":	97,
			"case":	263,
			"size":	6
		}, {
			"switch":	97,
			"case":	264,
			"size":	6
		}, {
			"switch":	97,
			"case":	265,
			"size":	6
		}, {
			"switch":	97,
			"case":	266,
			"size":	6
		}, {
			"switch":	97,
			"case":	267,
			"size":	6
		}, {
			"switch":	97,
			"case":	268,
			"size":	6
		}, {
			"switch":	97,
			"case":	269,
			"size":	6
		}, {
			"switch":	98,
			"case":	1,
			"size":	6
		}, {
			"switch":	99,
			"case":	263,
			"size":	6
		}, {
			"switch":	99,
			"case":	264,
			"size":	6
		}, {
			"switch":	99,
			"case":	265,
			"size":	6
		}, {
			"switch":	99,
			"case":	266,
			"size":	6
		}, {
			"switch":	99,
			"case":	267,
			"size":	6
		}, {
			"switch":	99,
			"case":	268,
			"size":	6
		}, {
			"switch":	99,
			"case":	269,
			"size":	6
		}, {
			"switch":	99,
			"case":	270,
			"size":	6
		}, {
			"switch":	99,
			"case":	271,
			"size":	6
		}, {
			"switch":	100,
			"case":	1,
			"size":	6
		}, {
			"switch":	100,
			"case":	2,
			"size":	6
		}, {
			"switch":	100,
			"case":	3,
			"size":	6
		}, {
			"switch":	101,
			"case":	1,
			"size":	6
		}, {
			"switch":	101,
			"case":	2,
			"size":	6
		}, {
			"switch":	102,
			"case":	262,
			"size":	13
		}, {
			"switch":	102,
			"case":	263,
			"size":	13
		}, {
			"switch":	102,
			"case":	264,
			"size":	13
		}, {
			"switch":	102,
			"case":	265,
			"size":	13
		}, {
			"switch":	102,
			"case":	266,
			"size":	13
		}, {
			"switch":	102,
			"case":	267,
			"size":	13
		}, {
			"switch":	102,
			"case":	268,
			"size":	13
		}, {
			"switch":	102,
			"case":	269,
			"size":	13
		}, {
			"switch":	102,
			"case":	270,
			"size":	13
		}, {
			"switch":	103,
			"case":	1,
			"size":	13
		}, {
			"switch":	104,
			"case":	263,
			"size":	62
		}, {
			"switch":	104,
			"case":	264,
			"size":	62
		}, {
			"switch":	104,
			"case":	265,
			"size":	62
		}, {
			"switch":	104,
			"case":	266,
			"size":	62
		}, {
			"switch":	104,
			"case":	267,
			"size":	62
		}, {
			"switch":	104,
			"case":	268,
			"size":	62
		}, {
			"switch":	104,
			"case":	269,
			"size":	62
		}, {
			"switch":	104,
			"case":	270,
			"size":	62
		}, {
			"switch":	104,
			"case":	271,
			"size":	62
		}, {
			"switch":	105,
			"case":	1,
			"size":	62
		}, {
			"switch":	106,
			"case":	263,
			"size":	62
		}, {
			"switch":	106,
			"case":	264,
			"size":	62
		}, {
			"switch":	106,
			"case":	265,
			"size":	62
		}, {
			"switch":	106,
			"case":	266,
			"size":	62
		}, {
			"switch":	106,
			"case":	267,
			"size":	62
		}, {
			"switch":	106,
			"case":	268,
			"size":	62
		}, {
			"switch":	106,
			"case":	269,
			"size":	62
		}, {
			"switch":	106,
			"case":	270,
			"size":	62
		}, {
			"switch":	106,
			"case":	271,
			"size":	62
		}, {
			"switch":	107,
			"case":	1,
			"size":	62
		}, {
			"switch":	108,
			"case":	262,
			"size":	13
		}, {
			"switch":	108,
			"case":	263,
			"size":	13
		}, {
			"switch":	108,
			"case":	264,
			"size":	13
		}, {
			"switch":	108,
			"case":	265,
			"size":	13
		}, {
			"switch":	108,
			"case":	266,
			"size":	13
		}, {
			"switch":	108,
			"case":	267,
			"size":	13
		}, {
			"switch":	108,
			"case":	268,
			"size":	13
		}, {
			"switch":	108,
			"case":	269,
			"size":	13
		}, {
			"switch":	108,
			"case":	270,
			"size":	13
		}, {
			"switch":	109,
			"case":	1,
			"size":	13
		}, {
			"switch":	110,
			"case":	262,
			"size":	13
		}, {
			"switch":	110,
			"case":	263,
			"size":	13
		}, {
			"switch":	110,
			"case":	264,
			"size":	13
		}, {
			"switch":	110,
			"case":	265,
			"size":	13
		}, {
			"switch":	110,
			"case":	266,
			"size":	13
		}, {
			"switch":	110,
			"case":	267,
			"size":	13
		}, {
			"switch":	110,
			"case":	268,
			"size":	13
		}, {
			"switch":	110,
			"case":	269,
			"size":	13
		}, {
			"switch":	110,
			"case":	270,
			"size":	13
		}, {
			"switch":	111,
			"case":	1,
			"size":	13
		}, {
			"switch":	112,
			"case":	263,
			"size":	51
		}, {
			"switch":	112,
			"case":	264,
			"size":	51
		}, {
			"switch":	112,
			"case":	265,
			"size":	51
		}, {
			"switch":	112,
			"case":	266,
			"size":	51
		}, {
			"switch":	112,
			"case":	267,
			"size":	51
		}, {
			"switch":	112,
			"case":	268,
			"size":	51
		}, {
			"switch":	112,
			"case":	269,
			"size":	51
		}, {
			"switch":	112,
			"case":	270,
			"size":	51
		}, {
			"switch":	112,
			"case":	271,
			"size":	51
		}, {
			"switch":	113,
			"case":	1,
			"size":	51
		}, {
			"switch":	114,
			"case":	261,
			"size":	51
		}, {
			"switch":	114,
			"case":	262,
			"size":	51
		}, {
			"switch":	114,
			"case":	263,
			"size":	51
		}, {
			"switch":	114,
			"case":	264,
			"size":	51
		}, {
			"switch":	114,
			"case":	265,
			"size":	51
		}, {
			"switch":	114,
			"case":	266,
			"size":	51
		}, {
			"switch":	114,
			"case":	267,
			"size":	51
		}, {
			"switch":	114,
			"case":	268,
			"size":	51
		}, {
			"switch":	114,
			"case":	269,
			"size":	51
		}, {
			"switch":	115,
			"case":	1,
			"size":	51
		}],
	"func_locations":	[{
			"file":	"src/mod_cgi.c",
			"functions":	[{
					"function":	"VALGRIND_PRINTF",
					"begin":	293,
					"end":	304
				}, {
					"function":	"VALGRIND_PRINTF_BACKTRACE",
					"begin":	308,
					"end":	319
				}, {
					"function":	"_GLIB_CHECKED_ADD_U32",
					"begin":	418,
					"end":	419
				}, {
					"function":	"_GLIB_CHECKED_ADD_U64",
					"begin":	422,
					"end":	424
				}, {
					"function":	"_GLIB_CHECKED_MUL_U32",
					"begin":	420,
					"end":	421
				}, {
					"function":	"_GLIB_CHECKED_MUL_U64",
					"begin":	425,
					"end":	426
				}, {
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"cgi_connection_close",
					"begin":	392,
					"end":	485
				}, {
					"function":	"cgi_connection_close_callback",
					"begin":	487,
					"end":	491
				}, {
					"function":	"cgi_copy_response",
					"begin":	250,
					"end":	280
				}, {
					"function":	"cgi_create_env",
					"begin":	584,
					"end":	917
				}, {
					"function":	"cgi_demux_response",
					"begin":	283,
					"end":	390
				}, {
					"function":	"cgi_env_add",
					"begin":	560,
					"end":	582
				}, {
					"function":	"cgi_handle_fdevent",
					"begin":	493,
					"end":	557
				}, {
					"function":	"cgi_pid_add",
					"begin":	201,
					"end":	223
				}, {
					"function":	"cgi_pid_del",
					"begin":	225,
					"end":	245
				}, {
					"function":	"cgi_session_free",
					"begin":	103,
					"end":	113
				}, {
					"function":	"cgi_session_init",
					"begin":	91,
					"end":	101
				}, {
					"function":	"cgi_trigger",
					"begin":	999,
					"end":	1039
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"g_autoptr_cleanup_generic_gfree",
					"begin":	24,
					"end":	29
				}, {
					"function":	"g_autoptr_cleanup_gstring_free",
					"begin":	31,
					"end":	36
				}, {
					"function":	"g_bit_nth_lsf_impl",
					"begin":	254,
					"end":	267
				}, {
					"function":	"g_bit_nth_msf_impl",
					"begin":	269,
					"end":	282
				}, {
					"function":	"g_bit_storage_impl",
					"begin":	284,
					"end":	301
				}, {
					"function":	"g_mutex_locker_free",
					"begin":	333,
					"end":	337
				}, {
					"function":	"g_mutex_locker_new",
					"begin":	318,
					"end":	323
				}, {
					"function":	"g_steal_pointer",
					"begin":	186,
					"end":	196
				}, {
					"function":	"g_string_append_c_inline",
					"begin":	160,
					"end":	172
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"glib_auto_cleanup_GCond",
					"begin":	78,
					"end":	78
				}, {
					"function":	"glib_auto_cleanup_GMutex",
					"begin":	76,
					"end":	76
				}, {
					"function":	"glib_auto_cleanup_GQueue",
					"begin":	66,
					"end":	66
				}, {
					"function":	"glib_auto_cleanup_GStrv",
					"begin":	89,
					"end":	89
				}, {
					"function":	"glib_auto_cleanup_GVariantBuilder",
					"begin":	84,
					"end":	84
				}, {
					"function":	"glib_auto_cleanup_GVariantDict",
					"begin":	87,
					"end":	87
				}, {
					"function":	"glib_autoptr_cleanup_GArray",
					"begin":	53,
					"end":	53
				}, {
					"function":	"glib_autoptr_cleanup_GAsyncQueue",
					"begin":	41,
					"end":	41
				}, {
					"function":	"glib_autoptr_cleanup_GBookmarkFile",
					"begin":	42,
					"end":	42
				}, {
					"function":	"glib_autoptr_cleanup_GByteArray",
					"begin":	55,
					"end":	55
				}, {
					"function":	"glib_autoptr_cleanup_GBytes",
					"begin":	43,
					"end":	43
				}, {
					"function":	"glib_autoptr_cleanup_GChecksum",
					"begin":	44,
					"end":	44
				}, {
					"function":	"glib_autoptr_cleanup_GDateTime",
					"begin":	45,
					"end":	45
				}, {
					"function":	"glib_autoptr_cleanup_GDir",
					"begin":	46,
					"end":	46
				}, {
					"function":	"glib_autoptr_cleanup_GError",
					"begin":	47,
					"end":	47
				}, {
					"function":	"glib_autoptr_cleanup_GHashTable",
					"begin":	48,
					"end":	48
				}, {
					"function":	"glib_autoptr_cleanup_GHmac",
					"begin":	49,
					"end":	49
				}, {
					"function":	"glib_autoptr_cleanup_GIOChannel",
					"begin":	50,
					"end":	50
				}, {
					"function":	"glib_autoptr_cleanup_GKeyFile",
					"begin":	51,
					"end":	51
				}, {
					"function":	"glib_autoptr_cleanup_GList",
					"begin":	52,
					"end":	52
				}, {
					"function":	"glib_autoptr_cleanup_GMainContext",
					"begin":	56,
					"end":	56
				}, {
					"function":	"glib_autoptr_cleanup_GMainLoop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"glib_autoptr_cleanup_GMappedFile",
					"begin":	59,
					"end":	59
				}, {
					"function":	"glib_autoptr_cleanup_GMarkupParseContext",
					"begin":	60,
					"end":	60
				}, {
					"function":	"glib_autoptr_cleanup_GMatchInfo",
					"begin":	69,
					"end":	69
				}, {
					"function":	"glib_autoptr_cleanup_GMutexLocker",
					"begin":	77,
					"end":	77
				}, {
					"function":	"glib_autoptr_cleanup_GNode",
					"begin":	61,
					"end":	61
				}, {
					"function":	"glib_autoptr_cleanup_GOptionContext",
					"begin":	62,
					"end":	62
				}, {
					"function":	"glib_autoptr_cleanup_GOptionGroup",
					"begin":	63,
					"end":	63
				}, {
					"function":	"glib_autoptr_cleanup_GPatternSpec",
					"begin":	64,
					"end":	64
				}, {
					"function":	"glib_autoptr_cleanup_GPtrArray",
					"begin":	54,
					"end":	54
				}, {
					"function":	"glib_autoptr_cleanup_GQueue",
					"begin":	65,
					"end":	65
				}, {
					"function":	"glib_autoptr_cleanup_GRand",
					"begin":	67,
					"end":	67
				}, {
					"function":	"glib_autoptr_cleanup_GRegex",
					"begin":	68,
					"end":	68
				}, {
					"function":	"glib_autoptr_cleanup_GSList",
					"begin":	72,
					"end":	72
				}, {
					"function":	"glib_autoptr_cleanup_GScanner",
					"begin":	70,
					"end":	70
				}, {
					"function":	"glib_autoptr_cleanup_GSequence",
					"begin":	71,
					"end":	71
				}, {
					"function":	"glib_autoptr_cleanup_GSource",
					"begin":	58,
					"end":	58
				}, {
					"function":	"glib_autoptr_cleanup_GString",
					"begin":	73,
					"end":	73
				}, {
					"function":	"glib_autoptr_cleanup_GStringChunk",
					"begin":	74,
					"end":	74
				}, {
					"function":	"glib_autoptr_cleanup_GThread",
					"begin":	75,
					"end":	75
				}, {
					"function":	"glib_autoptr_cleanup_GTimeZone",
					"begin":	80,
					"end":	80
				}, {
					"function":	"glib_autoptr_cleanup_GTimer",
					"begin":	79,
					"end":	79
				}, {
					"function":	"glib_autoptr_cleanup_GTree",
					"begin":	81,
					"end":	81
				}, {
					"function":	"glib_autoptr_cleanup_GVariant",
					"begin":	82,
					"end":	82
				}, {
					"function":	"glib_autoptr_cleanup_GVariantBuilder",
					"begin":	83,
					"end":	83
				}, {
					"function":	"glib_autoptr_cleanup_GVariantDict",
					"begin":	86,
					"end":	86
				}, {
					"function":	"glib_autoptr_cleanup_GVariantIter",
					"begin":	85,
					"end":	85
				}, {
					"function":	"glib_autoptr_cleanup_GVariantType",
					"begin":	88,
					"end":	88
				}, {
					"function":	"glib_listautoptr_cleanup_GArray",
					"begin":	53,
					"end":	53
				}, {
					"function":	"glib_listautoptr_cleanup_GAsyncQueue",
					"begin":	41,
					"end":	41
				}, {
					"function":	"glib_listautoptr_cleanup_GBookmarkFile",
					"begin":	42,
					"end":	42
				}, {
					"function":	"glib_listautoptr_cleanup_GByteArray",
					"begin":	55,
					"end":	55
				}, {
					"function":	"glib_listautoptr_cleanup_GBytes",
					"begin":	43,
					"end":	43
				}, {
					"function":	"glib_listautoptr_cleanup_GChecksum",
					"begin":	44,
					"end":	44
				}, {
					"function":	"glib_listautoptr_cleanup_GDateTime",
					"begin":	45,
					"end":	45
				}, {
					"function":	"glib_listautoptr_cleanup_GDir",
					"begin":	46,
					"end":	46
				}, {
					"function":	"glib_listautoptr_cleanup_GError",
					"begin":	47,
					"end":	47
				}, {
					"function":	"glib_listautoptr_cleanup_GHashTable",
					"begin":	48,
					"end":	48
				}, {
					"function":	"glib_listautoptr_cleanup_GHmac",
					"begin":	49,
					"end":	49
				}, {
					"function":	"glib_listautoptr_cleanup_GIOChannel",
					"begin":	50,
					"end":	50
				}, {
					"function":	"glib_listautoptr_cleanup_GKeyFile",
					"begin":	51,
					"end":	51
				}, {
					"function":	"glib_listautoptr_cleanup_GList",
					"begin":	52,
					"end":	52
				}, {
					"function":	"glib_listautoptr_cleanup_GMainContext",
					"begin":	56,
					"end":	56
				}, {
					"function":	"glib_listautoptr_cleanup_GMainLoop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"glib_listautoptr_cleanup_GMappedFile",
					"begin":	59,
					"end":	59
				}, {
					"function":	"glib_listautoptr_cleanup_GMarkupParseContext",
					"begin":	60,
					"end":	60
				}, {
					"function":	"glib_listautoptr_cleanup_GMatchInfo",
					"begin":	69,
					"end":	69
				}, {
					"function":	"glib_listautoptr_cleanup_GMutexLocker",
					"begin":	77,
					"end":	77
				}, {
					"function":	"glib_listautoptr_cleanup_GNode",
					"begin":	61,
					"end":	61
				}, {
					"function":	"glib_listautoptr_cleanup_GOptionContext",
					"begin":	62,
					"end":	62
				}, {
					"function":	"glib_listautoptr_cleanup_GOptionGroup",
					"begin":	63,
					"end":	63
				}, {
					"function":	"glib_listautoptr_cleanup_GPatternSpec",
					"begin":	64,
					"end":	64
				}, {
					"function":	"glib_listautoptr_cleanup_GPtrArray",
					"begin":	54,
					"end":	54
				}, {
					"function":	"glib_listautoptr_cleanup_GQueue",
					"begin":	65,
					"end":	65
				}, {
					"function":	"glib_listautoptr_cleanup_GRand",
					"begin":	67,
					"end":	67
				}, {
					"function":	"glib_listautoptr_cleanup_GRegex",
					"begin":	68,
					"end":	68
				}, {
					"function":	"glib_listautoptr_cleanup_GSList",
					"begin":	72,
					"end":	72
				}, {
					"function":	"glib_listautoptr_cleanup_GScanner",
					"begin":	70,
					"end":	70
				}, {
					"function":	"glib_listautoptr_cleanup_GSequence",
					"begin":	71,
					"end":	71
				}, {
					"function":	"glib_listautoptr_cleanup_GSource",
					"begin":	58,
					"end":	58
				}, {
					"function":	"glib_listautoptr_cleanup_GString",
					"begin":	73,
					"end":	73
				}, {
					"function":	"glib_listautoptr_cleanup_GStringChunk",
					"begin":	74,
					"end":	74
				}, {
					"function":	"glib_listautoptr_cleanup_GThread",
					"begin":	75,
					"end":	75
				}, {
					"function":	"glib_listautoptr_cleanup_GTimeZone",
					"begin":	80,
					"end":	80
				}, {
					"function":	"glib_listautoptr_cleanup_GTimer",
					"begin":	79,
					"end":	79
				}, {
					"function":	"glib_listautoptr_cleanup_GTree",
					"begin":	81,
					"end":	81
				}, {
					"function":	"glib_listautoptr_cleanup_GVariant",
					"begin":	82,
					"end":	82
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantBuilder",
					"begin":	83,
					"end":	83
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantDict",
					"begin":	86,
					"end":	86
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantIter",
					"begin":	85,
					"end":	85
				}, {
					"function":	"glib_listautoptr_cleanup_GVariantType",
					"begin":	88,
					"end":	88
				}, {
					"function":	"glib_slistautoptr_cleanup_GArray",
					"begin":	53,
					"end":	53
				}, {
					"function":	"glib_slistautoptr_cleanup_GAsyncQueue",
					"begin":	41,
					"end":	41
				}, {
					"function":	"glib_slistautoptr_cleanup_GBookmarkFile",
					"begin":	42,
					"end":	42
				}, {
					"function":	"glib_slistautoptr_cleanup_GByteArray",
					"begin":	55,
					"end":	55
				}, {
					"function":	"glib_slistautoptr_cleanup_GBytes",
					"begin":	43,
					"end":	43
				}, {
					"function":	"glib_slistautoptr_cleanup_GChecksum",
					"begin":	44,
					"end":	44
				}, {
					"function":	"glib_slistautoptr_cleanup_GDateTime",
					"begin":	45,
					"end":	45
				}, {
					"function":	"glib_slistautoptr_cleanup_GDir",
					"begin":	46,
					"end":	46
				}, {
					"function":	"glib_slistautoptr_cleanup_GError",
					"begin":	47,
					"end":	47
				}, {
					"function":	"glib_slistautoptr_cleanup_GHashTable",
					"begin":	48,
					"end":	48
				}, {
					"function":	"glib_slistautoptr_cleanup_GHmac",
					"begin":	49,
					"end":	49
				}, {
					"function":	"glib_slistautoptr_cleanup_GIOChannel",
					"begin":	50,
					"end":	50
				}, {
					"function":	"glib_slistautoptr_cleanup_GKeyFile",
					"begin":	51,
					"end":	51
				}, {
					"function":	"glib_slistautoptr_cleanup_GList",
					"begin":	52,
					"end":	52
				}, {
					"function":	"glib_slistautoptr_cleanup_GMainContext",
					"begin":	56,
					"end":	56
				}, {
					"function":	"glib_slistautoptr_cleanup_GMainLoop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"glib_slistautoptr_cleanup_GMappedFile",
					"begin":	59,
					"end":	59
				}, {
					"function":	"glib_slistautoptr_cleanup_GMarkupParseContext",
					"begin":	60,
					"end":	60
				}, {
					"function":	"glib_slistautoptr_cleanup_GMatchInfo",
					"begin":	69,
					"end":	69
				}, {
					"function":	"glib_slistautoptr_cleanup_GMutexLocker",
					"begin":	77,
					"end":	77
				}, {
					"function":	"glib_slistautoptr_cleanup_GNode",
					"begin":	61,
					"end":	61
				}, {
					"function":	"glib_slistautoptr_cleanup_GOptionContext",
					"begin":	62,
					"end":	62
				}, {
					"function":	"glib_slistautoptr_cleanup_GOptionGroup",
					"begin":	63,
					"end":	63
				}, {
					"function":	"glib_slistautoptr_cleanup_GPatternSpec",
					"begin":	64,
					"end":	64
				}, {
					"function":	"glib_slistautoptr_cleanup_GPtrArray",
					"begin":	54,
					"end":	54
				}, {
					"function":	"glib_slistautoptr_cleanup_GQueue",
					"begin":	65,
					"end":	65
				}, {
					"function":	"glib_slistautoptr_cleanup_GRand",
					"begin":	67,
					"end":	67
				}, {
					"function":	"glib_slistautoptr_cleanup_GRegex",
					"begin":	68,
					"end":	68
				}, {
					"function":	"glib_slistautoptr_cleanup_GSList",
					"begin":	72,
					"end":	72
				}, {
					"function":	"glib_slistautoptr_cleanup_GScanner",
					"begin":	70,
					"end":	70
				}, {
					"function":	"glib_slistautoptr_cleanup_GSequence",
					"begin":	71,
					"end":	71
				}, {
					"function":	"glib_slistautoptr_cleanup_GSource",
					"begin":	58,
					"end":	58
				}, {
					"function":	"glib_slistautoptr_cleanup_GString",
					"begin":	73,
					"end":	73
				}, {
					"function":	"glib_slistautoptr_cleanup_GStringChunk",
					"begin":	74,
					"end":	74
				}, {
					"function":	"glib_slistautoptr_cleanup_GThread",
					"begin":	75,
					"end":	75
				}, {
					"function":	"glib_slistautoptr_cleanup_GTimeZone",
					"begin":	80,
					"end":	80
				}, {
					"function":	"glib_slistautoptr_cleanup_GTimer",
					"begin":	79,
					"end":	79
				}, {
					"function":	"glib_slistautoptr_cleanup_GTree",
					"begin":	81,
					"end":	81
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariant",
					"begin":	82,
					"end":	82
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantBuilder",
					"begin":	83,
					"end":	83
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantDict",
					"begin":	86,
					"end":	86
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantIter",
					"begin":	85,
					"end":	85
				}, {
					"function":	"glib_slistautoptr_cleanup_GVariantType",
					"begin":	88,
					"end":	88
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"lh_OPENSSL_CSTRING_delete",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_doall",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_error",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_free",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_get_down_load",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_insert",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_new",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_node_stats_bio",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_node_usage_stats_bio",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_num_items",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_retrieve",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_set_down_load",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_CSTRING_stats_bio",
					"begin":	207,
					"end":	207
				}, {
					"function":	"lh_OPENSSL_STRING_delete",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_doall",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_error",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_free",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_get_down_load",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_insert",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_new",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_node_stats_bio",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_node_usage_stats_bio",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_num_items",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_retrieve",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_set_down_load",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lh_OPENSSL_STRING_stats_bio",
					"begin":	197,
					"end":	197
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"mod_cgi_free",
					"begin":	131,
					"end":	158
				}, {
					"function":	"mod_cgi_init",
					"begin":	115,
					"end":	128
				}, {
					"function":	"mod_cgi_patch_connection",
					"begin":	919,
					"end":	947
				}, {
					"function":	"mod_cgi_plugin_init",
					"begin":	1172,
					"end":	1189
				}, {
					"function":	"mod_cgi_read_response_content",
					"begin":	1041,
					"end":	1132
				}, {
					"function":	"mod_cgi_send_request_content",
					"begin":	1134,
					"end":	1169
				}, {
					"function":	"mod_cgi_set_defaults",
					"begin":	164,
					"end":	198
				}, {
					"function":	"mod_cgi_start_backend",
					"begin":	949,
					"end":	997
				}, {
					"function":	"pthread_equal",
					"begin":	1153,
					"end":	1157
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"sk_ASN1_GENERALSTRING_deep_copy",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_delete",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_delete_ptr",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_dup",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_find",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_find_ex",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_free",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_insert",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_is_sorted",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_new",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_new_null",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_new_reserve",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_num",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_pop",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_pop_free",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_push",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_reserve",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_set",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_set_cmp_func",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_shift",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_sort",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_unshift",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_value",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_GENERALSTRING_zero",
					"begin":	440,
					"end":	440
				}, {
					"function":	"sk_ASN1_INTEGER_deep_copy",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_delete",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_delete_ptr",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_dup",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_find",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_find_ex",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_free",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_insert",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_is_sorted",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_new",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_new_null",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_new_reserve",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_num",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_pop",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_pop_free",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_push",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_reserve",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_set",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_set_cmp_func",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_shift",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_sort",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_unshift",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_value",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_INTEGER_zero",
					"begin":	438,
					"end":	438
				}, {
					"function":	"sk_ASN1_OBJECT_deep_copy",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_delete",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_delete_ptr",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_dup",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_find",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_find_ex",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_free",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_insert",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_is_sorted",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_new",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_new_null",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_new_reserve",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_num",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_pop",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_pop_free",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_push",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_reserve",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_set",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_set_cmp_func",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_shift",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_sort",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_unshift",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_value",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_OBJECT_zero",
					"begin":	536,
					"end":	536
				}, {
					"function":	"sk_ASN1_STRING_TABLE_deep_copy",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_delete",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_delete_ptr",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_dup",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_find",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_find_ex",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_free",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_insert",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_is_sorted",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_new",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_new_null",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_new_reserve",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_num",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_pop",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_pop_free",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_push",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_reserve",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_set",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_set_cmp_func",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_shift",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_sort",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_unshift",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_value",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_STRING_TABLE_zero",
					"begin":	194,
					"end":	194
				}, {
					"function":	"sk_ASN1_TYPE_deep_copy",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_delete",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_delete_ptr",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_dup",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_find",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_find_ex",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_free",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_insert",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_is_sorted",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_new",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_new_null",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_new_reserve",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_num",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_pop",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_pop_free",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_push",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_reserve",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_set",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_set_cmp_func",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_shift",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_sort",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_unshift",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_value",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_TYPE_zero",
					"begin":	475,
					"end":	475
				}, {
					"function":	"sk_ASN1_UTF8STRING_deep_copy",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_delete",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_delete_ptr",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_dup",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_find",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_find_ex",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_free",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_insert",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_is_sorted",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_new",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_new_null",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_new_reserve",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_num",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_pop",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_pop_free",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_push",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_reserve",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_set",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_set_cmp_func",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_shift",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_sort",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_unshift",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_value",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_ASN1_UTF8STRING_zero",
					"begin":	442,
					"end":	442
				}, {
					"function":	"sk_BIO_deep_copy",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_delete",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_delete_ptr",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_dup",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_find",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_find_ex",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_free",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_insert",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_is_sorted",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_new",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_new_null",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_new_reserve",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_num",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_pop",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_pop_free",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_push",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_reserve",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_set",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_set_cmp_func",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_shift",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_sort",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_unshift",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_value",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_BIO_zero",
					"begin":	261,
					"end":	261
				}, {
					"function":	"sk_CTLOG_deep_copy",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_delete",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_delete_ptr",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_dup",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_find",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_find_ex",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_insert",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_is_sorted",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_new",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_new_null",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_new_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_num",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_pop",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_pop_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_push",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_set",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_set_cmp_func",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_shift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_sort",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_unshift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_value",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_CTLOG_zero",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_OPENSSL_BLOCK_deep_copy",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_delete",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_delete_ptr",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_dup",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_find",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_find_ex",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_free",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_insert",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_is_sorted",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_new",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_new_null",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_new_reserve",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_num",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_pop",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_pop_free",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_push",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_reserve",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_set",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_set_cmp_func",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_shift",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_sort",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_unshift",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_value",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_BLOCK_zero",
					"begin":	167,
					"end":	167
				}, {
					"function":	"sk_OPENSSL_CSTRING_deep_copy",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_delete",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_delete_ptr",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_dup",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_find",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_find_ex",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_free",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_insert",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_is_sorted",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_new",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_new_null",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_new_reserve",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_num",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_pop",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_pop_free",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_push",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_reserve",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_set",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_set_cmp_func",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_shift",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_sort",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_unshift",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_value",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_CSTRING_zero",
					"begin":	160,
					"end":	160
				}, {
					"function":	"sk_OPENSSL_STRING_deep_copy",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_delete",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_delete_ptr",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_dup",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_find",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_find_ex",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_free",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_insert",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_is_sorted",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_new",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_new_null",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_new_reserve",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_num",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_pop",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_pop_free",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_push",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_reserve",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_set",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_set_cmp_func",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_shift",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_sort",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_unshift",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_value",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_OPENSSL_STRING_zero",
					"begin":	159,
					"end":	159
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_deep_copy",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_delete",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_delete_ptr",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_dup",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_find",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_find_ex",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_insert",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_is_sorted",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_new",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_new_null",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_new_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_num",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_pop",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_pop_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_push",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_set",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_set_cmp_func",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_shift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_sort",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_unshift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_value",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_RECIP_INFO_zero",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_deep_copy",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_delete",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_delete_ptr",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_dup",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_find",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_find_ex",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_free",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_insert",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_is_sorted",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_new",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_new_null",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_new_reserve",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_num",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_pop",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_pop_free",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_push",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_reserve",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_set",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_set_cmp_func",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_shift",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_sort",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_unshift",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_value",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_SIGNER_INFO_zero",
					"begin":	49,
					"end":	49
				}, {
					"function":	"sk_PKCS7_deep_copy",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_delete",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_delete_ptr",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_dup",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_find",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_find_ex",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_free",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_insert",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_is_sorted",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_new",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_new_null",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_new_reserve",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_num",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_pop",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_pop_free",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_push",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_reserve",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_set",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_set_cmp_func",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_shift",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_sort",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_unshift",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_value",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_PKCS7_zero",
					"begin":	146,
					"end":	146
				}, {
					"function":	"sk_SCT_deep_copy",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_delete",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_delete_ptr",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_dup",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_find",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_find_ex",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_insert",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_is_sorted",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_new",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_new_null",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_new_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_num",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_pop",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_pop_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_push",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_set",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_set_cmp_func",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_shift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_sort",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_unshift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_value",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SCT_zero",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_deep_copy",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_delete",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_delete_ptr",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_dup",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_find",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_find_ex",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_free",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_insert",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_is_sorted",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_new",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_new_null",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_new_reserve",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_num",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_pop",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_pop_free",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_push",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_reserve",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_set",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_set_cmp_func",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_shift",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_sort",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_unshift",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_value",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SRTP_PROTECTION_PROFILE_zero",
					"begin":	227,
					"end":	227
				}, {
					"function":	"sk_SSL_CIPHER_deep_copy",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_delete",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_delete_ptr",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_dup",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_find",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_find_ex",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_free",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_insert",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_is_sorted",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_new",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_new_null",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_new_reserve",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_num",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_pop",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_pop_free",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_push",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_reserve",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_set",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_set_cmp_func",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_shift",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_sort",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_unshift",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_value",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_CIPHER_zero",
					"begin":	945,
					"end":	945
				}, {
					"function":	"sk_SSL_COMP_deep_copy",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_delete",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_delete_ptr",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_dup",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_find",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_find_ex",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_free",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_insert",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_is_sorted",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_new",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_new_null",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_new_reserve",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_num",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_pop",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_pop_free",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_push",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_reserve",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_set",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_set_cmp_func",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_shift",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_sort",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_unshift",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_value",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_SSL_COMP_zero",
					"begin":	946,
					"end":	946
				}, {
					"function":	"sk_X509_ALGOR_deep_copy",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_delete",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_delete_ptr",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_dup",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_find",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_find_ex",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_free",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_insert",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_is_sorted",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_new",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_new_null",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_new_reserve",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_num",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_pop",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_pop_free",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_push",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_reserve",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_set",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_set_cmp_func",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_shift",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_sort",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_unshift",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_value",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ALGOR_zero",
					"begin":	119,
					"end":	119
				}, {
					"function":	"sk_X509_ATTRIBUTE_deep_copy",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_delete",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_delete_ptr",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_dup",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_find",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_find_ex",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_insert",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_is_sorted",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_new",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_new_null",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_new_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_num",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_pop",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_pop_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_push",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_set",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_set_cmp_func",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_shift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_sort",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_unshift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_value",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_ATTRIBUTE_zero",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_X509_CRL_deep_copy",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_delete",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_delete_ptr",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_dup",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_find",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_find_ex",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_free",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_insert",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_is_sorted",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_new",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_new_null",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_new_reserve",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_num",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_pop",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_pop_free",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_push",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_reserve",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_set",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_set_cmp_func",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_shift",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_sort",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_unshift",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_value",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_CRL_zero",
					"begin":	228,
					"end":	228
				}, {
					"function":	"sk_X509_EXTENSION_deep_copy",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_delete",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_delete_ptr",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_dup",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_find",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_find_ex",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_free",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_insert",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_is_sorted",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_new",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_new_null",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_new_reserve",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_num",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_pop",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_pop_free",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_push",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_reserve",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_set",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_set_cmp_func",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_shift",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_sort",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_unshift",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_value",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_EXTENSION_zero",
					"begin":	85,
					"end":	85
				}, {
					"function":	"sk_X509_INFO_deep_copy",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_delete",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_delete_ptr",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_dup",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_find",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_find_ex",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_free",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_insert",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_is_sorted",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_new",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_new_null",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_new_reserve",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_num",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_pop",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_pop_free",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_push",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_reserve",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_set",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_set_cmp_func",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_shift",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_sort",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_unshift",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_value",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_INFO_zero",
					"begin":	254,
					"end":	254
				}, {
					"function":	"sk_X509_LOOKUP_deep_copy",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_delete",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_delete_ptr",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_dup",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_find",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_find_ex",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_free",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_insert",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_is_sorted",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_new",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_new_null",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_new_reserve",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_num",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_pop",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_pop_free",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_push",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_reserve",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_set",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_set_cmp_func",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_shift",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_sort",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_unshift",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_value",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_LOOKUP_zero",
					"begin":	57,
					"end":	57
				}, {
					"function":	"sk_X509_NAME_ENTRY_deep_copy",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_delete",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_delete_ptr",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_dup",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_find",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_find_ex",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_free",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_insert",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_is_sorted",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_new",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_new_null",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_new_reserve",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_num",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_pop",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_pop_free",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_push",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_reserve",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_set",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_set_cmp_func",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_shift",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_sort",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_unshift",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_value",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_ENTRY_zero",
					"begin":	75,
					"end":	75
				}, {
					"function":	"sk_X509_NAME_deep_copy",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_delete",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_delete_ptr",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_dup",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_find",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_find_ex",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_free",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_insert",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_is_sorted",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_new",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_new_null",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_new_reserve",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_num",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_pop",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_pop_free",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_push",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_reserve",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_set",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_set_cmp_func",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_shift",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_sort",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_unshift",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_value",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_NAME_zero",
					"begin":	77,
					"end":	77
				}, {
					"function":	"sk_X509_OBJECT_deep_copy",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_delete",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_delete_ptr",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_dup",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_find",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_find_ex",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_insert",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_is_sorted",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_new",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_new_null",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_new_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_num",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_pop",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_pop_free",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_push",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_reserve",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_set",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_set_cmp_func",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_shift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_sort",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_unshift",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_value",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_OBJECT_zero",
					"begin":	58,
					"end":	58
				}, {
					"function":	"sk_X509_REVOKED_deep_copy",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_delete",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_delete_ptr",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_dup",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_find",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_find_ex",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_free",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_insert",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_is_sorted",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_new",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_new_null",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_new_reserve",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_num",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_pop",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_pop_free",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_push",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_reserve",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_set",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_set_cmp_func",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_shift",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_sort",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_unshift",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_value",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_REVOKED_zero",
					"begin":	224,
					"end":	224
				}, {
					"function":	"sk_X509_TRUST_deep_copy",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_delete",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_delete_ptr",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_dup",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_find",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_find_ex",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_free",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_insert",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_is_sorted",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_new",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_new_null",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_new_reserve",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_num",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_pop",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_pop_free",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_push",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_reserve",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_set",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_set_cmp_func",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_shift",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_sort",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_unshift",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_value",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_TRUST_zero",
					"begin":	112,
					"end":	112
				}, {
					"function":	"sk_X509_VERIFY_PARAM_deep_copy",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_delete",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_delete_ptr",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_dup",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_find",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_find_ex",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_insert",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_is_sorted",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_new",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_new_null",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_new_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_num",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_pop",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_pop_free",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_push",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_reserve",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_set",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_set_cmp_func",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_shift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_sort",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_unshift",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_value",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_VERIFY_PARAM_zero",
					"begin":	59,
					"end":	59
				}, {
					"function":	"sk_X509_deep_copy",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_delete",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_delete_ptr",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_dup",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_find",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_find_ex",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_free",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_insert",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_is_sorted",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_new",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_new_null",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_new_reserve",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_num",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_pop",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_pop_free",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_push",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_reserve",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_set",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_set_cmp_func",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_shift",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_sort",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_unshift",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_value",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_X509_zero",
					"begin":	99,
					"end":	99
				}, {
					"function":	"sk_void_deep_copy",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_delete",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_delete_ptr",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_dup",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_find",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_find_ex",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_insert",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_is_sorted",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_new",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_new_null",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_new_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_num",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_pop",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_pop_free",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_push",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_reserve",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_set",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_set_cmp_func",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_shift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_sort",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_unshift",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_value",
					"begin":	89,
					"end":	89
				}, {
					"function":	"sk_void_zero",
					"begin":	89,
					"end":	89
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"strtoimax",
					"begin":	323,
					"end":	328
				}, {
					"function":	"strtoumax",
					"begin":	335,
					"end":	340
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wcstoimax",
					"begin":	347,
					"end":	352
				}, {
					"function":	"wcstoumax",
					"begin":	361,
					"end":	366
				}]
		}]
}
