{
	"switch_num":	88,
	"case_num":	[165, 12, 165, 104, 165, 7, 165, 7, 165, 3, 1, 165, 27, 165, 27, 166, 9, 165, 2, 165, 1, 96, 1, 102, 3, 154, 3, 2, 2, 102, 3, 102, 1, 2, 247, 18, 247, 30, 247, 17, 247, 5, 247, 20, 2, 247, 16, 248, 4, 248, 6, 2, 218, 152, 218, 3, 218, 281, 218, 317, 2, 218, 3, 1, 218, 3, 1, 218, 3, 2, 218, 3, 2, 219, 4, 219, 145, 219, 18, 219, 155, 2, 219, 376, 218, 4, 87, 111],
	"switch_cluster":	[[1, 3, 5, 7, 10, 12, 14, 16, 18, 20, 22, 27, 28, 32, 33, 35, 37, 39, 43, 44, 46, 50, 51, 53, 57, 59, 60, 63, 66, 69, 72, 74, 76, 80, 81, 83, 85, 87], [9, 24, 26, 30, 41, 48, 55, 62, 65, 68, 71, 78], [0, 2, 4, 6, 8, 11, 13, 15, 17, 19, 21, 23, 25, 29, 31, 34, 36, 38, 40, 42, 45, 47, 49, 52, 54, 56, 58, 61, 64, 67, 70, 73, 75, 77, 79, 82, 84, 86], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999618,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999618,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999618,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999618,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	575,
			"primary_score":	999618,
			"second_score":	139689
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	576,
			"primary_score":	999618,
			"second_score":	139688
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	578,
			"primary_score":	999618,
			"second_score":	139687
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	579,
			"primary_score":	999618,
			"second_score":	139486
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	580,
			"primary_score":	999618,
			"second_score":	139485
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	583,
			"primary_score":	999618,
			"second_score":	139484
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999618,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999618,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999618,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999618,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999618,
			"second_score":	739
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999618,
			"second_score":	738
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999618,
			"second_score":	737
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999618,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999618,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	632,
			"primary_score":	999618,
			"second_score":	145301
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	633,
			"primary_score":	999618,
			"second_score":	145300
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	635,
			"primary_score":	999618,
			"second_score":	145299
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	641,
			"primary_score":	999618,
			"second_score":	145298
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	642,
			"primary_score":	999618,
			"second_score":	145297
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	643,
			"primary_score":	999618,
			"second_score":	145296
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	645,
			"primary_score":	999618,
			"second_score":	145295
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	652,
			"primary_score":	999618,
			"second_score":	145294
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	654,
			"primary_score":	999618,
			"second_score":	145087
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	655,
			"primary_score":	999618,
			"second_score":	145086
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	656,
			"primary_score":	999618,
			"second_score":	145085
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	657,
			"primary_score":	999618,
			"second_score":	145084
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	658,
			"primary_score":	999618,
			"second_score":	145083
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	663,
			"primary_score":	999618,
			"second_score":	145082
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	664,
			"primary_score":	999618,
			"second_score":	145081
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	671,
			"primary_score":	999618,
			"second_score":	145080
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	672,
			"primary_score":	999618,
			"second_score":	145079
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	673,
			"primary_score":	999618,
			"second_score":	145078
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	674,
			"primary_score":	999618,
			"second_score":	145077
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	675,
			"primary_score":	999618,
			"second_score":	145076
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	685,
			"primary_score":	999618,
			"second_score":	140774
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	688,
			"primary_score":	999618,
			"second_score":	140759
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	689,
			"primary_score":	999618,
			"second_score":	140758
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	691,
			"primary_score":	999618,
			"second_score":	140757
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999618,
			"second_score":	121734
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999618,
			"second_score":	121733
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999618,
			"second_score":	121732
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	704,
			"primary_score":	999618,
			"second_score":	146360
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	735,
			"primary_score":	999618,
			"second_score":	140795
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	736,
			"primary_score":	999618,
			"second_score":	140794
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	742,
			"primary_score":	999618,
			"second_score":	140793
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	744,
			"primary_score":	999618,
			"second_score":	140792
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	745,
			"primary_score":	999618,
			"second_score":	140791
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	746,
			"primary_score":	999618,
			"second_score":	140790
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	748,
			"primary_score":	999618,
			"second_score":	140789
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	749,
			"primary_score":	999618,
			"second_score":	140788
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	753,
			"primary_score":	999618,
			"second_score":	140787
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	754,
			"primary_score":	999618,
			"second_score":	140786
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	755,
			"primary_score":	999618,
			"second_score":	140782
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	758,
			"primary_score":	999618,
			"second_score":	140781
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	764,
			"primary_score":	999618,
			"second_score":	140780
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	802,
			"primary_score":	999618,
			"second_score":	140779
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	804,
			"primary_score":	999618,
			"second_score":	140778
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	806,
			"primary_score":	999618,
			"second_score":	140777
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	808,
			"primary_score":	999618,
			"second_score":	140776
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	809,
			"primary_score":	999618,
			"second_score":	142111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	811,
			"primary_score":	999618,
			"second_score":	140775
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999618,
			"second_score":	121731
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999618,
			"second_score":	121730
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999618,
			"second_score":	121729
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999618,
			"second_score":	121728
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1020,
			"primary_score":	999618,
			"second_score":	146359
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1029,
			"primary_score":	999618,
			"second_score":	146357
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1030,
			"primary_score":	999618,
			"second_score":	146356
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1032,
			"primary_score":	999618,
			"second_score":	146355
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1063,
			"primary_score":	999618,
			"second_score":	146354
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1064,
			"primary_score":	999618,
			"second_score":	146353
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1065,
			"primary_score":	999618,
			"second_score":	146352
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1068,
			"primary_score":	999618,
			"second_score":	146351
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1074,
			"primary_score":	999618,
			"second_score":	146350
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1075,
			"primary_score":	999618,
			"second_score":	146349
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1078,
			"primary_score":	999618,
			"second_score":	146400
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1079,
			"primary_score":	999618,
			"second_score":	145308
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1080,
			"primary_score":	999618,
			"second_score":	145307
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1099,
			"primary_score":	999618,
			"second_score":	145306
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1103,
			"primary_score":	999618,
			"second_score":	145305
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1104,
			"primary_score":	999618,
			"second_score":	145304
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1108,
			"primary_score":	999618,
			"second_score":	145303
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1110,
			"primary_score":	999618,
			"second_score":	145302
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1113,
			"primary_score":	999618,
			"second_score":	145075
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1114,
			"primary_score":	999618,
			"second_score":	145073
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1123,
			"primary_score":	999618,
			"second_score":	142158
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1124,
			"primary_score":	999618,
			"second_score":	142157
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1125,
			"primary_score":	999618,
			"second_score":	142156
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1126,
			"primary_score":	999618,
			"second_score":	142155
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1127,
			"primary_score":	999618,
			"second_score":	142154
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1128,
			"primary_score":	999618,
			"second_score":	142153
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1129,
			"primary_score":	999618,
			"second_score":	142152
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1130,
			"primary_score":	999618,
			"second_score":	142151
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1132,
			"primary_score":	999618,
			"second_score":	142150
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1152,
			"primary_score":	999618,
			"second_score":	142149
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1203,
			"primary_score":	999618,
			"second_score":	142148
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1255,
			"primary_score":	999618,
			"second_score":	142147
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1256,
			"primary_score":	999618,
			"second_score":	142146
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1257,
			"primary_score":	999618,
			"second_score":	142145
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1259,
			"primary_score":	999618,
			"second_score":	139468
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1264,
			"primary_score":	999618,
			"second_score":	139467
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1267,
			"primary_score":	999618,
			"second_score":	139466
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1273,
			"primary_score":	999618,
			"second_score":	139465
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1278,
			"primary_score":	999618,
			"second_score":	139464
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1303,
			"primary_score":	999618,
			"second_score":	139463
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1304,
			"primary_score":	999618,
			"second_score":	139462
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1305,
			"primary_score":	999618,
			"second_score":	139461
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1311,
			"primary_score":	999618,
			"second_score":	139460
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1313,
			"primary_score":	999618,
			"second_score":	139459
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1314,
			"primary_score":	999618,
			"second_score":	139458
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1320,
			"primary_score":	999618,
			"second_score":	139457
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999618,
			"second_score":	121950
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999618,
			"second_score":	121949
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999618,
			"second_score":	121948
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999618,
			"second_score":	121947
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999618,
			"second_score":	121946
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999618,
			"second_score":	121945
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999618,
			"second_score":	119706
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999618,
			"second_score":	119705
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999618,
			"second_score":	119704
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999618,
			"second_score":	119710
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999618,
			"second_score":	119709
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999618,
			"second_score":	119708
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999618,
			"second_score":	119707
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999618,
			"second_score":	119703
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999618,
			"second_score":	119702
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999618,
			"second_score":	119701
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999618,
			"second_score":	119700
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999618,
			"second_score":	121360
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999618,
			"second_score":	121309
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999618,
			"second_score":	121308
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999618,
			"second_score":	103508
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999618,
			"second_score":	103500
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999618,
			"second_score":	47178
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999618,
			"second_score":	47159
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999618,
			"second_score":	14803
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999618,
			"second_score":	14740
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999618,
			"second_score":	14739
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999618,
			"second_score":	14731
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999618,
			"second_score":	14730
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999618,
			"second_score":	14729
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999618,
			"second_score":	14728
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999618,
			"second_score":	6271
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999618,
			"second_score":	6270
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999618,
			"second_score":	6214
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999618,
			"second_score":	6114
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999618,
			"second_score":	119222
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999618,
			"second_score":	119216
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999618,
			"second_score":	119137
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999618,
			"second_score":	118307
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999618,
			"second_score":	118306
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999618,
			"second_score":	118305
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999618,
			"second_score":	118299
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999618,
			"second_score":	118289
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999618,
			"second_score":	118287
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999618,
			"second_score":	113649
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999618,
			"second_score":	113643
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999618,
			"second_score":	113494
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999618,
			"second_score":	113492
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999618,
			"second_score":	113465
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999618,
			"second_score":	113464
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999618,
			"second_score":	113460
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999618,
			"second_score":	113454
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999618,
			"second_score":	113451
		}, {
			"file":	"Zend/zend.c",
			"line":	1192,
			"primary_score":	999618,
			"second_score":	144460
		}, {
			"file":	"Zend/zend.c",
			"line":	1193,
			"primary_score":	999618,
			"second_score":	144459
		}, {
			"file":	"Zend/zend.c",
			"line":	1194,
			"primary_score":	999618,
			"second_score":	144458
		}, {
			"file":	"Zend/zend.c",
			"line":	1195,
			"primary_score":	999618,
			"second_score":	144457
		}, {
			"file":	"Zend/zend.c",
			"line":	1196,
			"primary_score":	999618,
			"second_score":	144456
		}, {
			"file":	"Zend/zend.c",
			"line":	1198,
			"primary_score":	999618,
			"second_score":	144455
		}, {
			"file":	"Zend/zend.c",
			"line":	1199,
			"primary_score":	999618,
			"second_score":	144454
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999618,
			"second_score":	119270
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999618,
			"second_score":	119269
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999618,
			"second_score":	119268
		}, {
			"file":	"Zend/zend.c",
			"line":	1204,
			"primary_score":	999618,
			"second_score":	144448
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999618,
			"second_score":	133533
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999618,
			"second_score":	133532
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999618,
			"second_score":	133531
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999618,
			"second_score":	133410
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999618,
			"second_score":	133331
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999618,
			"second_score":	133330
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999618,
			"second_score":	133329
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999618,
			"second_score":	119646
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999618,
			"second_score":	119644
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999618,
			"second_score":	119643
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999618,
			"second_score":	119289
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999618,
			"second_score":	119267
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999618,
			"second_score":	119266
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999618,
			"second_score":	119265
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999618,
			"second_score":	119264
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999618,
			"second_score":	113562
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999618,
			"second_score":	15279
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999618,
			"second_score":	119827
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999618,
			"second_score":	125059
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999618,
			"second_score":	15281
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999618,
			"second_score":	123156
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999618,
			"second_score":	133767
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999618,
			"second_score":	17638
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999650,
			"second_score":	175
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999650,
			"second_score":	174
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999618,
			"second_score":	122845
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999618,
			"second_score":	122844
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999618,
			"second_score":	122843
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999618,
			"second_score":	122842
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999618,
			"second_score":	122841
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999618,
			"second_score":	122840
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999618,
			"second_score":	122839
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999618,
			"second_score":	122838
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999618,
			"second_score":	121093
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999618,
			"second_score":	121092
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999618,
			"second_score":	121091
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999618,
			"second_score":	122012
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999618,
			"second_score":	121089
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999618,
			"second_score":	121087
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999618,
			"second_score":	121086
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999618,
			"second_score":	121085
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999618,
			"second_score":	121084
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999618,
			"second_score":	122837
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999618,
			"second_score":	122836
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999618,
			"second_score":	122835
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999618,
			"second_score":	122834
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999618,
			"second_score":	122833
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999618,
			"second_score":	122832
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999618,
			"second_score":	122848
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999618,
			"second_score":	122847
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999618,
			"second_score":	122846
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999618,
			"second_score":	122831
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999618,
			"second_score":	122830
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999618,
			"second_score":	122908
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999618,
			"second_score":	122907
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999618,
			"second_score":	122906
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999618,
			"second_score":	122905
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999618,
			"second_score":	122904
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999618,
			"second_score":	122903
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999618,
			"second_score":	122902
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999618,
			"second_score":	122901
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999618,
			"second_score":	122900
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999618,
			"second_score":	122899
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999618,
			"second_score":	122898
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999618,
			"second_score":	122897
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999618,
			"second_score":	122890
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999618,
			"second_score":	122889
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999618,
			"second_score":	122888
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999618,
			"second_score":	122891
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999618,
			"second_score":	122887
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999618,
			"second_score":	120497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999618,
			"second_score":	122886
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999618,
			"second_score":	122885
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999618,
			"second_score":	122884
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999618,
			"second_score":	122882
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999618,
			"second_score":	122881
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999618,
			"second_score":	122880
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999618,
			"second_score":	122854
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999618,
			"second_score":	122853
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999618,
			"second_score":	122852
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999618,
			"second_score":	122851
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999618,
			"second_score":	122849
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999618,
			"second_score":	122829
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999618,
			"second_score":	122828
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999618,
			"second_score":	122916
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999618,
			"second_score":	122915
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999618,
			"second_score":	122914
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999618,
			"second_score":	122910
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999618,
			"second_score":	122909
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999618,
			"second_score":	122827
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999618,
			"second_score":	122826
		}, {
			"file":	"Zend/zend_API.c",
			"line":	973,
			"primary_score":	999618,
			"second_score":	157118
		}, {
			"file":	"Zend/zend_API.c",
			"line":	975,
			"primary_score":	999618,
			"second_score":	157014
		}, {
			"file":	"Zend/zend_API.c",
			"line":	976,
			"primary_score":	999618,
			"second_score":	156996
		}, {
			"file":	"Zend/zend_API.c",
			"line":	977,
			"primary_score":	999618,
			"second_score":	156995
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999625,
			"second_score":	1052
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999625,
			"second_score":	1051
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999625,
			"second_score":	1050
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999625,
			"second_score":	1049
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999625,
			"second_score":	1048
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999625,
			"second_score":	1047
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999625,
			"second_score":	1038
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999625,
			"second_score":	1037
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999625,
			"second_score":	1036
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999625,
			"second_score":	1035
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999625,
			"second_score":	1034
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999627,
			"second_score":	919
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999627,
			"second_score":	918
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999626,
			"second_score":	1055
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999626,
			"second_score":	1054
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999626,
			"second_score":	1053
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999626,
			"second_score":	1033
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999626,
			"second_score":	1032
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1120,
			"primary_score":	999637,
			"second_score":	1031
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999626,
			"second_score":	898
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999627,
			"second_score":	1056
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999618,
			"second_score":	123577
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999618,
			"second_score":	123576
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999618,
			"second_score":	123466
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999618,
			"second_score":	123351
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999618,
			"second_score":	103499
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999618,
			"second_score":	103498
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999618,
			"second_score":	103497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999618,
			"second_score":	50123
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999618,
			"second_score":	50122
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999618,
			"second_score":	50121
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999618,
			"second_score":	50120
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999618,
			"second_score":	50119
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999618,
			"second_score":	50118
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999618,
			"second_score":	47239
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999618,
			"second_score":	47238
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999618,
			"second_score":	47190
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999618,
			"second_score":	47189
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2213,
			"primary_score":	999618,
			"second_score":	50130
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2215,
			"primary_score":	999618,
			"second_score":	50129
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2220,
			"primary_score":	999618,
			"second_score":	50128
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2224,
			"primary_score":	999618,
			"second_score":	53370
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2228,
			"primary_score":	999618,
			"second_score":	50127
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2232,
			"primary_score":	999618,
			"second_score":	52687
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2233,
			"primary_score":	999618,
			"second_score":	53755
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2238,
			"primary_score":	999618,
			"second_score":	50126
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2239,
			"primary_score":	999618,
			"second_score":	50125
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2240,
			"primary_score":	999618,
			"second_score":	50124
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999618,
			"second_score":	47188
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2264,
			"primary_score":	999618,
			"second_score":	170414
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2284,
			"primary_score":	999618,
			"second_score":	119100
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2286,
			"primary_score":	999618,
			"second_score":	119099
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2287,
			"primary_score":	999618,
			"second_score":	119093
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2290,
			"primary_score":	999618,
			"second_score":	119092
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2292,
			"primary_score":	999618,
			"second_score":	119091
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2293,
			"primary_score":	999618,
			"second_score":	118509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2295,
			"primary_score":	999618,
			"second_score":	118508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2296,
			"primary_score":	999618,
			"second_score":	118502
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2299,
			"primary_score":	999618,
			"second_score":	118501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2305,
			"primary_score":	999618,
			"second_score":	114672
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999618,
			"second_score":	114671
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2331,
			"primary_score":	999618,
			"second_score":	113442
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2335,
			"primary_score":	999618,
			"second_score":	113441
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2337,
			"primary_score":	999618,
			"second_score":	113440
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3782,
			"primary_score":	999798,
			"second_score":	13
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3783,
			"primary_score":	999798,
			"second_score":	12
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3784,
			"primary_score":	999798,
			"second_score":	11
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3785,
			"primary_score":	999798,
			"second_score":	10
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3793,
			"primary_score":	999798,
			"second_score":	15
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3794,
			"primary_score":	999798,
			"second_score":	14
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3795,
			"primary_score":	999798,
			"second_score":	9
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3800,
			"primary_score":	999798,
			"second_score":	8
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3801,
			"primary_score":	999798,
			"second_score":	7
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3807,
			"primary_score":	999798,
			"second_score":	485
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3808,
			"primary_score":	999798,
			"second_score":	484
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3809,
			"primary_score":	999798,
			"second_score":	483
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3814,
			"primary_score":	999799,
			"second_score":	482
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3817,
			"primary_score":	999798,
			"second_score":	481
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999618,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999618,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999618,
			"second_score":	112964
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999618,
			"second_score":	112963
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999618,
			"second_score":	112962
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999618,
			"second_score":	113022
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999618,
			"second_score":	113021
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999618,
			"second_score":	113020
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999618,
			"second_score":	112971
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999618,
			"second_score":	112970
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999618,
			"second_score":	112969
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999618,
			"second_score":	112968
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999618,
			"second_score":	112967
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999618,
			"second_score":	112966
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999618,
			"second_score":	112965
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999618,
			"second_score":	112961
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999618,
			"second_score":	112960
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999618,
			"second_score":	112959
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999618,
			"second_score":	112958
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999618,
			"second_score":	112957
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999618,
			"second_score":	112956
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999618,
			"second_score":	112955
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999618,
			"second_score":	116780
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999618,
			"second_score":	116779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999618,
			"second_score":	116778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999618,
			"second_score":	116777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999618,
			"second_score":	116776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999618,
			"second_score":	116775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999618,
			"second_score":	116774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999618,
			"second_score":	116773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999618,
			"second_score":	116772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999618,
			"second_score":	116771
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999618,
			"second_score":	127314
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999618,
			"second_score":	127313
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999618,
			"second_score":	127312
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999618,
			"second_score":	127311
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999618,
			"second_score":	127310
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999618,
			"second_score":	127309
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	778,
			"primary_score":	999618,
			"second_score":	127308
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	779,
			"primary_score":	999618,
			"second_score":	127307
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	780,
			"primary_score":	999618,
			"second_score":	127306
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999618,
			"second_score":	113008
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999618,
			"second_score":	113007
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999618,
			"second_score":	113006
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999618,
			"second_score":	113005
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999618,
			"second_score":	113004
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999618,
			"second_score":	113003
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999618,
			"second_score":	113002
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999618,
			"second_score":	113001
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999618,
			"second_score":	113000
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999618,
			"second_score":	112999
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999618,
			"second_score":	112995
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999618,
			"second_score":	112993
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999618,
			"second_score":	112992
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999618,
			"second_score":	112991
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999618,
			"second_score":	127103
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999618,
			"second_score":	127102
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999618,
			"second_score":	127101
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999618,
			"second_score":	127100
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999618,
			"second_score":	127099
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999618,
			"second_score":	127098
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999618,
			"second_score":	127097
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999618,
			"second_score":	127096
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999618,
			"second_score":	113346
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999618,
			"second_score":	113345
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999618,
			"second_score":	113344
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999618,
			"second_score":	113343
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999618,
			"second_score":	113342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999618,
			"second_score":	113341
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999618,
			"second_score":	113340
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999618,
			"second_score":	113339
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999618,
			"second_score":	113086
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999618,
			"second_score":	113085
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999618,
			"second_score":	113084
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999618,
			"second_score":	113083
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999618,
			"second_score":	113082
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999618,
			"second_score":	113081
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999618,
			"second_score":	41228
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999618,
			"second_score":	41227
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999618,
			"second_score":	41226
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999618,
			"second_score":	41225
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999618,
			"second_score":	41224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999618,
			"second_score":	41223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999618,
			"second_score":	41222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999618,
			"second_score":	41221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999618,
			"second_score":	41220
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999618,
			"second_score":	41219
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999618,
			"second_score":	41218
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999618,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999618,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999618,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999618,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999618,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999618,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999618,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999618,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999618,
			"second_score":	113352
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999618,
			"second_score":	113351
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999618,
			"second_score":	113350
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999618,
			"second_score":	113349
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999618,
			"second_score":	113348
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999618,
			"second_score":	113347
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999618,
			"second_score":	113080
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999618,
			"second_score":	113079
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999618,
			"second_score":	113078
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999618,
			"second_score":	113077
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999618,
			"second_score":	113076
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999618,
			"second_score":	113075
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999618,
			"second_score":	113074
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999618,
			"second_score":	113073
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999618,
			"second_score":	113072
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999618,
			"second_score":	113071
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999618,
			"second_score":	113067
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999618,
			"second_score":	113061
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999618,
			"second_score":	113043
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999618,
			"second_score":	113042
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999618,
			"second_score":	112947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999618,
			"second_score":	113032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999618,
			"second_score":	113031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999618,
			"second_score":	113027
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999618,
			"second_score":	113026
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999618,
			"second_score":	113025
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999618,
			"second_score":	113024
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999618,
			"second_score":	113023
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999618,
			"second_score":	113019
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999618,
			"second_score":	113018
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999618,
			"second_score":	113041
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999618,
			"second_score":	113040
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999618,
			"second_score":	113039
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999618,
			"second_score":	113038
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999618,
			"second_score":	113037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999618,
			"second_score":	113036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999618,
			"second_score":	113035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999618,
			"second_score":	113034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999618,
			"second_score":	119799
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999618,
			"second_score":	119798
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999618,
			"second_score":	119797
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999618,
			"second_score":	119796
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999618,
			"second_score":	119795
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999618,
			"second_score":	119794
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999618,
			"second_score":	119793
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999618,
			"second_score":	119792
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999618,
			"second_score":	119791
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999618,
			"second_score":	119790
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999618,
			"second_score":	122765
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999618,
			"second_score":	122764
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1912,
			"primary_score":	999618,
			"second_score":	127119
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1913,
			"primary_score":	999618,
			"second_score":	127115
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999618,
			"second_score":	127114
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999618,
			"second_score":	113033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999618,
			"second_score":	113017
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999618,
			"second_score":	113016
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999618,
			"second_score":	113015
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999618,
			"second_score":	113014
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999618,
			"second_score":	113013
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999618,
			"second_score":	113012
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999618,
			"second_score":	113011
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999618,
			"second_score":	113009
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999618,
			"second_score":	112990
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999618,
			"second_score":	112989
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999618,
			"second_score":	112988
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999618,
			"second_score":	127092
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999618,
			"second_score":	127091
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999618,
			"second_score":	112987
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999618,
			"second_score":	112986
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999618,
			"second_score":	112980
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999618,
			"second_score":	112979
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999618,
			"second_score":	112973
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999618,
			"second_score":	112972
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999618,
			"second_score":	112954
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999618,
			"second_score":	112953
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999618,
			"second_score":	112952
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999618,
			"second_score":	112951
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999618,
			"second_score":	112950
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999618,
			"second_score":	112948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999618,
			"second_score":	113406
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999618,
			"second_score":	113405
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999618,
			"second_score":	113404
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999618,
			"second_score":	113403
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999618,
			"second_score":	113402
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999618,
			"second_score":	113401
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999618,
			"second_score":	113400
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999618,
			"second_score":	113399
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999618,
			"second_score":	113398
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999618,
			"second_score":	113397
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999618,
			"second_score":	113396
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999618,
			"second_score":	113395
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999618,
			"second_score":	113394
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999618,
			"second_score":	113393
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999618,
			"second_score":	113392
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999618,
			"second_score":	113707
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999618,
			"second_score":	113706
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999618,
			"second_score":	113687
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999618,
			"second_score":	124690
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999618,
			"second_score":	124689
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999618,
			"second_score":	124688
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999618,
			"second_score":	124687
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999618,
			"second_score":	124686
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999618,
			"second_score":	124685
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999618,
			"second_score":	124684
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999618,
			"second_score":	125793
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999618,
			"second_score":	125792
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999618,
			"second_score":	125791
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999618,
			"second_score":	125790
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999618,
			"second_score":	125789
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999618,
			"second_score":	125788
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2131,
			"primary_score":	999618,
			"second_score":	133668
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2133,
			"primary_score":	999618,
			"second_score":	133667
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999618,
			"second_score":	133666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2136,
			"primary_score":	999618,
			"second_score":	133665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999618,
			"second_score":	133663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2138,
			"primary_score":	999618,
			"second_score":	133662
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999618,
			"second_score":	125780
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999618,
			"second_score":	125779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999618,
			"second_score":	133661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999618,
			"second_score":	133655
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2147,
			"primary_score":	999618,
			"second_score":	133654
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2150,
			"primary_score":	999618,
			"second_score":	133648
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2151,
			"primary_score":	999618,
			"second_score":	133633
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2152,
			"primary_score":	999618,
			"second_score":	133632
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999618,
			"second_score":	133630
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2155,
			"primary_score":	999618,
			"second_score":	133629
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999618,
			"second_score":	130655
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2160,
			"primary_score":	999618,
			"second_score":	151940
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2162,
			"primary_score":	999618,
			"second_score":	151939
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999618,
			"second_score":	126786
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2164,
			"primary_score":	999618,
			"second_score":	126785
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999618,
			"second_score":	126784
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999618,
			"second_score":	126783
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999618,
			"second_score":	126782
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999618,
			"second_score":	126781
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999618,
			"second_score":	126780
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999618,
			"second_score":	126779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999618,
			"second_score":	126778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2185,
			"primary_score":	999618,
			"second_score":	126777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2186,
			"primary_score":	999618,
			"second_score":	126776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2188,
			"primary_score":	999618,
			"second_score":	126775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2189,
			"primary_score":	999618,
			"second_score":	126774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2190,
			"primary_score":	999618,
			"second_score":	126773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999618,
			"second_score":	126772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999618,
			"second_score":	130654
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999618,
			"second_score":	130653
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2205,
			"primary_score":	999618,
			"second_score":	122239
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2206,
			"primary_score":	999618,
			"second_score":	122238
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2207,
			"primary_score":	999618,
			"second_score":	122236
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999618,
			"second_score":	122235
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2209,
			"primary_score":	999618,
			"second_score":	122234
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999618,
			"second_score":	122233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999618,
			"second_score":	122231
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2214,
			"primary_score":	999618,
			"second_score":	122212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2218,
			"primary_score":	999618,
			"second_score":	122211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2221,
			"primary_score":	999618,
			"second_score":	122210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2222,
			"primary_score":	999618,
			"second_score":	122204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999618,
			"second_score":	122203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999618,
			"second_score":	122197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2230,
			"primary_score":	999618,
			"second_score":	122196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2233,
			"primary_score":	999618,
			"second_score":	122178
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2234,
			"primary_score":	999618,
			"second_score":	122177
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2235,
			"primary_score":	999618,
			"second_score":	122176
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999618,
			"second_score":	122175
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2238,
			"primary_score":	999618,
			"second_score":	122174
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2239,
			"primary_score":	999618,
			"second_score":	122172
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2246,
			"primary_score":	999618,
			"second_score":	146332
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2344,
			"primary_score":	999618,
			"second_score":	146331
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2348,
			"primary_score":	999618,
			"second_score":	146230
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2350,
			"primary_score":	999618,
			"second_score":	146229
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2351,
			"primary_score":	999618,
			"second_score":	146213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999618,
			"second_score":	119810
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999618,
			"second_score":	119809
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999618,
			"second_score":	119808
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999618,
			"second_score":	113409
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999618,
			"second_score":	113408
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999618,
			"second_score":	113407
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999618,
			"second_score":	124693
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999618,
			"second_score":	124692
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999618,
			"second_score":	124691
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999618,
			"second_score":	132776
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999618,
			"second_score":	132775
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999618,
			"second_score":	132774
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999618,
			"second_score":	132773
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999618,
			"second_score":	132772
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999618,
			"second_score":	132777
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999618,
			"second_score":	121560
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999618,
			"second_score":	132779
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999618,
			"second_score":	132778
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999618,
			"second_score":	132691
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999618,
			"second_score":	132690
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999618,
			"second_score":	132689
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2550,
			"primary_score":	999618,
			"second_score":	142666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2551,
			"primary_score":	999618,
			"second_score":	142665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2553,
			"primary_score":	999618,
			"second_score":	142664
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2554,
			"primary_score":	999618,
			"second_score":	142663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2555,
			"primary_score":	999618,
			"second_score":	142559
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2558,
			"primary_score":	999618,
			"second_score":	142558
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2559,
			"primary_score":	999618,
			"second_score":	142557
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999618,
			"second_score":	123461
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999618,
			"second_score":	123460
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999618,
			"second_score":	123356
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999618,
			"second_score":	123355
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999618,
			"second_score":	123354
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999618,
			"second_score":	123353
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2578,
			"primary_score":	999618,
			"second_score":	147948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2580,
			"primary_score":	999618,
			"second_score":	147947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2581,
			"primary_score":	999618,
			"second_score":	147946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2584,
			"primary_score":	999618,
			"second_score":	147945
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2585,
			"primary_score":	999618,
			"second_score":	147944
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2587,
			"primary_score":	999618,
			"second_score":	147943
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2588,
			"primary_score":	999618,
			"second_score":	147942
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999618,
			"second_score":	41229
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	95,
			"primary_score":	999618,
			"second_score":	147896
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	96,
			"primary_score":	999618,
			"second_score":	147895
		}, {
			"file":	"Zend/zend_alloc.h",
			"line":	97,
			"primary_score":	999618,
			"second_score":	147894
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999618,
			"second_score":	124147
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999618,
			"second_score":	121147
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999618,
			"second_score":	121146
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999618,
			"second_score":	121145
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999618,
			"second_score":	121144
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999618,
			"second_score":	121143
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999618,
			"second_score":	121142
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999618,
			"second_score":	121075
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999618,
			"second_score":	120899
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999618,
			"second_score":	120898
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999618,
			"second_score":	120897
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999618,
			"second_score":	120857
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999618,
			"second_score":	120838
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999618,
			"second_score":	120837
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999618,
			"second_score":	123579
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999618,
			"second_score":	123578
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999618,
			"second_score":	123203
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999618,
			"second_score":	133001
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999618,
			"second_score":	133000
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999618,
			"second_score":	132962
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999618,
			"second_score":	132860
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999618,
			"second_score":	132859
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	171,
			"primary_score":	999618,
			"second_score":	143252
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	172,
			"primary_score":	999618,
			"second_score":	143251
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	173,
			"primary_score":	999618,
			"second_score":	143250
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	143249
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	175,
			"primary_score":	999618,
			"second_score":	143248
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	176,
			"primary_score":	999618,
			"second_score":	143247
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	208,
			"primary_score":	999618,
			"second_score":	133395
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	210,
			"primary_score":	999618,
			"second_score":	133394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999618,
			"second_score":	113642
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999618,
			"second_score":	113617
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999618,
			"second_score":	113592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999618,
			"second_score":	113588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999618,
			"second_score":	113584
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999618,
			"second_score":	113580
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999618,
			"second_score":	113576
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999618,
			"second_score":	113572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999618,
			"second_score":	113502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999618,
			"second_score":	113498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	245,
			"primary_score":	999618,
			"second_score":	144107
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	246,
			"primary_score":	999618,
			"second_score":	144106
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	248,
			"primary_score":	999618,
			"second_score":	144105
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	252,
			"primary_score":	999618,
			"second_score":	143989
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	253,
			"primary_score":	999618,
			"second_score":	143879
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	254,
			"primary_score":	999618,
			"second_score":	143506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	255,
			"primary_score":	999618,
			"second_score":	143505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	262,
			"primary_score":	999618,
			"second_score":	133549
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	269,
			"primary_score":	999618,
			"second_score":	143278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999618,
			"second_score":	124896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	290,
			"primary_score":	999618,
			"second_score":	134555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999631,
			"second_score":	3995
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999631,
			"second_score":	3994
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999631,
			"second_score":	3985
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999638,
			"second_score":	3984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999648,
			"second_score":	3983
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999648,
			"second_score":	3962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999631,
			"second_score":	6801
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999631,
			"second_score":	6800
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999631,
			"second_score":	6799
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999631,
			"second_score":	6798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999631,
			"second_score":	6797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999631,
			"second_score":	6686
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999631,
			"second_score":	6644
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999631,
			"second_score":	6643
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999631,
			"second_score":	6642
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999618,
			"second_score":	133775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999618,
			"second_score":	133774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999618,
			"second_score":	133773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	338,
			"primary_score":	999618,
			"second_score":	136419
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	339,
			"primary_score":	999618,
			"second_score":	136418
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999618,
			"second_score":	133772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	342,
			"primary_score":	999618,
			"second_score":	134612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	343,
			"primary_score":	999618,
			"second_score":	134611
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	345,
			"primary_score":	999618,
			"second_score":	134610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999618,
			"second_score":	133771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999618,
			"second_score":	133770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999618,
			"second_score":	133768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999618,
			"second_score":	133766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999618,
			"second_score":	133765
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	353,
			"primary_score":	999618,
			"second_score":	133764
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	359,
			"primary_score":	999700,
			"second_score":	2668
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	360,
			"primary_score":	999700,
			"second_score":	2667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	361,
			"primary_score":	999700,
			"second_score":	2666
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	362,
			"primary_score":	999700,
			"second_score":	2665
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	364,
			"primary_score":	999700,
			"second_score":	2664
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	370,
			"primary_score":	999700,
			"second_score":	2663
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	373,
			"primary_score":	999700,
			"second_score":	2642
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	374,
			"primary_score":	999700,
			"second_score":	2571
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	375,
			"primary_score":	999700,
			"second_score":	2564
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	376,
			"primary_score":	999700,
			"second_score":	2506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	378,
			"primary_score":	999700,
			"second_score":	2503
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999622,
			"second_score":	5876
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999622,
			"second_score":	5875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999622,
			"second_score":	5874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999622,
			"second_score":	5873
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999622,
			"second_score":	5872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999622,
			"second_score":	5871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999622,
			"second_score":	5870
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999622,
			"second_score":	5695
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999622,
			"second_score":	5694
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999622,
			"second_score":	5693
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999622,
			"second_score":	5545
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999622,
			"second_score":	5538
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999622,
			"second_score":	5467
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999622,
			"second_score":	5464
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999622,
			"second_score":	5462
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	546,
			"primary_score":	999618,
			"second_score":	134772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	548,
			"primary_score":	999618,
			"second_score":	134771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999634,
			"second_score":	4025
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999634,
			"second_score":	4024
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999634,
			"second_score":	4023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999634,
			"second_score":	4022
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999634,
			"second_score":	4021
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999634,
			"second_score":	4020
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999635,
			"second_score":	3997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999635,
			"second_score":	3996
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999635,
			"second_score":	3961
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999635,
			"second_score":	3960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999635,
			"second_score":	3959
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999634,
			"second_score":	4026
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	841,
			"primary_score":	999618,
			"second_score":	134274
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999618,
			"second_score":	134264
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999618,
			"second_score":	134263
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	845,
			"primary_score":	999618,
			"second_score":	134259
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	884,
			"primary_score":	999685,
			"second_score":	2787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	890,
			"primary_score":	999685,
			"second_score":	2786
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999642,
			"second_score":	4513
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999642,
			"second_score":	4512
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999642,
			"second_score":	4511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999642,
			"second_score":	4510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999642,
			"second_score":	4472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999642,
			"second_score":	4470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999642,
			"second_score":	4460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999643,
			"second_score":	4459
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999642,
			"second_score":	4458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999642,
			"second_score":	4457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999642,
			"second_score":	4453
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999642,
			"second_score":	4449
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999642,
			"second_score":	4448
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999642,
			"second_score":	4446
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999642,
			"second_score":	4517
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999642,
			"second_score":	4516
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999642,
			"second_score":	4515
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1264,
			"primary_score":	999618,
			"second_score":	134458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1266,
			"primary_score":	999618,
			"second_score":	134457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1267,
			"primary_score":	999618,
			"second_score":	134450
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1273,
			"primary_score":	999618,
			"second_score":	134364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1274,
			"primary_score":	999618,
			"second_score":	134363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1275,
			"primary_score":	999618,
			"second_score":	134362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1276,
			"primary_score":	999618,
			"second_score":	134361
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1277,
			"primary_score":	999618,
			"second_score":	134360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1279,
			"primary_score":	999618,
			"second_score":	134359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1281,
			"primary_score":	999618,
			"second_score":	134355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1285,
			"primary_score":	999618,
			"second_score":	134354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999685,
			"second_score":	2789
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1287,
			"primary_score":	999685,
			"second_score":	2788
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999685,
			"second_score":	2785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999685,
			"second_score":	2784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1312,
			"primary_score":	999685,
			"second_score":	2783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999685,
			"second_score":	2782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999685,
			"second_score":	2772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1322,
			"primary_score":	999685,
			"second_score":	2771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1327,
			"primary_score":	999685,
			"second_score":	2770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1332,
			"primary_score":	999704,
			"second_score":	2769
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1333,
			"primary_score":	999704,
			"second_score":	2768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1356,
			"primary_score":	999685,
			"second_score":	2767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1358,
			"primary_score":	999685,
			"second_score":	2766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1362,
			"primary_score":	999618,
			"second_score":	134353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1363,
			"primary_score":	999618,
			"second_score":	134349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999620,
			"second_score":	2003
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999620,
			"second_score":	2002
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999620,
			"second_score":	2001
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999620,
			"second_score":	2000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999620,
			"second_score":	1999
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999620,
			"second_score":	1998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999620,
			"second_score":	1997
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1917,
			"primary_score":	999618,
			"second_score":	135739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1918,
			"primary_score":	999618,
			"second_score":	135738
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1919,
			"primary_score":	999618,
			"second_score":	135737
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1921,
			"primary_score":	999618,
			"second_score":	135736
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1923,
			"primary_score":	999618,
			"second_score":	135727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1933,
			"primary_score":	999618,
			"second_score":	135726
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1934,
			"primary_score":	999618,
			"second_score":	135468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1941,
			"primary_score":	999618,
			"second_score":	135430
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1942,
			"primary_score":	999618,
			"second_score":	135411
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1944,
			"primary_score":	999618,
			"second_score":	135410
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1945,
			"primary_score":	999618,
			"second_score":	135384
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1946,
			"primary_score":	999618,
			"second_score":	135380
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1952,
			"primary_score":	999720,
			"second_score":	2804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1953,
			"primary_score":	999720,
			"second_score":	2803
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1954,
			"primary_score":	999720,
			"second_score":	2802
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1956,
			"primary_score":	999720,
			"second_score":	2801
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1957,
			"primary_score":	999720,
			"second_score":	2717
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1959,
			"primary_score":	999720,
			"second_score":	2682
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1960,
			"primary_score":	999720,
			"second_score":	2680
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1962,
			"primary_score":	999720,
			"second_score":	2679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1967,
			"primary_score":	999720,
			"second_score":	2678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1968,
			"primary_score":	999720,
			"second_score":	2677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1969,
			"primary_score":	999720,
			"second_score":	2676
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1971,
			"primary_score":	999720,
			"second_score":	2675
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1972,
			"primary_score":	999720,
			"second_score":	2674
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1975,
			"primary_score":	999720,
			"second_score":	2673
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1976,
			"primary_score":	999720,
			"second_score":	2669
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1978,
			"primary_score":	999720,
			"second_score":	2502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1980,
			"primary_score":	999720,
			"second_score":	2499
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1981,
			"primary_score":	999720,
			"second_score":	2498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1982,
			"primary_score":	999720,
			"second_score":	2497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1996,
			"primary_score":	999720,
			"second_score":	2496
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1997,
			"primary_score":	999720,
			"second_score":	2470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2047,
			"primary_score":	999618,
			"second_score":	135735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2048,
			"primary_score":	999618,
			"second_score":	135734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2049,
			"primary_score":	999618,
			"second_score":	135733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2050,
			"primary_score":	999618,
			"second_score":	135732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2052,
			"primary_score":	999618,
			"second_score":	135731
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2059,
			"primary_score":	999618,
			"second_score":	135730
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2063,
			"primary_score":	999618,
			"second_score":	135729
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2083,
			"primary_score":	999618,
			"second_score":	135728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999622,
			"second_score":	5886
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999622,
			"second_score":	5885
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999622,
			"second_score":	5884
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999622,
			"second_score":	5883
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999622,
			"second_score":	5882
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999622,
			"second_score":	5881
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999622,
			"second_score":	5880
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999622,
			"second_score":	5879
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999629,
			"second_score":	5913
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999629,
			"second_score":	5912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999629,
			"second_score":	5911
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999629,
			"second_score":	5910
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999629,
			"second_score":	5908
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999629,
			"second_score":	5898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999629,
			"second_score":	5897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999629,
			"second_score":	5896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999629,
			"second_score":	5895
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999629,
			"second_score":	5894
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999629,
			"second_score":	5893
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999629,
			"second_score":	5892
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999629,
			"second_score":	5887
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999629,
			"second_score":	5878
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999629,
			"second_score":	5877
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999629,
			"second_score":	5461
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999629,
			"second_score":	5460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999629,
			"second_score":	5458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999629,
			"second_score":	5457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999629,
			"second_score":	5452
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2315,
			"primary_score":	999618,
			"second_score":	133569
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2319,
			"primary_score":	999618,
			"second_score":	133568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2414,
			"primary_score":	999618,
			"second_score":	134634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2416,
			"primary_score":	999618,
			"second_score":	134633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2423,
			"primary_score":	999618,
			"second_score":	134632
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2424,
			"primary_score":	999618,
			"second_score":	134622
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2425,
			"primary_score":	999618,
			"second_score":	134621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2426,
			"primary_score":	999618,
			"second_score":	134620
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2427,
			"primary_score":	999618,
			"second_score":	134561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2428,
			"primary_score":	999618,
			"second_score":	134558
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999623,
			"second_score":	2347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2431,
			"primary_score":	999623,
			"second_score":	2346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2435,
			"primary_score":	999618,
			"second_score":	134556
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2436,
			"primary_score":	999618,
			"second_score":	134554
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2437,
			"primary_score":	999618,
			"second_score":	134553
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2438,
			"primary_score":	999618,
			"second_score":	134548
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2440,
			"primary_score":	999618,
			"second_score":	134547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2441,
			"primary_score":	999618,
			"second_score":	134525
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2447,
			"primary_score":	999618,
			"second_score":	134787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2448,
			"primary_score":	999618,
			"second_score":	134786
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2449,
			"primary_score":	999618,
			"second_score":	134785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2450,
			"primary_score":	999618,
			"second_score":	134784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2451,
			"primary_score":	999618,
			"second_score":	134783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2453,
			"primary_score":	999618,
			"second_score":	134782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2454,
			"primary_score":	999618,
			"second_score":	134778
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2456,
			"primary_score":	999618,
			"second_score":	134777
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2471,
			"primary_score":	999618,
			"second_score":	134776
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2472,
			"primary_score":	999618,
			"second_score":	134775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2485,
			"primary_score":	999618,
			"second_score":	134774
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2488,
			"primary_score":	999672,
			"second_score":	4875
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2491,
			"primary_score":	999618,
			"second_score":	134773
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2493,
			"primary_score":	999618,
			"second_score":	134770
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2494,
			"primary_score":	999618,
			"second_score":	134769
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2495,
			"primary_score":	999618,
			"second_score":	136443
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2499,
			"primary_score":	999618,
			"second_score":	134768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2512,
			"primary_score":	999618,
			"second_score":	134767
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2513,
			"primary_score":	999618,
			"second_score":	134766
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2516,
			"primary_score":	999618,
			"second_score":	134728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2530,
			"primary_score":	999618,
			"second_score":	134727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2532,
			"primary_score":	999618,
			"second_score":	134717
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2533,
			"primary_score":	999618,
			"second_score":	134716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2534,
			"primary_score":	999618,
			"second_score":	134715
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2539,
			"primary_score":	999618,
			"second_score":	136429
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2540,
			"primary_score":	999618,
			"second_score":	136428
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2542,
			"primary_score":	999676,
			"second_score":	4858
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2545,
			"primary_score":	999618,
			"second_score":	134714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2546,
			"primary_score":	999618,
			"second_score":	134713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2547,
			"primary_score":	999618,
			"second_score":	134709
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2548,
			"primary_score":	999618,
			"second_score":	134708
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999618,
			"second_score":	133807
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2602,
			"primary_score":	999618,
			"second_score":	133806
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2604,
			"primary_score":	999618,
			"second_score":	133805
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2612,
			"primary_score":	999618,
			"second_score":	133804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999618,
			"second_score":	133802
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2619,
			"primary_score":	999618,
			"second_score":	133798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999618,
			"second_score":	133794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2623,
			"primary_score":	999618,
			"second_score":	133792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2628,
			"primary_score":	999618,
			"second_score":	133791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2630,
			"primary_score":	999618,
			"second_score":	133781
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999618,
			"second_score":	133780
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2633,
			"primary_score":	999618,
			"second_score":	133779
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2635,
			"primary_score":	999618,
			"second_score":	133763
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999618,
			"second_score":	119587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999618,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2643,
			"primary_score":	999618,
			"second_score":	133762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4935,
			"primary_score":	999700,
			"second_score":	3225
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999700,
			"second_score":	3224
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999700,
			"second_score":	3223
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4940,
			"primary_score":	999700,
			"second_score":	3219
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4941,
			"primary_score":	999710,
			"second_score":	3218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4982,
			"primary_score":	999709,
			"second_score":	3217
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999709,
			"second_score":	3214
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999709,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999709,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999709,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999709,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999709,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999709,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4999,
			"primary_score":	999709,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999709,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999709,
			"second_score":	3111
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5004,
			"primary_score":	999709,
			"second_score":	3106
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5023,
			"primary_score":	999700,
			"second_score":	2245
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5029,
			"primary_score":	999700,
			"second_score":	2167
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999700,
			"second_score":	2166
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5032,
			"primary_score":	999700,
			"second_score":	2165
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999700,
			"second_score":	2161
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5035,
			"primary_score":	999700,
			"second_score":	2160
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5041,
			"primary_score":	999630,
			"second_score":	5424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999630,
			"second_score":	5423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999630,
			"second_score":	5422
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999630,
			"second_score":	5420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999630,
			"second_score":	5410
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999630,
			"second_score":	5409
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999630,
			"second_score":	5408
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5049,
			"primary_score":	999630,
			"second_score":	5406
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999630,
			"second_score":	5402
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5052,
			"primary_score":	999630,
			"second_score":	5401
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999630,
			"second_score":	4670
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5060,
			"primary_score":	999630,
			"second_score":	4669
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999630,
			"second_score":	4621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5063,
			"primary_score":	999630,
			"second_score":	4613
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5064,
			"primary_score":	999630,
			"second_score":	4611
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999618,
			"second_score":	137335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5072,
			"primary_score":	999618,
			"second_score":	137334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5085,
			"primary_score":	999618,
			"second_score":	137333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5097,
			"primary_score":	999618,
			"second_score":	137306
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999618,
			"second_score":	137305
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999618,
			"second_score":	137304
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999618,
			"second_score":	137336
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999618,
			"second_score":	137303
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999618,
			"second_score":	137302
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999618,
			"second_score":	137276
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999618,
			"second_score":	137275
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999618,
			"second_score":	137274
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5120,
			"primary_score":	999618,
			"second_score":	137240
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5121,
			"primary_score":	999618,
			"second_score":	137237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999618,
			"second_score":	137353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999618,
			"second_score":	137352
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999618,
			"second_score":	137351
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5132,
			"primary_score":	999618,
			"second_score":	137350
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999618,
			"second_score":	137349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5135,
			"primary_score":	999618,
			"second_score":	137348
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5182,
			"primary_score":	999618,
			"second_score":	137347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999618,
			"second_score":	137346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5205,
			"primary_score":	999618,
			"second_score":	137337
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5206,
			"primary_score":	999618,
			"second_score":	137236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6095,
			"primary_score":	999618,
			"second_score":	129925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999618,
			"second_score":	129923
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6098,
			"primary_score":	999618,
			"second_score":	129922
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6100,
			"primary_score":	999618,
			"second_score":	129912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999618,
			"second_score":	129911
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999618,
			"second_score":	129907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999618,
			"second_score":	129906
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999618,
			"second_score":	129905
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6106,
			"primary_score":	999618,
			"second_score":	129900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6112,
			"primary_score":	999618,
			"second_score":	127098
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6114,
			"primary_score":	999618,
			"second_score":	127088
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6116,
			"primary_score":	999618,
			"second_score":	127086
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999618,
			"second_score":	127085
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999618,
			"second_score":	127084
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999618,
			"second_score":	127082
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999618,
			"second_score":	127078
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6122,
			"primary_score":	999618,
			"second_score":	127077
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999618,
			"second_score":	127072
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6125,
			"primary_score":	999618,
			"second_score":	127070
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999618,
			"second_score":	127060
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999618,
			"second_score":	127059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999618,
			"second_score":	127058
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6134,
			"primary_score":	999618,
			"second_score":	126668
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6136,
			"primary_score":	999618,
			"second_score":	126658
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999618,
			"second_score":	126657
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999618,
			"second_score":	126653
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999618,
			"second_score":	126555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6141,
			"primary_score":	999618,
			"second_score":	126554
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6143,
			"primary_score":	999618,
			"second_score":	126552
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6145,
			"primary_score":	999618,
			"second_score":	126547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6151,
			"primary_score":	999618,
			"second_score":	134034
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6153,
			"primary_score":	999618,
			"second_score":	134033
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6154,
			"primary_score":	999618,
			"second_score":	134032
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6167,
			"primary_score":	999618,
			"second_score":	135383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6169,
			"primary_score":	999618,
			"second_score":	135382
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6170,
			"primary_score":	999618,
			"second_score":	135381
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6183,
			"primary_score":	999618,
			"second_score":	134523
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6185,
			"primary_score":	999618,
			"second_score":	134522
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6186,
			"primary_score":	999618,
			"second_score":	134521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6199,
			"primary_score":	999618,
			"second_score":	133966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6212,
			"primary_score":	999618,
			"second_score":	170403
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6214,
			"primary_score":	999618,
			"second_score":	170402
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6215,
			"primary_score":	999618,
			"second_score":	170378
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6216,
			"primary_score":	999618,
			"second_score":	170377
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6218,
			"primary_score":	999618,
			"second_score":	151024
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6220,
			"primary_score":	999632,
			"second_score":	3998
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6258,
			"primary_score":	999618,
			"second_score":	133898
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6260,
			"primary_score":	999618,
			"second_score":	133897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6265,
			"primary_score":	999618,
			"second_score":	133896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6267,
			"primary_score":	999618,
			"second_score":	133895
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6268,
			"primary_score":	999618,
			"second_score":	133872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6279,
			"primary_score":	999618,
			"second_score":	134054
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6282,
			"primary_score":	999618,
			"second_score":	134053
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6283,
			"primary_score":	999618,
			"second_score":	134052
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6292,
			"primary_score":	999618,
			"second_score":	133871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6293,
			"primary_score":	999618,
			"second_score":	133868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6294,
			"primary_score":	999618,
			"second_score":	133867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6372,
			"primary_score":	999622,
			"second_score":	5891
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6375,
			"primary_score":	999622,
			"second_score":	5890
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6378,
			"primary_score":	999622,
			"second_score":	5889
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6382,
			"primary_score":	999622,
			"second_score":	5888
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6609,
			"primary_score":	999618,
			"second_score":	133942
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6617,
			"primary_score":	999618,
			"second_score":	133850
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6618,
			"primary_score":	999618,
			"second_score":	133849
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6623,
			"primary_score":	999618,
			"second_score":	133848
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6633,
			"primary_score":	999618,
			"second_score":	133852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6634,
			"primary_score":	999618,
			"second_score":	133851
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999618,
			"second_score":	6281
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999618,
			"second_score":	114058
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999618,
			"second_score":	6280
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999618,
			"second_score":	113840
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999618,
			"second_score":	114574
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	114573
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	452,
			"primary_score":	999618,
			"second_score":	147938
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	453,
			"primary_score":	999618,
			"second_score":	147937
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	454,
			"primary_score":	999618,
			"second_score":	147936
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	460,
			"primary_score":	999618,
			"second_score":	147935
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	467,
			"primary_score":	999618,
			"second_score":	147934
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	468,
			"primary_score":	999618,
			"second_score":	147933
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	474,
			"primary_score":	999618,
			"second_score":	147932
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	479,
			"primary_score":	999618,
			"second_score":	147931
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	495,
			"primary_score":	999618,
			"second_score":	147866
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	498,
			"primary_score":	999618,
			"second_score":	147865
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999618,
			"second_score":	119645
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999618,
			"second_score":	119830
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999618,
			"second_score":	119828
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999618,
			"second_score":	119826
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999618,
			"second_score":	119824
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999618,
			"second_score":	119714
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999618,
			"second_score":	119832
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999618,
			"second_score":	119831
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999618,
			"second_score":	119823
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999650,
			"second_score":	334
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999650,
			"second_score":	333
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999658,
			"second_score":	332
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999658,
			"second_score":	321
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999658,
			"second_score":	319
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999650,
			"second_score":	251
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999652,
			"second_score":	180
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999652,
			"second_score":	179
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999652,
			"second_score":	178
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999650,
			"second_score":	337
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999650,
			"second_score":	336
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999650,
			"second_score":	335
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999618,
			"second_score":	122929
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999618,
			"second_score":	122928
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999618,
			"second_score":	122927
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999618,
			"second_score":	122926
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999618,
			"second_score":	122925
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999618,
			"second_score":	122924
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999618,
			"second_score":	122923
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999618,
			"second_score":	122922
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	868,
			"primary_score":	999654,
			"second_score":	245
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	869,
			"primary_score":	999654,
			"second_score":	244
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	871,
			"primary_score":	999654,
			"second_score":	243
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	877,
			"primary_score":	999654,
			"second_score":	242
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	878,
			"primary_score":	999654,
			"second_score":	240
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999655,
			"second_score":	238
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	897,
			"primary_score":	999655,
			"second_score":	236
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	898,
			"primary_score":	999655,
			"second_score":	234
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	905,
			"primary_score":	999655,
			"second_score":	232
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	906,
			"primary_score":	999655,
			"second_score":	231
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	907,
			"primary_score":	999655,
			"second_score":	229
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	908,
			"primary_score":	999655,
			"second_score":	227
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999618,
			"second_score":	119782
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999618,
			"second_score":	119780
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999618,
			"second_score":	119779
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999618,
			"second_score":	121740
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999618,
			"second_score":	119776
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999618,
			"second_score":	119750
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999618,
			"second_score":	123145
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999618,
			"second_score":	123144
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999618,
			"second_score":	123142
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999618,
			"second_score":	123140
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999618,
			"second_score":	120760
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999618,
			"second_score":	120759
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999618,
			"second_score":	120758
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999618,
			"second_score":	120757
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999618,
			"second_score":	114669
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999618,
			"second_score":	114668
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999618,
			"second_score":	114667
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999618,
			"second_score":	114666
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999618,
			"second_score":	114621
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999618,
			"second_score":	122850
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	222,
			"primary_score":	999618,
			"second_score":	147921
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	223,
			"primary_score":	999618,
			"second_score":	147919
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999618,
			"second_score":	133322
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999618,
			"second_score":	133321
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999618,
			"second_score":	133320
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999618,
			"second_score":	133319
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999618,
			"second_score":	133317
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999618,
			"second_score":	133316
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999618,
			"second_score":	133315
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999618,
			"second_score":	119844
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999618,
			"second_score":	119843
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999618,
			"second_score":	119654
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999618,
			"second_score":	119653
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999618,
			"second_score":	119652
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999618,
			"second_score":	123066
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999618,
			"second_score":	123065
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999618,
			"second_score":	123064
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999618,
			"second_score":	121751
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999618,
			"second_score":	121750
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999618,
			"second_score":	121749
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999618,
			"second_score":	119880
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999618,
			"second_score":	119879
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999618,
			"second_score":	119878
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999618,
			"second_score":	119845
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999618,
			"second_score":	123076
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999618,
			"second_score":	123075
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999618,
			"second_score":	123070
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999618,
			"second_score":	123069
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999618,
			"second_score":	123068
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999618,
			"second_score":	114608
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999618,
			"second_score":	114592
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999618,
			"second_score":	119153
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999618,
			"second_score":	119152
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999618,
			"second_score":	119215
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999618,
			"second_score":	119209
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999618,
			"second_score":	119208
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	119207
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999618,
			"second_score":	119204
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999618,
			"second_score":	119142
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999618,
			"second_score":	119139
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999618,
			"second_score":	118286
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999618,
			"second_score":	118280
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999618,
			"second_score":	118277
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999618,
			"second_score":	114754
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999618,
			"second_score":	114752
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999618,
			"second_score":	114746
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999618,
			"second_score":	114745
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999618,
			"second_score":	114744
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999618,
			"second_score":	114743
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999618,
			"second_score":	114739
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999618,
			"second_score":	114734
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999618,
			"second_score":	114725
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999618,
			"second_score":	114716
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999618,
			"second_score":	114714
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999618,
			"second_score":	114708
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999618,
			"second_score":	114707
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	114690
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999618,
			"second_score":	114673
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999618,
			"second_score":	114670
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999618,
			"second_score":	114620
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999618,
			"second_score":	114617
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999618,
			"second_score":	114616
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999618,
			"second_score":	114600
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999618,
			"second_score":	114584
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999618,
			"second_score":	114583
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999618,
			"second_score":	114581
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999618,
			"second_score":	114575
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999618,
			"second_score":	113832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999618,
			"second_score":	113830
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999618,
			"second_score":	113824
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999618,
			"second_score":	113755
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999618,
			"second_score":	113734
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999618,
			"second_score":	113730
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999618,
			"second_score":	113728
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999618,
			"second_score":	113726
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999618,
			"second_score":	113658
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999618,
			"second_score":	113657
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999618,
			"second_score":	113655
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999618,
			"second_score":	113650
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999618,
			"second_score":	124892
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999618,
			"second_score":	124891
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999618,
			"second_score":	124889
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999618,
			"second_score":	124888
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999618,
			"second_score":	124887
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999618,
			"second_score":	114870
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999618,
			"second_score":	114868
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999618,
			"second_score":	114866
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999618,
			"second_score":	114865
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999618,
			"second_score":	114864
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999618,
			"second_score":	114851
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999618,
			"second_score":	114817
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999618,
			"second_score":	115624
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999618,
			"second_score":	115623
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999618,
			"second_score":	115621
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999618,
			"second_score":	115619
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999618,
			"second_score":	15282
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999618,
			"second_score":	15280
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999618,
			"second_score":	15278
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999618,
			"second_score":	15276
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999618,
			"second_score":	17641
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999618,
			"second_score":	17639
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999622,
			"second_score":	1123
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999622,
			"second_score":	1122
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999622,
			"second_score":	1121
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999622,
			"second_score":	1120
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999622,
			"second_score":	1119
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999622,
			"second_score":	1118
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999622,
			"second_score":	1117
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999622,
			"second_score":	1116
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999622,
			"second_score":	1115
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999622,
			"second_score":	1114
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999622,
			"second_score":	1113
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999622,
			"second_score":	1112
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999622,
			"second_score":	1111
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999623,
			"second_score":	1110
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999623,
			"second_score":	1109
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999623,
			"second_score":	1108
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999622,
			"second_score":	1107
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999624,
			"second_score":	1096
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999624,
			"second_score":	1095
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999618,
			"second_score":	121834
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999618,
			"second_score":	121833
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999618,
			"second_score":	121832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999618,
			"second_score":	121831
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999618,
			"second_score":	121830
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999618,
			"second_score":	121829
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999618,
			"second_score":	121828
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999618,
			"second_score":	121827
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999618,
			"second_score":	121826
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999618,
			"second_score":	121825
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999618,
			"second_score":	121824
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999618,
			"second_score":	121823
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999618,
			"second_score":	119336
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999618,
			"second_score":	119335
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999618,
			"second_score":	119334
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999618,
			"second_score":	119333
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999618,
			"second_score":	119332
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999618,
			"second_score":	119331
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999618,
			"second_score":	119330
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999618,
			"second_score":	119329
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999618,
			"second_score":	119328
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999618,
			"second_score":	119327
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999618,
			"second_score":	119326
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999618,
			"second_score":	119325
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999618,
			"second_score":	118957
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999618,
			"second_score":	118956
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999618,
			"second_score":	118955
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999618,
			"second_score":	118954
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999618,
			"second_score":	118923
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999618,
			"second_score":	118922
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999618,
			"second_score":	118921
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999618,
			"second_score":	118920
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999618,
			"second_score":	118831
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999618,
			"second_score":	118812
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999618,
			"second_score":	118811
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999618,
			"second_score":	118810
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999618,
			"second_score":	118809
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999618,
			"second_score":	121836
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999618,
			"second_score":	121835
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999618,
			"second_score":	118808
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999618,
			"second_score":	118807
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999618,
			"second_score":	121837
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999618,
			"second_score":	103527
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999623,
			"second_score":	1126
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999623,
			"second_score":	1125
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999623,
			"second_score":	1124
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999625,
			"second_score":	1094
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999618,
			"second_score":	14738
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999618,
			"second_score":	14735
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999618,
			"second_score":	113654
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999618,
			"second_score":	113653
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999618,
			"second_score":	113651
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999618,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999618,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999618,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999618,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999618,
			"second_score":	115656
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999618,
			"second_score":	115655
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999635,
			"second_score":	211
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999635,
			"second_score":	203
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999618,
			"second_score":	115654
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999618,
			"second_score":	115653
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999618,
			"second_score":	118329
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999618,
			"second_score":	118328
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999618,
			"second_score":	118327
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999618,
			"second_score":	118326
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999618,
			"second_score":	118386
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999618,
			"second_score":	118325
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999618,
			"second_score":	118324
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999618,
			"second_score":	118323
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999618,
			"second_score":	118322
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999618,
			"second_score":	118321
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999618,
			"second_score":	118320
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999618,
			"second_score":	118319
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999618,
			"second_score":	118318
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999618,
			"second_score":	118317
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999618,
			"second_score":	118316
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999618,
			"second_score":	118315
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999618,
			"second_score":	118314
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999618,
			"second_score":	118313
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999635,
			"second_score":	208
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999635,
			"second_score":	207
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999635,
			"second_score":	206
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999635,
			"second_score":	205
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999635,
			"second_score":	204
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999635,
			"second_score":	424
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999635,
			"second_score":	423
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999635,
			"second_score":	422
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999635,
			"second_score":	421
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999635,
			"second_score":	420
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999635,
			"second_score":	419
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999635,
			"second_score":	418
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999635,
			"second_score":	417
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999635,
			"second_score":	416
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999635,
			"second_score":	415
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999635,
			"second_score":	414
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999635,
			"second_score":	413
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999635,
			"second_score":	412
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999635,
			"second_score":	411
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999635,
			"second_score":	410
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999635,
			"second_score":	409
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999635,
			"second_score":	408
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999618,
			"second_score":	114862
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999618,
			"second_score":	114861
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999618,
			"second_score":	114860
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999618,
			"second_score":	114859
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999618,
			"second_score":	114853
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999618,
			"second_score":	113463
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999618,
			"second_score":	113462
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999618,
			"second_score":	113461
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999618,
			"second_score":	115618
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999618,
			"second_score":	115657
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999618,
			"second_score":	114858
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999618,
			"second_score":	114857
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999618,
			"second_score":	114856
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999618,
			"second_score":	114855
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999618,
			"second_score":	114854
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	150,
			"primary_score":	999618,
			"second_score":	157013
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	152,
			"primary_score":	999618,
			"second_score":	157012
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	154,
			"primary_score":	999618,
			"second_score":	157011
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	158,
			"primary_score":	999618,
			"second_score":	157010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	161,
			"primary_score":	999618,
			"second_score":	157009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	164,
			"primary_score":	999618,
			"second_score":	157008
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	165,
			"primary_score":	999618,
			"second_score":	157007
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	166,
			"primary_score":	999618,
			"second_score":	157006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	167,
			"primary_score":	999618,
			"second_score":	157005
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	168,
			"primary_score":	999618,
			"second_score":	157004
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	169,
			"primary_score":	999618,
			"second_score":	157003
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	170,
			"primary_score":	999618,
			"second_score":	157002
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	171,
			"primary_score":	999618,
			"second_score":	157001
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	172,
			"primary_score":	999618,
			"second_score":	157000
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	173,
			"primary_score":	999618,
			"second_score":	156999
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	156998
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	175,
			"primary_score":	999618,
			"second_score":	156997
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999618,
			"second_score":	133530
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999618,
			"second_score":	133529
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999618,
			"second_score":	133528
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999618,
			"second_score":	133527
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999618,
			"second_score":	133526
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999618,
			"second_score":	143871
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999618,
			"second_score":	133523
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999618,
			"second_score":	133416
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999618,
			"second_score":	133415
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	133414
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999618,
			"second_score":	133413
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999618,
			"second_score":	133411
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	233,
			"primary_score":	999618,
			"second_score":	17342
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	240,
			"primary_score":	999618,
			"second_score":	148084
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999618,
			"second_score":	143645
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	244,
			"primary_score":	999618,
			"second_score":	151162
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	245,
			"primary_score":	999618,
			"second_score":	151058
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	248,
			"primary_score":	999618,
			"second_score":	151057
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999618,
			"second_score":	143644
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999618,
			"second_score":	143540
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999618,
			"second_score":	143539
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999618,
			"second_score":	143538
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999618,
			"second_score":	143537
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999618,
			"second_score":	144708
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999618,
			"second_score":	143531
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999618,
			"second_score":	148060
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999618,
			"second_score":	143526
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	262,
			"primary_score":	999618,
			"second_score":	143525
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999618,
			"second_score":	143524
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999618,
			"second_score":	147877
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999618,
			"second_score":	143513
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999618,
			"second_score":	143512
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999618,
			"second_score":	143510
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999618,
			"second_score":	151961
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999618,
			"second_score":	143507
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	363,
			"primary_score":	999618,
			"second_score":	148487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	364,
			"primary_score":	999618,
			"second_score":	148486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	366,
			"primary_score":	999618,
			"second_score":	148485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	367,
			"primary_score":	999618,
			"second_score":	150210
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	369,
			"primary_score":	999618,
			"second_score":	148482
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	372,
			"primary_score":	999618,
			"second_score":	148481
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	374,
			"primary_score":	999618,
			"second_score":	148480
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	375,
			"primary_score":	999618,
			"second_score":	148479
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999618,
			"second_score":	126947
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999618,
			"second_score":	126946
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	403,
			"primary_score":	999618,
			"second_score":	148478
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	404,
			"primary_score":	999618,
			"second_score":	148374
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	407,
			"primary_score":	999618,
			"second_score":	148373
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	408,
			"primary_score":	999618,
			"second_score":	148372
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	409,
			"primary_score":	999618,
			"second_score":	148371
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	410,
			"primary_score":	999618,
			"second_score":	148370
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	411,
			"primary_score":	999618,
			"second_score":	148342
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999618,
			"second_score":	148341
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	417,
			"primary_score":	999618,
			"second_score":	148337
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	418,
			"primary_score":	999618,
			"second_score":	148335
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	419,
			"primary_score":	999618,
			"second_score":	149941
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	420,
			"primary_score":	999618,
			"second_score":	148326
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	422,
			"primary_score":	999618,
			"second_score":	148324
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	423,
			"primary_score":	999618,
			"second_score":	148323
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	425,
			"primary_score":	999618,
			"second_score":	148322
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999618,
			"second_score":	148321
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	427,
			"primary_score":	999618,
			"second_score":	148319
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	433,
			"primary_score":	999618,
			"second_score":	151960
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	435,
			"primary_score":	999618,
			"second_score":	151959
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	437,
			"primary_score":	999618,
			"second_score":	151958
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	438,
			"primary_score":	999618,
			"second_score":	151957
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	439,
			"primary_score":	999618,
			"second_score":	151816
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	440,
			"primary_score":	999618,
			"second_score":	151815
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	441,
			"primary_score":	999618,
			"second_score":	151813
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	442,
			"primary_score":	999618,
			"second_score":	151812
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	443,
			"primary_score":	999618,
			"second_score":	151811
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	444,
			"primary_score":	999618,
			"second_score":	151810
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	445,
			"primary_score":	999618,
			"second_score":	151563
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	446,
			"primary_score":	999618,
			"second_score":	151561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	455,
			"primary_score":	999618,
			"second_score":	151809
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	456,
			"primary_score":	999618,
			"second_score":	151808
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	458,
			"primary_score":	999618,
			"second_score":	151807
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	459,
			"primary_score":	999618,
			"second_score":	151806
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	463,
			"primary_score":	999618,
			"second_score":	151805
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	464,
			"primary_score":	999618,
			"second_score":	151804
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	465,
			"primary_score":	999618,
			"second_score":	151803
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	466,
			"primary_score":	999618,
			"second_score":	151571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	467,
			"primary_score":	999618,
			"second_score":	151575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	468,
			"primary_score":	999618,
			"second_score":	151566
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	469,
			"primary_score":	999618,
			"second_score":	151565
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	471,
			"primary_score":	999618,
			"second_score":	151564
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999618,
			"second_score":	47233
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999618,
			"second_score":	47261
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999618,
			"second_score":	51588
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999618,
			"second_score":	47266
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999618,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999618,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999618,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999618,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999618,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999618,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999618,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999618,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999618,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999618,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999618,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999618,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999618,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999618,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999618,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999618,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999618,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999618,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999618,
			"second_score":	3914
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999618,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999618,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999618,
			"second_score":	3595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999618,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999618,
			"second_score":	52782
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999618,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999618,
			"second_score":	52724
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999618,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999618,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999618,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999618,
			"second_score":	50138
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999618,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999618,
			"second_score":	3588
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999618,
			"second_score":	3587
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999618,
			"second_score":	3586
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999618,
			"second_score":	3584
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999618,
			"second_score":	50131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999618,
			"second_score":	3583
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999618,
			"second_score":	3582
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999618,
			"second_score":	3581
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999618,
			"second_score":	3580
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999618,
			"second_score":	3579
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999618,
			"second_score":	103496
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999618,
			"second_score":	103495
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999618,
			"second_score":	103494
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999618,
			"second_score":	103493
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999618,
			"second_score":	50150
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999618,
			"second_score":	47182
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999618,
			"second_score":	47181
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999618,
			"second_score":	47180
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999618,
			"second_score":	47179
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999618,
			"second_score":	119044
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999618,
			"second_score":	119043
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999618,
			"second_score":	119042
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999618,
			"second_score":	119040
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999618,
			"second_score":	119039
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999618,
			"second_score":	119038
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999618,
			"second_score":	6014
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999618,
			"second_score":	6013
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999618,
			"second_score":	6012
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999618,
			"second_score":	6010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999618,
			"second_score":	6009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999618,
			"second_score":	3565
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999618,
			"second_score":	3562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999618,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999618,
			"second_score":	3561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999618,
			"second_score":	3560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999618,
			"second_score":	3559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999618,
			"second_score":	114572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999618,
			"second_score":	114571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999618,
			"second_score":	119200
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999618,
			"second_score":	114568
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999618,
			"second_score":	114567
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999618,
			"second_score":	113841
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999618,
			"second_score":	113839
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999618,
			"second_score":	113838
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999618,
			"second_score":	113837
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999618,
			"second_score":	114079
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999618,
			"second_score":	113836
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999618,
			"second_score":	113835
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999618,
			"second_score":	119146
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999618,
			"second_score":	97603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999618,
			"second_score":	97602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999618,
			"second_score":	97601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999618,
			"second_score":	97600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999618,
			"second_score":	97599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999618,
			"second_score":	97585
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999618,
			"second_score":	97584
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999618,
			"second_score":	97583
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999618,
			"second_score":	97580
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999618,
			"second_score":	97579
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999618,
			"second_score":	97578
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999618,
			"second_score":	97581
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999618,
			"second_score":	138386
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999618,
			"second_score":	114014
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999618,
			"second_score":	114013
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999618,
			"second_score":	114012
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999618,
			"second_score":	114011
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999618,
			"second_score":	114010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999618,
			"second_score":	114009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999618,
			"second_score":	114008
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999618,
			"second_score":	114007
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999618,
			"second_score":	114006
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999618,
			"second_score":	119144
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999618,
			"second_score":	119143
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1536,
			"primary_score":	999618,
			"second_score":	148490
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1538,
			"primary_score":	999618,
			"second_score":	148489
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999618,
			"second_score":	47232
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999618,
			"second_score":	47231
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999618,
			"second_score":	47230
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999618,
			"second_score":	47229
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999618,
			"second_score":	47228
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999618,
			"second_score":	47227
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999618,
			"second_score":	47226
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999618,
			"second_score":	47225
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999618,
			"second_score":	47224
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999618,
			"second_score":	47223
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999618,
			"second_score":	47222
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999618,
			"second_score":	48681
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999618,
			"second_score":	47436
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999618,
			"second_score":	47435
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999618,
			"second_score":	47434
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999618,
			"second_score":	47221
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999618,
			"second_score":	47220
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999618,
			"second_score":	47218
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	350,
			"primary_score":	999618,
			"second_score":	152132
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	351,
			"primary_score":	999618,
			"second_score":	152126
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999618,
			"second_score":	3564
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999618,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999618,
			"second_score":	3563
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999618,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999618,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999618,
			"second_score":	113453
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999618,
			"second_score":	113452
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999618,
			"second_score":	6015
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999618,
			"second_score":	97606
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999618,
			"second_score":	97605
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999618,
			"second_score":	97604
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999618,
			"second_score":	97577
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999618,
			"second_score":	97576
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999618,
			"second_score":	97575
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999618,
			"second_score":	133816
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999618,
			"second_score":	133815
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999618,
			"second_score":	133814
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999618,
			"second_score":	133813
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3214,
			"primary_score":	999618,
			"second_score":	143245
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3217,
			"primary_score":	999618,
			"second_score":	143244
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3220,
			"primary_score":	999618,
			"second_score":	143243
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3222,
			"primary_score":	999618,
			"second_score":	143242
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3223,
			"primary_score":	999618,
			"second_score":	143241
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3224,
			"primary_score":	999618,
			"second_score":	143240
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3226,
			"primary_score":	999618,
			"second_score":	143239
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3228,
			"primary_score":	999618,
			"second_score":	143238
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3231,
			"primary_score":	999618,
			"second_score":	143237
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3232,
			"primary_score":	999618,
			"second_score":	143236
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3233,
			"primary_score":	999618,
			"second_score":	143235
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3245,
			"primary_score":	999618,
			"second_score":	143234
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3246,
			"primary_score":	999618,
			"second_score":	143233
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3247,
			"primary_score":	999618,
			"second_score":	143232
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3250,
			"primary_score":	999618,
			"second_score":	143231
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3251,
			"primary_score":	999618,
			"second_score":	143230
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3252,
			"primary_score":	999618,
			"second_score":	143229
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3258,
			"primary_score":	999618,
			"second_score":	143228
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3262,
			"primary_score":	999618,
			"second_score":	143227
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3267,
			"primary_score":	999618,
			"second_score":	143226
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3269,
			"primary_score":	999618,
			"second_score":	143225
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3271,
			"primary_score":	999618,
			"second_score":	143224
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3272,
			"primary_score":	999618,
			"second_score":	143223
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3273,
			"primary_score":	999618,
			"second_score":	143222
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3274,
			"primary_score":	999618,
			"second_score":	143221
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3281,
			"primary_score":	999618,
			"second_score":	143220
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3282,
			"primary_score":	999618,
			"second_score":	143219
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3284,
			"primary_score":	999618,
			"second_score":	143218
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999618,
			"second_score":	133836
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3297,
			"primary_score":	999618,
			"second_score":	133835
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3362,
			"primary_score":	999618,
			"second_score":	133834
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3364,
			"primary_score":	999618,
			"second_score":	133833
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999618,
			"second_score":	133832
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3377,
			"primary_score":	999618,
			"second_score":	133925
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3382,
			"primary_score":	999618,
			"second_score":	133831
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3384,
			"primary_score":	999618,
			"second_score":	133900
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3385,
			"primary_score":	999618,
			"second_score":	133899
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3388,
			"primary_score":	999618,
			"second_score":	133830
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999618,
			"second_score":	133829
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999618,
			"second_score":	133828
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3395,
			"primary_score":	999618,
			"second_score":	134013
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3396,
			"primary_score":	999618,
			"second_score":	134012
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3401,
			"primary_score":	999618,
			"second_score":	133827
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3402,
			"primary_score":	999618,
			"second_score":	133826
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3403,
			"primary_score":	999618,
			"second_score":	134041
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3404,
			"primary_score":	999618,
			"second_score":	133825
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3405,
			"primary_score":	999618,
			"second_score":	133824
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3407,
			"primary_score":	999618,
			"second_score":	133859
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3409,
			"primary_score":	999618,
			"second_score":	133858
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3410,
			"primary_score":	999618,
			"second_score":	133857
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3413,
			"primary_score":	999618,
			"second_score":	133823
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3414,
			"primary_score":	999618,
			"second_score":	133822
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3418,
			"primary_score":	999618,
			"second_score":	134006
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3422,
			"primary_score":	999618,
			"second_score":	134005
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3425,
			"primary_score":	999618,
			"second_score":	134004
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3426,
			"primary_score":	999618,
			"second_score":	134003
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3428,
			"primary_score":	999618,
			"second_score":	134002
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3429,
			"primary_score":	999618,
			"second_score":	134001
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3431,
			"primary_score":	999618,
			"second_score":	134000
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3439,
			"primary_score":	999618,
			"second_score":	133924
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3441,
			"primary_score":	999618,
			"second_score":	133923
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3459,
			"primary_score":	999618,
			"second_score":	133856
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3462,
			"primary_score":	999618,
			"second_score":	133855
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3463,
			"primary_score":	999618,
			"second_score":	133854
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3467,
			"primary_score":	999618,
			"second_score":	133853
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3468,
			"primary_score":	999618,
			"second_score":	133847
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3472,
			"primary_score":	999618,
			"second_score":	134035
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3473,
			"primary_score":	999618,
			"second_score":	134031
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3477,
			"primary_score":	999618,
			"second_score":	133919
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3478,
			"primary_score":	999618,
			"second_score":	133917
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3482,
			"primary_score":	999618,
			"second_score":	135822
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3483,
			"primary_score":	999618,
			"second_score":	135821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3492,
			"primary_score":	999618,
			"second_score":	133943
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3493,
			"primary_score":	999618,
			"second_score":	133941
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3592,
			"primary_score":	999618,
			"second_score":	133967
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3593,
			"primary_score":	999618,
			"second_score":	133965
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999622,
			"second_score":	2004
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999622,
			"second_score":	1996
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4142,
			"primary_score":	999618,
			"second_score":	134679
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4143,
			"primary_score":	999618,
			"second_score":	134678
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999618,
			"second_score":	135318
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999618,
			"second_score":	135317
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4152,
			"primary_score":	999618,
			"second_score":	136460
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4153,
			"primary_score":	999618,
			"second_score":	136234
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4157,
			"primary_score":	999618,
			"second_score":	133083
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4158,
			"primary_score":	999618,
			"second_score":	133001
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999618,
			"second_score":	128958
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999618,
			"second_score":	128844
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999618,
			"second_score":	134789
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999618,
			"second_score":	134707
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999618,
			"second_score":	126394
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999618,
			"second_score":	126377
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999618,
			"second_score":	142573
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999618,
			"second_score":	142361
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999646,
			"second_score":	4518
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999646,
			"second_score":	4441
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999630,
			"second_score":	5429
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999630,
			"second_score":	5263
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999630,
			"second_score":	4671
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999630,
			"second_score":	4602
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999618,
			"second_score":	126479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999618,
			"second_score":	126478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999618,
			"second_score":	129926
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999618,
			"second_score":	129898
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999618,
			"second_score":	127099
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999618,
			"second_score":	127057
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999618,
			"second_score":	126669
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999618,
			"second_score":	126545
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4827,
			"primary_score":	999618,
			"second_score":	136524
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4828,
			"primary_score":	999618,
			"second_score":	136523
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4892,
			"primary_score":	999618,
			"second_score":	135740
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4893,
			"primary_score":	999618,
			"second_score":	135379
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4897,
			"primary_score":	999618,
			"second_score":	134635
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4898,
			"primary_score":	999618,
			"second_score":	134520
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999623,
			"second_score":	5943
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999623,
			"second_score":	5942
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999630,
			"second_score":	5914
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999630,
			"second_score":	5451
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5077,
			"primary_score":	999648,
			"second_score":	4694
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5078,
			"primary_score":	999648,
			"second_score":	4693
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5092,
			"primary_score":	999618,
			"second_score":	136570
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5093,
			"primary_score":	999618,
			"second_score":	136569
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999618,
			"second_score":	137354
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999618,
			"second_score":	137235
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5212,
			"primary_score":	999618,
			"second_score":	136547
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5213,
			"primary_score":	999618,
			"second_score":	136546
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5257,
			"primary_score":	999618,
			"second_score":	134304
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5258,
			"primary_score":	999618,
			"second_score":	134303
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5262,
			"primary_score":	999618,
			"second_score":	126456
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5263,
			"primary_score":	999618,
			"second_score":	126455
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5267,
			"primary_score":	999618,
			"second_score":	134365
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5268,
			"primary_score":	999618,
			"second_score":	134326
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999700,
			"second_score":	3684
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999700,
			"second_score":	3463
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999700,
			"second_score":	2905
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999700,
			"second_score":	2878
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999700,
			"second_score":	2168
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999700,
			"second_score":	2137
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5299,
			"primary_score":	999618,
			"second_score":	134394
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5300,
			"primary_score":	999618,
			"second_score":	134393
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999700,
			"second_score":	2197
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999700,
			"second_score":	2196
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5334,
			"primary_score":	999720,
			"second_score":	2835
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5335,
			"primary_score":	999720,
			"second_score":	2466
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5339,
			"primary_score":	999720,
			"second_score":	2361
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5340,
			"primary_score":	999720,
			"second_score":	2309
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5344,
			"primary_score":	999720,
			"second_score":	2248
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5345,
			"primary_score":	999720,
			"second_score":	2219
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999635,
			"second_score":	3728
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999635,
			"second_score":	3727
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5409,
			"primary_score":	999618,
			"second_score":	134459
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5410,
			"primary_score":	999618,
			"second_score":	134422
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999635,
			"second_score":	3752
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999635,
			"second_score":	3750
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999635,
			"second_score":	4062
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999635,
			"second_score":	3958
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999635,
			"second_score":	4085
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999635,
			"second_score":	4084
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999700,
			"second_score":	2928
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999700,
			"second_score":	2927
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999700,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999700,
			"second_score":	2994
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999700,
			"second_score":	3280
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999700,
			"second_score":	3279
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5717,
			"primary_score":	999618,
			"second_score":	133846
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5719,
			"primary_score":	999618,
			"second_score":	133845
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5720,
			"primary_score":	999618,
			"second_score":	133844
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5721,
			"primary_score":	999618,
			"second_score":	133843
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5723,
			"primary_score":	999618,
			"second_score":	133842
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5730,
			"primary_score":	999618,
			"second_score":	133841
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5732,
			"primary_score":	999618,
			"second_score":	133840
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5733,
			"primary_score":	999618,
			"second_score":	133839
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5734,
			"primary_score":	999618,
			"second_score":	133956
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5736,
			"primary_score":	999618,
			"second_score":	133838
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5738,
			"primary_score":	999618,
			"second_score":	133837
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5882,
			"primary_score":	999618,
			"second_score":	133821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5907,
			"primary_score":	999618,
			"second_score":	133820
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5908,
			"primary_score":	999618,
			"second_score":	133819
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5909,
			"primary_score":	999618,
			"second_score":	133818
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999618,
			"second_score":	133817
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999618,
			"second_score":	133812
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999618,
			"second_score":	133811
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999618,
			"second_score":	133810
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999618,
			"second_score":	133809
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	154,
			"primary_score":	999646,
			"second_score":	3909
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	155,
			"primary_score":	999646,
			"second_score":	3771
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	162,
			"primary_score":	999646,
			"second_score":	3373
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	163,
			"primary_score":	999646,
			"second_score":	3372
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	164,
			"primary_score":	999646,
			"second_score":	3368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999646,
			"second_score":	3367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	170,
			"primary_score":	999618,
			"second_score":	144114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	171,
			"primary_score":	999618,
			"second_score":	144113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	172,
			"primary_score":	999618,
			"second_score":	144112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	173,
			"primary_score":	999618,
			"second_score":	121456
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	188,
			"primary_score":	999618,
			"second_score":	118298
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	192,
			"primary_score":	999618,
			"second_score":	118297
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	193,
			"primary_score":	999618,
			"second_score":	118293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	198,
			"primary_score":	999618,
			"second_score":	144314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	199,
			"primary_score":	999618,
			"second_score":	144313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	200,
			"primary_score":	999618,
			"second_score":	144312
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	201,
			"primary_score":	999618,
			"second_score":	144311
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	202,
			"primary_score":	999618,
			"second_score":	144310
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	203,
			"primary_score":	999618,
			"second_score":	144309
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	205,
			"primary_score":	999618,
			"second_score":	144308
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	206,
			"primary_score":	999618,
			"second_score":	144307
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	208,
			"primary_score":	999618,
			"second_score":	144302
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	209,
			"primary_score":	999618,
			"second_score":	144301
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	210,
			"primary_score":	999618,
			"second_score":	144300
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	211,
			"primary_score":	999618,
			"second_score":	144298
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	213,
			"primary_score":	999618,
			"second_score":	144297
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	214,
			"primary_score":	999618,
			"second_score":	144296
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	215,
			"primary_score":	999618,
			"second_score":	144295
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	144294
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	217,
			"primary_score":	999618,
			"second_score":	144293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	218,
			"primary_score":	999618,
			"second_score":	144292
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	219,
			"primary_score":	999618,
			"second_score":	144291
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999618,
			"second_score":	133564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	225,
			"primary_score":	999618,
			"second_score":	133563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	226,
			"primary_score":	999618,
			"second_score":	133562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	227,
			"primary_score":	999618,
			"second_score":	133561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	228,
			"primary_score":	999618,
			"second_score":	133560
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	229,
			"primary_score":	999618,
			"second_score":	133559
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	231,
			"primary_score":	999618,
			"second_score":	133558
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	232,
			"primary_score":	999618,
			"second_score":	133554
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	234,
			"primary_score":	999618,
			"second_score":	133553
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999618,
			"second_score":	133552
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999618,
			"second_score":	133551
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	237,
			"primary_score":	999618,
			"second_score":	133550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	239,
			"primary_score":	999618,
			"second_score":	133548
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	243,
			"primary_score":	999618,
			"second_score":	133547
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	244,
			"primary_score":	999618,
			"second_score":	133546
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	245,
			"primary_score":	999618,
			"second_score":	133545
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	246,
			"primary_score":	999618,
			"second_score":	133544
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	247,
			"primary_score":	999618,
			"second_score":	133543
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	248,
			"primary_score":	999618,
			"second_score":	133542
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	249,
			"primary_score":	999618,
			"second_score":	133541
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	251,
			"primary_score":	999618,
			"second_score":	133540
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	260,
			"primary_score":	999618,
			"second_score":	133409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	262,
			"primary_score":	999618,
			"second_score":	133333
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	263,
			"primary_score":	999618,
			"second_score":	133332
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	473,
			"primary_score":	999618,
			"second_score":	144288
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	474,
			"primary_score":	999618,
			"second_score":	144287
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	477,
			"primary_score":	999618,
			"second_score":	144286
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	483,
			"primary_score":	999618,
			"second_score":	144285
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	487,
			"primary_score":	999618,
			"second_score":	144241
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	488,
			"primary_score":	999618,
			"second_score":	144129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	489,
			"primary_score":	999618,
			"second_score":	144128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	490,
			"primary_score":	999618,
			"second_score":	144123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	491,
			"primary_score":	999618,
			"second_score":	144122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	492,
			"primary_score":	999618,
			"second_score":	144121
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	496,
			"primary_score":	999618,
			"second_score":	144120
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	497,
			"primary_score":	999618,
			"second_score":	144119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	499,
			"primary_score":	999618,
			"second_score":	144118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	500,
			"primary_score":	999618,
			"second_score":	144117
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	516,
			"primary_score":	999618,
			"second_score":	144116
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	517,
			"primary_score":	999618,
			"second_score":	144115
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	522,
			"primary_score":	999618,
			"second_score":	144111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	524,
			"primary_score":	999618,
			"second_score":	144110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	525,
			"primary_score":	999618,
			"second_score":	144109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	530,
			"primary_score":	999618,
			"second_score":	144108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	532,
			"primary_score":	999618,
			"second_score":	143504
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	533,
			"primary_score":	999618,
			"second_score":	143503
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	534,
			"primary_score":	999618,
			"second_score":	143502
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	539,
			"primary_score":	999618,
			"second_score":	143501
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	540,
			"primary_score":	999618,
			"second_score":	143500
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	547,
			"primary_score":	999618,
			"second_score":	144433
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	548,
			"primary_score":	999618,
			"second_score":	144432
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	549,
			"primary_score":	999618,
			"second_score":	144328
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	550,
			"primary_score":	999618,
			"second_score":	144327
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	551,
			"primary_score":	999618,
			"second_score":	144326
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	552,
			"primary_score":	999618,
			"second_score":	144325
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	553,
			"primary_score":	999618,
			"second_score":	144324
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	554,
			"primary_score":	999618,
			"second_score":	144323
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	556,
			"primary_score":	999618,
			"second_score":	144322
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	557,
			"primary_score":	999618,
			"second_score":	144321
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	558,
			"primary_score":	999618,
			"second_score":	144320
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	559,
			"primary_score":	999618,
			"second_score":	144319
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	560,
			"primary_score":	999618,
			"second_score":	144317
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	562,
			"primary_score":	999618,
			"second_score":	144315
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	564,
			"primary_score":	999618,
			"second_score":	144290
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	566,
			"primary_score":	999618,
			"second_score":	144289
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	575,
			"primary_score":	999618,
			"second_score":	143499
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	576,
			"primary_score":	999618,
			"second_score":	143255
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	577,
			"primary_score":	999618,
			"second_score":	143254
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	578,
			"primary_score":	999618,
			"second_score":	143253
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	579,
			"primary_score":	999618,
			"second_score":	143246
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	580,
			"primary_score":	999618,
			"second_score":	133808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	581,
			"primary_score":	999618,
			"second_score":	133761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	582,
			"primary_score":	999618,
			"second_score":	133760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	585,
			"primary_score":	999618,
			"second_score":	133759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	588,
			"primary_score":	999618,
			"second_score":	133758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	589,
			"primary_score":	999618,
			"second_score":	133757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	590,
			"primary_score":	999618,
			"second_score":	133756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	591,
			"primary_score":	999618,
			"second_score":	133755
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	592,
			"primary_score":	999618,
			"second_score":	133570
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	598,
			"primary_score":	999618,
			"second_score":	133565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	599,
			"primary_score":	999618,
			"second_score":	133539
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	646,
			"primary_score":	999618,
			"second_score":	121564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	647,
			"primary_score":	999618,
			"second_score":	121563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	650,
			"primary_score":	999618,
			"second_score":	121562
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	655,
			"primary_score":	999618,
			"second_score":	121561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	658,
			"primary_score":	999618,
			"second_score":	121466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	660,
			"primary_score":	999618,
			"second_score":	121465
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	661,
			"primary_score":	999618,
			"second_score":	121464
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	663,
			"primary_score":	999618,
			"second_score":	121463
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	664,
			"primary_score":	999618,
			"second_score":	121462
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	666,
			"primary_score":	999618,
			"second_score":	121461
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	683,
			"primary_score":	999618,
			"second_score":	121460
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999618,
			"second_score":	121455
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999618,
			"second_score":	121019
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999618,
			"second_score":	121018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	688,
			"primary_score":	999618,
			"second_score":	121017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999618,
			"second_score":	121822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999618,
			"second_score":	121821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	718,
			"primary_score":	999618,
			"second_score":	121717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999618,
			"second_score":	121716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	720,
			"primary_score":	999618,
			"second_score":	121715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	721,
			"primary_score":	999618,
			"second_score":	121714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	722,
			"primary_score":	999618,
			"second_score":	121713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	724,
			"primary_score":	999618,
			"second_score":	121712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	729,
			"primary_score":	999618,
			"second_score":	121711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999618,
			"second_score":	121710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999618,
			"second_score":	121709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999618,
			"second_score":	121593
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	734,
			"primary_score":	999618,
			"second_score":	121591
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999618,
			"second_score":	121590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	737,
			"primary_score":	999618,
			"second_score":	121565
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	741,
			"primary_score":	999618,
			"second_score":	121016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	743,
			"primary_score":	999618,
			"second_score":	121015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	744,
			"primary_score":	999618,
			"second_score":	121014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	745,
			"primary_score":	999618,
			"second_score":	120770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	746,
			"primary_score":	999618,
			"second_score":	120769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	747,
			"primary_score":	999618,
			"second_score":	120768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	748,
			"primary_score":	999618,
			"second_score":	120761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	749,
			"primary_score":	999618,
			"second_score":	120760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	751,
			"primary_score":	999618,
			"second_score":	119618
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	756,
			"primary_score":	999618,
			"second_score":	119617
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	761,
			"primary_score":	999618,
			"second_score":	119616
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	762,
			"primary_score":	999618,
			"second_score":	119568
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	763,
			"primary_score":	999618,
			"second_score":	119567
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	764,
			"primary_score":	999618,
			"second_score":	119396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	765,
			"primary_score":	999618,
			"second_score":	119391
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	768,
			"primary_score":	999618,
			"second_score":	119390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	769,
			"primary_score":	999618,
			"second_score":	119364
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	770,
			"primary_score":	999618,
			"second_score":	119338
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	771,
			"primary_score":	999618,
			"second_score":	119337
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999618,
			"second_score":	136730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	869,
			"primary_score":	999618,
			"second_score":	136729
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	871,
			"primary_score":	999618,
			"second_score":	136728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	874,
			"primary_score":	999618,
			"second_score":	136612
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	875,
			"primary_score":	999618,
			"second_score":	136611
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	876,
			"primary_score":	999618,
			"second_score":	136610
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	877,
			"primary_score":	999618,
			"second_score":	136609
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	878,
			"primary_score":	999618,
			"second_score":	129480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	879,
			"primary_score":	999618,
			"second_score":	129479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	884,
			"primary_score":	999618,
			"second_score":	129478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	887,
			"primary_score":	999618,
			"second_score":	129477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	888,
			"primary_score":	999618,
			"second_score":	129476
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	920,
			"primary_score":	1000000,
			"second_score":	5061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	922,
			"primary_score":	1000000,
			"second_score":	5060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	924,
			"primary_score":	1000000,
			"second_score":	5059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	925,
			"primary_score":	1000000,
			"second_score":	5058
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	926,
			"primary_score":	1000000,
			"second_score":	5057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	927,
			"primary_score":	1000000,
			"second_score":	5056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	928,
			"primary_score":	1000000,
			"second_score":	5055
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	930,
			"primary_score":	1000000,
			"second_score":	5054
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	935,
			"primary_score":	1000000,
			"second_score":	5053
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	959,
			"primary_score":	999618,
			"second_score":	136608
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	962,
			"primary_score":	999618,
			"second_score":	136607
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	963,
			"primary_score":	999618,
			"second_score":	132351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	965,
			"primary_score":	999618,
			"second_score":	136606
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	967,
			"primary_score":	999618,
			"second_score":	136605
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	968,
			"primary_score":	999618,
			"second_score":	136604
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	980,
			"primary_score":	999618,
			"second_score":	133894
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	983,
			"primary_score":	999618,
			"second_score":	133893
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	988,
			"primary_score":	999618,
			"second_score":	133892
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	989,
			"primary_score":	999618,
			"second_score":	133891
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	990,
			"primary_score":	999618,
			"second_score":	133890
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	991,
			"primary_score":	999618,
			"second_score":	134080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	992,
			"primary_score":	999618,
			"second_score":	134079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	993,
			"primary_score":	999618,
			"second_score":	134078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	995,
			"primary_score":	999700,
			"second_score":	3433
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1009,
			"primary_score":	999618,
			"second_score":	133889
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1016,
			"primary_score":	999618,
			"second_score":	133888
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1017,
			"primary_score":	999618,
			"second_score":	133887
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1030,
			"primary_score":	999618,
			"second_score":	133886
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1065,
			"primary_score":	999618,
			"second_score":	133885
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1066,
			"primary_score":	999618,
			"second_score":	133884
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1067,
			"primary_score":	999618,
			"second_score":	133881
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999618,
			"second_score":	133880
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1069,
			"primary_score":	999618,
			"second_score":	143170
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1070,
			"primary_score":	999618,
			"second_score":	143169
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1071,
			"primary_score":	999618,
			"second_score":	143168
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1072,
			"primary_score":	999618,
			"second_score":	143167
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1073,
			"primary_score":	999618,
			"second_score":	143166
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1074,
			"primary_score":	999618,
			"second_score":	143165
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1084,
			"primary_score":	999618,
			"second_score":	133876
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1086,
			"primary_score":	999618,
			"second_score":	133875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1087,
			"primary_score":	999618,
			"second_score":	133874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1088,
			"primary_score":	999618,
			"second_score":	133873
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1148,
			"primary_score":	999618,
			"second_score":	133878
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1149,
			"primary_score":	999618,
			"second_score":	133877
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1152,
			"primary_score":	999618,
			"second_score":	143163
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1153,
			"primary_score":	999618,
			"second_score":	143162
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1154,
			"primary_score":	999618,
			"second_score":	143161
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1157,
			"primary_score":	999618,
			"second_score":	143160
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1158,
			"primary_score":	999618,
			"second_score":	143159
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1457,
			"primary_score":	999618,
			"second_score":	143157
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1458,
			"primary_score":	999618,
			"second_score":	143156
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1459,
			"primary_score":	999618,
			"second_score":	143155
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1460,
			"primary_score":	999618,
			"second_score":	143154
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1462,
			"primary_score":	999618,
			"second_score":	143153
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1463,
			"primary_score":	999618,
			"second_score":	143152
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1464,
			"primary_score":	999618,
			"second_score":	143151
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1465,
			"primary_score":	999618,
			"second_score":	143150
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1467,
			"primary_score":	999618,
			"second_score":	143149
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1468,
			"primary_score":	999618,
			"second_score":	143148
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1469,
			"primary_score":	999630,
			"second_score":	7346
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1470,
			"primary_score":	999630,
			"second_score":	7345
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1472,
			"primary_score":	999618,
			"second_score":	143147
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1473,
			"primary_score":	999618,
			"second_score":	143146
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1475,
			"primary_score":	999618,
			"second_score":	143145
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1477,
			"primary_score":	999618,
			"second_score":	143144
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1478,
			"primary_score":	999618,
			"second_score":	143143
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1480,
			"primary_score":	999618,
			"second_score":	143142
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1482,
			"primary_score":	999618,
			"second_score":	143141
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1483,
			"primary_score":	999618,
			"second_score":	143140
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1484,
			"primary_score":	999618,
			"second_score":	143139
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1485,
			"primary_score":	999618,
			"second_score":	143138
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1486,
			"primary_score":	999626,
			"second_score":	7334
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1487,
			"primary_score":	999618,
			"second_score":	143134
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1488,
			"primary_score":	999618,
			"second_score":	143133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2211,
			"primary_score":	999618,
			"second_score":	134077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2245,
			"primary_score":	999618,
			"second_score":	134076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2246,
			"primary_score":	999618,
			"second_score":	134075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2247,
			"primary_score":	999618,
			"second_score":	134072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2248,
			"primary_score":	999618,
			"second_score":	134071
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2249,
			"primary_score":	999618,
			"second_score":	134070
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2367,
			"primary_score":	999618,
			"second_score":	143114
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2368,
			"primary_score":	999618,
			"second_score":	143113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2369,
			"primary_score":	999618,
			"second_score":	143112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2386,
			"primary_score":	999618,
			"second_score":	135971
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2388,
			"primary_score":	999618,
			"second_score":	135970
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2389,
			"primary_score":	999618,
			"second_score":	135969
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2390,
			"primary_score":	999618,
			"second_score":	135856
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2391,
			"primary_score":	999618,
			"second_score":	135855
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2396,
			"primary_score":	999964,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2397,
			"primary_score":	999964,
			"second_score":	6289
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2407,
			"primary_score":	999965,
			"second_score":	6288
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2411,
			"primary_score":	999969,
			"second_score":	6286
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2418,
			"primary_score":	999618,
			"second_score":	131808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2419,
			"primary_score":	999618,
			"second_score":	131807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2430,
			"primary_score":	999618,
			"second_score":	131806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2435,
			"primary_score":	999618,
			"second_score":	131805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2439,
			"primary_score":	999618,
			"second_score":	131804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2468,
			"primary_score":	999618,
			"second_score":	134959
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2469,
			"primary_score":	999618,
			"second_score":	134958
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2470,
			"primary_score":	999618,
			"second_score":	134957
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2545,
			"primary_score":	999618,
			"second_score":	130058
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2546,
			"primary_score":	999618,
			"second_score":	130057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2556,
			"primary_score":	999618,
			"second_score":	130056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2560,
			"primary_score":	999618,
			"second_score":	130055
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2605,
			"primary_score":	999618,
			"second_score":	136138
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2606,
			"primary_score":	999618,
			"second_score":	136137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2611,
			"primary_score":	999618,
			"second_score":	136136
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2612,
			"primary_score":	999618,
			"second_score":	136135
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999618,
			"second_score":	128748
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999618,
			"second_score":	128747
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2623,
			"primary_score":	999618,
			"second_score":	137564
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2624,
			"primary_score":	999618,
			"second_score":	137563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2627,
			"primary_score":	999618,
			"second_score":	128746
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2628,
			"primary_score":	999618,
			"second_score":	128745
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2637,
			"primary_score":	999695,
			"second_score":	3919
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2638,
			"primary_score":	999695,
			"second_score":	3918
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2641,
			"primary_score":	999698,
			"second_score":	3917
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2642,
			"primary_score":	999700,
			"second_score":	3915
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2646,
			"primary_score":	999618,
			"second_score":	134479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2648,
			"primary_score":	999618,
			"second_score":	134478
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2649,
			"primary_score":	999618,
			"second_score":	134477
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2654,
			"primary_score":	999618,
			"second_score":	134105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2655,
			"primary_score":	999618,
			"second_score":	134104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2656,
			"primary_score":	999618,
			"second_score":	134103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2659,
			"primary_score":	999618,
			"second_score":	134098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2661,
			"primary_score":	999618,
			"second_score":	134097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2662,
			"primary_score":	999618,
			"second_score":	134096
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2663,
			"primary_score":	999618,
			"second_score":	134095
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2664,
			"primary_score":	999618,
			"second_score":	134094
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2665,
			"primary_score":	999618,
			"second_score":	134093
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2666,
			"primary_score":	999618,
			"second_score":	134088
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2671,
			"primary_score":	999618,
			"second_score":	127321
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2672,
			"primary_score":	999618,
			"second_score":	127320
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2673,
			"primary_score":	999618,
			"second_score":	127319
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2686,
			"primary_score":	999630,
			"second_score":	6390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2687,
			"primary_score":	999630,
			"second_score":	6389
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2697,
			"primary_score":	999630,
			"second_score":	6388
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2701,
			"primary_score":	999630,
			"second_score":	6387
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2714,
			"primary_score":	999618,
			"second_score":	135782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2715,
			"primary_score":	999618,
			"second_score":	135781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2716,
			"primary_score":	999618,
			"second_score":	135780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2717,
			"primary_score":	999618,
			"second_score":	135779
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2718,
			"primary_score":	999618,
			"second_score":	135778
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2723,
			"primary_score":	999618,
			"second_score":	135777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2739,
			"primary_score":	999618,
			"second_score":	131881
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2740,
			"primary_score":	999618,
			"second_score":	131880
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2745,
			"primary_score":	999618,
			"second_score":	131879
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2746,
			"primary_score":	999618,
			"second_score":	131878
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2747,
			"primary_score":	999618,
			"second_score":	131877
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2750,
			"primary_score":	999618,
			"second_score":	134799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2751,
			"primary_score":	999618,
			"second_score":	134798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2752,
			"primary_score":	999618,
			"second_score":	134797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2788,
			"primary_score":	999643,
			"second_score":	6563
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2789,
			"primary_score":	999647,
			"second_score":	6561
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999630,
			"second_score":	4219
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2912,
			"primary_score":	999630,
			"second_score":	4218
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2918,
			"primary_score":	999630,
			"second_score":	4217
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2919,
			"primary_score":	999630,
			"second_score":	4216
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2925,
			"primary_score":	999618,
			"second_score":	134481
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2926,
			"primary_score":	999618,
			"second_score":	134480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2929,
			"primary_score":	999618,
			"second_score":	134069
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2930,
			"primary_score":	999618,
			"second_score":	134068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2931,
			"primary_score":	999618,
			"second_score":	130331
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3020,
			"primary_score":	999618,
			"second_score":	139163
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3021,
			"primary_score":	999618,
			"second_score":	139162
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3065,
			"primary_score":	999618,
			"second_score":	131298
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3066,
			"primary_score":	999618,
			"second_score":	131297
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3068,
			"primary_score":	999618,
			"second_score":	131296
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3070,
			"primary_score":	999618,
			"second_score":	131295
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3071,
			"primary_score":	999618,
			"second_score":	131294
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3072,
			"primary_score":	999618,
			"second_score":	131293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3073,
			"primary_score":	999618,
			"second_score":	131292
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3075,
			"primary_score":	999618,
			"second_score":	131291
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3076,
			"primary_score":	999618,
			"second_score":	131227
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3077,
			"primary_score":	999618,
			"second_score":	131226
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3078,
			"primary_score":	999618,
			"second_score":	131225
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3079,
			"primary_score":	999618,
			"second_score":	131224
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3081,
			"primary_score":	999618,
			"second_score":	131223
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3082,
			"primary_score":	999618,
			"second_score":	131228
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3095,
			"primary_score":	999618,
			"second_score":	131222
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3096,
			"primary_score":	999618,
			"second_score":	131112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3097,
			"primary_score":	999618,
			"second_score":	131111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3100,
			"primary_score":	999618,
			"second_score":	131110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999618,
			"second_score":	131109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3102,
			"primary_score":	999618,
			"second_score":	131108
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3103,
			"primary_score":	999618,
			"second_score":	131027
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3118,
			"primary_score":	999618,
			"second_score":	131026
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3121,
			"primary_score":	999618,
			"second_score":	131025
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3124,
			"primary_score":	999618,
			"second_score":	131024
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3126,
			"primary_score":	999618,
			"second_score":	131023
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3128,
			"primary_score":	999618,
			"second_score":	131022
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3135,
			"primary_score":	999618,
			"second_score":	131021
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3140,
			"primary_score":	999618,
			"second_score":	136739
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3141,
			"primary_score":	999618,
			"second_score":	136738
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3143,
			"primary_score":	999618,
			"second_score":	136737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3145,
			"primary_score":	999618,
			"second_score":	136736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3146,
			"primary_score":	999618,
			"second_score":	136735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3148,
			"primary_score":	999618,
			"second_score":	136734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3149,
			"primary_score":	999618,
			"second_score":	136732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3152,
			"primary_score":	999618,
			"second_score":	136731
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3153,
			"primary_score":	999618,
			"second_score":	136603
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3166,
			"primary_score":	999618,
			"second_score":	129524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3169,
			"primary_score":	999618,
			"second_score":	129523
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3199,
			"primary_score":	999618,
			"second_score":	119688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3200,
			"primary_score":	999618,
			"second_score":	119687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3201,
			"primary_score":	999618,
			"second_score":	119686
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3203,
			"primary_score":	999618,
			"second_score":	119685
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3204,
			"primary_score":	999618,
			"second_score":	119684
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3205,
			"primary_score":	999618,
			"second_score":	119683
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3214,
			"primary_score":	999618,
			"second_score":	135979
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3215,
			"primary_score":	999618,
			"second_score":	135978
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3216,
			"primary_score":	999618,
			"second_score":	135975
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3217,
			"primary_score":	999618,
			"second_score":	135974
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3219,
			"primary_score":	999618,
			"second_score":	135973
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3220,
			"primary_score":	999618,
			"second_score":	135980
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3222,
			"primary_score":	999618,
			"second_score":	135972
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3275,
			"primary_score":	999618,
			"second_score":	131865
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3276,
			"primary_score":	999618,
			"second_score":	131864
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3277,
			"primary_score":	999618,
			"second_score":	131863
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3278,
			"primary_score":	999618,
			"second_score":	131862
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3281,
			"primary_score":	999618,
			"second_score":	131861
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3353,
			"primary_score":	999618,
			"second_score":	134066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3354,
			"primary_score":	999618,
			"second_score":	134065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3355,
			"primary_score":	999618,
			"second_score":	134064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3356,
			"primary_score":	999618,
			"second_score":	134063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3358,
			"primary_score":	999618,
			"second_score":	134062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999618,
			"second_score":	134061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999618,
			"second_score":	134060
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999618,
			"second_score":	134059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999618,
			"second_score":	134058
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999618,
			"second_score":	134057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3365,
			"primary_score":	999618,
			"second_score":	134056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3379,
			"primary_score":	999630,
			"second_score":	4194
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999630,
			"second_score":	4193
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3381,
			"primary_score":	999630,
			"second_score":	4190
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999630,
			"second_score":	4189
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999630,
			"second_score":	4188
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999630,
			"second_score":	4187
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3385,
			"primary_score":	999630,
			"second_score":	4186
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3391,
			"primary_score":	999691,
			"second_score":	4197
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3394,
			"primary_score":	999691,
			"second_score":	4196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3398,
			"primary_score":	999630,
			"second_score":	4185
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3400,
			"primary_score":	999630,
			"second_score":	4184
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3402,
			"primary_score":	999630,
			"second_score":	4183
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3403,
			"primary_score":	999630,
			"second_score":	4182
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3404,
			"primary_score":	999630,
			"second_score":	4151
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3405,
			"primary_score":	999630,
			"second_score":	4150
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4759,
			"primary_score":	999618,
			"second_score":	131876
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4792,
			"primary_score":	999618,
			"second_score":	131875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4793,
			"primary_score":	999618,
			"second_score":	131874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4798,
			"primary_score":	999618,
			"second_score":	131873
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4802,
			"primary_score":	999618,
			"second_score":	131872
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4803,
			"primary_score":	999618,
			"second_score":	131871
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4804,
			"primary_score":	999618,
			"second_score":	131870
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4890,
			"primary_score":	999618,
			"second_score":	131869
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4891,
			"primary_score":	999618,
			"second_score":	131868
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4892,
			"primary_score":	999618,
			"second_score":	131867
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4893,
			"primary_score":	999618,
			"second_score":	131866
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5317,
			"primary_score":	999630,
			"second_score":	6385
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5318,
			"primary_score":	999630,
			"second_score":	6384
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5319,
			"primary_score":	999630,
			"second_score":	6383
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5430,
			"primary_score":	999630,
			"second_score":	6381
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5431,
			"primary_score":	999630,
			"second_score":	6380
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5434,
			"primary_score":	999630,
			"second_score":	6379
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5435,
			"primary_score":	999630,
			"second_score":	6378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5437,
			"primary_score":	999630,
			"second_score":	6377
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5438,
			"primary_score":	999630,
			"second_score":	6376
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5501,
			"primary_score":	999618,
			"second_score":	134102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5502,
			"primary_score":	999992,
			"second_score":	1880
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5506,
			"primary_score":	999618,
			"second_score":	134101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5507,
			"primary_score":	999618,
			"second_score":	134100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5508,
			"primary_score":	999618,
			"second_score":	134099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5532,
			"primary_score":	999700,
			"second_score":	3914
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5533,
			"primary_score":	999700,
			"second_score":	3913
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5534,
			"primary_score":	999700,
			"second_score":	3912
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5536,
			"primary_score":	999700,
			"second_score":	3911
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5537,
			"primary_score":	999700,
			"second_score":	3910
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5538,
			"primary_score":	999700,
			"second_score":	3770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6065,
			"primary_score":	999618,
			"second_score":	130053
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6066,
			"primary_score":	999618,
			"second_score":	130052
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6071,
			"primary_score":	999618,
			"second_score":	130051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6075,
			"primary_score":	999618,
			"second_score":	130050
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6120,
			"primary_score":	999618,
			"second_score":	130048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6121,
			"primary_score":	999618,
			"second_score":	130047
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6122,
			"primary_score":	999618,
			"second_score":	130046
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6862,
			"primary_score":	999618,
			"second_score":	134955
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6863,
			"primary_score":	999618,
			"second_score":	134954
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6873,
			"primary_score":	999618,
			"second_score":	134953
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6874,
			"primary_score":	999618,
			"second_score":	134952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6896,
			"primary_score":	999618,
			"second_score":	134950
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6897,
			"primary_score":	999618,
			"second_score":	134949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6898,
			"primary_score":	999618,
			"second_score":	134948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7009,
			"primary_score":	999618,
			"second_score":	134946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7010,
			"primary_score":	999618,
			"second_score":	134945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7011,
			"primary_score":	999618,
			"second_score":	134944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7012,
			"primary_score":	999618,
			"second_score":	134943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999618,
			"second_score":	131802
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999618,
			"second_score":	131801
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999618,
			"second_score":	131800
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7402,
			"primary_score":	999618,
			"second_score":	131799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999618,
			"second_score":	131798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999618,
			"second_score":	131797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999618,
			"second_score":	131796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7407,
			"primary_score":	999618,
			"second_score":	131795
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999618,
			"second_score":	131794
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999618,
			"second_score":	131793
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999618,
			"second_score":	131792
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7412,
			"primary_score":	999618,
			"second_score":	131791
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7414,
			"primary_score":	999618,
			"second_score":	131790
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7415,
			"primary_score":	999618,
			"second_score":	131789
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7416,
			"primary_score":	999618,
			"second_score":	131788
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7417,
			"primary_score":	999618,
			"second_score":	131787
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7419,
			"primary_score":	999618,
			"second_score":	131786
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7420,
			"primary_score":	999618,
			"second_score":	131785
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7421,
			"primary_score":	999618,
			"second_score":	131784
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7422,
			"primary_score":	999618,
			"second_score":	131783
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7424,
			"primary_score":	999618,
			"second_score":	131782
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7425,
			"primary_score":	999618,
			"second_score":	131781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7426,
			"primary_score":	999618,
			"second_score":	131780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7427,
			"primary_score":	999618,
			"second_score":	131779
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7429,
			"primary_score":	999618,
			"second_score":	131778
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7430,
			"primary_score":	999618,
			"second_score":	131777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7431,
			"primary_score":	999618,
			"second_score":	131776
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7548,
			"primary_score":	999969,
			"second_score":	6285
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7549,
			"primary_score":	999969,
			"second_score":	6284
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7550,
			"primary_score":	999969,
			"second_score":	6283
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7551,
			"primary_score":	999979,
			"second_score":	6282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7678,
			"primary_score":	999618,
			"second_score":	143111
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7679,
			"primary_score":	999618,
			"second_score":	143110
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7680,
			"primary_score":	999618,
			"second_score":	143109
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999618,
			"second_score":	143107
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8087,
			"primary_score":	999618,
			"second_score":	143106
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8088,
			"primary_score":	999618,
			"second_score":	143105
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8089,
			"primary_score":	999618,
			"second_score":	143104
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8091,
			"primary_score":	999618,
			"second_score":	143103
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8092,
			"primary_score":	999618,
			"second_score":	143102
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8095,
			"primary_score":	999618,
			"second_score":	143101
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8096,
			"primary_score":	999618,
			"second_score":	143100
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8098,
			"primary_score":	999618,
			"second_score":	143099
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8099,
			"primary_score":	999618,
			"second_score":	143098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8106,
			"primary_score":	999700,
			"second_score":	3432
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999700,
			"second_score":	3431
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999700,
			"second_score":	3430
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8142,
			"primary_score":	999700,
			"second_score":	3427
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8143,
			"primary_score":	999700,
			"second_score":	3426
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8154,
			"primary_score":	999700,
			"second_score":	3425
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8160,
			"primary_score":	999701,
			"second_score":	3424
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8161,
			"primary_score":	999701,
			"second_score":	3423
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999700,
			"second_score":	3421
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999700,
			"second_score":	3420
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8201,
			"primary_score":	999700,
			"second_score":	3419
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8204,
			"primary_score":	999700,
			"second_score":	3376
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8206,
			"primary_score":	999700,
			"second_score":	3375
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999700,
			"second_score":	3374
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8208,
			"primary_score":	999700,
			"second_score":	3345
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8209,
			"primary_score":	999700,
			"second_score":	3314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8210,
			"primary_score":	999700,
			"second_score":	3313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8219,
			"primary_score":	999704,
			"second_score":	3384
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8220,
			"primary_score":	999704,
			"second_score":	3383
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8221,
			"primary_score":	999704,
			"second_score":	3380
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8222,
			"primary_score":	999704,
			"second_score":	3379
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8224,
			"primary_score":	999700,
			"second_score":	3378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8225,
			"primary_score":	999704,
			"second_score":	3385
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8227,
			"primary_score":	999700,
			"second_score":	3377
		}, {
			"file":	"Zend/zend_list.c",
			"line":	37,
			"primary_score":	999618,
			"second_score":	148496
		}, {
			"file":	"Zend/zend_list.c",
			"line":	38,
			"primary_score":	999618,
			"second_score":	148495
		}, {
			"file":	"Zend/zend_list.c",
			"line":	40,
			"primary_score":	999618,
			"second_score":	148494
		}, {
			"file":	"Zend/zend_list.c",
			"line":	41,
			"primary_score":	999618,
			"second_score":	148493
		}, {
			"file":	"Zend/zend_list.c",
			"line":	42,
			"primary_score":	999618,
			"second_score":	148492
		}, {
			"file":	"Zend/zend_list.c",
			"line":	44,
			"primary_score":	999618,
			"second_score":	148491
		}, {
			"file":	"Zend/zend_list.c",
			"line":	46,
			"primary_score":	999618,
			"second_score":	148488
		}, {
			"file":	"Zend/zend_list.c",
			"line":	47,
			"primary_score":	999618,
			"second_score":	148318
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999618,
			"second_score":	114052
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999618,
			"second_score":	114051
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999618,
			"second_score":	114041
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999618,
			"second_score":	114040
		}, {
			"file":	"Zend/zend_list.c",
			"line":	96,
			"primary_score":	999618,
			"second_score":	148498
		}, {
			"file":	"Zend/zend_list.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	148497
		}, {
			"file":	"Zend/zend_list.c",
			"line":	100,
			"primary_score":	999618,
			"second_score":	148317
		}, {
			"file":	"Zend/zend_list.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	148316
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999618,
			"second_score":	114018
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999618,
			"second_score":	114017
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999618,
			"second_score":	114016
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	114015
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999618,
			"second_score":	114005
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999618,
			"second_score":	114004
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999618,
			"second_score":	113895
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999618,
			"second_score":	103507
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999618,
			"second_score":	6213
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	28,
			"primary_score":	999618,
			"second_score":	147721
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	29,
			"primary_score":	999618,
			"second_score":	147720
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	30,
			"primary_score":	999618,
			"second_score":	147719
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	31,
			"primary_score":	999618,
			"second_score":	147718
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	32,
			"primary_score":	999618,
			"second_score":	147717
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	33,
			"primary_score":	999618,
			"second_score":	147716
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	39,
			"primary_score":	999618,
			"second_score":	144240
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	41,
			"primary_score":	999618,
			"second_score":	144136
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	42,
			"primary_score":	999618,
			"second_score":	144135
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	43,
			"primary_score":	999618,
			"second_score":	144134
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	46,
			"primary_score":	999618,
			"second_score":	144133
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	48,
			"primary_score":	999618,
			"second_score":	144132
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	49,
			"primary_score":	999618,
			"second_score":	144131
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	51,
			"primary_score":	999618,
			"second_score":	144130
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999618,
			"second_score":	133408
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999618,
			"second_score":	133407
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999618,
			"second_score":	133406
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999618,
			"second_score":	133405
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	133404
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999618,
			"second_score":	133401
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999618,
			"second_score":	133334
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999618,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999618,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999669,
			"second_score":	2762
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999669,
			"second_score":	2761
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999669,
			"second_score":	2760
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999669,
			"second_score":	2741
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999618,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999618,
			"second_score":	119244
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999618,
			"second_score":	119240
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999618,
			"second_score":	38175
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999618,
			"second_score":	38174
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999618,
			"second_score":	119292
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999618,
			"second_score":	119291
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	275,
			"primary_score":	999618,
			"second_score":	144127
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	277,
			"primary_score":	999618,
			"second_score":	144126
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	278,
			"primary_score":	999618,
			"second_score":	144125
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	279,
			"primary_score":	999618,
			"second_score":	144124
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	961,
			"primary_score":	999719,
			"second_score":	166
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	962,
			"primary_score":	999719,
			"second_score":	165
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	963,
			"primary_score":	999719,
			"second_score":	164
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	964,
			"primary_score":	999719,
			"second_score":	163
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	965,
			"primary_score":	999719,
			"second_score":	162
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	966,
			"primary_score":	999719,
			"second_score":	161
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	968,
			"primary_score":	999719,
			"second_score":	160
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	969,
			"primary_score":	999720,
			"second_score":	159
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	970,
			"primary_score":	999720,
			"second_score":	158
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	978,
			"primary_score":	999719,
			"second_score":	157
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	990,
			"primary_score":	999721,
			"second_score":	146
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1010,
			"primary_score":	999721,
			"second_score":	145
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1021,
			"primary_score":	999721,
			"second_score":	144
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1035,
			"primary_score":	999721,
			"second_score":	143
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1038,
			"primary_score":	999721,
			"second_score":	142
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1251,
			"primary_score":	999632,
			"second_score":	893
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1252,
			"primary_score":	999632,
			"second_score":	892
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1254,
			"primary_score":	999632,
			"second_score":	891
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1255,
			"primary_score":	999732,
			"second_score":	890
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1282,
			"primary_score":	999632,
			"second_score":	889
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999650,
			"second_score":	173
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999650,
			"second_score":	172
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999650,
			"second_score":	171
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	31,
			"primary_score":	999645,
			"second_score":	924
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	32,
			"primary_score":	999645,
			"second_score":	923
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	33,
			"primary_score":	999645,
			"second_score":	922
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	34,
			"primary_score":	999645,
			"second_score":	921
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999618,
			"second_score":	113725
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999618,
			"second_score":	113659
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999618,
			"second_score":	119141
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999618,
			"second_score":	119140
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999618,
			"second_score":	114619
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999618,
			"second_score":	114618
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999626,
			"second_score":	916
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	915
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999626,
			"second_score":	914
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999626,
			"second_score":	913
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999626,
			"second_score":	912
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999626,
			"second_score":	911
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999626,
			"second_score":	910
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999626,
			"second_score":	909
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999626,
			"second_score":	908
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999626,
			"second_score":	907
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999626,
			"second_score":	906
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999626,
			"second_score":	905
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999626,
			"second_score":	904
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999626,
			"second_score":	903
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999626,
			"second_score":	902
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999626,
			"second_score":	901
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	270,
			"primary_score":	999667,
			"second_score":	52
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	272,
			"primary_score":	999667,
			"second_score":	51
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	48,
			"primary_score":	999618,
			"second_score":	143388
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	53,
			"primary_score":	999618,
			"second_score":	143498
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	55,
			"primary_score":	999618,
			"second_score":	143497
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	62,
			"primary_score":	999618,
			"second_score":	143496
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	63,
			"primary_score":	999618,
			"second_score":	143392
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	64,
			"primary_score":	999618,
			"second_score":	143391
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	65,
			"primary_score":	999618,
			"second_score":	143390
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	66,
			"primary_score":	999618,
			"second_score":	143389
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	68,
			"primary_score":	999618,
			"second_score":	143283
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	69,
			"primary_score":	999618,
			"second_score":	143282
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	71,
			"primary_score":	999618,
			"second_score":	143281
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	73,
			"primary_score":	999618,
			"second_score":	143280
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	74,
			"primary_score":	999618,
			"second_score":	143279
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	75,
			"primary_score":	999618,
			"second_score":	143277
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	76,
			"primary_score":	999618,
			"second_score":	143276
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	78,
			"primary_score":	999618,
			"second_score":	143275
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	79,
			"primary_score":	999618,
			"second_score":	143274
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	80,
			"primary_score":	999618,
			"second_score":	143273
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	82,
			"primary_score":	999618,
			"second_score":	143272
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	84,
			"primary_score":	999618,
			"second_score":	143271
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	85,
			"primary_score":	999618,
			"second_score":	143270
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	86,
			"primary_score":	999618,
			"second_score":	143269
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	88,
			"primary_score":	999618,
			"second_score":	143268
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	89,
			"primary_score":	999618,
			"second_score":	143267
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	91,
			"primary_score":	999618,
			"second_score":	143266
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	93,
			"primary_score":	999618,
			"second_score":	143265
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	95,
			"primary_score":	999618,
			"second_score":	143264
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	97,
			"primary_score":	999618,
			"second_score":	143263
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	143262
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	100,
			"primary_score":	999618,
			"second_score":	143261
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	101,
			"primary_score":	999618,
			"second_score":	143260
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	103,
			"primary_score":	999618,
			"second_score":	143259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	143258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999618,
			"second_score":	139251
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999618,
			"second_score":	139253
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999618,
			"second_score":	139252
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999618,
			"second_score":	114699
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999618,
			"second_score":	114698
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999618,
			"second_score":	114682
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999618,
			"second_score":	114681
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999618,
			"second_score":	15261
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999618,
			"second_score":	15260
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999618,
			"second_score":	15259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999618,
			"second_score":	19041
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999618,
			"second_score":	19040
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999618,
			"second_score":	18977
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999618,
			"second_score":	18976
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999618,
			"second_score":	18968
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999618,
			"second_score":	15258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999618,
			"second_score":	15257
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999618,
			"second_score":	15249
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999618,
			"second_score":	15248
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999618,
			"second_score":	14819
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999618,
			"second_score":	14811
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999618,
			"second_score":	16315
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999618,
			"second_score":	14810
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999618,
			"second_score":	14809
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999618,
			"second_score":	119642
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999618,
			"second_score":	119641
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999618,
			"second_score":	119640
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999618,
			"second_score":	119639
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999618,
			"second_score":	119638
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999618,
			"second_score":	119637
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999618,
			"second_score":	119618
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999618,
			"second_score":	119617
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999618,
			"second_score":	119598
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999618,
			"second_score":	119597
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999618,
			"second_score":	119596
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999618,
			"second_score":	119595
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999618,
			"second_score":	119418
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999618,
			"second_score":	119415
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999618,
			"second_score":	119414
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999618,
			"second_score":	119349
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999618,
			"second_score":	119298
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999618,
			"second_score":	119297
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999618,
			"second_score":	119296
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999618,
			"second_score":	119295
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999618,
			"second_score":	119294
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999618,
			"second_score":	119293
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999618,
			"second_score":	119290
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999618,
			"second_score":	133785
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999618,
			"second_score":	133784
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999618,
			"second_score":	133783
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999618,
			"second_score":	133790
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999618,
			"second_score":	133789
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999618,
			"second_score":	133788
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999618,
			"second_score":	133787
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999618,
			"second_score":	133786
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999618,
			"second_score":	133782
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999618,
			"second_score":	133793
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999618,
			"second_score":	133754
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999618,
			"second_score":	133753
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999618,
			"second_score":	133752
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999618,
			"second_score":	133751
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999618,
			"second_score":	133750
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999618,
			"second_score":	133747
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999631,
			"second_score":	1717
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999631,
			"second_score":	1661
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999618,
			"second_score":	133746
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999618,
			"second_score":	133745
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999618,
			"second_score":	133686
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999618,
			"second_score":	133685
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999618,
			"second_score":	133684
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999618,
			"second_score":	133628
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999618,
			"second_score":	133627
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999618,
			"second_score":	133626
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999618,
			"second_score":	133625
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999618,
			"second_score":	133581
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999618,
			"second_score":	133580
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999618,
			"second_score":	133579
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999622,
			"second_score":	1495
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999618,
			"second_score":	133578
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999618,
			"second_score":	125463
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999618,
			"second_score":	125524
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999618,
			"second_score":	133577
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999618,
			"second_score":	133573
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999618,
			"second_score":	133572
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999618,
			"second_score":	133571
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999618,
			"second_score":	120053
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999618,
			"second_score":	120052
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999618,
			"second_score":	120051
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999618,
			"second_score":	120050
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999618,
			"second_score":	120022
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999618,
			"second_score":	120021
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999618,
			"second_score":	120020
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1892,
			"primary_score":	999618,
			"second_score":	149920
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1893,
			"primary_score":	999618,
			"second_score":	149919
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1894,
			"primary_score":	999618,
			"second_score":	149918
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1896,
			"primary_score":	999618,
			"second_score":	149917
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1897,
			"primary_score":	999618,
			"second_score":	149909
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1899,
			"primary_score":	999618,
			"second_score":	149902
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1901,
			"primary_score":	999618,
			"second_score":	149901
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	1907,
			"primary_score":	999618,
			"second_score":	149942
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999618,
			"second_score":	113727
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999618,
			"second_score":	113753
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999618,
			"second_score":	114723
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999618,
			"second_score":	114722
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999618,
			"second_score":	114724
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999618,
			"second_score":	114721
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	114720
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999618,
			"second_score":	114719
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999618,
			"second_score":	114718
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	114717
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999618,
			"second_score":	133198
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999618,
			"second_score":	123106
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999618,
			"second_score":	123105
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999618,
			"second_score":	123104
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999618,
			"second_score":	123103
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999618,
			"second_score":	123074
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999618,
			"second_score":	123073
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999618,
			"second_score":	123072
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999618,
			"second_score":	123071
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999618,
			"second_score":	114738
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999618,
			"second_score":	114737
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999618,
			"second_score":	114736
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999618,
			"second_score":	114735
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	50,
			"primary_score":	999618,
			"second_score":	134358
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	51,
			"primary_score":	999618,
			"second_score":	134357
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	52,
			"primary_score":	999618,
			"second_score":	134356
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	62,
			"primary_score":	999618,
			"second_score":	134348
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	63,
			"primary_score":	999618,
			"second_score":	134347
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	65,
			"primary_score":	999618,
			"second_score":	134328
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999618,
			"second_score":	133567
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999618,
			"second_score":	133566
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999618,
			"second_score":	113497
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999618,
			"second_score":	113496
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999618,
			"second_score":	113495
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999618,
			"second_score":	133797
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999618,
			"second_score":	133796
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999618,
			"second_score":	133795
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999618,
			"second_score":	133381
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999618,
			"second_score":	133380
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999618,
			"second_score":	133390
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999618,
			"second_score":	133389
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999618,
			"second_score":	133388
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999618,
			"second_score":	133387
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999618,
			"second_score":	133386
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999618,
			"second_score":	133385
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999618,
			"second_score":	133384
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999618,
			"second_score":	133391
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999618,
			"second_score":	133383
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999618,
			"second_score":	133382
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	90,
			"primary_score":	999618,
			"second_score":	144270
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	95,
			"primary_score":	999618,
			"second_score":	144272
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	97,
			"primary_score":	999618,
			"second_score":	144271
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	100,
			"primary_score":	999618,
			"second_score":	144269
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	103,
			"primary_score":	999618,
			"second_score":	144268
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	144266
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	109,
			"primary_score":	999618,
			"second_score":	144265
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	169,
			"primary_score":	999618,
			"second_score":	144284
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	170,
			"primary_score":	999618,
			"second_score":	144283
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	172,
			"primary_score":	999618,
			"second_score":	144282
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	178,
			"primary_score":	999618,
			"second_score":	144281
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	187,
			"primary_score":	999618,
			"second_score":	144280
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	188,
			"primary_score":	999618,
			"second_score":	144279
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	189,
			"primary_score":	999618,
			"second_score":	144278
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	190,
			"primary_score":	999618,
			"second_score":	144277
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	191,
			"primary_score":	999618,
			"second_score":	144276
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	192,
			"primary_score":	999618,
			"second_score":	144275
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	194,
			"primary_score":	999618,
			"second_score":	144274
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	208,
			"primary_score":	999618,
			"second_score":	144273
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	209,
			"primary_score":	999618,
			"second_score":	144264
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	213,
			"primary_score":	999618,
			"second_score":	144263
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	214,
			"primary_score":	999618,
			"second_score":	144262
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	144261
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	218,
			"primary_score":	999618,
			"second_score":	144260
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	222,
			"primary_score":	999618,
			"second_score":	144259
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	223,
			"primary_score":	999618,
			"second_score":	144258
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	224,
			"primary_score":	999618,
			"second_score":	144257
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	225,
			"primary_score":	999618,
			"second_score":	144256
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	227,
			"primary_score":	999618,
			"second_score":	144255
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	228,
			"primary_score":	999618,
			"second_score":	144254
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	229,
			"primary_score":	999618,
			"second_score":	144253
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	231,
			"primary_score":	999618,
			"second_score":	144252
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	232,
			"primary_score":	999618,
			"second_score":	144251
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	234,
			"primary_score":	999618,
			"second_score":	144250
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	275,
			"primary_score":	999618,
			"second_score":	144249
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	276,
			"primary_score":	999618,
			"second_score":	144248
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	277,
			"primary_score":	999618,
			"second_score":	144247
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	278,
			"primary_score":	999618,
			"second_score":	144246
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	279,
			"primary_score":	999618,
			"second_score":	144245
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	281,
			"primary_score":	999618,
			"second_score":	144244
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	282,
			"primary_score":	999618,
			"second_score":	144243
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	284,
			"primary_score":	999618,
			"second_score":	144242
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	133393
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999618,
			"second_score":	133392
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999618,
			"second_score":	133379
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999618,
			"second_score":	133378
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999618,
			"second_score":	133377
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999618,
			"second_score":	133376
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999618,
			"second_score":	133357
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999618,
			"second_score":	133356
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999618,
			"second_score":	133403
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999618,
			"second_score":	133402
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999618,
			"second_score":	6113
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999618,
			"second_score":	6112
		}, {
			"file":	"Zend/zend_string.c",
			"line":	85,
			"primary_score":	999618,
			"second_score":	134609
		}, {
			"file":	"Zend/zend_string.c",
			"line":	86,
			"primary_score":	999618,
			"second_score":	134608
		}, {
			"file":	"Zend/zend_string.c",
			"line":	87,
			"primary_score":	999618,
			"second_score":	134607
		}, {
			"file":	"Zend/zend_string.c",
			"line":	89,
			"primary_score":	999618,
			"second_score":	134606
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999707,
			"second_score":	2651
		}, {
			"file":	"Zend/zend_string.c",
			"line":	93,
			"primary_score":	999618,
			"second_score":	134605
		}, {
			"file":	"Zend/zend_string.c",
			"line":	94,
			"primary_score":	999618,
			"second_score":	134595
		}, {
			"file":	"Zend/zend_string.c",
			"line":	95,
			"primary_score":	999618,
			"second_score":	134594
		}, {
			"file":	"Zend/zend_string.c",
			"line":	96,
			"primary_score":	999618,
			"second_score":	134593
		}, {
			"file":	"Zend/zend_string.c",
			"line":	97,
			"primary_score":	999618,
			"second_score":	134592
		}, {
			"file":	"Zend/zend_string.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	152755
		}, {
			"file":	"Zend/zend_string.c",
			"line":	99,
			"primary_score":	999618,
			"second_score":	152754
		}, {
			"file":	"Zend/zend_string.c",
			"line":	100,
			"primary_score":	999618,
			"second_score":	152753
		}, {
			"file":	"Zend/zend_string.c",
			"line":	102,
			"primary_score":	999618,
			"second_score":	152734
		}, {
			"file":	"Zend/zend_string.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	135213
		}, {
			"file":	"Zend/zend_string.c",
			"line":	108,
			"primary_score":	999618,
			"second_score":	136291
		}, {
			"file":	"Zend/zend_string.c",
			"line":	114,
			"primary_score":	999618,
			"second_score":	136290
		}, {
			"file":	"Zend/zend_string.c",
			"line":	115,
			"primary_score":	999618,
			"second_score":	136289
		}, {
			"file":	"Zend/zend_string.c",
			"line":	121,
			"primary_score":	999618,
			"second_score":	136288
		}, {
			"file":	"Zend/zend_string.c",
			"line":	122,
			"primary_score":	999618,
			"second_score":	136287
		}, {
			"file":	"Zend/zend_string.c",
			"line":	123,
			"primary_score":	999618,
			"second_score":	136286
		}, {
			"file":	"Zend/zend_string.c",
			"line":	124,
			"primary_score":	999618,
			"second_score":	136285
		}, {
			"file":	"Zend/zend_string.c",
			"line":	126,
			"primary_score":	999618,
			"second_score":	136266
		}, {
			"file":	"Zend/zend_string.c",
			"line":	127,
			"primary_score":	999618,
			"second_score":	136265
		}, {
			"file":	"Zend/zend_string.c",
			"line":	128,
			"primary_score":	999618,
			"second_score":	136264
		}, {
			"file":	"Zend/zend_string.c",
			"line":	129,
			"primary_score":	999618,
			"second_score":	136263
		}, {
			"file":	"Zend/zend_string.c",
			"line":	131,
			"primary_score":	999618,
			"second_score":	136262
		}, {
			"file":	"Zend/zend_string.c",
			"line":	132,
			"primary_score":	999618,
			"second_score":	136261
		}, {
			"file":	"Zend/zend_string.c",
			"line":	133,
			"primary_score":	999618,
			"second_score":	136260
		}, {
			"file":	"Zend/zend_string.c",
			"line":	134,
			"primary_score":	999618,
			"second_score":	136259
		}, {
			"file":	"Zend/zend_string.c",
			"line":	137,
			"primary_score":	999618,
			"second_score":	136258
		}, {
			"file":	"Zend/zend_string.c",
			"line":	139,
			"primary_score":	999618,
			"second_score":	136256
		}, {
			"file":	"Zend/zend_string.c",
			"line":	140,
			"primary_score":	999618,
			"second_score":	136255
		}, {
			"file":	"Zend/zend_string.c",
			"line":	141,
			"primary_score":	999618,
			"second_score":	136254
		}, {
			"file":	"Zend/zend_string.c",
			"line":	142,
			"primary_score":	999618,
			"second_score":	136253
		}, {
			"file":	"Zend/zend_string.c",
			"line":	143,
			"primary_score":	999618,
			"second_score":	136252
		}, {
			"file":	"Zend/zend_string.c",
			"line":	145,
			"primary_score":	999618,
			"second_score":	136251
		}, {
			"file":	"Zend/zend_string.c",
			"line":	149,
			"primary_score":	999618,
			"second_score":	136250
		}, {
			"file":	"Zend/zend_string.c",
			"line":	151,
			"primary_score":	999618,
			"second_score":	136249
		}, {
			"file":	"Zend/zend_string.c",
			"line":	153,
			"primary_score":	999618,
			"second_score":	136247
		}, {
			"file":	"Zend/zend_string.c",
			"line":	155,
			"primary_score":	999618,
			"second_score":	136246
		}, {
			"file":	"Zend/zend_string.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	136245
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999618,
			"second_score":	112943
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999618,
			"second_score":	112942
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999618,
			"second_score":	112941
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999618,
			"second_score":	112940
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999618,
			"second_score":	103539
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999618,
			"second_score":	103538
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999618,
			"second_score":	110117
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999618,
			"second_score":	110116
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999618,
			"second_score":	110115
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999618,
			"second_score":	110114
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999618,
			"second_score":	104626
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999618,
			"second_score":	110113
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999618,
			"second_score":	110112
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999618,
			"second_score":	103537
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	103536
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999618,
			"second_score":	103535
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999618,
			"second_score":	6269
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999618,
			"second_score":	6215
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999618,
			"second_score":	6268
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999618,
			"second_score":	6267
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999618,
			"second_score":	6266
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999618,
			"second_score":	6265
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999618,
			"second_score":	6219
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999618,
			"second_score":	6218
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999618,
			"second_score":	6217
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999618,
			"second_score":	6216
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999618,
			"second_score":	114055
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999618,
			"second_score":	115376
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999618,
			"second_score":	115355
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999618,
			"second_score":	114847
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999618,
			"second_score":	114846
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999618,
			"second_score":	114845
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999618,
			"second_score":	114837
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999618,
			"second_score":	114818
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999618,
			"second_score":	114054
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999618,
			"second_score":	114053
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999618,
			"second_score":	113851
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999618,
			"second_score":	15277
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999618,
			"second_score":	19018
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999618,
			"second_score":	19015
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999618,
			"second_score":	133214
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999618,
			"second_score":	133213
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999618,
			"second_score":	133212
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999618,
			"second_score":	119711
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999618,
			"second_score":	114057
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999618,
			"second_score":	115485
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999618,
			"second_score":	114056
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999618,
			"second_score":	133216
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999618,
			"second_score":	118975
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999618,
			"second_score":	133215
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999618,
			"second_score":	133328
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999618,
			"second_score":	133327
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999618,
			"second_score":	133326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999618,
			"second_score":	133325
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999618,
			"second_score":	133324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999618,
			"second_score":	133323
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999618,
			"second_score":	133314
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999618,
			"second_score":	133313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999618,
			"second_score":	133312
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999618,
			"second_score":	133311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999618,
			"second_score":	133310
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999618,
			"second_score":	133309
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999618,
			"second_score":	133308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999618,
			"second_score":	133307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999618,
			"second_score":	133306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999618,
			"second_score":	133305
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999618,
			"second_score":	133304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999618,
			"second_score":	133303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999618,
			"second_score":	133302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999618,
			"second_score":	133301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999618,
			"second_score":	133300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999618,
			"second_score":	133299
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999618,
			"second_score":	133266
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999618,
			"second_score":	133265
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999618,
			"second_score":	133264
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999618,
			"second_score":	133263
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999618,
			"second_score":	133262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999618,
			"second_score":	133261
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999618,
			"second_score":	133260
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999618,
			"second_score":	119670
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999618,
			"second_score":	119669
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999618,
			"second_score":	119648
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999618,
			"second_score":	119647
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999618,
			"second_score":	119725
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999618,
			"second_score":	119724
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999618,
			"second_score":	119723
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999618,
			"second_score":	119661
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999618,
			"second_score":	119660
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999618,
			"second_score":	119659
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999618,
			"second_score":	119658
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999618,
			"second_score":	119657
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999618,
			"second_score":	119656
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999618,
			"second_score":	119655
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999618,
			"second_score":	119651
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999618,
			"second_score":	119650
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999618,
			"second_score":	119649
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999618,
			"second_score":	123084
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999618,
			"second_score":	123083
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999618,
			"second_score":	123082
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999618,
			"second_score":	123081
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999618,
			"second_score":	123080
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999618,
			"second_score":	123079
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999618,
			"second_score":	123078
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	604,
			"primary_score":	999638,
			"second_score":	117
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	605,
			"primary_score":	999638,
			"second_score":	116
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	606,
			"primary_score":	999638,
			"second_score":	115
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	607,
			"primary_score":	999638,
			"second_score":	114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	608,
			"primary_score":	999638,
			"second_score":	113
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	609,
			"primary_score":	999638,
			"second_score":	112
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	610,
			"primary_score":	999638,
			"second_score":	111
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999618,
			"second_score":	123077
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999618,
			"second_score":	123067
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999618,
			"second_score":	123063
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999618,
			"second_score":	123062
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999618,
			"second_score":	123061
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999618,
			"second_score":	123060
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999618,
			"second_score":	122950
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999618,
			"second_score":	122947
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999618,
			"second_score":	122946
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999618,
			"second_score":	122945
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999618,
			"second_score":	122944
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999618,
			"second_score":	122943
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999618,
			"second_score":	122942
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999618,
			"second_score":	122941
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999618,
			"second_score":	122930
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999618,
			"second_score":	122921
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999618,
			"second_score":	122920
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999618,
			"second_score":	122919
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999618,
			"second_score":	121758
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999631,
			"second_score":	479
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999618,
			"second_score":	121757
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999618,
			"second_score":	121756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999618,
			"second_score":	121755
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	713,
			"primary_score":	999642,
			"second_score":	447
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	714,
			"primary_score":	999648,
			"second_score":	446
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	722,
			"primary_score":	999648,
			"second_score":	445
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	724,
			"primary_score":	999642,
			"second_score":	406
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	725,
			"primary_score":	999642,
			"second_score":	405
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	726,
			"primary_score":	999642,
			"second_score":	404
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999618,
			"second_score":	121754
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999618,
			"second_score":	121753
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999618,
			"second_score":	121752
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999618,
			"second_score":	119842
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999618,
			"second_score":	119841
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	747,
			"primary_score":	999638,
			"second_score":	126
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	748,
			"primary_score":	999638,
			"second_score":	125
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999632,
			"second_score":	1086
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999632,
			"second_score":	1085
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999632,
			"second_score":	1084
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999632,
			"second_score":	1083
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999632,
			"second_score":	1082
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999632,
			"second_score":	1081
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999632,
			"second_score":	1057
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999632,
			"second_score":	897
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999632,
			"second_score":	894
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999632,
			"second_score":	888
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	822,
			"primary_score":	999732,
			"second_score":	887
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	823,
			"primary_score":	999734,
			"second_score":	886
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	824,
			"primary_score":	999734,
			"second_score":	884
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	827,
			"primary_score":	999732,
			"second_score":	880
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	830,
			"primary_score":	999732,
			"second_score":	842
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	831,
			"primary_score":	999732,
			"second_score":	841
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	832,
			"primary_score":	999732,
			"second_score":	840
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	834,
			"primary_score":	999732,
			"second_score":	839
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	835,
			"primary_score":	999732,
			"second_score":	838
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999630,
			"second_score":	1134
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999630,
			"second_score":	1133
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999630,
			"second_score":	1132
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999630,
			"second_score":	1131
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999630,
			"second_score":	1130
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999630,
			"second_score":	1129
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999630,
			"second_score":	1128
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999630,
			"second_score":	1127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999632,
			"second_score":	1093
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999632,
			"second_score":	1091
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999632,
			"second_score":	1090
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999618,
			"second_score":	121377
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999618,
			"second_score":	121376
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999618,
			"second_score":	121375
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999618,
			"second_score":	121374
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999618,
			"second_score":	121373
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999618,
			"second_score":	121372
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999618,
			"second_score":	121371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999618,
			"second_score":	121307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999618,
			"second_score":	121306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999618,
			"second_score":	123110
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999618,
			"second_score":	123109
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999618,
			"second_score":	123108
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999618,
			"second_score":	123102
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999618,
			"second_score":	123101
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999618,
			"second_score":	123088
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999618,
			"second_score":	123086
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999618,
			"second_score":	123085
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999618,
			"second_score":	119668
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999618,
			"second_score":	119667
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999618,
			"second_score":	119666
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999618,
			"second_score":	119665
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999618,
			"second_score":	119664
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999618,
			"second_score":	119663
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999618,
			"second_score":	119012
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999618,
			"second_score":	119011
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999618,
			"second_score":	119010
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999618,
			"second_score":	119009
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999618,
			"second_score":	118985
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999618,
			"second_score":	118977
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999618,
			"second_score":	118974
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999618,
			"second_score":	119662
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999618,
			"second_score":	133257
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999618,
			"second_score":	133256
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999618,
			"second_score":	133255
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999618,
			"second_score":	133254
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999618,
			"second_score":	133253
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999618,
			"second_score":	133252
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999618,
			"second_score":	133251
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999618,
			"second_score":	133250
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999618,
			"second_score":	133226
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999618,
			"second_score":	133218
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999618,
			"second_score":	133217
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999618,
			"second_score":	133211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999618,
			"second_score":	133207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999618,
			"second_score":	133206
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999618,
			"second_score":	119720
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6006,
			"primary_score":	999618,
			"second_score":	119719
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999618,
			"second_score":	119718
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6008,
			"primary_score":	999618,
			"second_score":	119717
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6010,
			"primary_score":	999618,
			"second_score":	119716
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6011,
			"primary_score":	999618,
			"second_score":	119715
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6013,
			"primary_score":	999618,
			"second_score":	119713
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6020,
			"primary_score":	999618,
			"second_score":	119712
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6023,
			"primary_score":	999618,
			"second_score":	119699
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6024,
			"primary_score":	999618,
			"second_score":	119673
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6025,
			"primary_score":	999618,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10190,
			"primary_score":	999618,
			"second_score":	121517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10191,
			"primary_score":	999618,
			"second_score":	121516
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10192,
			"primary_score":	999618,
			"second_score":	121515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999618,
			"second_score":	121514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10195,
			"primary_score":	999618,
			"second_score":	121513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999618,
			"second_score":	121512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999618,
			"second_score":	121501
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10205,
			"primary_score":	999618,
			"second_score":	121500
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10208,
			"primary_score":	999618,
			"second_score":	121436
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10209,
			"primary_score":	999618,
			"second_score":	121382
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10210,
			"primary_score":	999618,
			"second_score":	121381
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999618,
			"second_score":	120778
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999618,
			"second_score":	120777
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10225,
			"primary_score":	999618,
			"second_score":	120776
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10226,
			"primary_score":	999618,
			"second_score":	120775
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999618,
			"second_score":	120774
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10229,
			"primary_score":	999618,
			"second_score":	120773
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10231,
			"primary_score":	999618,
			"second_score":	120762
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10234,
			"primary_score":	999618,
			"second_score":	120761
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10235,
			"primary_score":	999618,
			"second_score":	120756
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999618,
			"second_score":	120725
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10240,
			"primary_score":	999618,
			"second_score":	120724
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10248,
			"primary_score":	999618,
			"second_score":	120723
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10531,
			"primary_score":	999618,
			"second_score":	123172
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10532,
			"primary_score":	999618,
			"second_score":	123171
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10533,
			"primary_score":	999618,
			"second_score":	123170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10534,
			"primary_score":	999618,
			"second_score":	123169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10536,
			"primary_score":	999618,
			"second_score":	123158
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10540,
			"primary_score":	999618,
			"second_score":	123157
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999618,
			"second_score":	123155
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10550,
			"primary_score":	999618,
			"second_score":	123153
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999618,
			"second_score":	123149
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999618,
			"second_score":	123115
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999618,
			"second_score":	123114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10559,
			"primary_score":	999618,
			"second_score":	123179
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10560,
			"primary_score":	999618,
			"second_score":	123178
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10561,
			"primary_score":	999618,
			"second_score":	123177
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10563,
			"primary_score":	999618,
			"second_score":	123176
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10564,
			"primary_score":	999618,
			"second_score":	123175
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10565,
			"primary_score":	999618,
			"second_score":	123174
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10566,
			"primary_score":	999618,
			"second_score":	123173
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999618,
			"second_score":	119837
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999618,
			"second_score":	119836
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11275,
			"primary_score":	999618,
			"second_score":	119835
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11277,
			"primary_score":	999618,
			"second_score":	119834
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11278,
			"primary_score":	999618,
			"second_score":	119833
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11280,
			"primary_score":	999618,
			"second_score":	119822
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11281,
			"primary_score":	999618,
			"second_score":	119819
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11282,
			"primary_score":	999618,
			"second_score":	119818
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11284,
			"primary_score":	999618,
			"second_score":	119784
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11285,
			"primary_score":	999618,
			"second_score":	119730
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11286,
			"primary_score":	999618,
			"second_score":	119729
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28310,
			"primary_score":	999726,
			"second_score":	196
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28311,
			"primary_score":	999726,
			"second_score":	195
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28312,
			"primary_score":	999726,
			"second_score":	194
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28313,
			"primary_score":	999726,
			"second_score":	193
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28316,
			"primary_score":	999726,
			"second_score":	192
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28317,
			"primary_score":	999726,
			"second_score":	191
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28319,
			"primary_score":	999726,
			"second_score":	185
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28321,
			"primary_score":	999726,
			"second_score":	184
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28326,
			"primary_score":	999726,
			"second_score":	183
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28327,
			"primary_score":	999726,
			"second_score":	182
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28329,
			"primary_score":	999726,
			"second_score":	181
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28331,
			"primary_score":	999726,
			"second_score":	177
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28333,
			"primary_score":	999726,
			"second_score":	176
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28335,
			"primary_score":	999726,
			"second_score":	170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28337,
			"primary_score":	999726,
			"second_score":	169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28339,
			"primary_score":	999726,
			"second_score":	168
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28344,
			"primary_score":	999726,
			"second_score":	167
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28345,
			"primary_score":	999726,
			"second_score":	141
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28348,
			"primary_score":	999727,
			"second_score":	140
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28351,
			"primary_score":	999727,
			"second_score":	139
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28358,
			"primary_score":	999727,
			"second_score":	136
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28361,
			"primary_score":	999727,
			"second_score":	135
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28362,
			"primary_score":	999727,
			"second_score":	133
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28373,
			"primary_score":	999727,
			"second_score":	131
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28374,
			"primary_score":	999727,
			"second_score":	130
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32112,
			"primary_score":	999656,
			"second_score":	354
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999656,
			"second_score":	353
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32114,
			"primary_score":	999656,
			"second_score":	352
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32115,
			"primary_score":	999656,
			"second_score":	351
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32117,
			"primary_score":	999656,
			"second_score":	350
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32118,
			"primary_score":	999656,
			"second_score":	349
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32119,
			"primary_score":	999656,
			"second_score":	338
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32121,
			"primary_score":	999656,
			"second_score":	250
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32135,
			"primary_score":	999656,
			"second_score":	249
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32144,
			"primary_score":	999656,
			"second_score":	248
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32146,
			"primary_score":	999656,
			"second_score":	247
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32149,
			"primary_score":	999656,
			"second_score":	246
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32151,
			"primary_score":	999656,
			"second_score":	226
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32158,
			"primary_score":	999660,
			"second_score":	224
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32160,
			"primary_score":	999656,
			"second_score":	201
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32161,
			"primary_score":	999656,
			"second_score":	200
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999618,
			"second_score":	133575
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39437,
			"primary_score":	999618,
			"second_score":	133574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39442,
			"primary_score":	999618,
			"second_score":	133576
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999618,
			"second_score":	118507
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999618,
			"second_score":	118506
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999618,
			"second_score":	118505
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999618,
			"second_score":	118504
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999618,
			"second_score":	118503
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999618,
			"second_score":	53369
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999618,
			"second_score":	52690
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999618,
			"second_score":	52689
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999618,
			"second_score":	58433
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999618,
			"second_score":	58418
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999618,
			"second_score":	58403
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999618,
			"second_score":	58388
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999618,
			"second_score":	58169
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999618,
			"second_score":	58064
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999618,
			"second_score":	58007
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999618,
			"second_score":	57992
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999618,
			"second_score":	57977
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999618,
			"second_score":	57860
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999618,
			"second_score":	57725
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999618,
			"second_score":	57608
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999618,
			"second_score":	57485
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999618,
			"second_score":	57464
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999618,
			"second_score":	57419
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999618,
			"second_score":	57380
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999618,
			"second_score":	57239
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999618,
			"second_score":	57122
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999618,
			"second_score":	56981
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999618,
			"second_score":	56864
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999618,
			"second_score":	56849
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999618,
			"second_score":	56696
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999618,
			"second_score":	53754
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999618,
			"second_score":	59841
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	59200
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999618,
			"second_score":	119000
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999618,
			"second_score":	118999
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999618,
			"second_score":	118998
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999618,
			"second_score":	118997
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999618,
			"second_score":	118529
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999618,
			"second_score":	118528
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999618,
			"second_score":	118527
		}, {
			"file":	"ext/filter/filter.c",
			"line":	405,
			"primary_score":	999618,
			"second_score":	153244
		}, {
			"file":	"ext/filter/filter.c",
			"line":	406,
			"primary_score":	999618,
			"second_score":	153243
		}, {
			"file":	"ext/filter/filter.c",
			"line":	407,
			"primary_score":	999618,
			"second_score":	153242
		}, {
			"file":	"ext/filter/filter.c",
			"line":	409,
			"primary_score":	999618,
			"second_score":	153241
		}, {
			"file":	"ext/filter/filter.c",
			"line":	424,
			"primary_score":	999618,
			"second_score":	153240
		}, {
			"file":	"ext/filter/filter.c",
			"line":	428,
			"primary_score":	999618,
			"second_score":	157225
		}, {
			"file":	"ext/filter/filter.c",
			"line":	442,
			"primary_score":	999618,
			"second_score":	153236
		}, {
			"file":	"ext/filter/filter.c",
			"line":	446,
			"primary_score":	999618,
			"second_score":	153235
		}, {
			"file":	"ext/filter/filter.c",
			"line":	448,
			"primary_score":	999618,
			"second_score":	153234
		}, {
			"file":	"ext/filter/filter.c",
			"line":	449,
			"primary_score":	999618,
			"second_score":	153233
		}, {
			"file":	"ext/filter/filter.c",
			"line":	450,
			"primary_score":	999618,
			"second_score":	153123
		}, {
			"file":	"ext/filter/filter.c",
			"line":	452,
			"primary_score":	999618,
			"second_score":	153122
		}, {
			"file":	"ext/filter/filter.c",
			"line":	455,
			"primary_score":	999618,
			"second_score":	152777
		}, {
			"file":	"ext/filter/filter.c",
			"line":	457,
			"primary_score":	999618,
			"second_score":	153714
		}, {
			"file":	"ext/filter/filter.c",
			"line":	458,
			"primary_score":	999618,
			"second_score":	153713
		}, {
			"file":	"ext/filter/filter.c",
			"line":	460,
			"primary_score":	999618,
			"second_score":	153712
		}, {
			"file":	"ext/filter/filter.c",
			"line":	465,
			"primary_score":	999618,
			"second_score":	153711
		}, {
			"file":	"ext/filter/filter.c",
			"line":	468,
			"primary_score":	999618,
			"second_score":	153710
		}, {
			"file":	"ext/filter/filter.c",
			"line":	471,
			"primary_score":	999618,
			"second_score":	152776
		}, {
			"file":	"ext/filter/filter.c",
			"line":	474,
			"primary_score":	999618,
			"second_score":	152662
		}, {
			"file":	"ext/filter/filter.c",
			"line":	475,
			"primary_score":	999618,
			"second_score":	152661
		}, {
			"file":	"ext/filter/filter.c",
			"line":	478,
			"primary_score":	999618,
			"second_score":	152313
		}, {
			"file":	"ext/filter/filter.c",
			"line":	491,
			"primary_score":	999618,
			"second_score":	152312
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999618,
			"second_score":	60720
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999618,
			"second_score":	60441
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	62047
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999618,
			"second_score":	61996
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999618,
			"second_score":	61313
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999618,
			"second_score":	62046
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999618,
			"second_score":	61997
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999618,
			"second_score":	54198
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999618,
			"second_score":	54197
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999618,
			"second_score":	54196
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999618,
			"second_score":	54195
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999618,
			"second_score":	54176
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999618,
			"second_score":	54200
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999618,
			"second_score":	54199
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999618,
			"second_score":	54175
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999618,
			"second_score":	118523
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999618,
			"second_score":	118522
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999618,
			"second_score":	118521
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999618,
			"second_score":	118520
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999618,
			"second_score":	118519
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999618,
			"second_score":	118518
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999618,
			"second_score":	118517
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999618,
			"second_score":	118513
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999618,
			"second_score":	118512
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999618,
			"second_score":	118511
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999618,
			"second_score":	54720
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999618,
			"second_score":	55348
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999618,
			"second_score":	54724
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999618,
			"second_score":	64566
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999618,
			"second_score":	64547
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999618,
			"second_score":	64467
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999618,
			"second_score":	64458
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999618,
			"second_score":	63118
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999618,
			"second_score":	64457
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999618,
			"second_score":	64567
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999618,
			"second_score":	64509
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999618,
			"second_score":	98896
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999618,
			"second_score":	98895
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999618,
			"second_score":	98870
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999618,
			"second_score":	98833
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999618,
			"second_score":	98806
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999618,
			"second_score":	98780
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999618,
			"second_score":	98753
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999618,
			"second_score":	98722
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999618,
			"second_score":	98693
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999618,
			"second_score":	98664
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999618,
			"second_score":	98636
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999618,
			"second_score":	98607
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999618,
			"second_score":	98578
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999618,
			"second_score":	98549
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999618,
			"second_score":	98520
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999618,
			"second_score":	98491
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999618,
			"second_score":	98463
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999618,
			"second_score":	98432
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999618,
			"second_score":	98401
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999618,
			"second_score":	98368
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999618,
			"second_score":	98343
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999618,
			"second_score":	98319
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999618,
			"second_score":	98289
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3332,
			"primary_score":	999618,
			"second_score":	144447
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3333,
			"primary_score":	999618,
			"second_score":	144446
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3334,
			"primary_score":	999618,
			"second_score":	144445
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3335,
			"primary_score":	999618,
			"second_score":	144444
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3337,
			"primary_score":	999618,
			"second_score":	144443
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3340,
			"primary_score":	999618,
			"second_score":	144442
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3389,
			"primary_score":	999618,
			"second_score":	144441
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3390,
			"primary_score":	999618,
			"second_score":	144435
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3391,
			"primary_score":	999618,
			"second_score":	144434
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999618,
			"second_score":	133538
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999618,
			"second_score":	133536
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999618,
			"second_score":	133535
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999618,
			"second_score":	133534
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999618,
			"second_score":	98281
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999618,
			"second_score":	98934
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999618,
			"second_score":	98897
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999618,
			"second_score":	98288
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999618,
			"second_score":	98287
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999618,
			"second_score":	98286
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999618,
			"second_score":	98285
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999618,
			"second_score":	119088
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999618,
			"second_score":	119087
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999618,
			"second_score":	119086
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999618,
			"second_score":	119085
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999618,
			"second_score":	119084
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999618,
			"second_score":	119021
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	119020
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999618,
			"second_score":	119019
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999618,
			"second_score":	119023
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999618,
			"second_score":	119025
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999618,
			"second_score":	119024
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999618,
			"second_score":	119022
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999618,
			"second_score":	119018
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999618,
			"second_score":	119012
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999618,
			"second_score":	119011
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999618,
			"second_score":	67026
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999618,
			"second_score":	65594
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999618,
			"second_score":	65593
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999618,
			"second_score":	65592
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999618,
			"second_score":	97993
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999618,
			"second_score":	97992
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	919,
			"primary_score":	999618,
			"second_score":	119007
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	924,
			"primary_score":	999618,
			"second_score":	119006
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	929,
			"primary_score":	999618,
			"second_score":	119005
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	932,
			"primary_score":	999618,
			"second_score":	119004
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	137,
			"primary_score":	999945,
			"second_score":	1029
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	138,
			"primary_score":	999945,
			"second_score":	1028
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	140,
			"primary_score":	999945,
			"second_score":	1027
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	141,
			"primary_score":	999945,
			"second_score":	929
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	143,
			"primary_score":	999945,
			"second_score":	928
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	144,
			"primary_score":	999945,
			"second_score":	927
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	145,
			"primary_score":	999945,
			"second_score":	926
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	147,
			"primary_score":	999945,
			"second_score":	925
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	148,
			"primary_score":	999945,
			"second_score":	920
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	150,
			"primary_score":	999945,
			"second_score":	917
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	151,
			"primary_score":	999945,
			"second_score":	900
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	152,
			"primary_score":	999945,
			"second_score":	899
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	160,
			"primary_score":	999945,
			"second_score":	1030
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	167,
			"primary_score":	999986,
			"second_score":	2
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	168,
			"primary_score":	999992,
			"second_score":	1
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	181,
			"primary_score":	999980,
			"second_score":	5
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	183,
			"primary_score":	999980,
			"second_score":	4
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	184,
			"primary_score":	999992,
			"second_score":	3
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	221,
			"primary_score":	999990,
			"second_score":	601
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	223,
			"primary_score":	999990,
			"second_score":	600
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	224,
			"primary_score":	999990,
			"second_score":	599
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	225,
			"primary_score":	999990,
			"second_score":	598
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	227,
			"primary_score":	999990,
			"second_score":	592
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	230,
			"primary_score":	999992,
			"second_score":	591
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	232,
			"primary_score":	999990,
			"second_score":	563
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	234,
			"primary_score":	999990,
			"second_score":	562
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	236,
			"primary_score":	1000000,
			"second_score":	561
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	624,
			"primary_score":	999989,
			"second_score":	695
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	625,
			"primary_score":	999989,
			"second_score":	694
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	626,
			"primary_score":	999989,
			"second_score":	693
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	627,
			"primary_score":	999989,
			"second_score":	692
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	628,
			"primary_score":	999989,
			"second_score":	691
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	630,
			"primary_score":	999989,
			"second_score":	690
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	632,
			"primary_score":	999989,
			"second_score":	680
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	636,
			"primary_score":	999992,
			"second_score":	679
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	637,
			"primary_score":	999992,
			"second_score":	678
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	639,
			"primary_score":	999989,
			"second_score":	611
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	642,
			"primary_score":	999989,
			"second_score":	610
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	645,
			"primary_score":	999989,
			"second_score":	609
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	649,
			"primary_score":	999989,
			"second_score":	608
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	655,
			"primary_score":	999990,
			"second_score":	607
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	656,
			"primary_score":	999990,
			"second_score":	604
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	658,
			"primary_score":	999990,
			"second_score":	603
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	665,
			"primary_score":	999990,
			"second_score":	602
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	669,
			"primary_score":	999990,
			"second_score":	560
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	671,
			"primary_score":	999990,
			"second_score":	486
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	679,
			"primary_score":	999992,
			"second_score":	696
		}, {
			"file":	"ext/spl/spl_directory.c",
			"line":	1163,
			"primary_score":	999998,
			"second_score":	53
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999618,
			"second_score":	55992
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999618,
			"second_score":	55383
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999618,
			"second_score":	97571
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999618,
			"second_score":	97569
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999618,
			"second_score":	97568
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999618,
			"second_score":	119059
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999618,
			"second_score":	119058
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3470,
			"primary_score":	999618,
			"second_score":	97765
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3471,
			"primary_score":	999618,
			"second_score":	97764
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3472,
			"primary_score":	999618,
			"second_score":	97725
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999618,
			"second_score":	97769
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999618,
			"second_score":	97766
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999618,
			"second_score":	97724
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999618,
			"second_score":	97683
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999618,
			"second_score":	97645
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3665,
			"primary_score":	999618,
			"second_score":	97608
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3666,
			"primary_score":	999618,
			"second_score":	97572
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3667,
			"primary_score":	999618,
			"second_score":	97570
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3668,
			"primary_score":	999618,
			"second_score":	97567
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999618,
			"second_score":	96490
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3670,
			"primary_score":	999618,
			"second_score":	96487
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3675,
			"primary_score":	999618,
			"second_score":	96165
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3678,
			"primary_score":	999618,
			"second_score":	96162
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3720,
			"primary_score":	999618,
			"second_score":	170415
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999618,
			"second_score":	119080
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999618,
			"second_score":	119079
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999618,
			"second_score":	119078
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999618,
			"second_score":	119077
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999618,
			"second_score":	119069
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999618,
			"second_score":	119068
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999618,
			"second_score":	119067
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3747,
			"primary_score":	999618,
			"second_score":	119065
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999618,
			"second_score":	119064
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999618,
			"second_score":	119060
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999618,
			"second_score":	119057
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999618,
			"second_score":	119046
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999618,
			"second_score":	119035
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3771,
			"primary_score":	999618,
			"second_score":	119034
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3773,
			"primary_score":	999618,
			"second_score":	119031
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3774,
			"primary_score":	999618,
			"second_score":	119030
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999618,
			"second_score":	119029
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4526,
			"primary_score":	999618,
			"second_score":	122373
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4527,
			"primary_score":	999618,
			"second_score":	122372
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999618,
			"second_score":	122371
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999618,
			"second_score":	122370
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4534,
			"primary_score":	999618,
			"second_score":	122303
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4536,
			"primary_score":	999618,
			"second_score":	122272
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4545,
			"primary_score":	999618,
			"second_score":	122271
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5006,
			"primary_score":	999618,
			"second_score":	119232
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999618,
			"second_score":	118498
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5024,
			"primary_score":	999618,
			"second_score":	118497
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999618,
			"second_score":	97607
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999618,
			"second_score":	97574
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999618,
			"second_score":	97573
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999618,
			"second_score":	96164
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999618,
			"second_score":	96163
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999618,
			"second_score":	96489
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999618,
			"second_score":	96488
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999618,
			"second_score":	122067
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999618,
			"second_score":	122066
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999618,
			"second_score":	122065
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999618,
			"second_score":	122064
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999618,
			"second_score":	121954
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999618,
			"second_score":	121709
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999618,
			"second_score":	121705
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999618,
			"second_score":	119063
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999618,
			"second_score":	119062
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999618,
			"second_score":	119061
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999618,
			"second_score":	96486
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999618,
			"second_score":	96485
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999618,
			"second_score":	96206
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999618,
			"second_score":	96166
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999618,
			"second_score":	124999
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999618,
			"second_score":	124898
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999618,
			"second_score":	123595
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999618,
			"second_score":	123594
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999618,
			"second_score":	123593
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999618,
			"second_score":	123592
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999618,
			"second_score":	123591
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999618,
			"second_score":	123590
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999618,
			"second_score":	123589
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999618,
			"second_score":	123588
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999618,
			"second_score":	123587
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999618,
			"second_score":	123586
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999618,
			"second_score":	122879
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999618,
			"second_score":	122878
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999618,
			"second_score":	124544
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999618,
			"second_score":	124543
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999618,
			"second_score":	124542
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999618,
			"second_score":	124504
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999618,
			"second_score":	124503
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999618,
			"second_score":	123638
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999618,
			"second_score":	123637
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999618,
			"second_score":	123636
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999618,
			"second_score":	123598
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999618,
			"second_score":	120519
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999618,
			"second_score":	120486
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999618,
			"second_score":	120485
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	162,
			"primary_score":	999618,
			"second_score":	148767
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	163,
			"primary_score":	999618,
			"second_score":	148766
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	164,
			"primary_score":	999618,
			"second_score":	148765
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	165,
			"primary_score":	999618,
			"second_score":	148764
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	166,
			"primary_score":	999618,
			"second_score":	148763
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	167,
			"primary_score":	999618,
			"second_score":	148762
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	169,
			"primary_score":	999618,
			"second_score":	148761
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	170,
			"primary_score":	999618,
			"second_score":	148760
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	173,
			"primary_score":	999618,
			"second_score":	148759
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	192,
			"primary_score":	999618,
			"second_score":	148758
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	201,
			"primary_score":	999618,
			"second_score":	148757
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	205,
			"primary_score":	999618,
			"second_score":	148756
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	215,
			"primary_score":	999618,
			"second_score":	148755
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	150481
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	222,
			"primary_score":	999618,
			"second_score":	150480
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	223,
			"primary_score":	999618,
			"second_score":	150468
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	224,
			"primary_score":	999618,
			"second_score":	150467
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	225,
			"primary_score":	999618,
			"second_score":	150466
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	228,
			"primary_score":	999618,
			"second_score":	150465
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	229,
			"primary_score":	999618,
			"second_score":	150464
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	234,
			"primary_score":	999618,
			"second_score":	148754
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	235,
			"primary_score":	999618,
			"second_score":	149558
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	236,
			"primary_score":	999618,
			"second_score":	149546
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	237,
			"primary_score":	999618,
			"second_score":	149545
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	238,
			"primary_score":	999618,
			"second_score":	149544
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	241,
			"primary_score":	999618,
			"second_score":	149543
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	242,
			"primary_score":	999618,
			"second_score":	149542
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	247,
			"primary_score":	999618,
			"second_score":	148753
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	248,
			"primary_score":	999618,
			"second_score":	148752
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	249,
			"primary_score":	999618,
			"second_score":	148740
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	250,
			"primary_score":	999618,
			"second_score":	148739
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	251,
			"primary_score":	999618,
			"second_score":	148738
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	254,
			"primary_score":	999618,
			"second_score":	148737
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	255,
			"primary_score":	999618,
			"second_score":	148736
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	336,
			"primary_score":	999618,
			"second_score":	148735
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	342,
			"primary_score":	999618,
			"second_score":	148734
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	343,
			"primary_score":	999618,
			"second_score":	148733
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	344,
			"primary_score":	999618,
			"second_score":	148732
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	345,
			"primary_score":	999618,
			"second_score":	148731
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	355,
			"primary_score":	999618,
			"second_score":	148729
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	356,
			"primary_score":	999618,
			"second_score":	148728
		}, {
			"file":	"ext/standard/php_fopen_wrapper.c",
			"line":	364,
			"primary_score":	999618,
			"second_score":	148278
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999618,
			"second_score":	122817
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999618,
			"second_score":	122816
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999618,
			"second_score":	122815
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999618,
			"second_score":	122814
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999618,
			"second_score":	122813
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999618,
			"second_score":	122812
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999618,
			"second_score":	122811
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999618,
			"second_score":	122808
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999618,
			"second_score":	122807
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999618,
			"second_score":	122803
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999618,
			"second_score":	121794
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999618,
			"second_score":	122791
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999618,
			"second_score":	121785
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999618,
			"second_score":	121784
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999618,
			"second_score":	121815
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999618,
			"second_score":	121783
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999618,
			"second_score":	121772
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999618,
			"second_score":	121769
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999618,
			"second_score":	121768
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999618,
			"second_score":	122918
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999618,
			"second_score":	122917
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999618,
			"second_score":	122825
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999618,
			"second_score":	122824
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999618,
			"second_score":	122823
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999618,
			"second_score":	122822
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999618,
			"second_score":	122821
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999618,
			"second_score":	122819
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999618,
			"second_score":	122818
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999618,
			"second_score":	121759
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999618,
			"second_score":	120065
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999618,
			"second_score":	120064
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999618,
			"second_score":	120063
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999618,
			"second_score":	120062
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999618,
			"second_score":	120017
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999618,
			"second_score":	120016
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999618,
			"second_score":	120015
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999618,
			"second_score":	119981
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999618,
			"second_score":	120210
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999618,
			"second_score":	120209
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999618,
			"second_score":	120208
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999618,
			"second_score":	120207
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999618,
			"second_score":	120206
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999618,
			"second_score":	120205
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999618,
			"second_score":	120204
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999618,
			"second_score":	120203
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999618,
			"second_score":	120081
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999618,
			"second_score":	120078
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999618,
			"second_score":	120075
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999618,
			"second_score":	120072
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999618,
			"second_score":	120071
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999618,
			"second_score":	120069
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999618,
			"second_score":	120067
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999618,
			"second_score":	120066
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999618,
			"second_score":	119980
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999618,
			"second_score":	120211
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999618,
			"second_score":	97768
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999618,
			"second_score":	97767
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999618,
			"second_score":	97566
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999618,
			"second_score":	96491
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999618,
			"second_score":	119056
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999618,
			"second_score":	119055
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999618,
			"second_score":	119051
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999618,
			"second_score":	119047
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999618,
			"second_score":	119033
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999618,
			"second_score":	119032
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999618,
			"second_score":	100779
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999618,
			"second_score":	100686
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999618,
			"second_score":	103469
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999618,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999618,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	107,
			"primary_score":	999618,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	109,
			"primary_score":	999618,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	119,
			"primary_score":	999618,
			"second_score":	124928
		}, {
			"file":	"main/SAPI.c",
			"line":	286,
			"primary_score":	999618,
			"second_score":	124991
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999618,
			"second_score":	124990
		}, {
			"file":	"main/SAPI.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	124989
		}, {
			"file":	"main/SAPI.c",
			"line":	290,
			"primary_score":	999618,
			"second_score":	124988
		}, {
			"file":	"main/SAPI.c",
			"line":	291,
			"primary_score":	999618,
			"second_score":	124987
		}, {
			"file":	"main/SAPI.c",
			"line":	296,
			"primary_score":	999618,
			"second_score":	124986
		}, {
			"file":	"main/SAPI.c",
			"line":	297,
			"primary_score":	999618,
			"second_score":	124985
		}, {
			"file":	"main/SAPI.c",
			"line":	298,
			"primary_score":	999618,
			"second_score":	124984
		}, {
			"file":	"main/SAPI.c",
			"line":	304,
			"primary_score":	999618,
			"second_score":	124983
		}, {
			"file":	"main/SAPI.c",
			"line":	316,
			"primary_score":	999618,
			"second_score":	124982
		}, {
			"file":	"main/SAPI.c",
			"line":	317,
			"primary_score":	999618,
			"second_score":	124981
		}, {
			"file":	"main/SAPI.c",
			"line":	318,
			"primary_score":	999618,
			"second_score":	124959
		}, {
			"file":	"main/SAPI.c",
			"line":	320,
			"primary_score":	999618,
			"second_score":	124958
		}, {
			"file":	"main/SAPI.c",
			"line":	482,
			"primary_score":	999618,
			"second_score":	113389
		}, {
			"file":	"main/SAPI.c",
			"line":	490,
			"primary_score":	999618,
			"second_score":	113430
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999618,
			"second_score":	113426
		}, {
			"file":	"main/SAPI.c",
			"line":	494,
			"primary_score":	999618,
			"second_score":	113425
		}, {
			"file":	"main/SAPI.c",
			"line":	496,
			"primary_score":	999618,
			"second_score":	113424
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999618,
			"second_score":	113423
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999618,
			"second_score":	113422
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999618,
			"second_score":	113421
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999618,
			"second_score":	113420
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999618,
			"second_score":	113419
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999618,
			"second_score":	113418
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999618,
			"second_score":	113417
		}, {
			"file":	"main/SAPI.c",
			"line":	526,
			"primary_score":	999618,
			"second_score":	113416
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999618,
			"second_score":	113412
		}, {
			"file":	"main/SAPI.c",
			"line":	531,
			"primary_score":	999618,
			"second_score":	113411
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999618,
			"second_score":	113410
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999618,
			"second_score":	113391
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999618,
			"second_score":	113390
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999618,
			"second_score":	113388
		}, {
			"file":	"main/SAPI.c",
			"line":	537,
			"primary_score":	999618,
			"second_score":	113387
		}, {
			"file":	"main/SAPI.c",
			"line":	538,
			"primary_score":	999618,
			"second_score":	113386
		}, {
			"file":	"main/SAPI.c",
			"line":	539,
			"primary_score":	999618,
			"second_score":	113385
		}, {
			"file":	"main/SAPI.c",
			"line":	608,
			"primary_score":	999618,
			"second_score":	124931
		}, {
			"file":	"main/SAPI.c",
			"line":	623,
			"primary_score":	999618,
			"second_score":	124929
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999618,
			"second_score":	119108
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999618,
			"second_score":	119107
		}, {
			"file":	"main/SAPI.c",
			"line":	815,
			"primary_score":	999618,
			"second_score":	119106
		}, {
			"file":	"main/SAPI.c",
			"line":	816,
			"primary_score":	999618,
			"second_score":	119105
		}, {
			"file":	"main/SAPI.c",
			"line":	822,
			"primary_score":	999618,
			"second_score":	124995
		}, {
			"file":	"main/SAPI.c",
			"line":	823,
			"primary_score":	999618,
			"second_score":	124994
		}, {
			"file":	"main/SAPI.c",
			"line":	824,
			"primary_score":	999618,
			"second_score":	124993
		}, {
			"file":	"main/SAPI.c",
			"line":	826,
			"primary_score":	999618,
			"second_score":	124992
		}, {
			"file":	"main/SAPI.c",
			"line":	827,
			"primary_score":	999618,
			"second_score":	124957
		}, {
			"file":	"main/SAPI.c",
			"line":	828,
			"primary_score":	999618,
			"second_score":	124956
		}, {
			"file":	"main/SAPI.c",
			"line":	829,
			"primary_score":	999618,
			"second_score":	124934
		}, {
			"file":	"main/SAPI.c",
			"line":	830,
			"primary_score":	999618,
			"second_score":	124933
		}, {
			"file":	"main/SAPI.c",
			"line":	831,
			"primary_score":	999618,
			"second_score":	124932
		}, {
			"file":	"main/SAPI.c",
			"line":	832,
			"primary_score":	999618,
			"second_score":	124909
		}, {
			"file":	"main/SAPI.c",
			"line":	835,
			"primary_score":	999618,
			"second_score":	124908
		}, {
			"file":	"main/SAPI.c",
			"line":	840,
			"primary_score":	999618,
			"second_score":	124907
		}, {
			"file":	"main/SAPI.c",
			"line":	842,
			"primary_score":	999618,
			"second_score":	124906
		}, {
			"file":	"main/SAPI.c",
			"line":	843,
			"primary_score":	999618,
			"second_score":	124905
		}, {
			"file":	"main/SAPI.c",
			"line":	848,
			"primary_score":	999618,
			"second_score":	124903
		}, {
			"file":	"main/SAPI.c",
			"line":	851,
			"primary_score":	999618,
			"second_score":	124902
		}, {
			"file":	"main/SAPI.c",
			"line":	882,
			"primary_score":	999618,
			"second_score":	124901
		}, {
			"file":	"main/SAPI.c",
			"line":	884,
			"primary_score":	999618,
			"second_score":	124899
		}, {
			"file":	"main/SAPI.c",
			"line":	953,
			"primary_score":	999618,
			"second_score":	103513
		}, {
			"file":	"main/SAPI.c",
			"line":	954,
			"primary_score":	999618,
			"second_score":	103512
		}, {
			"file":	"main/SAPI.c",
			"line":	955,
			"primary_score":	999618,
			"second_score":	103510
		}, {
			"file":	"main/SAPI.c",
			"line":	1027,
			"primary_score":	999618,
			"second_score":	152304
		}, {
			"file":	"main/SAPI.c",
			"line":	1029,
			"primary_score":	999618,
			"second_score":	152303
		}, {
			"file":	"main/SAPI.c",
			"line":	1032,
			"primary_score":	999618,
			"second_score":	152302
		}, {
			"file":	"main/SAPI.c",
			"line":	1033,
			"primary_score":	999618,
			"second_score":	152301
		}, {
			"file":	"main/SAPI.c",
			"line":	1034,
			"primary_score":	999618,
			"second_score":	152300
		}, {
			"file":	"main/SAPI.c",
			"line":	1039,
			"primary_score":	999618,
			"second_score":	152299
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	736,
			"primary_score":	999618,
			"second_score":	147772
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	744,
			"primary_score":	999618,
			"second_score":	147771
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	745,
			"primary_score":	999618,
			"second_score":	147770
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	746,
			"primary_score":	999618,
			"second_score":	147769
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	748,
			"primary_score":	999618,
			"second_score":	147768
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	750,
			"primary_score":	999618,
			"second_score":	147767
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	751,
			"primary_score":	999618,
			"second_score":	147766
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	785,
			"primary_score":	999618,
			"second_score":	147765
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	786,
			"primary_score":	999618,
			"second_score":	147764
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	788,
			"primary_score":	999618,
			"second_score":	147763
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	793,
			"primary_score":	999618,
			"second_score":	145060
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	794,
			"primary_score":	999618,
			"second_score":	145059
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	795,
			"primary_score":	999618,
			"second_score":	145058
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	796,
			"primary_score":	999618,
			"second_score":	145057
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	800,
			"primary_score":	999618,
			"second_score":	145056
		}, {
			"file":	"main/fopen_wrappers.c",
			"line":	802,
			"primary_score":	999618,
			"second_score":	145055
		}, {
			"file":	"main/getopt.c",
			"line":	66,
			"primary_score":	999618,
			"second_score":	148225
		}, {
			"file":	"main/getopt.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	148318
		}, {
			"file":	"main/getopt.c",
			"line":	175,
			"primary_score":	999618,
			"second_score":	148317
		}, {
			"file":	"main/getopt.c",
			"line":	177,
			"primary_score":	999618,
			"second_score":	148316
		}, {
			"file":	"main/getopt.c",
			"line":	178,
			"primary_score":	999618,
			"second_score":	148315
		}, {
			"file":	"main/getopt.c",
			"line":	185,
			"primary_score":	999618,
			"second_score":	148314
		}, {
			"file":	"main/main.c",
			"line":	1472,
			"primary_score":	999618,
			"second_score":	170413
		}, {
			"file":	"main/main.c",
			"line":	1475,
			"primary_score":	999618,
			"second_score":	170412
		}, {
			"file":	"main/main.c",
			"line":	1477,
			"primary_score":	999618,
			"second_score":	170410
		}, {
			"file":	"main/main.c",
			"line":	1479,
			"primary_score":	999618,
			"second_score":	170409
		}, {
			"file":	"main/main.c",
			"line":	1599,
			"primary_score":	999618,
			"second_score":	119251
		}, {
			"file":	"main/main.c",
			"line":	1600,
			"primary_score":	999618,
			"second_score":	119250
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999618,
			"second_score":	119249
		}, {
			"file":	"main/main.c",
			"line":	1607,
			"primary_score":	999618,
			"second_score":	119248
		}, {
			"file":	"main/main.c",
			"line":	1608,
			"primary_score":	999618,
			"second_score":	119247
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999618,
			"second_score":	119246
		}, {
			"file":	"main/main.c",
			"line":	1613,
			"primary_score":	999618,
			"second_score":	119239
		}, {
			"file":	"main/main.c",
			"line":	1614,
			"primary_score":	999618,
			"second_score":	119233
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999618,
			"second_score":	119231
		}, {
			"file":	"main/main.c",
			"line":	1618,
			"primary_score":	999618,
			"second_score":	119229
		}, {
			"file":	"main/main.c",
			"line":	1619,
			"primary_score":	999618,
			"second_score":	119223
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999618,
			"second_score":	119135
		}, {
			"file":	"main/main.c",
			"line":	1623,
			"primary_score":	999618,
			"second_score":	119133
		}, {
			"file":	"main/main.c",
			"line":	1624,
			"primary_score":	999618,
			"second_score":	119127
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999618,
			"second_score":	119126
		}, {
			"file":	"main/main.c",
			"line":	1632,
			"primary_score":	999618,
			"second_score":	119125
		}, {
			"file":	"main/main.c",
			"line":	1635,
			"primary_score":	999618,
			"second_score":	119124
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999618,
			"second_score":	119122
		}, {
			"file":	"main/main.c",
			"line":	1638,
			"primary_score":	999618,
			"second_score":	119117
		}, {
			"file":	"main/main.c",
			"line":	1641,
			"primary_score":	999618,
			"second_score":	119115
		}, {
			"file":	"main/main.c",
			"line":	1642,
			"primary_score":	999618,
			"second_score":	119109
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999618,
			"second_score":	119104
		}, {
			"file":	"main/main.c",
			"line":	1646,
			"primary_score":	999618,
			"second_score":	119102
		}, {
			"file":	"main/main.c",
			"line":	1647,
			"primary_score":	999618,
			"second_score":	119101
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999618,
			"second_score":	118499
		}, {
			"file":	"main/main.c",
			"line":	1652,
			"primary_score":	999618,
			"second_score":	118496
		}, {
			"file":	"main/main.c",
			"line":	1653,
			"primary_score":	999618,
			"second_score":	118490
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999618,
			"second_score":	118489
		}, {
			"file":	"main/main.c",
			"line":	1656,
			"primary_score":	999618,
			"second_score":	118347
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999618,
			"second_score":	118346
		}, {
			"file":	"main/main.c",
			"line":	1660,
			"primary_score":	999618,
			"second_score":	118312
		}, {
			"file":	"main/main.c",
			"line":	1663,
			"primary_score":	999618,
			"second_score":	118310
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999618,
			"second_score":	118309
		}, {
			"file":	"main/main.c",
			"line":	1673,
			"primary_score":	999618,
			"second_score":	118308
		}, {
			"file":	"main/main.c",
			"line":	1676,
			"primary_score":	999618,
			"second_score":	113449
		}, {
			"file":	"main/main.c",
			"line":	1677,
			"primary_score":	999618,
			"second_score":	113443
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999618,
			"second_score":	113439
		}, {
			"file":	"main/main.c",
			"line":	1681,
			"primary_score":	999618,
			"second_score":	113437
		}, {
			"file":	"main/main.c",
			"line":	1682,
			"primary_score":	999618,
			"second_score":	113431
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999618,
			"second_score":	113384
		}, {
			"file":	"main/main.c",
			"line":	1686,
			"primary_score":	999618,
			"second_score":	113382
		}, {
			"file":	"main/main.c",
			"line":	1687,
			"primary_score":	999618,
			"second_score":	113376
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999618,
			"second_score":	113373
		}, {
			"file":	"main/main.c",
			"line":	1691,
			"primary_score":	999618,
			"second_score":	113371
		}, {
			"file":	"main/main.c",
			"line":	1692,
			"primary_score":	999618,
			"second_score":	113365
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999618,
			"second_score":	112946
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999618,
			"second_score":	112944
		}, {
			"file":	"main/main.c",
			"line":	1697,
			"primary_score":	999618,
			"second_score":	103534
		}, {
			"file":	"main/main.c",
			"line":	1698,
			"primary_score":	999618,
			"second_score":	103528
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999618,
			"second_score":	103526
		}, {
			"file":	"main/main.c",
			"line":	1732,
			"primary_score":	999618,
			"second_score":	121359
		}, {
			"file":	"main/main.c",
			"line":	1733,
			"primary_score":	999618,
			"second_score":	121358
		}, {
			"file":	"main/main.c",
			"line":	1753,
			"primary_score":	999618,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1756,
			"primary_score":	999618,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1759,
			"primary_score":	999618,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1762,
			"primary_score":	999618,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1766,
			"primary_score":	999618,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2198,
			"primary_score":	999618,
			"second_score":	103517
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999618,
			"second_score":	103516
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999618,
			"second_score":	103515
		}, {
			"file":	"main/main.c",
			"line":	2215,
			"primary_score":	999618,
			"second_score":	103514
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999618,
			"second_score":	103509
		}, {
			"file":	"main/main.c",
			"line":	2220,
			"primary_score":	999618,
			"second_score":	6111
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999618,
			"second_score":	6045
		}, {
			"file":	"main/main.c",
			"line":	2223,
			"primary_score":	999618,
			"second_score":	6016
		}, {
			"file":	"main/main.c",
			"line":	2226,
			"primary_score":	999618,
			"second_score":	3557
		}, {
			"file":	"main/main.c",
			"line":	2229,
			"primary_score":	999618,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2230,
			"primary_score":	999618,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2235,
			"primary_score":	999618,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2236,
			"primary_score":	999618,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999618,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2241,
			"primary_score":	999618,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2242,
			"primary_score":	999618,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2259,
			"primary_score":	999618,
			"second_score":	147796
		}, {
			"file":	"main/main.c",
			"line":	2260,
			"primary_score":	999618,
			"second_score":	147795
		}, {
			"file":	"main/main.c",
			"line":	2264,
			"primary_score":	999618,
			"second_score":	147794
		}, {
			"file":	"main/main.c",
			"line":	2265,
			"primary_score":	999618,
			"second_score":	147793
		}, {
			"file":	"main/main.c",
			"line":	2267,
			"primary_score":	999618,
			"second_score":	147792
		}, {
			"file":	"main/main.c",
			"line":	2269,
			"primary_score":	999618,
			"second_score":	147791
		}, {
			"file":	"main/main.c",
			"line":	2270,
			"primary_score":	999618,
			"second_score":	147790
		}, {
			"file":	"main/main.c",
			"line":	2276,
			"primary_score":	999618,
			"second_score":	147787
		}, {
			"file":	"main/main.c",
			"line":	2277,
			"primary_score":	999618,
			"second_score":	147786
		}, {
			"file":	"main/main.c",
			"line":	2280,
			"primary_score":	999618,
			"second_score":	147785
		}, {
			"file":	"main/main.c",
			"line":	2281,
			"primary_score":	999618,
			"second_score":	147779
		}, {
			"file":	"main/main.c",
			"line":	2289,
			"primary_score":	999618,
			"second_score":	147778
		}, {
			"file":	"main/main.c",
			"line":	2291,
			"primary_score":	999618,
			"second_score":	147777
		}, {
			"file":	"main/main.c",
			"line":	2304,
			"primary_score":	999618,
			"second_score":	147776
		}, {
			"file":	"main/main.c",
			"line":	2309,
			"primary_score":	999618,
			"second_score":	147775
		}, {
			"file":	"main/main.c",
			"line":	2310,
			"primary_score":	999618,
			"second_score":	147774
		}, {
			"file":	"main/main.c",
			"line":	2312,
			"primary_score":	999618,
			"second_score":	147773
		}, {
			"file":	"main/main.c",
			"line":	2313,
			"primary_score":	999618,
			"second_score":	145054
		}, {
			"file":	"main/main.c",
			"line":	2314,
			"primary_score":	999618,
			"second_score":	145053
		}, {
			"file":	"main/main.c",
			"line":	2315,
			"primary_score":	999618,
			"second_score":	144576
		}, {
			"file":	"main/main.c",
			"line":	2319,
			"primary_score":	999618,
			"second_score":	144466
		}, {
			"file":	"main/main.c",
			"line":	2326,
			"primary_score":	999618,
			"second_score":	144465
		}, {
			"file":	"main/main.c",
			"line":	2329,
			"primary_score":	999618,
			"second_score":	144464
		}, {
			"file":	"main/main.c",
			"line":	2336,
			"primary_score":	999618,
			"second_score":	144463
		}, {
			"file":	"main/main.c",
			"line":	2338,
			"primary_score":	999618,
			"second_score":	144462
		}, {
			"file":	"main/main.c",
			"line":	2344,
			"primary_score":	999618,
			"second_score":	144461
		}, {
			"file":	"main/main.c",
			"line":	2346,
			"primary_score":	999618,
			"second_score":	119263
		}, {
			"file":	"main/main.c",
			"line":	2354,
			"primary_score":	999618,
			"second_score":	119261
		}, {
			"file":	"main/main.c",
			"line":	2357,
			"primary_score":	999618,
			"second_score":	119260
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999618,
			"second_score":	119258
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999618,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999618,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999618,
			"second_score":	119121
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999618,
			"second_score":	119120
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999618,
			"second_score":	119119
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999618,
			"second_score":	119118
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999618,
			"second_score":	121357
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999618,
			"second_score":	121356
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999618,
			"second_score":	121310
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999618,
			"second_score":	119123
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999618,
			"second_score":	121351
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999618,
			"second_score":	121350
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999618,
			"second_score":	121348
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999618,
			"second_score":	121347
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999618,
			"second_score":	121346
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999618,
			"second_score":	121345
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999618,
			"second_score":	121344
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999618,
			"second_score":	121312
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999618,
			"second_score":	121311
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999618,
			"second_score":	121355
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999618,
			"second_score":	121354
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999618,
			"second_score":	121353
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999618,
			"second_score":	121352
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999618,
			"second_score":	121349
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999618,
			"second_score":	121343
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999618,
			"second_score":	121342
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999618,
			"second_score":	121341
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999618,
			"second_score":	121340
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999618,
			"second_score":	121339
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999618,
			"second_score":	124897
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999618,
			"second_score":	124895
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999618,
			"second_score":	124893
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999618,
			"second_score":	124890
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999618,
			"second_score":	121338
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999618,
			"second_score":	121320
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999618,
			"second_score":	121319
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999618,
			"second_score":	121314
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999618,
			"second_score":	121313
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999618,
			"second_score":	3556
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999618,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999618,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999618,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999618,
			"second_score":	6044
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999618,
			"second_score":	6017
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999618,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999618,
			"second_score":	119245
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999618,
			"second_score":	3145
		}, {
			"file":	"main/php_variables.c",
			"line":	39,
			"primary_score":	999618,
			"second_score":	157683
		}, {
			"file":	"main/php_variables.c",
			"line":	45,
			"primary_score":	999618,
			"second_score":	157682
		}, {
			"file":	"main/php_variables.c",
			"line":	46,
			"primary_score":	999618,
			"second_score":	157681
		}, {
			"file":	"main/php_variables.c",
			"line":	49,
			"primary_score":	999618,
			"second_score":	157680
		}, {
			"file":	"main/php_variables.c",
			"line":	50,
			"primary_score":	999618,
			"second_score":	157679
		}, {
			"file":	"main/php_variables.c",
			"line":	53,
			"primary_score":	999618,
			"second_score":	157678
		}, {
			"file":	"main/php_variables.c",
			"line":	55,
			"primary_score":	999618,
			"second_score":	157568
		}, {
			"file":	"main/php_variables.c",
			"line":	57,
			"primary_score":	999618,
			"second_score":	157567
		}, {
			"file":	"main/php_variables.c",
			"line":	62,
			"primary_score":	999618,
			"second_score":	152297
		}, {
			"file":	"main/php_variables.c",
			"line":	63,
			"primary_score":	999618,
			"second_score":	152296
		}, {
			"file":	"main/php_variables.c",
			"line":	64,
			"primary_score":	999618,
			"second_score":	152295
		}, {
			"file":	"main/php_variables.c",
			"line":	65,
			"primary_score":	999618,
			"second_score":	152294
		}, {
			"file":	"main/php_variables.c",
			"line":	66,
			"primary_score":	999618,
			"second_score":	152293
		}, {
			"file":	"main/php_variables.c",
			"line":	67,
			"primary_score":	999618,
			"second_score":	152292
		}, {
			"file":	"main/php_variables.c",
			"line":	68,
			"primary_score":	999618,
			"second_score":	152291
		}, {
			"file":	"main/php_variables.c",
			"line":	69,
			"primary_score":	999618,
			"second_score":	152290
		}, {
			"file":	"main/php_variables.c",
			"line":	70,
			"primary_score":	999618,
			"second_score":	152289
		}, {
			"file":	"main/php_variables.c",
			"line":	72,
			"primary_score":	999618,
			"second_score":	152288
		}, {
			"file":	"main/php_variables.c",
			"line":	74,
			"primary_score":	999618,
			"second_score":	152287
		}, {
			"file":	"main/php_variables.c",
			"line":	75,
			"primary_score":	999618,
			"second_score":	152286
		}, {
			"file":	"main/php_variables.c",
			"line":	78,
			"primary_score":	999618,
			"second_score":	152285
		}, {
			"file":	"main/php_variables.c",
			"line":	86,
			"primary_score":	999618,
			"second_score":	152284
		}, {
			"file":	"main/php_variables.c",
			"line":	93,
			"primary_score":	999618,
			"second_score":	152283
		}, {
			"file":	"main/php_variables.c",
			"line":	94,
			"primary_score":	999618,
			"second_score":	152282
		}, {
			"file":	"main/php_variables.c",
			"line":	95,
			"primary_score":	999618,
			"second_score":	152281
		}, {
			"file":	"main/php_variables.c",
			"line":	98,
			"primary_score":	999618,
			"second_score":	152280
		}, {
			"file":	"main/php_variables.c",
			"line":	99,
			"primary_score":	999618,
			"second_score":	152257
		}, {
			"file":	"main/php_variables.c",
			"line":	101,
			"primary_score":	999618,
			"second_score":	152256
		}, {
			"file":	"main/php_variables.c",
			"line":	108,
			"primary_score":	999618,
			"second_score":	152255
		}, {
			"file":	"main/php_variables.c",
			"line":	110,
			"primary_score":	999618,
			"second_score":	152254
		}, {
			"file":	"main/php_variables.c",
			"line":	117,
			"primary_score":	999618,
			"second_score":	152253
		}, {
			"file":	"main/php_variables.c",
			"line":	125,
			"primary_score":	999618,
			"second_score":	152252
		}, {
			"file":	"main/php_variables.c",
			"line":	126,
			"primary_score":	999618,
			"second_score":	152251
		}, {
			"file":	"main/php_variables.c",
			"line":	128,
			"primary_score":	999618,
			"second_score":	152250
		}, {
			"file":	"main/php_variables.c",
			"line":	212,
			"primary_score":	999618,
			"second_score":	152249
		}, {
			"file":	"main/php_variables.c",
			"line":	213,
			"primary_score":	999618,
			"second_score":	152248
		}, {
			"file":	"main/php_variables.c",
			"line":	214,
			"primary_score":	999618,
			"second_score":	152139
		}, {
			"file":	"main/php_variables.c",
			"line":	215,
			"primary_score":	999618,
			"second_score":	152138
		}, {
			"file":	"main/php_variables.c",
			"line":	216,
			"primary_score":	999618,
			"second_score":	152137
		}, {
			"file":	"main/php_variables.c",
			"line":	219,
			"primary_score":	999618,
			"second_score":	152136
		}, {
			"file":	"main/php_variables.c",
			"line":	222,
			"primary_score":	999618,
			"second_score":	152135
		}, {
			"file":	"main/php_variables.c",
			"line":	230,
			"primary_score":	999618,
			"second_score":	152134
		}, {
			"file":	"main/php_variables.c",
			"line":	235,
			"primary_score":	999618,
			"second_score":	152133
		}, {
			"file":	"main/php_variables.c",
			"line":	237,
			"primary_score":	999618,
			"second_score":	151558
		}, {
			"file":	"main/php_variables.c",
			"line":	242,
			"primary_score":	999618,
			"second_score":	151557
		}, {
			"file":	"main/php_variables.c",
			"line":	423,
			"primary_score":	999618,
			"second_score":	170130
		}, {
			"file":	"main/php_variables.c",
			"line":	424,
			"primary_score":	999618,
			"second_score":	170129
		}, {
			"file":	"main/php_variables.c",
			"line":	425,
			"primary_score":	999618,
			"second_score":	170128
		}, {
			"file":	"main/php_variables.c",
			"line":	426,
			"primary_score":	999618,
			"second_score":	170127
		}, {
			"file":	"main/php_variables.c",
			"line":	429,
			"primary_score":	999618,
			"second_score":	170126
		}, {
			"file":	"main/php_variables.c",
			"line":	430,
			"primary_score":	999618,
			"second_score":	170125
		}, {
			"file":	"main/php_variables.c",
			"line":	432,
			"primary_score":	999618,
			"second_score":	170124
		}, {
			"file":	"main/php_variables.c",
			"line":	433,
			"primary_score":	999618,
			"second_score":	157690
		}, {
			"file":	"main/php_variables.c",
			"line":	434,
			"primary_score":	999618,
			"second_score":	157689
		}, {
			"file":	"main/php_variables.c",
			"line":	437,
			"primary_score":	999618,
			"second_score":	157688
		}, {
			"file":	"main/php_variables.c",
			"line":	438,
			"primary_score":	999618,
			"second_score":	157687
		}, {
			"file":	"main/php_variables.c",
			"line":	442,
			"primary_score":	999618,
			"second_score":	157686
		}, {
			"file":	"main/php_variables.c",
			"line":	443,
			"primary_score":	999618,
			"second_score":	157685
		}, {
			"file":	"main/php_variables.c",
			"line":	444,
			"primary_score":	999618,
			"second_score":	157684
		}, {
			"file":	"main/php_variables.c",
			"line":	446,
			"primary_score":	999618,
			"second_score":	157234
		}, {
			"file":	"main/php_variables.c",
			"line":	449,
			"primary_score":	999618,
			"second_score":	157233
		}, {
			"file":	"main/php_variables.c",
			"line":	546,
			"primary_score":	999618,
			"second_score":	147789
		}, {
			"file":	"main/php_variables.c",
			"line":	554,
			"primary_score":	999618,
			"second_score":	147788
		}, {
			"file":	"main/php_variables.c",
			"line":	562,
			"primary_score":	999618,
			"second_score":	170374
		}, {
			"file":	"main/php_variables.c",
			"line":	564,
			"primary_score":	999618,
			"second_score":	170373
		}, {
			"file":	"main/php_variables.c",
			"line":	566,
			"primary_score":	999618,
			"second_score":	170372
		}, {
			"file":	"main/php_variables.c",
			"line":	567,
			"primary_score":	999618,
			"second_score":	170266
		}, {
			"file":	"main/php_variables.c",
			"line":	568,
			"primary_score":	999618,
			"second_score":	170141
		}, {
			"file":	"main/php_variables.c",
			"line":	569,
			"primary_score":	999618,
			"second_score":	170138
		}, {
			"file":	"main/php_variables.c",
			"line":	572,
			"primary_score":	999618,
			"second_score":	170137
		}, {
			"file":	"main/php_variables.c",
			"line":	573,
			"primary_score":	999618,
			"second_score":	170136
		}, {
			"file":	"main/php_variables.c",
			"line":	576,
			"primary_score":	999618,
			"second_score":	170135
		}, {
			"file":	"main/php_variables.c",
			"line":	577,
			"primary_score":	999618,
			"second_score":	170134
		}, {
			"file":	"main/php_variables.c",
			"line":	581,
			"primary_score":	999618,
			"second_score":	152311
		}, {
			"file":	"main/php_variables.c",
			"line":	584,
			"primary_score":	999618,
			"second_score":	152310
		}, {
			"file":	"main/php_variables.c",
			"line":	587,
			"primary_score":	999618,
			"second_score":	152309
		}, {
			"file":	"main/php_variables.c",
			"line":	591,
			"primary_score":	999618,
			"second_score":	152308
		}, {
			"file":	"main/php_variables.c",
			"line":	592,
			"primary_score":	999618,
			"second_score":	152307
		}, {
			"file":	"main/php_variables.c",
			"line":	593,
			"primary_score":	999618,
			"second_score":	152306
		}, {
			"file":	"main/php_variables.c",
			"line":	594,
			"primary_score":	999618,
			"second_score":	152305
		}, {
			"file":	"main/php_variables.c",
			"line":	595,
			"primary_score":	999618,
			"second_score":	152298
		}, {
			"file":	"main/php_variables.c",
			"line":	598,
			"primary_score":	999618,
			"second_score":	151555
		}, {
			"file":	"main/php_variables.c",
			"line":	752,
			"primary_score":	999618,
			"second_score":	170376
		}, {
			"file":	"main/php_variables.c",
			"line":	753,
			"primary_score":	999618,
			"second_score":	170375
		}, {
			"file":	"main/php_variables.c",
			"line":	755,
			"primary_score":	999618,
			"second_score":	151554
		}, {
			"file":	"main/php_variables.c",
			"line":	756,
			"primary_score":	999618,
			"second_score":	151553
		}, {
			"file":	"main/php_variables.c",
			"line":	757,
			"primary_score":	999618,
			"second_score":	151552
		}, {
			"file":	"main/php_variables.c",
			"line":	759,
			"primary_score":	999618,
			"second_score":	151551
		}, {
			"file":	"main/php_variables.c",
			"line":	761,
			"primary_score":	999618,
			"second_score":	151510
		}, {
			"file":	"main/php_variables.c",
			"line":	762,
			"primary_score":	999618,
			"second_score":	151508
		}, {
			"file":	"main/php_variables.c",
			"line":	763,
			"primary_score":	999618,
			"second_score":	151506
		}, {
			"file":	"main/php_variables.c",
			"line":	764,
			"primary_score":	999618,
			"second_score":	151345
		}, {
			"file":	"main/php_variables.c",
			"line":	782,
			"primary_score":	999618,
			"second_score":	151187
		}, {
			"file":	"main/php_variables.c",
			"line":	783,
			"primary_score":	999618,
			"second_score":	151027
		}, {
			"file":	"main/php_variables.c",
			"line":	785,
			"primary_score":	999618,
			"second_score":	151025
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999618,
			"second_score":	62045
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	134,
			"primary_score":	999618,
			"second_score":	148289
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	135,
			"primary_score":	999618,
			"second_score":	148288
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	136,
			"primary_score":	999618,
			"second_score":	148287
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	138,
			"primary_score":	999618,
			"second_score":	148286
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	139,
			"primary_score":	999618,
			"second_score":	148285
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	140,
			"primary_score":	999618,
			"second_score":	148283
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	142,
			"primary_score":	999618,
			"second_score":	148282
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	165,
			"primary_score":	999618,
			"second_score":	148726
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	167,
			"primary_score":	999618,
			"second_score":	148725
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	168,
			"primary_score":	999618,
			"second_score":	148621
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	169,
			"primary_score":	999618,
			"second_score":	148620
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	170,
			"primary_score":	999618,
			"second_score":	148619
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	171,
			"primary_score":	999618,
			"second_score":	148618
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	172,
			"primary_score":	999618,
			"second_score":	148617
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	173,
			"primary_score":	999618,
			"second_score":	148616
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	174,
			"primary_score":	999618,
			"second_score":	148615
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	176,
			"primary_score":	999618,
			"second_score":	148614
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	264,
			"primary_score":	999618,
			"second_score":	148727
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	266,
			"primary_score":	999618,
			"second_score":	148293
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	267,
			"primary_score":	999618,
			"second_score":	148292
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	271,
			"primary_score":	999618,
			"second_score":	148291
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	272,
			"primary_score":	999618,
			"second_score":	148290
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	284,
			"primary_score":	999618,
			"second_score":	148281
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	285,
			"primary_score":	999618,
			"second_score":	149086
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	287,
			"primary_score":	999618,
			"second_score":	148280
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	291,
			"primary_score":	999618,
			"second_score":	148279
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999618,
			"second_score":	113976
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999618,
			"second_score":	113975
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999618,
			"second_score":	113974
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999618,
			"second_score":	113973
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999618,
			"second_score":	113972
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999618,
			"second_score":	113971
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999618,
			"second_score":	113970
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999618,
			"second_score":	113969
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999618,
			"second_score":	113968
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999618,
			"second_score":	113967
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999618,
			"second_score":	113966
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999618,
			"second_score":	113947
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999618,
			"second_score":	113986
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999618,
			"second_score":	113985
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999618,
			"second_score":	113984
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999618,
			"second_score":	113983
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999618,
			"second_score":	119045
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	119036
		}, {
			"file":	"main/streams/streams.c",
			"line":	196,
			"primary_score":	999618,
			"second_score":	148155
		}, {
			"file":	"main/streams/streams.c",
			"line":	198,
			"primary_score":	999618,
			"second_score":	148154
		}, {
			"file":	"main/streams/streams.c",
			"line":	200,
			"primary_score":	999618,
			"second_score":	148153
		}, {
			"file":	"main/streams/streams.c",
			"line":	203,
			"primary_score":	999618,
			"second_score":	148152
		}, {
			"file":	"main/streams/streams.c",
			"line":	206,
			"primary_score":	999618,
			"second_score":	148151
		}, {
			"file":	"main/streams/streams.c",
			"line":	207,
			"primary_score":	999618,
			"second_score":	148150
		}, {
			"file":	"main/streams/streams.c",
			"line":	238,
			"primary_score":	999618,
			"second_score":	148613
		}, {
			"file":	"main/streams/streams.c",
			"line":	240,
			"primary_score":	999618,
			"second_score":	148612
		}, {
			"file":	"main/streams/streams.c",
			"line":	242,
			"primary_score":	999618,
			"second_score":	148508
		}, {
			"file":	"main/streams/streams.c",
			"line":	244,
			"primary_score":	999618,
			"second_score":	148507
		}, {
			"file":	"main/streams/streams.c",
			"line":	245,
			"primary_score":	999618,
			"second_score":	148506
		}, {
			"file":	"main/streams/streams.c",
			"line":	251,
			"primary_score":	999618,
			"second_score":	148505
		}, {
			"file":	"main/streams/streams.c",
			"line":	252,
			"primary_score":	999618,
			"second_score":	148504
		}, {
			"file":	"main/streams/streams.c",
			"line":	253,
			"primary_score":	999618,
			"second_score":	148503
		}, {
			"file":	"main/streams/streams.c",
			"line":	254,
			"primary_score":	999618,
			"second_score":	148502
		}, {
			"file":	"main/streams/streams.c",
			"line":	261,
			"primary_score":	999618,
			"second_score":	148501
		}, {
			"file":	"main/streams/streams.c",
			"line":	265,
			"primary_score":	999618,
			"second_score":	148500
		}, {
			"file":	"main/streams/streams.c",
			"line":	281,
			"primary_score":	999618,
			"second_score":	148499
		}, {
			"file":	"main/streams/streams.c",
			"line":	282,
			"primary_score":	999618,
			"second_score":	148314
		}, {
			"file":	"main/streams/streams.c",
			"line":	284,
			"primary_score":	999618,
			"second_score":	148302
		}, {
			"file":	"main/streams/streams.c",
			"line":	285,
			"primary_score":	999618,
			"second_score":	148301
		}, {
			"file":	"main/streams/streams.c",
			"line":	286,
			"primary_score":	999618,
			"second_score":	148300
		}, {
			"file":	"main/streams/streams.c",
			"line":	287,
			"primary_score":	999618,
			"second_score":	148299
		}, {
			"file":	"main/streams/streams.c",
			"line":	288,
			"primary_score":	999618,
			"second_score":	148298
		}, {
			"file":	"main/streams/streams.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	148297
		}, {
			"file":	"main/streams/streams.c",
			"line":	290,
			"primary_score":	999618,
			"second_score":	148296
		}, {
			"file":	"main/streams/streams.c",
			"line":	291,
			"primary_score":	999618,
			"second_score":	148295
		}, {
			"file":	"main/streams/streams.c",
			"line":	293,
			"primary_score":	999618,
			"second_score":	148294
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999618,
			"second_score":	114001
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999618,
			"second_score":	114000
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999618,
			"second_score":	113999
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999618,
			"second_score":	113998
		}, {
			"file":	"main/streams/streams.c",
			"line":	337,
			"primary_score":	999618,
			"second_score":	113997
		}, {
			"file":	"main/streams/streams.c",
			"line":	339,
			"primary_score":	999618,
			"second_score":	113996
		}, {
			"file":	"main/streams/streams.c",
			"line":	352,
			"primary_score":	999618,
			"second_score":	113995
		}, {
			"file":	"main/streams/streams.c",
			"line":	361,
			"primary_score":	999618,
			"second_score":	113994
		}, {
			"file":	"main/streams/streams.c",
			"line":	365,
			"primary_score":	999618,
			"second_score":	113993
		}, {
			"file":	"main/streams/streams.c",
			"line":	383,
			"primary_score":	999618,
			"second_score":	113992
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999618,
			"second_score":	113991
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999618,
			"second_score":	113981
		}, {
			"file":	"main/streams/streams.c",
			"line":	410,
			"primary_score":	999618,
			"second_score":	113980
		}, {
			"file":	"main/streams/streams.c",
			"line":	414,
			"primary_score":	999618,
			"second_score":	113979
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999618,
			"second_score":	113978
		}, {
			"file":	"main/streams/streams.c",
			"line":	427,
			"primary_score":	999618,
			"second_score":	113977
		}, {
			"file":	"main/streams/streams.c",
			"line":	428,
			"primary_score":	999618,
			"second_score":	113946
		}, {
			"file":	"main/streams/streams.c",
			"line":	431,
			"primary_score":	999618,
			"second_score":	113945
		}, {
			"file":	"main/streams/streams.c",
			"line":	438,
			"primary_score":	999618,
			"second_score":	113944
		}, {
			"file":	"main/streams/streams.c",
			"line":	439,
			"primary_score":	999618,
			"second_score":	113943
		}, {
			"file":	"main/streams/streams.c",
			"line":	442,
			"primary_score":	999618,
			"second_score":	113942
		}, {
			"file":	"main/streams/streams.c",
			"line":	446,
			"primary_score":	999618,
			"second_score":	113941
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999618,
			"second_score":	113940
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999618,
			"second_score":	113939
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999618,
			"second_score":	113938
		}, {
			"file":	"main/streams/streams.c",
			"line":	493,
			"primary_score":	999618,
			"second_score":	113937
		}, {
			"file":	"main/streams/streams.c",
			"line":	494,
			"primary_score":	999618,
			"second_score":	113936
		}, {
			"file":	"main/streams/streams.c",
			"line":	495,
			"primary_score":	999618,
			"second_score":	113917
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999618,
			"second_score":	113916
		}, {
			"file":	"main/streams/streams.c",
			"line":	502,
			"primary_score":	999618,
			"second_score":	113897
		}, {
			"file":	"main/streams/streams.c",
			"line":	506,
			"primary_score":	999618,
			"second_score":	113896
		}, {
			"file":	"main/streams/streams.c",
			"line":	1118,
			"primary_score":	999618,
			"second_score":	113990
		}, {
			"file":	"main/streams/streams.c",
			"line":	1120,
			"primary_score":	999618,
			"second_score":	113989
		}, {
			"file":	"main/streams/streams.c",
			"line":	1124,
			"primary_score":	999618,
			"second_score":	113988
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999618,
			"second_score":	113987
		}, {
			"file":	"main/streams/streams.c",
			"line":	1128,
			"primary_score":	999618,
			"second_score":	113982
		}, {
			"file":	"main/streams/streams.c",
			"line":	1502,
			"primary_score":	999618,
			"second_score":	114003
		}, {
			"file":	"main/streams/streams.c",
			"line":	1504,
			"primary_score":	999618,
			"second_score":	114002
		}, {
			"file":	"main/streams/streams.c",
			"line":	1515,
			"primary_score":	999618,
			"second_score":	113375
		}, {
			"file":	"main/streams/streams.c",
			"line":	1521,
			"primary_score":	999618,
			"second_score":	113374
		}, {
			"file":	"main/streams/streams.c",
			"line":	1557,
			"primary_score":	999618,
			"second_score":	6110
		}, {
			"file":	"main/streams/streams.c",
			"line":	1558,
			"primary_score":	999618,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1559,
			"primary_score":	999618,
			"second_score":	6076
		}, {
			"file":	"main/streams/streams.c",
			"line":	1560,
			"primary_score":	999618,
			"second_score":	6046
		}, {
			"file":	"main/streams/streams.c",
			"line":	1596,
			"primary_score":	999618,
			"second_score":	97644
		}, {
			"file":	"main/streams/streams.c",
			"line":	1637,
			"primary_score":	999618,
			"second_score":	148941
		}, {
			"file":	"main/streams/streams.c",
			"line":	1638,
			"primary_score":	999618,
			"second_score":	148940
		}, {
			"file":	"main/streams/streams.c",
			"line":	1639,
			"primary_score":	999618,
			"second_score":	148939
		}, {
			"file":	"main/streams/streams.c",
			"line":	1640,
			"primary_score":	999618,
			"second_score":	148938
		}, {
			"file":	"main/streams/streams.c",
			"line":	1642,
			"primary_score":	999618,
			"second_score":	148937
		}, {
			"file":	"main/streams/streams.c",
			"line":	1643,
			"primary_score":	999618,
			"second_score":	148936
		}, {
			"file":	"main/streams/streams.c",
			"line":	1646,
			"primary_score":	999618,
			"second_score":	148935
		}, {
			"file":	"main/streams/streams.c",
			"line":	1650,
			"primary_score":	999618,
			"second_score":	148934
		}, {
			"file":	"main/streams/streams.c",
			"line":	1651,
			"primary_score":	999618,
			"second_score":	148931
		}, {
			"file":	"main/streams/streams.c",
			"line":	1654,
			"primary_score":	999618,
			"second_score":	148930
		}, {
			"file":	"main/streams/streams.c",
			"line":	1655,
			"primary_score":	999618,
			"second_score":	148929
		}, {
			"file":	"main/streams/streams.c",
			"line":	1663,
			"primary_score":	999618,
			"second_score":	148928
		}, {
			"file":	"main/streams/streams.c",
			"line":	1664,
			"primary_score":	999618,
			"second_score":	148927
		}, {
			"file":	"main/streams/streams.c",
			"line":	1665,
			"primary_score":	999618,
			"second_score":	148817
		}, {
			"file":	"main/streams/streams.c",
			"line":	1681,
			"primary_score":	999618,
			"second_score":	148793
		}, {
			"file":	"main/streams/streams.c",
			"line":	1684,
			"primary_score":	999618,
			"second_score":	148774
		}, {
			"file":	"main/streams/streams.c",
			"line":	1746,
			"primary_score":	999618,
			"second_score":	148773
		}, {
			"file":	"main/streams/streams.c",
			"line":	1764,
			"primary_score":	999618,
			"second_score":	148772
		}, {
			"file":	"main/streams/streams.c",
			"line":	1847,
			"primary_score":	999990,
			"second_score":	597
		}, {
			"file":	"main/streams/streams.c",
			"line":	1848,
			"primary_score":	999990,
			"second_score":	596
		}, {
			"file":	"main/streams/streams.c",
			"line":	1849,
			"primary_score":	999990,
			"second_score":	595
		}, {
			"file":	"main/streams/streams.c",
			"line":	1851,
			"primary_score":	999990,
			"second_score":	594
		}, {
			"file":	"main/streams/streams.c",
			"line":	1852,
			"primary_score":	1000000,
			"second_score":	593
		}, {
			"file":	"main/streams/streams.c",
			"line":	1896,
			"primary_score":	999618,
			"second_score":	148952
		}, {
			"file":	"main/streams/streams.c",
			"line":	1897,
			"primary_score":	999618,
			"second_score":	148951
		}, {
			"file":	"main/streams/streams.c",
			"line":	1898,
			"primary_score":	999618,
			"second_score":	148950
		}, {
			"file":	"main/streams/streams.c",
			"line":	1899,
			"primary_score":	999618,
			"second_score":	148949
		}, {
			"file":	"main/streams/streams.c",
			"line":	1900,
			"primary_score":	999618,
			"second_score":	148948
		}, {
			"file":	"main/streams/streams.c",
			"line":	1901,
			"primary_score":	999618,
			"second_score":	148947
		}, {
			"file":	"main/streams/streams.c",
			"line":	1903,
			"primary_score":	999618,
			"second_score":	148946
		}, {
			"file":	"main/streams/streams.c",
			"line":	1907,
			"primary_score":	999618,
			"second_score":	148945
		}, {
			"file":	"main/streams/streams.c",
			"line":	1912,
			"primary_score":	999618,
			"second_score":	148944
		}, {
			"file":	"main/streams/streams.c",
			"line":	1922,
			"primary_score":	999618,
			"second_score":	148943
		}, {
			"file":	"main/streams/streams.c",
			"line":	1924,
			"primary_score":	999618,
			"second_score":	148942
		}, {
			"file":	"main/streams/streams.c",
			"line":	1925,
			"primary_score":	999618,
			"second_score":	148771
		}, {
			"file":	"main/streams/streams.c",
			"line":	1933,
			"primary_score":	999618,
			"second_score":	148770
		}, {
			"file":	"main/streams/streams.c",
			"line":	1934,
			"primary_score":	999618,
			"second_score":	148769
		}, {
			"file":	"main/streams/streams.c",
			"line":	1938,
			"primary_score":	999618,
			"second_score":	148768
		}, {
			"file":	"main/streams/streams.c",
			"line":	1945,
			"primary_score":	999618,
			"second_score":	148277
		}, {
			"file":	"main/streams/streams.c",
			"line":	1952,
			"primary_score":	999618,
			"second_score":	148276
		}, {
			"file":	"main/streams/streams.c",
			"line":	1953,
			"primary_score":	999618,
			"second_score":	148275
		}, {
			"file":	"main/streams/streams.c",
			"line":	1957,
			"primary_score":	999618,
			"second_score":	148274
		}, {
			"file":	"main/streams/streams.c",
			"line":	1958,
			"primary_score":	999618,
			"second_score":	148273
		}, {
			"file":	"main/streams/streams.c",
			"line":	1962,
			"primary_score":	999618,
			"second_score":	148272
		}, {
			"file":	"main/streams/streams.c",
			"line":	1965,
			"primary_score":	999618,
			"second_score":	148271
		}, {
			"file":	"main/streams/streams.c",
			"line":	1966,
			"primary_score":	999618,
			"second_score":	148160
		}, {
			"file":	"main/streams/streams.c",
			"line":	1973,
			"primary_score":	999618,
			"second_score":	148159
		}, {
			"file":	"main/streams/streams.c",
			"line":	2008,
			"primary_score":	999618,
			"second_score":	148158
		}, {
			"file":	"main/streams/streams.c",
			"line":	2017,
			"primary_score":	999618,
			"second_score":	148157
		}, {
			"file":	"main/streams/streams.c",
			"line":	2024,
			"primary_score":	999618,
			"second_score":	148156
		}, {
			"file":	"main/streams/streams.c",
			"line":	2030,
			"primary_score":	999618,
			"second_score":	148149
		}, {
			"file":	"main/streams/streams.c",
			"line":	2033,
			"primary_score":	999618,
			"second_score":	148148
		}, {
			"file":	"main/strlcpy.c",
			"line":	71,
			"primary_score":	999618,
			"second_score":	148313
		}, {
			"file":	"main/strlcpy.c",
			"line":	72,
			"primary_score":	999618,
			"second_score":	148312
		}, {
			"file":	"main/strlcpy.c",
			"line":	73,
			"primary_score":	999618,
			"second_score":	148311
		}, {
			"file":	"main/strlcpy.c",
			"line":	76,
			"primary_score":	999618,
			"second_score":	148310
		}, {
			"file":	"main/strlcpy.c",
			"line":	77,
			"primary_score":	999618,
			"second_score":	148309
		}, {
			"file":	"main/strlcpy.c",
			"line":	78,
			"primary_score":	999618,
			"second_score":	148306
		}, {
			"file":	"main/strlcpy.c",
			"line":	79,
			"primary_score":	999618,
			"second_score":	148305
		}, {
			"file":	"main/strlcpy.c",
			"line":	84,
			"primary_score":	999618,
			"second_score":	148304
		}, {
			"file":	"main/strlcpy.c",
			"line":	91,
			"primary_score":	999618,
			"second_score":	148303
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	255,
			"primary_score":	999618,
			"second_score":	121330
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	260,
			"primary_score":	999618,
			"second_score":	121329
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	269,
			"primary_score":	999618,
			"second_score":	121328
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	270,
			"primary_score":	999618,
			"second_score":	121327
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	273,
			"primary_score":	999618,
			"second_score":	121326
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	277,
			"primary_score":	999618,
			"second_score":	121325
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	287,
			"primary_score":	999618,
			"second_score":	121337
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999618,
			"second_score":	121336
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	289,
			"primary_score":	999618,
			"second_score":	121335
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999618,
			"second_score":	121334
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	295,
			"primary_score":	999618,
			"second_score":	121333
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	303,
			"primary_score":	999618,
			"second_score":	121332
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	305,
			"primary_score":	999618,
			"second_score":	121331
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	306,
			"primary_score":	999618,
			"second_score":	121324
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	312,
			"primary_score":	999618,
			"second_score":	121323
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999618,
			"second_score":	121322
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	316,
			"primary_score":	999618,
			"second_score":	121321
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	325,
			"primary_score":	999618,
			"second_score":	103511
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	338,
			"primary_score":	999618,
			"second_score":	170133
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	339,
			"primary_score":	999618,
			"second_score":	170132
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	344,
			"primary_score":	999618,
			"second_score":	170131
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	347,
			"primary_score":	999618,
			"second_score":	157232
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	348,
			"primary_score":	999618,
			"second_score":	157231
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	351,
			"primary_score":	999618,
			"second_score":	156058
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	355,
			"primary_score":	999618,
			"second_score":	155139
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	356,
			"primary_score":	999618,
			"second_score":	155138
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	359,
			"primary_score":	999618,
			"second_score":	154189
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	363,
			"primary_score":	999618,
			"second_score":	153246
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	364,
			"primary_score":	999618,
			"second_score":	153245
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	378,
			"primary_score":	999618,
			"second_score":	113415
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	379,
			"primary_score":	999618,
			"second_score":	113414
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999618,
			"second_score":	113413
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	395,
			"primary_score":	999618,
			"second_score":	124930
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999618,
			"second_score":	124904
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	550,
			"primary_score":	999618,
			"second_score":	151014
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	551,
			"primary_score":	999618,
			"second_score":	151013
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	552,
			"primary_score":	999618,
			"second_score":	151012
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	553,
			"primary_score":	999618,
			"second_score":	151011
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	555,
			"primary_score":	999618,
			"second_score":	151010
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	556,
			"primary_score":	999618,
			"second_score":	150900
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	557,
			"primary_score":	999618,
			"second_score":	150790
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	559,
			"primary_score":	999618,
			"second_score":	150680
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	560,
			"primary_score":	999618,
			"second_score":	149758
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	561,
			"primary_score":	999618,
			"second_score":	148953
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	563,
			"primary_score":	999618,
			"second_score":	148147
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	579,
			"primary_score":	999618,
			"second_score":	148146
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	581,
			"primary_score":	999618,
			"second_score":	148145
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	582,
			"primary_score":	999618,
			"second_score":	148139
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	583,
			"primary_score":	999618,
			"second_score":	148133
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	585,
			"primary_score":	999618,
			"second_score":	148127
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	586,
			"primary_score":	999618,
			"second_score":	148126
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	587,
			"primary_score":	999618,
			"second_score":	148125
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	588,
			"primary_score":	999618,
			"second_score":	148117
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	589,
			"primary_score":	999618,
			"second_score":	148116
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	590,
			"primary_score":	999618,
			"second_score":	148115
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	592,
			"primary_score":	999618,
			"second_score":	148038
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	593,
			"primary_score":	999618,
			"second_score":	148037
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	594,
			"primary_score":	999618,
			"second_score":	148036
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	595,
			"primary_score":	999618,
			"second_score":	148028
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	596,
			"primary_score":	999618,
			"second_score":	148027
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	597,
			"primary_score":	999618,
			"second_score":	148026
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	599,
			"primary_score":	999618,
			"second_score":	147951
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	600,
			"primary_score":	999618,
			"second_score":	147950
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	601,
			"primary_score":	999618,
			"second_score":	147949
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	602,
			"primary_score":	999618,
			"second_score":	147941
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	603,
			"primary_score":	999618,
			"second_score":	147940
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	604,
			"primary_score":	999618,
			"second_score":	147939
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	606,
			"primary_score":	999618,
			"second_score":	147864
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	607,
			"primary_score":	999618,
			"second_score":	147842
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	608,
			"primary_score":	999618,
			"second_score":	147820
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	916,
			"primary_score":	999618,
			"second_score":	38523
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	920,
			"primary_score":	999618,
			"second_score":	38522
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	921,
			"primary_score":	999618,
			"second_score":	38521
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	950,
			"primary_score":	999618,
			"second_score":	148233
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	954,
			"primary_score":	999618,
			"second_score":	148232
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	955,
			"primary_score":	999618,
			"second_score":	148231
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	956,
			"primary_score":	999618,
			"second_score":	148230
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1090,
			"primary_score":	999618,
			"second_score":	148219
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1091,
			"primary_score":	999618,
			"second_score":	148218
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1113,
			"primary_score":	999618,
			"second_score":	170408
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1114,
			"primary_score":	999618,
			"second_score":	170407
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1115,
			"primary_score":	999618,
			"second_score":	170406
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1117,
			"primary_score":	999618,
			"second_score":	170405
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1124,
			"primary_score":	999618,
			"second_score":	170404
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1126,
			"primary_score":	999618,
			"second_score":	151023
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1127,
			"primary_score":	999618,
			"second_score":	151022
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1129,
			"primary_score":	999618,
			"second_score":	151021
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1130,
			"primary_score":	999618,
			"second_score":	151015
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1133,
			"primary_score":	999618,
			"second_score":	147798
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1136,
			"primary_score":	999618,
			"second_score":	147797
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1137,
			"primary_score":	999618,
			"second_score":	119257
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1140,
			"primary_score":	999618,
			"second_score":	119256
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1177,
			"primary_score":	999618,
			"second_score":	121838
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1180,
			"primary_score":	999618,
			"second_score":	118806
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1319,
			"primary_score":	999618,
			"second_score":	119255
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1321,
			"primary_score":	999618,
			"second_score":	119253
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1323,
			"primary_score":	999618,
			"second_score":	119252
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1325,
			"primary_score":	999618,
			"second_score":	103524
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1326,
			"primary_score":	999618,
			"second_score":	103523
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1328,
			"primary_score":	999618,
			"second_score":	103522
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1332,
			"primary_score":	999618,
			"second_score":	103521
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1333,
			"primary_score":	999618,
			"second_score":	103520
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1336,
			"primary_score":	999618,
			"second_score":	103519
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1337,
			"primary_score":	999618,
			"second_score":	103518
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1339,
			"primary_score":	999618,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1344,
			"primary_score":	999618,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/spl/spl_directory.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/spl/spl_directory.c",
			"lines":	[{
					"line":	137,
					"switches":	[]
				}, {
					"line":	138,
					"switches":	[]
				}, {
					"line":	140,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	141,
							"begin_column":	0,
							"end_line":	141,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	2,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	3,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	4,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	5,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	6,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	7,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	8,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	9,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	10,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	11,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	12,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	13,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	14,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	15,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	16,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	17,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	18,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	19,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	20,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	21,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	22,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	23,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	24,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	25,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [12], [], [7, 8, 9, 10, 11], [], [], [], [], [2, 3, 4, 5], [], [], [6]],
							"begin_line":	141,
							"begin_column":	2,
							"end_line":	141,
							"end_column":	11,
							"patch_codes":	["if (!__is_neg(\"\", \"L141\", 18, &(intern), sizeof (intern), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(obj), sizeof (obj), &(class_type), sizeof (class_type), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags)))\n    intern = _emalloc((sizeof(spl_filesystem_object)));\n", "__zend_calloc((sizeof(spl_filesystem_object)), 0)", "_ecalloc((sizeof(spl_filesystem_object)), 0)", "aligned_alloc((sizeof(spl_filesystem_object)), 0)", "calloc((sizeof(spl_filesystem_object)), 0)", "{\n}\n", "intern = __zend_malloc((sizeof(spl_filesystem_object)))", "intern = alloca((sizeof(spl_filesystem_object)))", "intern = malloc((sizeof(spl_filesystem_object)))", "intern = valloc((sizeof(spl_filesystem_object)))", "intern = zend_vm_stack_alloc((sizeof(spl_filesystem_object)))", "intern = (intern)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4539033201895482, -6.0474539922895474, -6.0474539922895474, -6.2409115322895481, -6.0474539922895474, -6.0474539922895474, -6.2409115322895481, -5.8548960022895473, -6.1435241022895477, -6.0853900122895475, -6.3740181122895478, -6.0853900122895475, -5.2941189822895476, -6.0853900122895475, -6.0853900122895475, -5.2941189822895476, -5.6161300122895472, -5.6161300122895472]
								}, {
									"case":	2,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	3,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	4,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	5,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	6,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	7,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	8,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	9,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	10,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	11,
									"scores":	[-5.3666179322895475]
								}, {
									"case":	12,
									"scores":	[-5.3666179322895475]
								}]
						}]
				}, {
					"line":	141,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	142,
							"begin_column":	0,
							"end_line":	142,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.346415224972028]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}, {
									"case":	3,
									"scores":	[-5.346415224972028]
								}, {
									"case":	4,
									"scores":	[-5.346415224972028]
								}, {
									"case":	5,
									"scores":	[-5.346415224972028]
								}, {
									"case":	6,
									"scores":	[-5.346415224972028]
								}, {
									"case":	7,
									"scores":	[-5.346415224972028]
								}, {
									"case":	8,
									"scores":	[-5.346415224972028]
								}, {
									"case":	9,
									"scores":	[-5.346415224972028]
								}, {
									"case":	10,
									"scores":	[-5.346415224972028]
								}, {
									"case":	11,
									"scores":	[-5.346415224972028]
								}, {
									"case":	12,
									"scores":	[-5.346415224972028]
								}, {
									"case":	13,
									"scores":	[-5.346415224972028]
								}, {
									"case":	14,
									"scores":	[-5.346415224972028]
								}, {
									"case":	15,
									"scores":	[-5.346415224972028]
								}, {
									"case":	16,
									"scores":	[-5.346415224972028]
								}, {
									"case":	17,
									"scores":	[-5.346415224972028]
								}, {
									"case":	18,
									"scores":	[-5.346415224972028]
								}, {
									"case":	19,
									"scores":	[-5.346415224972028]
								}, {
									"case":	20,
									"scores":	[-5.346415224972028]
								}, {
									"case":	21,
									"scores":	[-5.346415224972028]
								}, {
									"case":	22,
									"scores":	[-5.346415224972028]
								}, {
									"case":	23,
									"scores":	[-5.346415224972028]
								}, {
									"case":	24,
									"scores":	[-5.346415224972028]
								}, {
									"case":	25,
									"scores":	[-5.346415224972028]
								}, {
									"case":	26,
									"scores":	[-5.346415224972028]
								}, {
									"case":	27,
									"scores":	[-5.346415224972028]
								}, {
									"case":	28,
									"scores":	[-5.346415224972028]
								}, {
									"case":	29,
									"scores":	[-5.346415224972028]
								}, {
									"case":	30,
									"scores":	[-5.346415224972028]
								}, {
									"case":	31,
									"scores":	[-5.346415224972028]
								}, {
									"case":	32,
									"scores":	[-5.346415224972028]
								}, {
									"case":	33,
									"scores":	[-5.346415224972028]
								}, {
									"case":	34,
									"scores":	[-5.346415224972028]
								}, {
									"case":	35,
									"scores":	[-5.346415224972028]
								}, {
									"case":	36,
									"scores":	[-5.346415224972028]
								}, {
									"case":	37,
									"scores":	[-5.346415224972028]
								}, {
									"case":	38,
									"scores":	[-5.346415224972028]
								}, {
									"case":	39,
									"scores":	[-5.346415224972028]
								}, {
									"case":	40,
									"scores":	[-5.346415224972028]
								}, {
									"case":	41,
									"scores":	[-5.346415224972028]
								}, {
									"case":	42,
									"scores":	[-5.346415224972028]
								}, {
									"case":	43,
									"scores":	[-5.346415224972028]
								}, {
									"case":	44,
									"scores":	[-5.346415224972028]
								}, {
									"case":	45,
									"scores":	[-5.346415224972028]
								}, {
									"case":	46,
									"scores":	[-5.346415224972028]
								}, {
									"case":	47,
									"scores":	[-5.346415224972028]
								}, {
									"case":	48,
									"scores":	[-5.346415224972028]
								}, {
									"case":	49,
									"scores":	[-5.346415224972028]
								}, {
									"case":	50,
									"scores":	[-5.346415224972028]
								}, {
									"case":	51,
									"scores":	[-5.346415224972028]
								}, {
									"case":	52,
									"scores":	[-5.346415224972028]
								}, {
									"case":	53,
									"scores":	[-5.346415224972028]
								}, {
									"case":	54,
									"scores":	[-5.346415224972028]
								}, {
									"case":	55,
									"scores":	[-5.346415224972028]
								}, {
									"case":	56,
									"scores":	[-5.346415224972028]
								}, {
									"case":	57,
									"scores":	[-5.346415224972028]
								}, {
									"case":	58,
									"scores":	[-5.346415224972028]
								}, {
									"case":	59,
									"scores":	[-5.346415224972028]
								}, {
									"case":	60,
									"scores":	[-5.346415224972028]
								}, {
									"case":	61,
									"scores":	[-5.346415224972028]
								}, {
									"case":	62,
									"scores":	[-5.346415224972028]
								}, {
									"case":	63,
									"scores":	[-5.346415224972028]
								}, {
									"case":	64,
									"scores":	[-5.346415224972028]
								}, {
									"case":	65,
									"scores":	[-5.346415224972028]
								}, {
									"case":	66,
									"scores":	[-5.346415224972028]
								}, {
									"case":	67,
									"scores":	[-5.346415224972028]
								}, {
									"case":	68,
									"scores":	[-5.346415224972028]
								}, {
									"case":	69,
									"scores":	[-5.346415224972028]
								}, {
									"case":	70,
									"scores":	[-5.346415224972028]
								}, {
									"case":	71,
									"scores":	[-5.346415224972028]
								}, {
									"case":	72,
									"scores":	[-5.346415224972028]
								}, {
									"case":	73,
									"scores":	[-5.346415224972028]
								}, {
									"case":	74,
									"scores":	[-5.346415224972028]
								}, {
									"case":	75,
									"scores":	[-5.346415224972028]
								}, {
									"case":	76,
									"scores":	[-5.346415224972028]
								}, {
									"case":	77,
									"scores":	[-5.346415224972028]
								}, {
									"case":	78,
									"scores":	[-5.346415224972028]
								}, {
									"case":	79,
									"scores":	[-5.346415224972028]
								}, {
									"case":	80,
									"scores":	[-5.346415224972028]
								}, {
									"case":	81,
									"scores":	[-5.346415224972028]
								}, {
									"case":	82,
									"scores":	[-5.346415224972028]
								}, {
									"case":	83,
									"scores":	[-5.346415224972028]
								}, {
									"case":	84,
									"scores":	[-5.346415224972028]
								}, {
									"case":	85,
									"scores":	[-5.346415224972028]
								}, {
									"case":	86,
									"scores":	[-5.346415224972028]
								}, {
									"case":	87,
									"scores":	[-5.346415224972028]
								}, {
									"case":	88,
									"scores":	[-5.346415224972028]
								}, {
									"case":	89,
									"scores":	[-5.346415224972028]
								}, {
									"case":	90,
									"scores":	[-5.346415224972028]
								}, {
									"case":	91,
									"scores":	[-5.346415224972028]
								}, {
									"case":	92,
									"scores":	[-5.346415224972028]
								}, {
									"case":	93,
									"scores":	[-5.346415224972028]
								}, {
									"case":	94,
									"scores":	[-5.346415224972028]
								}, {
									"case":	95,
									"scores":	[-5.346415224972028]
								}, {
									"case":	96,
									"scores":	[-5.346415224972028]
								}, {
									"case":	97,
									"scores":	[-5.346415224972028]
								}, {
									"case":	98,
									"scores":	[-5.346415224972028]
								}, {
									"case":	99,
									"scores":	[-5.346415224972028]
								}, {
									"case":	100,
									"scores":	[-5.346415224972028]
								}, {
									"case":	101,
									"scores":	[-5.346415224972028]
								}, {
									"case":	102,
									"scores":	[-5.346415224972028]
								}, {
									"case":	103,
									"scores":	[-5.346415224972028]
								}, {
									"case":	104,
									"scores":	[-5.346415224972028]
								}, {
									"case":	105,
									"scores":	[-5.346415224972028]
								}, {
									"case":	106,
									"scores":	[-5.346415224972028]
								}, {
									"case":	107,
									"scores":	[-5.346415224972028]
								}, {
									"case":	108,
									"scores":	[-5.346415224972028]
								}, {
									"case":	109,
									"scores":	[-5.346415224972028]
								}, {
									"case":	110,
									"scores":	[-5.346415224972028]
								}, {
									"case":	111,
									"scores":	[-5.346415224972028]
								}, {
									"case":	112,
									"scores":	[-5.346415224972028]
								}, {
									"case":	113,
									"scores":	[-5.346415224972028]
								}, {
									"case":	114,
									"scores":	[-5.346415224972028]
								}, {
									"case":	115,
									"scores":	[-5.346415224972028]
								}, {
									"case":	116,
									"scores":	[-5.346415224972028]
								}, {
									"case":	117,
									"scores":	[-5.346415224972028]
								}, {
									"case":	118,
									"scores":	[-5.346415224972028]
								}, {
									"case":	119,
									"scores":	[-5.346415224972028]
								}, {
									"case":	120,
									"scores":	[-5.346415224972028]
								}, {
									"case":	121,
									"scores":	[-5.346415224972028]
								}, {
									"case":	122,
									"scores":	[-5.346415224972028]
								}, {
									"case":	123,
									"scores":	[-5.346415224972028]
								}, {
									"case":	124,
									"scores":	[-5.346415224972028]
								}, {
									"case":	125,
									"scores":	[-5.346415224972028]
								}, {
									"case":	126,
									"scores":	[-5.346415224972028]
								}, {
									"case":	127,
									"scores":	[-5.346415224972028]
								}, {
									"case":	128,
									"scores":	[-5.346415224972028]
								}, {
									"case":	129,
									"scores":	[-5.346415224972028]
								}, {
									"case":	130,
									"scores":	[-5.346415224972028]
								}, {
									"case":	131,
									"scores":	[-5.346415224972028]
								}, {
									"case":	132,
									"scores":	[-5.346415224972028]
								}, {
									"case":	133,
									"scores":	[-5.346415224972028]
								}, {
									"case":	134,
									"scores":	[-5.346415224972028]
								}, {
									"case":	135,
									"scores":	[-5.346415224972028]
								}, {
									"case":	136,
									"scores":	[-5.346415224972028]
								}, {
									"case":	137,
									"scores":	[-5.346415224972028]
								}, {
									"case":	138,
									"scores":	[-5.346415224972028]
								}, {
									"case":	139,
									"scores":	[-5.346415224972028]
								}, {
									"case":	140,
									"scores":	[-5.346415224972028]
								}, {
									"case":	141,
									"scores":	[-5.346415224972028]
								}, {
									"case":	142,
									"scores":	[-5.346415224972028]
								}, {
									"case":	143,
									"scores":	[-5.346415224972028]
								}, {
									"case":	144,
									"scores":	[-5.346415224972028]
								}, {
									"case":	145,
									"scores":	[-5.346415224972028]
								}, {
									"case":	146,
									"scores":	[-5.346415224972028]
								}, {
									"case":	147,
									"scores":	[-5.346415224972028]
								}, {
									"case":	148,
									"scores":	[-5.346415224972028]
								}, {
									"case":	149,
									"scores":	[-5.346415224972028]
								}, {
									"case":	150,
									"scores":	[-5.346415224972028]
								}, {
									"case":	151,
									"scores":	[-5.346415224972028]
								}, {
									"case":	152,
									"scores":	[-5.346415224972028]
								}, {
									"case":	153,
									"scores":	[-5.346415224972028]
								}, {
									"case":	154,
									"scores":	[-5.346415224972028]
								}, {
									"case":	155,
									"scores":	[-5.346415224972028]
								}, {
									"case":	156,
									"scores":	[-5.346415224972028]
								}, {
									"case":	157,
									"scores":	[-5.346415224972028]
								}, {
									"case":	158,
									"scores":	[-5.346415224972028]
								}, {
									"case":	159,
									"scores":	[-5.346415224972028]
								}, {
									"case":	160,
									"scores":	[-5.346415224972028]
								}, {
									"case":	161,
									"scores":	[-5.346415224972028]
								}, {
									"case":	162,
									"scores":	[-5.346415224972028]
								}, {
									"case":	163,
									"scores":	[-5.346415224972028]
								}, {
									"case":	164,
									"scores":	[-5.346415224972028]
								}, {
									"case":	165,
									"scores":	[-5.346415224972028]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [29]],
							"begin_line":	142,
							"begin_column":	2,
							"end_line":	142,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L142\", 18, &(intern), sizeof (intern), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(obj), sizeof (obj), &(class_type), sizeof (class_type), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags)))\n    memset(intern, 0, sizeof(spl_filesystem_object));\n", "_php_stream_copy_to_mem(intern, 0, sizeof(spl_filesystem_object), 0)", "_php_stream_copy_to_mem(intern, 0, sizeof(spl_filesystem_object), le_index_ptr)", "_php_stream_copy_to_stream_ex(intern, 0, sizeof(spl_filesystem_object), 0)", "_php_stream_get_line(intern, 0, sizeof(spl_filesystem_object), 0)", "_safe_erealloc(intern, 0, sizeof(spl_filesystem_object), 0)", "_safe_realloc(intern, 0, sizeof(spl_filesystem_object), 0)", "fread(intern, 0, sizeof(spl_filesystem_object), 0)", "fread_unlocked(intern, 0, sizeof(spl_filesystem_object), 0)", "fwrite(intern, 0, sizeof(spl_filesystem_object), 0)", "fwrite_unlocked(intern, 0, sizeof(spl_filesystem_object), 0)", "getpwent_r(intern, 0, sizeof(spl_filesystem_object), 0)", "mbrtowc(intern, 0, sizeof(spl_filesystem_object), 0)", "mbsrtowcs(intern, 0, sizeof(spl_filesystem_object), 0)", "php_mergesort(intern, 0, sizeof(spl_filesystem_object), 0)", "php_stristr(intern, 0, sizeof(spl_filesystem_object), 0)", "profil(intern, 0, sizeof(spl_filesystem_object), 0)", "qsort(intern, 0, sizeof(spl_filesystem_object), 0)", "strncasecmp_l(intern, 0, sizeof(spl_filesystem_object), 0)", "strxfrm_l(intern, 0, sizeof(spl_filesystem_object), 0)", "wcsncasecmp_l(intern, 0, sizeof(spl_filesystem_object), 0)", "wcsrtombs(intern, 0, sizeof(spl_filesystem_object), 0)", "wcsxfrm_l(intern, 0, sizeof(spl_filesystem_object), 0)", "zend_declare_class_constant(intern, 0, sizeof(spl_filesystem_object), 0)", "zend_declare_class_constant_bool(intern, 0, sizeof(spl_filesystem_object), 0)", "zend_declare_class_constant_long(intern, 0, sizeof(spl_filesystem_object), 0)", "zend_declare_class_constant_string(intern, 0, sizeof(spl_filesystem_object), 0)", "zend_qsort(intern, 0, sizeof(spl_filesystem_object), 0)", "{\n}\n", "Debug(intern, 0, sizeof(spl_filesystem_object))", "_IO_sgetn(intern, 0, sizeof(spl_filesystem_object))", "__stpncpy(intern, 0, sizeof(spl_filesystem_object))", "_php_stream_copy_to_stream(intern, 0, sizeof(spl_filesystem_object))", "_php_stream_printf(intern, 0, sizeof(spl_filesystem_object))", "_php_stream_read(intern, 0, sizeof(spl_filesystem_object))", "_php_stream_write(intern, 0, sizeof(spl_filesystem_object))", "_zend_mm_realloc(intern, 0, sizeof(spl_filesystem_object))", "ap_php_asprintf(intern, 0, sizeof(spl_filesystem_object))", "bcmp(intern, 0, sizeof(spl_filesystem_object))", "bcopy(intern, 0, sizeof(spl_filesystem_object))", "execl(intern, 0, sizeof(spl_filesystem_object))", "execle(intern, 0, sizeof(spl_filesystem_object))", "execlp(intern, 0, sizeof(spl_filesystem_object))", "fprintf(intern, 0, sizeof(spl_filesystem_object))", "fwprintf(intern, 0, sizeof(spl_filesystem_object))", "mbstowcs(intern, 0, sizeof(spl_filesystem_object))", "mbtowc(intern, 0, sizeof(spl_filesystem_object))", "memchr(intern, 0, sizeof(spl_filesystem_object))", "memcmp(intern, 0, sizeof(spl_filesystem_object))", "memcpy(intern, 0, sizeof(spl_filesystem_object))", "memmove(intern, 0, sizeof(spl_filesystem_object))", "memset(intern, 0, sizeof(spl_filesystem_object))", "mknod(intern, 0, sizeof(spl_filesystem_object))", "php_printf(intern, 0, sizeof(spl_filesystem_object))", "php_sprintf(intern, 0, sizeof(spl_filesystem_object))", "php_stream_locate_eol(intern, 0, sizeof(spl_filesystem_object))", "php_strlcat(intern, 0, sizeof(spl_filesystem_object))", "php_strlcpy(intern, 0, sizeof(spl_filesystem_object))", "posix_memalign(intern, 0, sizeof(spl_filesystem_object))", "printf(intern, 0, sizeof(spl_filesystem_object))", "readlink(intern, 0, sizeof(spl_filesystem_object))", "setbuffer(intern, 0, sizeof(spl_filesystem_object))", "sprintf(intern, 0, sizeof(spl_filesystem_object))", "stpncpy(intern, 0, sizeof(spl_filesystem_object))", "strncasecmp(intern, 0, sizeof(spl_filesystem_object))", "strncat(intern, 0, sizeof(spl_filesystem_object))", "strncmp(intern, 0, sizeof(spl_filesystem_object))", "strncpy(intern, 0, sizeof(spl_filesystem_object))", "strxfrm(intern, 0, sizeof(spl_filesystem_object))", "virtual_open(intern, 0, sizeof(spl_filesystem_object))", "wcpncpy(intern, 0, sizeof(spl_filesystem_object))", "wcsncasecmp(intern, 0, sizeof(spl_filesystem_object))", "wcsncat(intern, 0, sizeof(spl_filesystem_object))", "wcsncmp(intern, 0, sizeof(spl_filesystem_object))", "wcsncpy(intern, 0, sizeof(spl_filesystem_object))", "wcstombs(intern, 0, sizeof(spl_filesystem_object))", "wcsxfrm(intern, 0, sizeof(spl_filesystem_object))", "wmemchr(intern, 0, sizeof(spl_filesystem_object))", "wmemcmp(intern, 0, sizeof(spl_filesystem_object))", "wmemcpy(intern, 0, sizeof(spl_filesystem_object))", "wmemmove(intern, 0, sizeof(spl_filesystem_object))", "wmemset(intern, 0, sizeof(spl_filesystem_object))", "wprintf(intern, 0, sizeof(spl_filesystem_object))", "zend_class_implements(intern, 0, sizeof(spl_filesystem_object))", "zend_declare_class_constant_null(intern, 0, sizeof(spl_filesystem_object))", "zend_delete_global_variable_ex(intern, 0, sizeof(spl_filesystem_object))", "zend_fcall_info_argn(intern, 0, sizeof(spl_filesystem_object))", "zend_memrchr(intern, 0, sizeof(spl_filesystem_object))", "zend_ptr_stack_n_pop(intern, 0, sizeof(spl_filesystem_object))", "zend_ptr_stack_n_push(intern, 0, sizeof(spl_filesystem_object))", "memset((&class_type), 0, sizeof(spl_filesystem_object))", "memset((&intern), 0, sizeof(spl_filesystem_object))", "memset((&obj), 0, sizeof(spl_filesystem_object))", "memset((&retval), 0, sizeof(spl_filesystem_object))", "memset((intern), 0, sizeof(spl_filesystem_object))", "memset(intern, (0), sizeof(spl_filesystem_object))", "memset(intern, (class_type != 0), sizeof(spl_filesystem_object))", "memset(intern, (class_type == 0), sizeof(spl_filesystem_object))", "memset(intern, (intern != 0), sizeof(spl_filesystem_object))", "memset(intern, (intern == 0), sizeof(spl_filesystem_object))", "memset(intern, (obj != 0), sizeof(spl_filesystem_object))", "memset(intern, (obj == 0), sizeof(spl_filesystem_object))", "memset(intern, (retval != 0), sizeof(spl_filesystem_object))", "memset(intern, (retval == 0), sizeof(spl_filesystem_object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.085171122872028, -6.3521506849720275, -6.3521506849720275, -6.9074597359720276, -6.8470596749720283, -6.8470596749720283, -7.0405172149720281, -7.2208900349720277, -6.9431297849720277, -6.8849956949720283, -7.1736237949720278, -6.8849956949720283, -6.0937246649720276, -6.8849956949720283, -6.8849956949720283, -6.0937246649720276, -6.4157356949720281, -6.4157356949720281]
								}, {
									"case":	2,
									"scores":	[-5.346415224972028]
								}, {
									"case":	3,
									"scores":	[-5.346415224972028]
								}, {
									"case":	4,
									"scores":	[-5.346415224972028]
								}, {
									"case":	5,
									"scores":	[-5.346415224972028]
								}, {
									"case":	6,
									"scores":	[-5.346415224972028]
								}, {
									"case":	7,
									"scores":	[-5.346415224972028]
								}, {
									"case":	8,
									"scores":	[-5.346415224972028]
								}, {
									"case":	9,
									"scores":	[-5.346415224972028]
								}, {
									"case":	10,
									"scores":	[-5.346415224972028]
								}, {
									"case":	11,
									"scores":	[-5.346415224972028]
								}, {
									"case":	12,
									"scores":	[-5.346415224972028]
								}, {
									"case":	13,
									"scores":	[-5.346415224972028]
								}, {
									"case":	14,
									"scores":	[-5.346415224972028]
								}, {
									"case":	15,
									"scores":	[-5.346415224972028]
								}, {
									"case":	16,
									"scores":	[-5.346415224972028]
								}, {
									"case":	17,
									"scores":	[-5.346415224972028]
								}, {
									"case":	18,
									"scores":	[-5.346415224972028]
								}, {
									"case":	19,
									"scores":	[-5.346415224972028]
								}, {
									"case":	20,
									"scores":	[-5.346415224972028]
								}, {
									"case":	21,
									"scores":	[-5.346415224972028]
								}, {
									"case":	22,
									"scores":	[-5.346415224972028]
								}, {
									"case":	23,
									"scores":	[-5.346415224972028]
								}, {
									"case":	24,
									"scores":	[-5.346415224972028]
								}, {
									"case":	25,
									"scores":	[-5.346415224972028]
								}, {
									"case":	26,
									"scores":	[-5.346415224972028]
								}, {
									"case":	27,
									"scores":	[-5.346415224972028]
								}, {
									"case":	28,
									"scores":	[-5.346415224972028]
								}, {
									"case":	29,
									"scores":	[-5.346415224972028]
								}, {
									"case":	30,
									"scores":	[-5.346415224972028]
								}, {
									"case":	31,
									"scores":	[-5.346415224972028]
								}, {
									"case":	32,
									"scores":	[-5.346415224972028]
								}, {
									"case":	33,
									"scores":	[-5.346415224972028]
								}, {
									"case":	34,
									"scores":	[-5.346415224972028]
								}, {
									"case":	35,
									"scores":	[-5.346415224972028]
								}, {
									"case":	36,
									"scores":	[-5.346415224972028]
								}, {
									"case":	37,
									"scores":	[-5.346415224972028]
								}, {
									"case":	38,
									"scores":	[-5.346415224972028]
								}, {
									"case":	39,
									"scores":	[-5.346415224972028]
								}, {
									"case":	40,
									"scores":	[-5.346415224972028]
								}, {
									"case":	41,
									"scores":	[-5.346415224972028]
								}, {
									"case":	42,
									"scores":	[-5.346415224972028]
								}, {
									"case":	43,
									"scores":	[-5.346415224972028]
								}, {
									"case":	44,
									"scores":	[-5.346415224972028]
								}, {
									"case":	45,
									"scores":	[-5.346415224972028]
								}, {
									"case":	46,
									"scores":	[-5.346415224972028]
								}, {
									"case":	47,
									"scores":	[-5.346415224972028]
								}, {
									"case":	48,
									"scores":	[-5.346415224972028]
								}, {
									"case":	49,
									"scores":	[-5.346415224972028]
								}, {
									"case":	50,
									"scores":	[-5.346415224972028]
								}, {
									"case":	51,
									"scores":	[-5.346415224972028]
								}, {
									"case":	52,
									"scores":	[-5.346415224972028]
								}, {
									"case":	53,
									"scores":	[-5.346415224972028]
								}, {
									"case":	54,
									"scores":	[-5.346415224972028]
								}, {
									"case":	55,
									"scores":	[-5.346415224972028]
								}, {
									"case":	56,
									"scores":	[-5.346415224972028]
								}, {
									"case":	57,
									"scores":	[-5.346415224972028]
								}, {
									"case":	58,
									"scores":	[-5.346415224972028]
								}, {
									"case":	59,
									"scores":	[-5.346415224972028]
								}, {
									"case":	60,
									"scores":	[-5.346415224972028]
								}, {
									"case":	61,
									"scores":	[-5.346415224972028]
								}, {
									"case":	62,
									"scores":	[-5.346415224972028]
								}, {
									"case":	63,
									"scores":	[-5.346415224972028]
								}, {
									"case":	64,
									"scores":	[-5.346415224972028]
								}, {
									"case":	65,
									"scores":	[-5.346415224972028]
								}, {
									"case":	66,
									"scores":	[-5.346415224972028]
								}, {
									"case":	67,
									"scores":	[-5.346415224972028]
								}, {
									"case":	68,
									"scores":	[-5.346415224972028]
								}, {
									"case":	69,
									"scores":	[-5.346415224972028]
								}, {
									"case":	70,
									"scores":	[-5.346415224972028]
								}, {
									"case":	71,
									"scores":	[-5.346415224972028]
								}, {
									"case":	72,
									"scores":	[-5.346415224972028]
								}, {
									"case":	73,
									"scores":	[-5.346415224972028]
								}, {
									"case":	74,
									"scores":	[-5.346415224972028]
								}, {
									"case":	75,
									"scores":	[-5.346415224972028]
								}, {
									"case":	76,
									"scores":	[-5.346415224972028]
								}, {
									"case":	77,
									"scores":	[-5.346415224972028]
								}, {
									"case":	78,
									"scores":	[-5.346415224972028]
								}, {
									"case":	79,
									"scores":	[-5.346415224972028]
								}, {
									"case":	80,
									"scores":	[-5.346415224972028]
								}, {
									"case":	81,
									"scores":	[-5.346415224972028]
								}, {
									"case":	82,
									"scores":	[-5.346415224972028]
								}, {
									"case":	83,
									"scores":	[-5.346415224972028]
								}, {
									"case":	84,
									"scores":	[-5.346415224972028]
								}, {
									"case":	85,
									"scores":	[-5.346415224972028]
								}, {
									"case":	86,
									"scores":	[-5.346415224972028]
								}, {
									"case":	87,
									"scores":	[-5.346415224972028]
								}, {
									"case":	88,
									"scores":	[-5.346415224972028]
								}, {
									"case":	89,
									"scores":	[-5.346415224972028]
								}, {
									"case":	90,
									"scores":	[-5.346415224972028]
								}, {
									"case":	91,
									"scores":	[-5.346415224972028]
								}, {
									"case":	92,
									"scores":	[-5.346415224972028]
								}, {
									"case":	93,
									"scores":	[-5.346415224972028]
								}, {
									"case":	94,
									"scores":	[-5.346415224972028]
								}, {
									"case":	95,
									"scores":	[-5.346415224972028]
								}, {
									"case":	96,
									"scores":	[-5.346415224972028]
								}, {
									"case":	97,
									"scores":	[-5.346415224972028]
								}, {
									"case":	98,
									"scores":	[-5.346415224972028]
								}, {
									"case":	99,
									"scores":	[-5.346415224972028]
								}, {
									"case":	100,
									"scores":	[-5.346415224972028]
								}, {
									"case":	101,
									"scores":	[-5.346415224972028]
								}, {
									"case":	102,
									"scores":	[-5.346415224972028]
								}, {
									"case":	103,
									"scores":	[-5.346415224972028]
								}, {
									"case":	104,
									"scores":	[-5.346415224972028]
								}]
						}]
				}, {
					"line":	143,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	144,
							"begin_column":	0,
							"end_line":	144,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	6,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	7,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	8,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	9,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	10,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	11,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	12,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	13,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	14,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	15,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	16,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	17,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	18,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	19,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	20,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	21,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	22,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	23,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	24,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	25,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	26,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	27,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	28,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	29,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	30,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	31,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	32,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	33,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	34,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	35,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	36,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	37,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	38,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	39,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	40,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	41,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	42,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	43,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	44,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	45,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	46,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	47,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	48,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	49,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	50,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	51,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	52,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	53,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	54,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	55,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	56,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	57,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	58,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	59,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	60,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	61,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	62,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	63,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	64,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	65,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	66,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	67,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	68,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	69,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	70,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	71,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	72,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	73,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	74,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	75,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	76,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	77,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	78,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	79,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	80,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	81,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	82,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	83,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	84,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	85,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	86,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	87,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	88,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	89,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	90,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	91,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	92,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	93,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	94,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	95,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	96,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	97,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	98,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	99,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	100,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	101,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	102,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	103,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	104,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	105,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	106,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	107,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	108,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	109,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	110,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	111,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	112,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	113,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	114,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	115,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	116,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	117,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	118,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	119,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	120,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	121,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	122,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	123,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	124,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	125,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	126,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	127,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	128,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	129,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	130,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	131,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	132,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	133,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	134,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	135,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	136,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	137,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	138,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	139,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	140,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	141,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	142,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	143,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	144,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	145,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	146,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	147,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	148,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	149,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	150,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	151,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	152,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	153,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	154,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	155,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	156,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	157,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	158,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	159,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	160,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	161,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	162,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	163,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	164,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	165,
									"scores":	[-5.3262125176545085]
								}]
						}, {
							"switch":	5,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	144,
							"begin_column":	2,
							"end_line":	144,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L144\", 158, &(intern), sizeof (intern), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(obj), sizeof (obj), &(class_type), sizeof (class_type), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileObject->type), sizeof (spl_ce_SplFileObject->type), &(spl_ce_SplFileObject->name), sizeof (spl_ce_SplFileObject->name), &(spl_ce_SplFileObject->name_length), sizeof (spl_ce_SplFileObject->name_length), &(spl_ce_SplFileObject->parent), sizeof (spl_ce_SplFileObject->parent), &(spl_ce_SplFileObject->refcount), sizeof (spl_ce_SplFileObject->refcount), &(spl_ce_SplFileObject->ce_flags), sizeof (spl_ce_SplFileObject->ce_flags), &(spl_ce_SplFileObject->default_properties_table), sizeof (spl_ce_SplFileObject->default_properties_table), &(spl_ce_SplFileObject->default_static_members_table), sizeof (spl_ce_SplFileObject->default_static_members_table), &(spl_ce_SplFileObject->static_members_table), sizeof (spl_ce_SplFileObject->static_members_table), &(spl_ce_SplFileObject->default_properties_count), sizeof (spl_ce_SplFileObject->default_properties_count), &(spl_ce_SplFileObject->default_static_members_count), sizeof (spl_ce_SplFileObject->default_static_members_count), &(spl_ce_SplFileObject->constructor), sizeof (spl_ce_SplFileObject->constructor), &(spl_ce_SplFileObject->destructor), sizeof (spl_ce_SplFileObject->destructor), &(spl_ce_SplFileObject->clone), sizeof (spl_ce_SplFileObject->clone), &(spl_ce_SplFileObject->__get), sizeof (spl_ce_SplFileObject->__get), &(spl_ce_SplFileObject->__set), sizeof (spl_ce_SplFileObject->__set), &(spl_ce_SplFileObject->__unset), sizeof (spl_ce_SplFileObject->__unset), &(spl_ce_SplFileObject->__isset), sizeof (spl_ce_SplFileObject->__isset), &(spl_ce_SplFileObject->__call), sizeof (spl_ce_SplFileObject->__call), &(spl_ce_SplFileObject->__callstatic), sizeof (spl_ce_SplFileObject->__callstatic), &(spl_ce_SplFileObject->__tostring), sizeof (spl_ce_SplFileObject->__tostring), &(spl_ce_SplFileObject->serialize_func), sizeof (spl_ce_SplFileObject->serialize_func), &(spl_ce_SplFileObject->unserialize_func), sizeof (spl_ce_SplFileObject->unserialize_func), &(spl_ce_SplFileObject->create_object), sizeof (spl_ce_SplFileObject->create_object), &(spl_ce_SplFileObject->get_iterator), sizeof (spl_ce_SplFileObject->get_iterator), &(spl_ce_SplFileObject->interface_gets_implemented), sizeof (spl_ce_SplFileObject->interface_gets_implemented), &(spl_ce_SplFileObject->get_static_method), sizeof (spl_ce_SplFileObject->get_static_method), &(spl_ce_SplFileObject->serialize), sizeof (spl_ce_SplFileObject->serialize), &(spl_ce_SplFileObject->unserialize), sizeof (spl_ce_SplFileObject->unserialize), &(spl_ce_SplFileObject->interfaces), sizeof (spl_ce_SplFileObject->interfaces), &(spl_ce_SplFileObject->num_interfaces), sizeof (spl_ce_SplFileObject->num_interfaces), &(spl_ce_SplFileObject->traits), sizeof (spl_ce_SplFileObject->traits), &(spl_ce_SplFileObject->num_traits), sizeof (spl_ce_SplFileObject->num_traits), &(spl_ce_SplFileObject->trait_aliases), sizeof (spl_ce_SplFileObject->trait_aliases), &(spl_ce_SplFileObject->trait_precedences), sizeof (spl_ce_SplFileObject->trait_precedences), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileObject->type), sizeof (spl_ce_SplFileObject->type), &(spl_ce_SplFileObject->name), sizeof (spl_ce_SplFileObject->name), &(spl_ce_SplFileObject->name_length), sizeof (spl_ce_SplFileObject->name_length), &(spl_ce_SplFileObject->parent), sizeof (spl_ce_SplFileObject->parent), &(spl_ce_SplFileObject->refcount), sizeof (spl_ce_SplFileObject->refcount), &(spl_ce_SplFileObject->ce_flags), sizeof (spl_ce_SplFileObject->ce_flags), &(spl_ce_SplFileObject->default_properties_table), sizeof (spl_ce_SplFileObject->default_properties_table), &(spl_ce_SplFileObject->default_static_members_table), sizeof (spl_ce_SplFileObject->default_static_members_table), &(spl_ce_SplFileObject->static_members_table), sizeof (spl_ce_SplFileObject->static_members_table), &(spl_ce_SplFileObject->default_properties_count), sizeof (spl_ce_SplFileObject->default_properties_count), &(spl_ce_SplFileObject->default_static_members_count), sizeof (spl_ce_SplFileObject->default_static_members_count), &(spl_ce_SplFileObject->constructor), sizeof (spl_ce_SplFileObject->constructor), &(spl_ce_SplFileObject->destructor), sizeof (spl_ce_SplFileObject->destructor), &(spl_ce_SplFileObject->clone), sizeof (spl_ce_SplFileObject->clone), &(spl_ce_SplFileObject->__get), sizeof (spl_ce_SplFileObject->__get), &(spl_ce_SplFileObject->__set), sizeof (spl_ce_SplFileObject->__set), &(spl_ce_SplFileObject->__unset), sizeof (spl_ce_SplFileObject->__unset), &(spl_ce_SplFileObject->__isset), sizeof (spl_ce_SplFileObject->__isset), &(spl_ce_SplFileObject->__call), sizeof (spl_ce_SplFileObject->__call), &(spl_ce_SplFileObject->__callstatic), sizeof (spl_ce_SplFileObject->__callstatic), &(spl_ce_SplFileObject->__tostring), sizeof (spl_ce_SplFileObject->__tostring), &(spl_ce_SplFileObject->serialize_func), sizeof (spl_ce_SplFileObject->serialize_func), &(spl_ce_SplFileObject->unserialize_func), sizeof (spl_ce_SplFileObject->unserialize_func), &(spl_ce_SplFileObject->create_object), sizeof (spl_ce_SplFileObject->create_object), &(spl_ce_SplFileObject->get_iterator), sizeof (spl_ce_SplFileObject->get_iterator), &(spl_ce_SplFileObject->interface_gets_implemented), sizeof (spl_ce_SplFileObject->interface_gets_implemented), &(spl_ce_SplFileObject->get_static_method), sizeof (spl_ce_SplFileObject->get_static_method), &(spl_ce_SplFileObject->serialize), sizeof (spl_ce_SplFileObject->serialize), &(spl_ce_SplFileObject->unserialize), sizeof (spl_ce_SplFileObject->unserialize), &(spl_ce_SplFileObject->interfaces), sizeof (spl_ce_SplFileObject->interfaces), &(spl_ce_SplFileObject->num_interfaces), sizeof (spl_ce_SplFileObject->num_interfaces), &(spl_ce_SplFileObject->traits), sizeof (spl_ce_SplFileObject->traits), &(spl_ce_SplFileObject->num_traits), sizeof (spl_ce_SplFileObject->num_traits), &(spl_ce_SplFileObject->trait_aliases), sizeof (spl_ce_SplFileObject->trait_aliases), &(spl_ce_SplFileObject->trait_precedences), sizeof (spl_ce_SplFileObject->trait_precedences)))\n    intern->file_class = spl_ce_SplFileObject;\n", "{\n}\n", "intern->file_class = (&class_type)", "intern->file_class = (&intern)", "intern->file_class = (&obj)", "intern->file_class = (&retval)", "intern->file_class = (class_type)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0118318715545085, -6.4304404276545082, -6.4304404276545082, -7.00008160865451, -6.3116659776545081, -6.3116659776545081, -6.8669750286545082, -7.1804053276545083, -6.9358205866545086, -6.84451098765451, -7.1331390876545084, -6.84451098765451, -6.0532399576545082, -6.84451098765451, -6.84451098765451, -6.0532399576545082, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.0532399576545082, -7.1331390876545084, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.0532399576545082, -7.1331390876545084, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.0532399576545082, -7.1331390876545084, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.0532399576545082, -7.1331390876545084, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.84451098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.37525098765451, -6.84451098765451, -6.84451098765451]
								}, {
									"case":	2,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	3,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	4,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	5,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	6,
									"scores":	[-5.3262125176545085]
								}, {
									"case":	7,
									"scores":	[-5.3262125176545085]
								}]
						}]
				}, {
					"line":	144,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	145,
							"begin_column":	0,
							"end_line":	145,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.30600981033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}, {
									"case":	4,
									"scores":	[-5.30600981033699]
								}, {
									"case":	5,
									"scores":	[-5.30600981033699]
								}, {
									"case":	6,
									"scores":	[-5.30600981033699]
								}, {
									"case":	7,
									"scores":	[-5.30600981033699]
								}, {
									"case":	8,
									"scores":	[-5.30600981033699]
								}, {
									"case":	9,
									"scores":	[-5.30600981033699]
								}, {
									"case":	10,
									"scores":	[-5.30600981033699]
								}, {
									"case":	11,
									"scores":	[-5.30600981033699]
								}, {
									"case":	12,
									"scores":	[-5.30600981033699]
								}, {
									"case":	13,
									"scores":	[-5.30600981033699]
								}, {
									"case":	14,
									"scores":	[-5.30600981033699]
								}, {
									"case":	15,
									"scores":	[-5.30600981033699]
								}, {
									"case":	16,
									"scores":	[-5.30600981033699]
								}, {
									"case":	17,
									"scores":	[-5.30600981033699]
								}, {
									"case":	18,
									"scores":	[-5.30600981033699]
								}, {
									"case":	19,
									"scores":	[-5.30600981033699]
								}, {
									"case":	20,
									"scores":	[-5.30600981033699]
								}, {
									"case":	21,
									"scores":	[-5.30600981033699]
								}, {
									"case":	22,
									"scores":	[-5.30600981033699]
								}, {
									"case":	23,
									"scores":	[-5.30600981033699]
								}, {
									"case":	24,
									"scores":	[-5.30600981033699]
								}, {
									"case":	25,
									"scores":	[-5.30600981033699]
								}, {
									"case":	26,
									"scores":	[-5.30600981033699]
								}, {
									"case":	27,
									"scores":	[-5.30600981033699]
								}, {
									"case":	28,
									"scores":	[-5.30600981033699]
								}, {
									"case":	29,
									"scores":	[-5.30600981033699]
								}, {
									"case":	30,
									"scores":	[-5.30600981033699]
								}, {
									"case":	31,
									"scores":	[-5.30600981033699]
								}, {
									"case":	32,
									"scores":	[-5.30600981033699]
								}, {
									"case":	33,
									"scores":	[-5.30600981033699]
								}, {
									"case":	34,
									"scores":	[-5.30600981033699]
								}, {
									"case":	35,
									"scores":	[-5.30600981033699]
								}, {
									"case":	36,
									"scores":	[-5.30600981033699]
								}, {
									"case":	37,
									"scores":	[-5.30600981033699]
								}, {
									"case":	38,
									"scores":	[-5.30600981033699]
								}, {
									"case":	39,
									"scores":	[-5.30600981033699]
								}, {
									"case":	40,
									"scores":	[-5.30600981033699]
								}, {
									"case":	41,
									"scores":	[-5.30600981033699]
								}, {
									"case":	42,
									"scores":	[-5.30600981033699]
								}, {
									"case":	43,
									"scores":	[-5.30600981033699]
								}, {
									"case":	44,
									"scores":	[-5.30600981033699]
								}, {
									"case":	45,
									"scores":	[-5.30600981033699]
								}, {
									"case":	46,
									"scores":	[-5.30600981033699]
								}, {
									"case":	47,
									"scores":	[-5.30600981033699]
								}, {
									"case":	48,
									"scores":	[-5.30600981033699]
								}, {
									"case":	49,
									"scores":	[-5.30600981033699]
								}, {
									"case":	50,
									"scores":	[-5.30600981033699]
								}, {
									"case":	51,
									"scores":	[-5.30600981033699]
								}, {
									"case":	52,
									"scores":	[-5.30600981033699]
								}, {
									"case":	53,
									"scores":	[-5.30600981033699]
								}, {
									"case":	54,
									"scores":	[-5.30600981033699]
								}, {
									"case":	55,
									"scores":	[-5.30600981033699]
								}, {
									"case":	56,
									"scores":	[-5.30600981033699]
								}, {
									"case":	57,
									"scores":	[-5.30600981033699]
								}, {
									"case":	58,
									"scores":	[-5.30600981033699]
								}, {
									"case":	59,
									"scores":	[-5.30600981033699]
								}, {
									"case":	60,
									"scores":	[-5.30600981033699]
								}, {
									"case":	61,
									"scores":	[-5.30600981033699]
								}, {
									"case":	62,
									"scores":	[-5.30600981033699]
								}, {
									"case":	63,
									"scores":	[-5.30600981033699]
								}, {
									"case":	64,
									"scores":	[-5.30600981033699]
								}, {
									"case":	65,
									"scores":	[-5.30600981033699]
								}, {
									"case":	66,
									"scores":	[-5.30600981033699]
								}, {
									"case":	67,
									"scores":	[-5.30600981033699]
								}, {
									"case":	68,
									"scores":	[-5.30600981033699]
								}, {
									"case":	69,
									"scores":	[-5.30600981033699]
								}, {
									"case":	70,
									"scores":	[-5.30600981033699]
								}, {
									"case":	71,
									"scores":	[-5.30600981033699]
								}, {
									"case":	72,
									"scores":	[-5.30600981033699]
								}, {
									"case":	73,
									"scores":	[-5.30600981033699]
								}, {
									"case":	74,
									"scores":	[-5.30600981033699]
								}, {
									"case":	75,
									"scores":	[-5.30600981033699]
								}, {
									"case":	76,
									"scores":	[-5.30600981033699]
								}, {
									"case":	77,
									"scores":	[-5.30600981033699]
								}, {
									"case":	78,
									"scores":	[-5.30600981033699]
								}, {
									"case":	79,
									"scores":	[-5.30600981033699]
								}, {
									"case":	80,
									"scores":	[-5.30600981033699]
								}, {
									"case":	81,
									"scores":	[-5.30600981033699]
								}, {
									"case":	82,
									"scores":	[-5.30600981033699]
								}, {
									"case":	83,
									"scores":	[-5.30600981033699]
								}, {
									"case":	84,
									"scores":	[-5.30600981033699]
								}, {
									"case":	85,
									"scores":	[-5.30600981033699]
								}, {
									"case":	86,
									"scores":	[-5.30600981033699]
								}, {
									"case":	87,
									"scores":	[-5.30600981033699]
								}, {
									"case":	88,
									"scores":	[-5.30600981033699]
								}, {
									"case":	89,
									"scores":	[-5.30600981033699]
								}, {
									"case":	90,
									"scores":	[-5.30600981033699]
								}, {
									"case":	91,
									"scores":	[-5.30600981033699]
								}, {
									"case":	92,
									"scores":	[-5.30600981033699]
								}, {
									"case":	93,
									"scores":	[-5.30600981033699]
								}, {
									"case":	94,
									"scores":	[-5.30600981033699]
								}, {
									"case":	95,
									"scores":	[-5.30600981033699]
								}, {
									"case":	96,
									"scores":	[-5.30600981033699]
								}, {
									"case":	97,
									"scores":	[-5.30600981033699]
								}, {
									"case":	98,
									"scores":	[-5.30600981033699]
								}, {
									"case":	99,
									"scores":	[-5.30600981033699]
								}, {
									"case":	100,
									"scores":	[-5.30600981033699]
								}, {
									"case":	101,
									"scores":	[-5.30600981033699]
								}, {
									"case":	102,
									"scores":	[-5.30600981033699]
								}, {
									"case":	103,
									"scores":	[-5.30600981033699]
								}, {
									"case":	104,
									"scores":	[-5.30600981033699]
								}, {
									"case":	105,
									"scores":	[-5.30600981033699]
								}, {
									"case":	106,
									"scores":	[-5.30600981033699]
								}, {
									"case":	107,
									"scores":	[-5.30600981033699]
								}, {
									"case":	108,
									"scores":	[-5.30600981033699]
								}, {
									"case":	109,
									"scores":	[-5.30600981033699]
								}, {
									"case":	110,
									"scores":	[-5.30600981033699]
								}, {
									"case":	111,
									"scores":	[-5.30600981033699]
								}, {
									"case":	112,
									"scores":	[-5.30600981033699]
								}, {
									"case":	113,
									"scores":	[-5.30600981033699]
								}, {
									"case":	114,
									"scores":	[-5.30600981033699]
								}, {
									"case":	115,
									"scores":	[-5.30600981033699]
								}, {
									"case":	116,
									"scores":	[-5.30600981033699]
								}, {
									"case":	117,
									"scores":	[-5.30600981033699]
								}, {
									"case":	118,
									"scores":	[-5.30600981033699]
								}, {
									"case":	119,
									"scores":	[-5.30600981033699]
								}, {
									"case":	120,
									"scores":	[-5.30600981033699]
								}, {
									"case":	121,
									"scores":	[-5.30600981033699]
								}, {
									"case":	122,
									"scores":	[-5.30600981033699]
								}, {
									"case":	123,
									"scores":	[-5.30600981033699]
								}, {
									"case":	124,
									"scores":	[-5.30600981033699]
								}, {
									"case":	125,
									"scores":	[-5.30600981033699]
								}, {
									"case":	126,
									"scores":	[-5.30600981033699]
								}, {
									"case":	127,
									"scores":	[-5.30600981033699]
								}, {
									"case":	128,
									"scores":	[-5.30600981033699]
								}, {
									"case":	129,
									"scores":	[-5.30600981033699]
								}, {
									"case":	130,
									"scores":	[-5.30600981033699]
								}, {
									"case":	131,
									"scores":	[-5.30600981033699]
								}, {
									"case":	132,
									"scores":	[-5.30600981033699]
								}, {
									"case":	133,
									"scores":	[-5.30600981033699]
								}, {
									"case":	134,
									"scores":	[-5.30600981033699]
								}, {
									"case":	135,
									"scores":	[-5.30600981033699]
								}, {
									"case":	136,
									"scores":	[-5.30600981033699]
								}, {
									"case":	137,
									"scores":	[-5.30600981033699]
								}, {
									"case":	138,
									"scores":	[-5.30600981033699]
								}, {
									"case":	139,
									"scores":	[-5.30600981033699]
								}, {
									"case":	140,
									"scores":	[-5.30600981033699]
								}, {
									"case":	141,
									"scores":	[-5.30600981033699]
								}, {
									"case":	142,
									"scores":	[-5.30600981033699]
								}, {
									"case":	143,
									"scores":	[-5.30600981033699]
								}, {
									"case":	144,
									"scores":	[-5.30600981033699]
								}, {
									"case":	145,
									"scores":	[-5.30600981033699]
								}, {
									"case":	146,
									"scores":	[-5.30600981033699]
								}, {
									"case":	147,
									"scores":	[-5.30600981033699]
								}, {
									"case":	148,
									"scores":	[-5.30600981033699]
								}, {
									"case":	149,
									"scores":	[-5.30600981033699]
								}, {
									"case":	150,
									"scores":	[-5.30600981033699]
								}, {
									"case":	151,
									"scores":	[-5.30600981033699]
								}, {
									"case":	152,
									"scores":	[-5.30600981033699]
								}, {
									"case":	153,
									"scores":	[-5.30600981033699]
								}, {
									"case":	154,
									"scores":	[-5.30600981033699]
								}, {
									"case":	155,
									"scores":	[-5.30600981033699]
								}, {
									"case":	156,
									"scores":	[-5.30600981033699]
								}, {
									"case":	157,
									"scores":	[-5.30600981033699]
								}, {
									"case":	158,
									"scores":	[-5.30600981033699]
								}, {
									"case":	159,
									"scores":	[-5.30600981033699]
								}, {
									"case":	160,
									"scores":	[-5.30600981033699]
								}, {
									"case":	161,
									"scores":	[-5.30600981033699]
								}, {
									"case":	162,
									"scores":	[-5.30600981033699]
								}, {
									"case":	163,
									"scores":	[-5.30600981033699]
								}, {
									"case":	164,
									"scores":	[-5.30600981033699]
								}, {
									"case":	165,
									"scores":	[-5.30600981033699]
								}]
						}, {
							"switch":	7,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	145,
							"begin_column":	2,
							"end_line":	145,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L145\", 158, &(intern), sizeof (intern), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(obj), sizeof (obj), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(class_type), sizeof (class_type), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileObject->type), sizeof (spl_ce_SplFileObject->type), &(spl_ce_SplFileObject->name), sizeof (spl_ce_SplFileObject->name), &(spl_ce_SplFileObject->name_length), sizeof (spl_ce_SplFileObject->name_length), &(spl_ce_SplFileObject->parent), sizeof (spl_ce_SplFileObject->parent), &(spl_ce_SplFileObject->refcount), sizeof (spl_ce_SplFileObject->refcount), &(spl_ce_SplFileObject->ce_flags), sizeof (spl_ce_SplFileObject->ce_flags), &(spl_ce_SplFileObject->default_properties_table), sizeof (spl_ce_SplFileObject->default_properties_table), &(spl_ce_SplFileObject->default_static_members_table), sizeof (spl_ce_SplFileObject->default_static_members_table), &(spl_ce_SplFileObject->static_members_table), sizeof (spl_ce_SplFileObject->static_members_table), &(spl_ce_SplFileObject->default_properties_count), sizeof (spl_ce_SplFileObject->default_properties_count), &(spl_ce_SplFileObject->default_static_members_count), sizeof (spl_ce_SplFileObject->default_static_members_count), &(spl_ce_SplFileObject->constructor), sizeof (spl_ce_SplFileObject->constructor), &(spl_ce_SplFileObject->destructor), sizeof (spl_ce_SplFileObject->destructor), &(spl_ce_SplFileObject->clone), sizeof (spl_ce_SplFileObject->clone), &(spl_ce_SplFileObject->__get), sizeof (spl_ce_SplFileObject->__get), &(spl_ce_SplFileObject->__set), sizeof (spl_ce_SplFileObject->__set), &(spl_ce_SplFileObject->__unset), sizeof (spl_ce_SplFileObject->__unset), &(spl_ce_SplFileObject->__isset), sizeof (spl_ce_SplFileObject->__isset), &(spl_ce_SplFileObject->__call), sizeof (spl_ce_SplFileObject->__call), &(spl_ce_SplFileObject->__callstatic), sizeof (spl_ce_SplFileObject->__callstatic), &(spl_ce_SplFileObject->__tostring), sizeof (spl_ce_SplFileObject->__tostring), &(spl_ce_SplFileObject->serialize_func), sizeof (spl_ce_SplFileObject->serialize_func), &(spl_ce_SplFileObject->unserialize_func), sizeof (spl_ce_SplFileObject->unserialize_func), &(spl_ce_SplFileObject->create_object), sizeof (spl_ce_SplFileObject->create_object), &(spl_ce_SplFileObject->get_iterator), sizeof (spl_ce_SplFileObject->get_iterator), &(spl_ce_SplFileObject->interface_gets_implemented), sizeof (spl_ce_SplFileObject->interface_gets_implemented), &(spl_ce_SplFileObject->get_static_method), sizeof (spl_ce_SplFileObject->get_static_method), &(spl_ce_SplFileObject->serialize), sizeof (spl_ce_SplFileObject->serialize), &(spl_ce_SplFileObject->unserialize), sizeof (spl_ce_SplFileObject->unserialize), &(spl_ce_SplFileObject->interfaces), sizeof (spl_ce_SplFileObject->interfaces), &(spl_ce_SplFileObject->num_interfaces), sizeof (spl_ce_SplFileObject->num_interfaces), &(spl_ce_SplFileObject->traits), sizeof (spl_ce_SplFileObject->traits), &(spl_ce_SplFileObject->num_traits), sizeof (spl_ce_SplFileObject->num_traits), &(spl_ce_SplFileObject->trait_aliases), sizeof (spl_ce_SplFileObject->trait_aliases), &(spl_ce_SplFileObject->trait_precedences), sizeof (spl_ce_SplFileObject->trait_precedences), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileObject->type), sizeof (spl_ce_SplFileObject->type), &(spl_ce_SplFileObject->name), sizeof (spl_ce_SplFileObject->name), &(spl_ce_SplFileObject->name_length), sizeof (spl_ce_SplFileObject->name_length), &(spl_ce_SplFileObject->parent), sizeof (spl_ce_SplFileObject->parent), &(spl_ce_SplFileObject->refcount), sizeof (spl_ce_SplFileObject->refcount), &(spl_ce_SplFileObject->ce_flags), sizeof (spl_ce_SplFileObject->ce_flags), &(spl_ce_SplFileObject->default_properties_table), sizeof (spl_ce_SplFileObject->default_properties_table), &(spl_ce_SplFileObject->default_static_members_table), sizeof (spl_ce_SplFileObject->default_static_members_table), &(spl_ce_SplFileObject->static_members_table), sizeof (spl_ce_SplFileObject->static_members_table), &(spl_ce_SplFileObject->default_properties_count), sizeof (spl_ce_SplFileObject->default_properties_count), &(spl_ce_SplFileObject->default_static_members_count), sizeof (spl_ce_SplFileObject->default_static_members_count), &(spl_ce_SplFileObject->constructor), sizeof (spl_ce_SplFileObject->constructor), &(spl_ce_SplFileObject->destructor), sizeof (spl_ce_SplFileObject->destructor), &(spl_ce_SplFileObject->clone), sizeof (spl_ce_SplFileObject->clone), &(spl_ce_SplFileObject->__get), sizeof (spl_ce_SplFileObject->__get), &(spl_ce_SplFileObject->__set), sizeof (spl_ce_SplFileObject->__set), &(spl_ce_SplFileObject->__unset), sizeof (spl_ce_SplFileObject->__unset), &(spl_ce_SplFileObject->__isset), sizeof (spl_ce_SplFileObject->__isset), &(spl_ce_SplFileObject->__call), sizeof (spl_ce_SplFileObject->__call), &(spl_ce_SplFileObject->__callstatic), sizeof (spl_ce_SplFileObject->__callstatic), &(spl_ce_SplFileObject->__tostring), sizeof (spl_ce_SplFileObject->__tostring), &(spl_ce_SplFileObject->serialize_func), sizeof (spl_ce_SplFileObject->serialize_func), &(spl_ce_SplFileObject->unserialize_func), sizeof (spl_ce_SplFileObject->unserialize_func), &(spl_ce_SplFileObject->create_object), sizeof (spl_ce_SplFileObject->create_object), &(spl_ce_SplFileObject->get_iterator), sizeof (spl_ce_SplFileObject->get_iterator), &(spl_ce_SplFileObject->interface_gets_implemented), sizeof (spl_ce_SplFileObject->interface_gets_implemented), &(spl_ce_SplFileObject->get_static_method), sizeof (spl_ce_SplFileObject->get_static_method), &(spl_ce_SplFileObject->serialize), sizeof (spl_ce_SplFileObject->serialize), &(spl_ce_SplFileObject->unserialize), sizeof (spl_ce_SplFileObject->unserialize), &(spl_ce_SplFileObject->interfaces), sizeof (spl_ce_SplFileObject->interfaces), &(spl_ce_SplFileObject->num_interfaces), sizeof (spl_ce_SplFileObject->num_interfaces), &(spl_ce_SplFileObject->traits), sizeof (spl_ce_SplFileObject->traits), &(spl_ce_SplFileObject->num_traits), sizeof (spl_ce_SplFileObject->num_traits), &(spl_ce_SplFileObject->trait_aliases), sizeof (spl_ce_SplFileObject->trait_aliases), &(spl_ce_SplFileObject->trait_precedences), sizeof (spl_ce_SplFileObject->trait_precedences)))\n    intern->info_class = spl_ce_SplFileInfo;\n", "{\n}\n", "intern->info_class = (&class_type)", "intern->info_class = (&intern)", "intern->info_class = (&obj)", "intern->info_class = (&retval)", "intern->info_class = (class_type)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.74329165473699, -7.92011272033699, -7.92011272033699, -8.48975390133699, -6.97678263033699, -8.04445871033699, -8.04445871033699, -7.74213452033699, -8.42549287933699, -8.33418328033699, -8.62281138033699, -8.33418328033699, -7.54291225033699, -8.33418328033699, -8.33418328033699, -7.54291225033699, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -7.54291225033699, -8.62281138033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.54291225033699, -8.62281138033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.54291225033699, -8.62281138033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.54291225033699, -8.62281138033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -8.33418328033699, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -7.8649232803369884, -8.33418328033699, -8.33418328033699]
								}, {
									"case":	2,
									"scores":	[-5.30600981033699]
								}, {
									"case":	3,
									"scores":	[-5.30600981033699]
								}, {
									"case":	4,
									"scores":	[-5.30600981033699]
								}, {
									"case":	5,
									"scores":	[-5.30600981033699]
								}, {
									"case":	6,
									"scores":	[-5.30600981033699]
								}, {
									"case":	7,
									"scores":	[-5.30600981033699]
								}]
						}]
				}, {
					"line":	145,
					"switches":	[{
							"switch":	8,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	146,
							"begin_column":	0,
							"end_line":	146,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.28580710301947]
								}, {
									"case":	2,
									"scores":	[-5.28580710301947]
								}, {
									"case":	3,
									"scores":	[-5.28580710301947]
								}, {
									"case":	4,
									"scores":	[-5.28580710301947]
								}, {
									"case":	5,
									"scores":	[-5.28580710301947]
								}, {
									"case":	6,
									"scores":	[-5.28580710301947]
								}, {
									"case":	7,
									"scores":	[-5.28580710301947]
								}, {
									"case":	8,
									"scores":	[-5.28580710301947]
								}, {
									"case":	9,
									"scores":	[-5.28580710301947]
								}, {
									"case":	10,
									"scores":	[-5.28580710301947]
								}, {
									"case":	11,
									"scores":	[-5.28580710301947]
								}, {
									"case":	12,
									"scores":	[-5.28580710301947]
								}, {
									"case":	13,
									"scores":	[-5.28580710301947]
								}, {
									"case":	14,
									"scores":	[-5.28580710301947]
								}, {
									"case":	15,
									"scores":	[-5.28580710301947]
								}, {
									"case":	16,
									"scores":	[-5.28580710301947]
								}, {
									"case":	17,
									"scores":	[-5.28580710301947]
								}, {
									"case":	18,
									"scores":	[-5.28580710301947]
								}, {
									"case":	19,
									"scores":	[-5.28580710301947]
								}, {
									"case":	20,
									"scores":	[-5.28580710301947]
								}, {
									"case":	21,
									"scores":	[-5.28580710301947]
								}, {
									"case":	22,
									"scores":	[-5.28580710301947]
								}, {
									"case":	23,
									"scores":	[-5.28580710301947]
								}, {
									"case":	24,
									"scores":	[-5.28580710301947]
								}, {
									"case":	25,
									"scores":	[-5.28580710301947]
								}, {
									"case":	26,
									"scores":	[-5.28580710301947]
								}, {
									"case":	27,
									"scores":	[-5.28580710301947]
								}, {
									"case":	28,
									"scores":	[-5.28580710301947]
								}, {
									"case":	29,
									"scores":	[-5.28580710301947]
								}, {
									"case":	30,
									"scores":	[-5.28580710301947]
								}, {
									"case":	31,
									"scores":	[-5.28580710301947]
								}, {
									"case":	32,
									"scores":	[-5.28580710301947]
								}, {
									"case":	33,
									"scores":	[-5.28580710301947]
								}, {
									"case":	34,
									"scores":	[-5.28580710301947]
								}, {
									"case":	35,
									"scores":	[-5.28580710301947]
								}, {
									"case":	36,
									"scores":	[-5.28580710301947]
								}, {
									"case":	37,
									"scores":	[-5.28580710301947]
								}, {
									"case":	38,
									"scores":	[-5.28580710301947]
								}, {
									"case":	39,
									"scores":	[-5.28580710301947]
								}, {
									"case":	40,
									"scores":	[-5.28580710301947]
								}, {
									"case":	41,
									"scores":	[-5.28580710301947]
								}, {
									"case":	42,
									"scores":	[-5.28580710301947]
								}, {
									"case":	43,
									"scores":	[-5.28580710301947]
								}, {
									"case":	44,
									"scores":	[-5.28580710301947]
								}, {
									"case":	45,
									"scores":	[-5.28580710301947]
								}, {
									"case":	46,
									"scores":	[-5.28580710301947]
								}, {
									"case":	47,
									"scores":	[-5.28580710301947]
								}, {
									"case":	48,
									"scores":	[-5.28580710301947]
								}, {
									"case":	49,
									"scores":	[-5.28580710301947]
								}, {
									"case":	50,
									"scores":	[-5.28580710301947]
								}, {
									"case":	51,
									"scores":	[-5.28580710301947]
								}, {
									"case":	52,
									"scores":	[-5.28580710301947]
								}, {
									"case":	53,
									"scores":	[-5.28580710301947]
								}, {
									"case":	54,
									"scores":	[-5.28580710301947]
								}, {
									"case":	55,
									"scores":	[-5.28580710301947]
								}, {
									"case":	56,
									"scores":	[-5.28580710301947]
								}, {
									"case":	57,
									"scores":	[-5.28580710301947]
								}, {
									"case":	58,
									"scores":	[-5.28580710301947]
								}, {
									"case":	59,
									"scores":	[-5.28580710301947]
								}, {
									"case":	60,
									"scores":	[-5.28580710301947]
								}, {
									"case":	61,
									"scores":	[-5.28580710301947]
								}, {
									"case":	62,
									"scores":	[-5.28580710301947]
								}, {
									"case":	63,
									"scores":	[-5.28580710301947]
								}, {
									"case":	64,
									"scores":	[-5.28580710301947]
								}, {
									"case":	65,
									"scores":	[-5.28580710301947]
								}, {
									"case":	66,
									"scores":	[-5.28580710301947]
								}, {
									"case":	67,
									"scores":	[-5.28580710301947]
								}, {
									"case":	68,
									"scores":	[-5.28580710301947]
								}, {
									"case":	69,
									"scores":	[-5.28580710301947]
								}, {
									"case":	70,
									"scores":	[-5.28580710301947]
								}, {
									"case":	71,
									"scores":	[-5.28580710301947]
								}, {
									"case":	72,
									"scores":	[-5.28580710301947]
								}, {
									"case":	73,
									"scores":	[-5.28580710301947]
								}, {
									"case":	74,
									"scores":	[-5.28580710301947]
								}, {
									"case":	75,
									"scores":	[-5.28580710301947]
								}, {
									"case":	76,
									"scores":	[-5.28580710301947]
								}, {
									"case":	77,
									"scores":	[-5.28580710301947]
								}, {
									"case":	78,
									"scores":	[-5.28580710301947]
								}, {
									"case":	79,
									"scores":	[-5.28580710301947]
								}, {
									"case":	80,
									"scores":	[-5.28580710301947]
								}, {
									"case":	81,
									"scores":	[-5.28580710301947]
								}, {
									"case":	82,
									"scores":	[-5.28580710301947]
								}, {
									"case":	83,
									"scores":	[-5.28580710301947]
								}, {
									"case":	84,
									"scores":	[-5.28580710301947]
								}, {
									"case":	85,
									"scores":	[-5.28580710301947]
								}, {
									"case":	86,
									"scores":	[-5.28580710301947]
								}, {
									"case":	87,
									"scores":	[-5.28580710301947]
								}, {
									"case":	88,
									"scores":	[-5.28580710301947]
								}, {
									"case":	89,
									"scores":	[-5.28580710301947]
								}, {
									"case":	90,
									"scores":	[-5.28580710301947]
								}, {
									"case":	91,
									"scores":	[-5.28580710301947]
								}, {
									"case":	92,
									"scores":	[-5.28580710301947]
								}, {
									"case":	93,
									"scores":	[-5.28580710301947]
								}, {
									"case":	94,
									"scores":	[-5.28580710301947]
								}, {
									"case":	95,
									"scores":	[-5.28580710301947]
								}, {
									"case":	96,
									"scores":	[-5.28580710301947]
								}, {
									"case":	97,
									"scores":	[-5.28580710301947]
								}, {
									"case":	98,
									"scores":	[-5.28580710301947]
								}, {
									"case":	99,
									"scores":	[-5.28580710301947]
								}, {
									"case":	100,
									"scores":	[-5.28580710301947]
								}, {
									"case":	101,
									"scores":	[-5.28580710301947]
								}, {
									"case":	102,
									"scores":	[-5.28580710301947]
								}, {
									"case":	103,
									"scores":	[-5.28580710301947]
								}, {
									"case":	104,
									"scores":	[-5.28580710301947]
								}, {
									"case":	105,
									"scores":	[-5.28580710301947]
								}, {
									"case":	106,
									"scores":	[-5.28580710301947]
								}, {
									"case":	107,
									"scores":	[-5.28580710301947]
								}, {
									"case":	108,
									"scores":	[-5.28580710301947]
								}, {
									"case":	109,
									"scores":	[-5.28580710301947]
								}, {
									"case":	110,
									"scores":	[-5.28580710301947]
								}, {
									"case":	111,
									"scores":	[-5.28580710301947]
								}, {
									"case":	112,
									"scores":	[-5.28580710301947]
								}, {
									"case":	113,
									"scores":	[-5.28580710301947]
								}, {
									"case":	114,
									"scores":	[-5.28580710301947]
								}, {
									"case":	115,
									"scores":	[-5.28580710301947]
								}, {
									"case":	116,
									"scores":	[-5.28580710301947]
								}, {
									"case":	117,
									"scores":	[-5.28580710301947]
								}, {
									"case":	118,
									"scores":	[-5.28580710301947]
								}, {
									"case":	119,
									"scores":	[-5.28580710301947]
								}, {
									"case":	120,
									"scores":	[-5.28580710301947]
								}, {
									"case":	121,
									"scores":	[-5.28580710301947]
								}, {
									"case":	122,
									"scores":	[-5.28580710301947]
								}, {
									"case":	123,
									"scores":	[-5.28580710301947]
								}, {
									"case":	124,
									"scores":	[-5.28580710301947]
								}, {
									"case":	125,
									"scores":	[-5.28580710301947]
								}, {
									"case":	126,
									"scores":	[-5.28580710301947]
								}, {
									"case":	127,
									"scores":	[-5.28580710301947]
								}, {
									"case":	128,
									"scores":	[-5.28580710301947]
								}, {
									"case":	129,
									"scores":	[-5.28580710301947]
								}, {
									"case":	130,
									"scores":	[-5.28580710301947]
								}, {
									"case":	131,
									"scores":	[-5.28580710301947]
								}, {
									"case":	132,
									"scores":	[-5.28580710301947]
								}, {
									"case":	133,
									"scores":	[-5.28580710301947]
								}, {
									"case":	134,
									"scores":	[-5.28580710301947]
								}, {
									"case":	135,
									"scores":	[-5.28580710301947]
								}, {
									"case":	136,
									"scores":	[-5.28580710301947]
								}, {
									"case":	137,
									"scores":	[-5.28580710301947]
								}, {
									"case":	138,
									"scores":	[-5.28580710301947]
								}, {
									"case":	139,
									"scores":	[-5.28580710301947]
								}, {
									"case":	140,
									"scores":	[-5.28580710301947]
								}, {
									"case":	141,
									"scores":	[-5.28580710301947]
								}, {
									"case":	142,
									"scores":	[-5.28580710301947]
								}, {
									"case":	143,
									"scores":	[-5.28580710301947]
								}, {
									"case":	144,
									"scores":	[-5.28580710301947]
								}, {
									"case":	145,
									"scores":	[-5.28580710301947]
								}, {
									"case":	146,
									"scores":	[-5.28580710301947]
								}, {
									"case":	147,
									"scores":	[-5.28580710301947]
								}, {
									"case":	148,
									"scores":	[-5.28580710301947]
								}, {
									"case":	149,
									"scores":	[-5.28580710301947]
								}, {
									"case":	150,
									"scores":	[-5.28580710301947]
								}, {
									"case":	151,
									"scores":	[-5.28580710301947]
								}, {
									"case":	152,
									"scores":	[-5.28580710301947]
								}, {
									"case":	153,
									"scores":	[-5.28580710301947]
								}, {
									"case":	154,
									"scores":	[-5.28580710301947]
								}, {
									"case":	155,
									"scores":	[-5.28580710301947]
								}, {
									"case":	156,
									"scores":	[-5.28580710301947]
								}, {
									"case":	157,
									"scores":	[-5.28580710301947]
								}, {
									"case":	158,
									"scores":	[-5.28580710301947]
								}, {
									"case":	159,
									"scores":	[-5.28580710301947]
								}, {
									"case":	160,
									"scores":	[-5.28580710301947]
								}, {
									"case":	161,
									"scores":	[-5.28580710301947]
								}, {
									"case":	162,
									"scores":	[-5.28580710301947]
								}, {
									"case":	163,
									"scores":	[-5.28580710301947]
								}, {
									"case":	164,
									"scores":	[-5.28580710301947]
								}, {
									"case":	165,
									"scores":	[-5.28580710301947]
								}]
						}, {
							"switch":	9,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	146,
							"begin_column":	2,
							"end_line":	146,
							"end_column":	18,
							"patch_codes":	["if (__is_neg(\"\", \"L146\", 88, &(obj), sizeof (obj), &(intern), sizeof (intern), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(class_type), sizeof (class_type), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences)))\n    *obj = intern;\n", "if ((obj) || __is_neg(\"\", \"L146\", 88, &(obj), sizeof (obj), &(intern), sizeof (intern), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(class_type), sizeof (class_type), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences)))\n    *obj = intern;\n", "if ((obj) && !__is_neg(\"\", \"L146\", 88, &(obj), sizeof (obj), &(intern), sizeof (intern), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(class_type), sizeof (class_type), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences)))\n    *obj = intern;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.5126943864281461, -3.6080508198281458, -4.1467588164281457, -4.1467588164281457, -3.8444346264281459, -3.8143576854281456, -4.1467588164281457, -4.1467588164281457, -3.8444346264281459, -4.4364833864281463, -4.7251114864281467, -4.4364833864281463, -3.645212356428146, -4.4364833864281463, -4.4364833864281463, -3.645212356428146, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -3.645212356428146, -4.7251114864281467, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -3.9672233864281461, -4.4364833864281463, -3.9672233864281461, -4.4364833864281463, -4.4364833864281463, -3.9672233864281461, -4.4364833864281463, -3.645212356428146, -4.7251114864281467, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -4.4364833864281463, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -3.9672233864281461, -4.4364833864281463, -3.9672233864281461, -4.4364833864281463, -3.9672233864281461, -4.4364833864281463, -4.4364833864281463]
								}, {
									"case":	2,
									"scores":	[-4.0016282454281464, -5.0969846788281465, -5.635692675428146, -5.635692675428146, -5.3333684854281458, -5.3032915444281459, -5.635692675428146, -5.635692675428146, -5.3333684854281458, -5.9254172454281466, -6.2140453454281452, -5.9254172454281466, -5.1341462154281459, -5.9254172454281466, -5.9254172454281466, -5.1341462154281459, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.1341462154281459, -6.2140453454281452, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.1341462154281459, -6.2140453454281452, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466]
								}, {
									"case":	3,
									"scores":	[-4.0016282454281464, -5.0969846788281465, -5.635692675428146, -5.635692675428146, -5.3333684854281458, -5.3032915444281459, -5.635692675428146, -5.635692675428146, -5.3333684854281458, -5.9254172454281466, -6.2140453454281452, -5.9254172454281466, -5.1341462154281459, -5.9254172454281466, -5.9254172454281466, -5.1341462154281459, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.1341462154281459, -6.2140453454281452, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.1341462154281459, -6.2140453454281452, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.9254172454281466, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.4561572454281464, -5.9254172454281466, -5.9254172454281466]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	146,
							"begin_column":	2,
							"end_line":	146,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L146\", 88, &(obj), sizeof (obj), &(intern), sizeof (intern), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(class_type), sizeof (class_type), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences), &(spl_ce_SplFileInfo->type), sizeof (spl_ce_SplFileInfo->type), &(spl_ce_SplFileInfo->name), sizeof (spl_ce_SplFileInfo->name), &(spl_ce_SplFileInfo->name_length), sizeof (spl_ce_SplFileInfo->name_length), &(spl_ce_SplFileInfo->parent), sizeof (spl_ce_SplFileInfo->parent), &(spl_ce_SplFileInfo->refcount), sizeof (spl_ce_SplFileInfo->refcount), &(spl_ce_SplFileInfo->ce_flags), sizeof (spl_ce_SplFileInfo->ce_flags), &(spl_ce_SplFileInfo->default_properties_table), sizeof (spl_ce_SplFileInfo->default_properties_table), &(spl_ce_SplFileInfo->default_static_members_table), sizeof (spl_ce_SplFileInfo->default_static_members_table), &(spl_ce_SplFileInfo->static_members_table), sizeof (spl_ce_SplFileInfo->static_members_table), &(spl_ce_SplFileInfo->default_properties_count), sizeof (spl_ce_SplFileInfo->default_properties_count), &(spl_ce_SplFileInfo->default_static_members_count), sizeof (spl_ce_SplFileInfo->default_static_members_count), &(spl_ce_SplFileInfo->constructor), sizeof (spl_ce_SplFileInfo->constructor), &(spl_ce_SplFileInfo->destructor), sizeof (spl_ce_SplFileInfo->destructor), &(spl_ce_SplFileInfo->clone), sizeof (spl_ce_SplFileInfo->clone), &(spl_ce_SplFileInfo->__get), sizeof (spl_ce_SplFileInfo->__get), &(spl_ce_SplFileInfo->__set), sizeof (spl_ce_SplFileInfo->__set), &(spl_ce_SplFileInfo->__unset), sizeof (spl_ce_SplFileInfo->__unset), &(spl_ce_SplFileInfo->__isset), sizeof (spl_ce_SplFileInfo->__isset), &(spl_ce_SplFileInfo->__call), sizeof (spl_ce_SplFileInfo->__call), &(spl_ce_SplFileInfo->__callstatic), sizeof (spl_ce_SplFileInfo->__callstatic), &(spl_ce_SplFileInfo->__tostring), sizeof (spl_ce_SplFileInfo->__tostring), &(spl_ce_SplFileInfo->serialize_func), sizeof (spl_ce_SplFileInfo->serialize_func), &(spl_ce_SplFileInfo->unserialize_func), sizeof (spl_ce_SplFileInfo->unserialize_func), &(spl_ce_SplFileInfo->create_object), sizeof (spl_ce_SplFileInfo->create_object), &(spl_ce_SplFileInfo->get_iterator), sizeof (spl_ce_SplFileInfo->get_iterator), &(spl_ce_SplFileInfo->interface_gets_implemented), sizeof (spl_ce_SplFileInfo->interface_gets_implemented), &(spl_ce_SplFileInfo->get_static_method), sizeof (spl_ce_SplFileInfo->get_static_method), &(spl_ce_SplFileInfo->serialize), sizeof (spl_ce_SplFileInfo->serialize), &(spl_ce_SplFileInfo->unserialize), sizeof (spl_ce_SplFileInfo->unserialize), &(spl_ce_SplFileInfo->interfaces), sizeof (spl_ce_SplFileInfo->interfaces), &(spl_ce_SplFileInfo->num_interfaces), sizeof (spl_ce_SplFileInfo->num_interfaces), &(spl_ce_SplFileInfo->traits), sizeof (spl_ce_SplFileInfo->traits), &(spl_ce_SplFileInfo->num_traits), sizeof (spl_ce_SplFileInfo->num_traits), &(spl_ce_SplFileInfo->trait_aliases), sizeof (spl_ce_SplFileInfo->trait_aliases), &(spl_ce_SplFileInfo->trait_precedences), sizeof (spl_ce_SplFileInfo->trait_precedences)))\n    if (obj)\n        *obj = intern;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.20878818301947, -7.30414461641947, -7.84285261301947, -7.84285261301947, -7.54052842301947, -7.51045148201947, -7.84285261301947, -7.84285261301947, -7.54052842301947, -8.13257718301947, -8.42120528301947, -8.13257718301947, -7.34130615301947, -8.13257718301947, -8.13257718301947, -7.34130615301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -7.34130615301947, -8.42120528301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -7.66331718301947, -8.13257718301947, -7.66331718301947, -8.13257718301947, -8.13257718301947, -7.66331718301947, -8.13257718301947, -7.34130615301947, -8.42120528301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -8.13257718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -7.66331718301947, -8.13257718301947, -7.66331718301947, -8.13257718301947, -7.66331718301947, -8.13257718301947, -8.13257718301947]
								}]
						}]
				}, {
					"line":	147,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	148,
							"begin_column":	0,
							"end_line":	148,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.26560439570195]
								}, {
									"case":	2,
									"scores":	[-5.26560439570195]
								}, {
									"case":	3,
									"scores":	[-5.26560439570195]
								}, {
									"case":	4,
									"scores":	[-5.26560439570195]
								}, {
									"case":	5,
									"scores":	[-5.26560439570195]
								}, {
									"case":	6,
									"scores":	[-5.26560439570195]
								}, {
									"case":	7,
									"scores":	[-5.26560439570195]
								}, {
									"case":	8,
									"scores":	[-5.26560439570195]
								}, {
									"case":	9,
									"scores":	[-5.26560439570195]
								}, {
									"case":	10,
									"scores":	[-5.26560439570195]
								}, {
									"case":	11,
									"scores":	[-5.26560439570195]
								}, {
									"case":	12,
									"scores":	[-5.26560439570195]
								}, {
									"case":	13,
									"scores":	[-5.26560439570195]
								}, {
									"case":	14,
									"scores":	[-5.26560439570195]
								}, {
									"case":	15,
									"scores":	[-5.26560439570195]
								}, {
									"case":	16,
									"scores":	[-5.26560439570195]
								}, {
									"case":	17,
									"scores":	[-5.26560439570195]
								}, {
									"case":	18,
									"scores":	[-5.26560439570195]
								}, {
									"case":	19,
									"scores":	[-5.26560439570195]
								}, {
									"case":	20,
									"scores":	[-5.26560439570195]
								}, {
									"case":	21,
									"scores":	[-5.26560439570195]
								}, {
									"case":	22,
									"scores":	[-5.26560439570195]
								}, {
									"case":	23,
									"scores":	[-5.26560439570195]
								}, {
									"case":	24,
									"scores":	[-5.26560439570195]
								}, {
									"case":	25,
									"scores":	[-5.26560439570195]
								}, {
									"case":	26,
									"scores":	[-5.26560439570195]
								}, {
									"case":	27,
									"scores":	[-5.26560439570195]
								}, {
									"case":	28,
									"scores":	[-5.26560439570195]
								}, {
									"case":	29,
									"scores":	[-5.26560439570195]
								}, {
									"case":	30,
									"scores":	[-5.26560439570195]
								}, {
									"case":	31,
									"scores":	[-5.26560439570195]
								}, {
									"case":	32,
									"scores":	[-5.26560439570195]
								}, {
									"case":	33,
									"scores":	[-5.26560439570195]
								}, {
									"case":	34,
									"scores":	[-5.26560439570195]
								}, {
									"case":	35,
									"scores":	[-5.26560439570195]
								}, {
									"case":	36,
									"scores":	[-5.26560439570195]
								}, {
									"case":	37,
									"scores":	[-5.26560439570195]
								}, {
									"case":	38,
									"scores":	[-5.26560439570195]
								}, {
									"case":	39,
									"scores":	[-5.26560439570195]
								}, {
									"case":	40,
									"scores":	[-5.26560439570195]
								}, {
									"case":	41,
									"scores":	[-5.26560439570195]
								}, {
									"case":	42,
									"scores":	[-5.26560439570195]
								}, {
									"case":	43,
									"scores":	[-5.26560439570195]
								}, {
									"case":	44,
									"scores":	[-5.26560439570195]
								}, {
									"case":	45,
									"scores":	[-5.26560439570195]
								}, {
									"case":	46,
									"scores":	[-5.26560439570195]
								}, {
									"case":	47,
									"scores":	[-5.26560439570195]
								}, {
									"case":	48,
									"scores":	[-5.26560439570195]
								}, {
									"case":	49,
									"scores":	[-5.26560439570195]
								}, {
									"case":	50,
									"scores":	[-5.26560439570195]
								}, {
									"case":	51,
									"scores":	[-5.26560439570195]
								}, {
									"case":	52,
									"scores":	[-5.26560439570195]
								}, {
									"case":	53,
									"scores":	[-5.26560439570195]
								}, {
									"case":	54,
									"scores":	[-5.26560439570195]
								}, {
									"case":	55,
									"scores":	[-5.26560439570195]
								}, {
									"case":	56,
									"scores":	[-5.26560439570195]
								}, {
									"case":	57,
									"scores":	[-5.26560439570195]
								}, {
									"case":	58,
									"scores":	[-5.26560439570195]
								}, {
									"case":	59,
									"scores":	[-5.26560439570195]
								}, {
									"case":	60,
									"scores":	[-5.26560439570195]
								}, {
									"case":	61,
									"scores":	[-5.26560439570195]
								}, {
									"case":	62,
									"scores":	[-5.26560439570195]
								}, {
									"case":	63,
									"scores":	[-5.26560439570195]
								}, {
									"case":	64,
									"scores":	[-5.26560439570195]
								}, {
									"case":	65,
									"scores":	[-5.26560439570195]
								}, {
									"case":	66,
									"scores":	[-5.26560439570195]
								}, {
									"case":	67,
									"scores":	[-5.26560439570195]
								}, {
									"case":	68,
									"scores":	[-5.26560439570195]
								}, {
									"case":	69,
									"scores":	[-5.26560439570195]
								}, {
									"case":	70,
									"scores":	[-5.26560439570195]
								}, {
									"case":	71,
									"scores":	[-5.26560439570195]
								}, {
									"case":	72,
									"scores":	[-5.26560439570195]
								}, {
									"case":	73,
									"scores":	[-5.26560439570195]
								}, {
									"case":	74,
									"scores":	[-5.26560439570195]
								}, {
									"case":	75,
									"scores":	[-5.26560439570195]
								}, {
									"case":	76,
									"scores":	[-5.26560439570195]
								}, {
									"case":	77,
									"scores":	[-5.26560439570195]
								}, {
									"case":	78,
									"scores":	[-5.26560439570195]
								}, {
									"case":	79,
									"scores":	[-5.26560439570195]
								}, {
									"case":	80,
									"scores":	[-5.26560439570195]
								}, {
									"case":	81,
									"scores":	[-5.26560439570195]
								}, {
									"case":	82,
									"scores":	[-5.26560439570195]
								}, {
									"case":	83,
									"scores":	[-5.26560439570195]
								}, {
									"case":	84,
									"scores":	[-5.26560439570195]
								}, {
									"case":	85,
									"scores":	[-5.26560439570195]
								}, {
									"case":	86,
									"scores":	[-5.26560439570195]
								}, {
									"case":	87,
									"scores":	[-5.26560439570195]
								}, {
									"case":	88,
									"scores":	[-5.26560439570195]
								}, {
									"case":	89,
									"scores":	[-5.26560439570195]
								}, {
									"case":	90,
									"scores":	[-5.26560439570195]
								}, {
									"case":	91,
									"scores":	[-5.26560439570195]
								}, {
									"case":	92,
									"scores":	[-5.26560439570195]
								}, {
									"case":	93,
									"scores":	[-5.26560439570195]
								}, {
									"case":	94,
									"scores":	[-5.26560439570195]
								}, {
									"case":	95,
									"scores":	[-5.26560439570195]
								}, {
									"case":	96,
									"scores":	[-5.26560439570195]
								}, {
									"case":	97,
									"scores":	[-5.26560439570195]
								}, {
									"case":	98,
									"scores":	[-5.26560439570195]
								}, {
									"case":	99,
									"scores":	[-5.26560439570195]
								}, {
									"case":	100,
									"scores":	[-5.26560439570195]
								}, {
									"case":	101,
									"scores":	[-5.26560439570195]
								}, {
									"case":	102,
									"scores":	[-5.26560439570195]
								}, {
									"case":	103,
									"scores":	[-5.26560439570195]
								}, {
									"case":	104,
									"scores":	[-5.26560439570195]
								}, {
									"case":	105,
									"scores":	[-5.26560439570195]
								}, {
									"case":	106,
									"scores":	[-5.26560439570195]
								}, {
									"case":	107,
									"scores":	[-5.26560439570195]
								}, {
									"case":	108,
									"scores":	[-5.26560439570195]
								}, {
									"case":	109,
									"scores":	[-5.26560439570195]
								}, {
									"case":	110,
									"scores":	[-5.26560439570195]
								}, {
									"case":	111,
									"scores":	[-5.26560439570195]
								}, {
									"case":	112,
									"scores":	[-5.26560439570195]
								}, {
									"case":	113,
									"scores":	[-5.26560439570195]
								}, {
									"case":	114,
									"scores":	[-5.26560439570195]
								}, {
									"case":	115,
									"scores":	[-5.26560439570195]
								}, {
									"case":	116,
									"scores":	[-5.26560439570195]
								}, {
									"case":	117,
									"scores":	[-5.26560439570195]
								}, {
									"case":	118,
									"scores":	[-5.26560439570195]
								}, {
									"case":	119,
									"scores":	[-5.26560439570195]
								}, {
									"case":	120,
									"scores":	[-5.26560439570195]
								}, {
									"case":	121,
									"scores":	[-5.26560439570195]
								}, {
									"case":	122,
									"scores":	[-5.26560439570195]
								}, {
									"case":	123,
									"scores":	[-5.26560439570195]
								}, {
									"case":	124,
									"scores":	[-5.26560439570195]
								}, {
									"case":	125,
									"scores":	[-5.26560439570195]
								}, {
									"case":	126,
									"scores":	[-5.26560439570195]
								}, {
									"case":	127,
									"scores":	[-5.26560439570195]
								}, {
									"case":	128,
									"scores":	[-5.26560439570195]
								}, {
									"case":	129,
									"scores":	[-5.26560439570195]
								}, {
									"case":	130,
									"scores":	[-5.26560439570195]
								}, {
									"case":	131,
									"scores":	[-5.26560439570195]
								}, {
									"case":	132,
									"scores":	[-5.26560439570195]
								}, {
									"case":	133,
									"scores":	[-5.26560439570195]
								}, {
									"case":	134,
									"scores":	[-5.26560439570195]
								}, {
									"case":	135,
									"scores":	[-5.26560439570195]
								}, {
									"case":	136,
									"scores":	[-5.26560439570195]
								}, {
									"case":	137,
									"scores":	[-5.26560439570195]
								}, {
									"case":	138,
									"scores":	[-5.26560439570195]
								}, {
									"case":	139,
									"scores":	[-5.26560439570195]
								}, {
									"case":	140,
									"scores":	[-5.26560439570195]
								}, {
									"case":	141,
									"scores":	[-5.26560439570195]
								}, {
									"case":	142,
									"scores":	[-5.26560439570195]
								}, {
									"case":	143,
									"scores":	[-5.26560439570195]
								}, {
									"case":	144,
									"scores":	[-5.26560439570195]
								}, {
									"case":	145,
									"scores":	[-5.26560439570195]
								}, {
									"case":	146,
									"scores":	[-5.26560439570195]
								}, {
									"case":	147,
									"scores":	[-5.26560439570195]
								}, {
									"case":	148,
									"scores":	[-5.26560439570195]
								}, {
									"case":	149,
									"scores":	[-5.26560439570195]
								}, {
									"case":	150,
									"scores":	[-5.26560439570195]
								}, {
									"case":	151,
									"scores":	[-5.26560439570195]
								}, {
									"case":	152,
									"scores":	[-5.26560439570195]
								}, {
									"case":	153,
									"scores":	[-5.26560439570195]
								}, {
									"case":	154,
									"scores":	[-5.26560439570195]
								}, {
									"case":	155,
									"scores":	[-5.26560439570195]
								}, {
									"case":	156,
									"scores":	[-5.26560439570195]
								}, {
									"case":	157,
									"scores":	[-5.26560439570195]
								}, {
									"case":	158,
									"scores":	[-5.26560439570195]
								}, {
									"case":	159,
									"scores":	[-5.26560439570195]
								}, {
									"case":	160,
									"scores":	[-5.26560439570195]
								}, {
									"case":	161,
									"scores":	[-5.26560439570195]
								}, {
									"case":	162,
									"scores":	[-5.26560439570195]
								}, {
									"case":	163,
									"scores":	[-5.26560439570195]
								}, {
									"case":	164,
									"scores":	[-5.26560439570195]
								}, {
									"case":	165,
									"scores":	[-5.26560439570195]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [2, 3, 4, 5], [], [], [6]],
							"begin_line":	148,
							"begin_column":	2,
							"end_line":	148,
							"end_column":	57,
							"patch_codes":	["if (!__is_neg(\"\", \"L148\", 22, &(class_type), sizeof (class_type), &(intern), sizeof (intern), &(obj), sizeof (obj), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->std.ce), sizeof (intern->std.ce), &(intern->std.properties), sizeof (intern->std.properties), &(intern->std.properties_table), sizeof (intern->std.properties_table), &(intern->std.guards), sizeof (intern->std.guards)))\n    zend_object_std_init(&intern->std, class_type);\n", "_object_and_properties_init(&intern->std, class_type, 0)", "zend_check_property_access(&intern->std, class_type, 0)", "zend_check_property_access(&intern->std, class_type, le_index_ptr)", "zend_register_internal_class_ex(&intern->std, class_type, 0)", "{\n}\n", "Debug(&intern->std, class_type)", "_object_init_ex(&intern->std, class_type)", "object_properties_init(&intern->std, class_type)", "php_printf(&intern->std, class_type)", "printf(&intern->std, class_type)", "wprintf(&intern->std, class_type)", "zend_check_protected(&intern->std, class_type)", "zend_do_implement_interface(&intern->std, class_type)", "zend_do_implement_trait(&intern->std, class_type)", "zend_do_inheritance(&intern->std, class_type)", "zend_objects_new(&intern->std, class_type)", "zend_object_std_init(&(&class_type)->std, class_type)", "zend_object_std_init(&(&intern)->std, class_type)", "zend_object_std_init(&(&obj)->std, class_type)", "zend_object_std_init(&(&retval)->std, class_type)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (&class_type))", "zend_object_std_init(&intern->std, (&intern))", "zend_object_std_init(&intern->std, (&obj))", "zend_object_std_init(&intern->std, (&retval))", "zend_object_std_init(&intern->std, (class_type))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.29605177470195, -6.49567105310195, -6.39362417620195, -6.62845290570195, -6.62845290570195, -6.32612871570195, -6.62845290570195, -6.62845290570195, -6.32612871570195, -6.91817747570195, -7.20680557570195, -6.91817747570195, -6.12690644570195, -6.91817747570195, -6.91817747570195, -6.12690644570195, -6.44891747570195, -6.44891747570195, -7.20680557570195, -7.20680557570195, -6.91817747570195, -7.20680557570195]
								}, {
									"case":	2,
									"scores":	[-5.26560439570195]
								}, {
									"case":	3,
									"scores":	[-5.26560439570195]
								}, {
									"case":	4,
									"scores":	[-5.26560439570195]
								}, {
									"case":	5,
									"scores":	[-5.26560439570195]
								}, {
									"case":	6,
									"scores":	[-5.26560439570195]
								}, {
									"case":	7,
									"scores":	[-5.26560439570195]
								}, {
									"case":	8,
									"scores":	[-5.26560439570195]
								}, {
									"case":	9,
									"scores":	[-5.26560439570195]
								}, {
									"case":	10,
									"scores":	[-5.26560439570195]
								}, {
									"case":	11,
									"scores":	[-5.26560439570195]
								}, {
									"case":	12,
									"scores":	[-5.26560439570195]
								}, {
									"case":	13,
									"scores":	[-5.26560439570195]
								}, {
									"case":	14,
									"scores":	[-5.26560439570195]
								}, {
									"case":	15,
									"scores":	[-5.26560439570195]
								}, {
									"case":	16,
									"scores":	[-5.26560439570195]
								}, {
									"case":	17,
									"scores":	[-5.26560439570195]
								}, {
									"case":	18,
									"scores":	[-5.26560439570195]
								}, {
									"case":	19,
									"scores":	[-5.26560439570195]
								}, {
									"case":	20,
									"scores":	[-5.26560439570195]
								}, {
									"case":	21,
									"scores":	[-5.26560439570195]
								}, {
									"case":	22,
									"scores":	[-5.26560439570195]
								}, {
									"case":	23,
									"scores":	[-5.26560439570195]
								}, {
									"case":	24,
									"scores":	[-5.26560439570195]
								}, {
									"case":	25,
									"scores":	[-5.26560439570195]
								}, {
									"case":	26,
									"scores":	[-5.26560439570195]
								}, {
									"case":	27,
									"scores":	[-5.26560439570195]
								}]
						}]
				}, {
					"line":	148,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	149,
							"begin_column":	0,
							"end_line":	149,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.24540168838443]
								}, {
									"case":	2,
									"scores":	[-5.24540168838443]
								}, {
									"case":	3,
									"scores":	[-5.24540168838443]
								}, {
									"case":	4,
									"scores":	[-5.24540168838443]
								}, {
									"case":	5,
									"scores":	[-5.24540168838443]
								}, {
									"case":	6,
									"scores":	[-5.24540168838443]
								}, {
									"case":	7,
									"scores":	[-5.24540168838443]
								}, {
									"case":	8,
									"scores":	[-5.24540168838443]
								}, {
									"case":	9,
									"scores":	[-5.24540168838443]
								}, {
									"case":	10,
									"scores":	[-5.24540168838443]
								}, {
									"case":	11,
									"scores":	[-5.24540168838443]
								}, {
									"case":	12,
									"scores":	[-5.24540168838443]
								}, {
									"case":	13,
									"scores":	[-5.24540168838443]
								}, {
									"case":	14,
									"scores":	[-5.24540168838443]
								}, {
									"case":	15,
									"scores":	[-5.24540168838443]
								}, {
									"case":	16,
									"scores":	[-5.24540168838443]
								}, {
									"case":	17,
									"scores":	[-5.24540168838443]
								}, {
									"case":	18,
									"scores":	[-5.24540168838443]
								}, {
									"case":	19,
									"scores":	[-5.24540168838443]
								}, {
									"case":	20,
									"scores":	[-5.24540168838443]
								}, {
									"case":	21,
									"scores":	[-5.24540168838443]
								}, {
									"case":	22,
									"scores":	[-5.24540168838443]
								}, {
									"case":	23,
									"scores":	[-5.24540168838443]
								}, {
									"case":	24,
									"scores":	[-5.24540168838443]
								}, {
									"case":	25,
									"scores":	[-5.24540168838443]
								}, {
									"case":	26,
									"scores":	[-5.24540168838443]
								}, {
									"case":	27,
									"scores":	[-5.24540168838443]
								}, {
									"case":	28,
									"scores":	[-5.24540168838443]
								}, {
									"case":	29,
									"scores":	[-5.24540168838443]
								}, {
									"case":	30,
									"scores":	[-5.24540168838443]
								}, {
									"case":	31,
									"scores":	[-5.24540168838443]
								}, {
									"case":	32,
									"scores":	[-5.24540168838443]
								}, {
									"case":	33,
									"scores":	[-5.24540168838443]
								}, {
									"case":	34,
									"scores":	[-5.24540168838443]
								}, {
									"case":	35,
									"scores":	[-5.24540168838443]
								}, {
									"case":	36,
									"scores":	[-5.24540168838443]
								}, {
									"case":	37,
									"scores":	[-5.24540168838443]
								}, {
									"case":	38,
									"scores":	[-5.24540168838443]
								}, {
									"case":	39,
									"scores":	[-5.24540168838443]
								}, {
									"case":	40,
									"scores":	[-5.24540168838443]
								}, {
									"case":	41,
									"scores":	[-5.24540168838443]
								}, {
									"case":	42,
									"scores":	[-5.24540168838443]
								}, {
									"case":	43,
									"scores":	[-5.24540168838443]
								}, {
									"case":	44,
									"scores":	[-5.24540168838443]
								}, {
									"case":	45,
									"scores":	[-5.24540168838443]
								}, {
									"case":	46,
									"scores":	[-5.24540168838443]
								}, {
									"case":	47,
									"scores":	[-5.24540168838443]
								}, {
									"case":	48,
									"scores":	[-5.24540168838443]
								}, {
									"case":	49,
									"scores":	[-5.24540168838443]
								}, {
									"case":	50,
									"scores":	[-5.24540168838443]
								}, {
									"case":	51,
									"scores":	[-5.24540168838443]
								}, {
									"case":	52,
									"scores":	[-5.24540168838443]
								}, {
									"case":	53,
									"scores":	[-5.24540168838443]
								}, {
									"case":	54,
									"scores":	[-5.24540168838443]
								}, {
									"case":	55,
									"scores":	[-5.24540168838443]
								}, {
									"case":	56,
									"scores":	[-5.24540168838443]
								}, {
									"case":	57,
									"scores":	[-5.24540168838443]
								}, {
									"case":	58,
									"scores":	[-5.24540168838443]
								}, {
									"case":	59,
									"scores":	[-5.24540168838443]
								}, {
									"case":	60,
									"scores":	[-5.24540168838443]
								}, {
									"case":	61,
									"scores":	[-5.24540168838443]
								}, {
									"case":	62,
									"scores":	[-5.24540168838443]
								}, {
									"case":	63,
									"scores":	[-5.24540168838443]
								}, {
									"case":	64,
									"scores":	[-5.24540168838443]
								}, {
									"case":	65,
									"scores":	[-5.24540168838443]
								}, {
									"case":	66,
									"scores":	[-5.24540168838443]
								}, {
									"case":	67,
									"scores":	[-5.24540168838443]
								}, {
									"case":	68,
									"scores":	[-5.24540168838443]
								}, {
									"case":	69,
									"scores":	[-5.24540168838443]
								}, {
									"case":	70,
									"scores":	[-5.24540168838443]
								}, {
									"case":	71,
									"scores":	[-5.24540168838443]
								}, {
									"case":	72,
									"scores":	[-5.24540168838443]
								}, {
									"case":	73,
									"scores":	[-5.24540168838443]
								}, {
									"case":	74,
									"scores":	[-5.24540168838443]
								}, {
									"case":	75,
									"scores":	[-5.24540168838443]
								}, {
									"case":	76,
									"scores":	[-5.24540168838443]
								}, {
									"case":	77,
									"scores":	[-5.24540168838443]
								}, {
									"case":	78,
									"scores":	[-5.24540168838443]
								}, {
									"case":	79,
									"scores":	[-5.24540168838443]
								}, {
									"case":	80,
									"scores":	[-5.24540168838443]
								}, {
									"case":	81,
									"scores":	[-5.24540168838443]
								}, {
									"case":	82,
									"scores":	[-5.24540168838443]
								}, {
									"case":	83,
									"scores":	[-5.24540168838443]
								}, {
									"case":	84,
									"scores":	[-5.24540168838443]
								}, {
									"case":	85,
									"scores":	[-5.24540168838443]
								}, {
									"case":	86,
									"scores":	[-5.24540168838443]
								}, {
									"case":	87,
									"scores":	[-5.24540168838443]
								}, {
									"case":	88,
									"scores":	[-5.24540168838443]
								}, {
									"case":	89,
									"scores":	[-5.24540168838443]
								}, {
									"case":	90,
									"scores":	[-5.24540168838443]
								}, {
									"case":	91,
									"scores":	[-5.24540168838443]
								}, {
									"case":	92,
									"scores":	[-5.24540168838443]
								}, {
									"case":	93,
									"scores":	[-5.24540168838443]
								}, {
									"case":	94,
									"scores":	[-5.24540168838443]
								}, {
									"case":	95,
									"scores":	[-5.24540168838443]
								}, {
									"case":	96,
									"scores":	[-5.24540168838443]
								}, {
									"case":	97,
									"scores":	[-5.24540168838443]
								}, {
									"case":	98,
									"scores":	[-5.24540168838443]
								}, {
									"case":	99,
									"scores":	[-5.24540168838443]
								}, {
									"case":	100,
									"scores":	[-5.24540168838443]
								}, {
									"case":	101,
									"scores":	[-5.24540168838443]
								}, {
									"case":	102,
									"scores":	[-5.24540168838443]
								}, {
									"case":	103,
									"scores":	[-5.24540168838443]
								}, {
									"case":	104,
									"scores":	[-5.24540168838443]
								}, {
									"case":	105,
									"scores":	[-5.24540168838443]
								}, {
									"case":	106,
									"scores":	[-5.24540168838443]
								}, {
									"case":	107,
									"scores":	[-5.24540168838443]
								}, {
									"case":	108,
									"scores":	[-5.24540168838443]
								}, {
									"case":	109,
									"scores":	[-5.24540168838443]
								}, {
									"case":	110,
									"scores":	[-5.24540168838443]
								}, {
									"case":	111,
									"scores":	[-5.24540168838443]
								}, {
									"case":	112,
									"scores":	[-5.24540168838443]
								}, {
									"case":	113,
									"scores":	[-5.24540168838443]
								}, {
									"case":	114,
									"scores":	[-5.24540168838443]
								}, {
									"case":	115,
									"scores":	[-5.24540168838443]
								}, {
									"case":	116,
									"scores":	[-5.24540168838443]
								}, {
									"case":	117,
									"scores":	[-5.24540168838443]
								}, {
									"case":	118,
									"scores":	[-5.24540168838443]
								}, {
									"case":	119,
									"scores":	[-5.24540168838443]
								}, {
									"case":	120,
									"scores":	[-5.24540168838443]
								}, {
									"case":	121,
									"scores":	[-5.24540168838443]
								}, {
									"case":	122,
									"scores":	[-5.24540168838443]
								}, {
									"case":	123,
									"scores":	[-5.24540168838443]
								}, {
									"case":	124,
									"scores":	[-5.24540168838443]
								}, {
									"case":	125,
									"scores":	[-5.24540168838443]
								}, {
									"case":	126,
									"scores":	[-5.24540168838443]
								}, {
									"case":	127,
									"scores":	[-5.24540168838443]
								}, {
									"case":	128,
									"scores":	[-5.24540168838443]
								}, {
									"case":	129,
									"scores":	[-5.24540168838443]
								}, {
									"case":	130,
									"scores":	[-5.24540168838443]
								}, {
									"case":	131,
									"scores":	[-5.24540168838443]
								}, {
									"case":	132,
									"scores":	[-5.24540168838443]
								}, {
									"case":	133,
									"scores":	[-5.24540168838443]
								}, {
									"case":	134,
									"scores":	[-5.24540168838443]
								}, {
									"case":	135,
									"scores":	[-5.24540168838443]
								}, {
									"case":	136,
									"scores":	[-5.24540168838443]
								}, {
									"case":	137,
									"scores":	[-5.24540168838443]
								}, {
									"case":	138,
									"scores":	[-5.24540168838443]
								}, {
									"case":	139,
									"scores":	[-5.24540168838443]
								}, {
									"case":	140,
									"scores":	[-5.24540168838443]
								}, {
									"case":	141,
									"scores":	[-5.24540168838443]
								}, {
									"case":	142,
									"scores":	[-5.24540168838443]
								}, {
									"case":	143,
									"scores":	[-5.24540168838443]
								}, {
									"case":	144,
									"scores":	[-5.24540168838443]
								}, {
									"case":	145,
									"scores":	[-5.24540168838443]
								}, {
									"case":	146,
									"scores":	[-5.24540168838443]
								}, {
									"case":	147,
									"scores":	[-5.24540168838443]
								}, {
									"case":	148,
									"scores":	[-5.24540168838443]
								}, {
									"case":	149,
									"scores":	[-5.24540168838443]
								}, {
									"case":	150,
									"scores":	[-5.24540168838443]
								}, {
									"case":	151,
									"scores":	[-5.24540168838443]
								}, {
									"case":	152,
									"scores":	[-5.24540168838443]
								}, {
									"case":	153,
									"scores":	[-5.24540168838443]
								}, {
									"case":	154,
									"scores":	[-5.24540168838443]
								}, {
									"case":	155,
									"scores":	[-5.24540168838443]
								}, {
									"case":	156,
									"scores":	[-5.24540168838443]
								}, {
									"case":	157,
									"scores":	[-5.24540168838443]
								}, {
									"case":	158,
									"scores":	[-5.24540168838443]
								}, {
									"case":	159,
									"scores":	[-5.24540168838443]
								}, {
									"case":	160,
									"scores":	[-5.24540168838443]
								}, {
									"case":	161,
									"scores":	[-5.24540168838443]
								}, {
									"case":	162,
									"scores":	[-5.24540168838443]
								}, {
									"case":	163,
									"scores":	[-5.24540168838443]
								}, {
									"case":	164,
									"scores":	[-5.24540168838443]
								}, {
									"case":	165,
									"scores":	[-5.24540168838443]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [2, 3, 4, 5], [], [], [6]],
							"begin_line":	149,
							"begin_column":	2,
							"end_line":	149,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L149\", 22, &(class_type), sizeof (class_type), &(intern), sizeof (intern), &(obj), sizeof (obj), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->std.ce), sizeof (intern->std.ce), &(intern->std.properties), sizeof (intern->std.properties), &(intern->std.properties_table), sizeof (intern->std.properties_table), &(intern->std.guards), sizeof (intern->std.guards)))\n    object_properties_init(&intern->std, class_type);\n", "_object_and_properties_init(&intern->std, class_type, 0)", "zend_check_property_access(&intern->std, class_type, 0)", "zend_check_property_access(&intern->std, class_type, le_index_ptr)", "zend_register_internal_class_ex(&intern->std, class_type, 0)", "{\n}\n", "Debug(&intern->std, class_type)", "_object_init_ex(&intern->std, class_type)", "php_printf(&intern->std, class_type)", "printf(&intern->std, class_type)", "wprintf(&intern->std, class_type)", "zend_check_protected(&intern->std, class_type)", "zend_do_implement_interface(&intern->std, class_type)", "zend_do_implement_trait(&intern->std, class_type)", "zend_do_inheritance(&intern->std, class_type)", "zend_object_std_init(&intern->std, class_type)", "zend_objects_new(&intern->std, class_type)", "object_properties_init(&(&class_type)->std, class_type)", "object_properties_init(&(&intern)->std, class_type)", "object_properties_init(&(&obj)->std, class_type)", "object_properties_init(&(&retval)->std, class_type)", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (&class_type))", "object_properties_init(&intern->std, (&intern))", "object_properties_init(&intern->std, (&obj))", "object_properties_init(&intern->std, (&retval))", "object_properties_init(&intern->std, (class_type))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.28052940438443, -5.37955211788443, -6.32229446888443, -6.55712319838443, -6.55712319838443, -6.25479900838443, -6.92768619838443, -6.92768619838443, -7.13547586838443, -6.84684776838443, -7.13547586838443, -6.84684776838443, -6.05557673838443, -6.84684776838443, -6.84684776838443, -6.05557673838443, -6.37758776838443, -6.37758776838443, -7.13547586838443, -7.13547586838443, -6.84684776838443, -7.13547586838443]
								}, {
									"case":	2,
									"scores":	[-5.24540168838443]
								}, {
									"case":	3,
									"scores":	[-5.24540168838443]
								}, {
									"case":	4,
									"scores":	[-5.24540168838443]
								}, {
									"case":	5,
									"scores":	[-5.24540168838443]
								}, {
									"case":	6,
									"scores":	[-5.24540168838443]
								}, {
									"case":	7,
									"scores":	[-5.24540168838443]
								}, {
									"case":	8,
									"scores":	[-5.24540168838443]
								}, {
									"case":	9,
									"scores":	[-5.24540168838443]
								}, {
									"case":	10,
									"scores":	[-5.24540168838443]
								}, {
									"case":	11,
									"scores":	[-5.24540168838443]
								}, {
									"case":	12,
									"scores":	[-5.24540168838443]
								}, {
									"case":	13,
									"scores":	[-5.24540168838443]
								}, {
									"case":	14,
									"scores":	[-5.24540168838443]
								}, {
									"case":	15,
									"scores":	[-5.24540168838443]
								}, {
									"case":	16,
									"scores":	[-5.24540168838443]
								}, {
									"case":	17,
									"scores":	[-5.24540168838443]
								}, {
									"case":	18,
									"scores":	[-5.24540168838443]
								}, {
									"case":	19,
									"scores":	[-5.24540168838443]
								}, {
									"case":	20,
									"scores":	[-5.24540168838443]
								}, {
									"case":	21,
									"scores":	[-5.24540168838443]
								}, {
									"case":	22,
									"scores":	[-5.24540168838443]
								}, {
									"case":	23,
									"scores":	[-5.24540168838443]
								}, {
									"case":	24,
									"scores":	[-5.24540168838443]
								}, {
									"case":	25,
									"scores":	[-5.24540168838443]
								}, {
									"case":	26,
									"scores":	[-5.24540168838443]
								}, {
									"case":	27,
									"scores":	[-5.24540168838443]
								}]
						}]
				}, {
					"line":	150,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], [], [], [], [], [], []],
							"begin_line":	151,
							"begin_column":	0,
							"end_line":	151,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval, 0, sizeof (*(&retval)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.22519898106691]
								}, {
									"case":	2,
									"scores":	[-5.22519898106691]
								}, {
									"case":	3,
									"scores":	[-5.22519898106691]
								}, {
									"case":	4,
									"scores":	[-5.22519898106691]
								}, {
									"case":	5,
									"scores":	[-5.22519898106691]
								}, {
									"case":	6,
									"scores":	[-5.22519898106691]
								}, {
									"case":	7,
									"scores":	[-5.22519898106691]
								}, {
									"case":	8,
									"scores":	[-5.22519898106691]
								}, {
									"case":	9,
									"scores":	[-5.22519898106691]
								}, {
									"case":	10,
									"scores":	[-5.22519898106691]
								}, {
									"case":	11,
									"scores":	[-5.22519898106691]
								}, {
									"case":	12,
									"scores":	[-5.22519898106691]
								}, {
									"case":	13,
									"scores":	[-5.22519898106691]
								}, {
									"case":	14,
									"scores":	[-5.22519898106691]
								}, {
									"case":	15,
									"scores":	[-5.22519898106691]
								}, {
									"case":	16,
									"scores":	[-5.22519898106691]
								}, {
									"case":	17,
									"scores":	[-5.22519898106691]
								}, {
									"case":	18,
									"scores":	[-5.22519898106691]
								}, {
									"case":	19,
									"scores":	[-5.22519898106691]
								}, {
									"case":	20,
									"scores":	[-5.22519898106691]
								}, {
									"case":	21,
									"scores":	[-5.22519898106691]
								}, {
									"case":	22,
									"scores":	[-5.22519898106691]
								}, {
									"case":	23,
									"scores":	[-5.22519898106691]
								}, {
									"case":	24,
									"scores":	[-5.22519898106691]
								}, {
									"case":	25,
									"scores":	[-5.22519898106691]
								}, {
									"case":	26,
									"scores":	[-5.22519898106691]
								}, {
									"case":	27,
									"scores":	[-5.22519898106691]
								}, {
									"case":	28,
									"scores":	[-5.22519898106691]
								}, {
									"case":	29,
									"scores":	[-5.22519898106691]
								}, {
									"case":	30,
									"scores":	[-5.22519898106691]
								}, {
									"case":	31,
									"scores":	[-5.22519898106691]
								}, {
									"case":	32,
									"scores":	[-5.22519898106691]
								}, {
									"case":	33,
									"scores":	[-5.22519898106691]
								}, {
									"case":	34,
									"scores":	[-5.22519898106691]
								}, {
									"case":	35,
									"scores":	[-5.22519898106691]
								}, {
									"case":	36,
									"scores":	[-5.22519898106691]
								}, {
									"case":	37,
									"scores":	[-5.22519898106691]
								}, {
									"case":	38,
									"scores":	[-5.22519898106691]
								}, {
									"case":	39,
									"scores":	[-5.22519898106691]
								}, {
									"case":	40,
									"scores":	[-5.22519898106691]
								}, {
									"case":	41,
									"scores":	[-5.22519898106691]
								}, {
									"case":	42,
									"scores":	[-5.22519898106691]
								}, {
									"case":	43,
									"scores":	[-5.22519898106691]
								}, {
									"case":	44,
									"scores":	[-5.22519898106691]
								}, {
									"case":	45,
									"scores":	[-5.22519898106691]
								}, {
									"case":	46,
									"scores":	[-5.22519898106691]
								}, {
									"case":	47,
									"scores":	[-5.22519898106691]
								}, {
									"case":	48,
									"scores":	[-5.22519898106691]
								}, {
									"case":	49,
									"scores":	[-5.22519898106691]
								}, {
									"case":	50,
									"scores":	[-5.22519898106691]
								}, {
									"case":	51,
									"scores":	[-5.22519898106691]
								}, {
									"case":	52,
									"scores":	[-5.22519898106691]
								}, {
									"case":	53,
									"scores":	[-5.22519898106691]
								}, {
									"case":	54,
									"scores":	[-5.22519898106691]
								}, {
									"case":	55,
									"scores":	[-5.22519898106691]
								}, {
									"case":	56,
									"scores":	[-5.22519898106691]
								}, {
									"case":	57,
									"scores":	[-5.22519898106691]
								}, {
									"case":	58,
									"scores":	[-5.22519898106691]
								}, {
									"case":	59,
									"scores":	[-5.22519898106691]
								}, {
									"case":	60,
									"scores":	[-5.22519898106691]
								}, {
									"case":	61,
									"scores":	[-5.22519898106691]
								}, {
									"case":	62,
									"scores":	[-5.22519898106691]
								}, {
									"case":	63,
									"scores":	[-5.22519898106691]
								}, {
									"case":	64,
									"scores":	[-5.22519898106691]
								}, {
									"case":	65,
									"scores":	[-5.22519898106691]
								}, {
									"case":	66,
									"scores":	[-5.22519898106691]
								}, {
									"case":	67,
									"scores":	[-5.22519898106691]
								}, {
									"case":	68,
									"scores":	[-5.22519898106691]
								}, {
									"case":	69,
									"scores":	[-5.22519898106691]
								}, {
									"case":	70,
									"scores":	[-5.22519898106691]
								}, {
									"case":	71,
									"scores":	[-5.22519898106691]
								}, {
									"case":	72,
									"scores":	[-5.22519898106691]
								}, {
									"case":	73,
									"scores":	[-5.22519898106691]
								}, {
									"case":	74,
									"scores":	[-5.22519898106691]
								}, {
									"case":	75,
									"scores":	[-5.22519898106691]
								}, {
									"case":	76,
									"scores":	[-5.22519898106691]
								}, {
									"case":	77,
									"scores":	[-5.22519898106691]
								}, {
									"case":	78,
									"scores":	[-5.22519898106691]
								}, {
									"case":	79,
									"scores":	[-5.22519898106691]
								}, {
									"case":	80,
									"scores":	[-5.22519898106691]
								}, {
									"case":	81,
									"scores":	[-5.22519898106691]
								}, {
									"case":	82,
									"scores":	[-5.22519898106691]
								}, {
									"case":	83,
									"scores":	[-5.22519898106691]
								}, {
									"case":	84,
									"scores":	[-5.22519898106691]
								}, {
									"case":	85,
									"scores":	[-5.22519898106691]
								}, {
									"case":	86,
									"scores":	[-5.22519898106691]
								}, {
									"case":	87,
									"scores":	[-5.22519898106691]
								}, {
									"case":	88,
									"scores":	[-5.22519898106691]
								}, {
									"case":	89,
									"scores":	[-5.22519898106691]
								}, {
									"case":	90,
									"scores":	[-5.22519898106691]
								}, {
									"case":	91,
									"scores":	[-5.22519898106691]
								}, {
									"case":	92,
									"scores":	[-5.22519898106691]
								}, {
									"case":	93,
									"scores":	[-5.22519898106691]
								}, {
									"case":	94,
									"scores":	[-5.22519898106691]
								}, {
									"case":	95,
									"scores":	[-5.22519898106691]
								}, {
									"case":	96,
									"scores":	[-5.22519898106691]
								}, {
									"case":	97,
									"scores":	[-5.22519898106691]
								}, {
									"case":	98,
									"scores":	[-5.22519898106691]
								}, {
									"case":	99,
									"scores":	[-5.22519898106691]
								}, {
									"case":	100,
									"scores":	[-5.22519898106691]
								}, {
									"case":	101,
									"scores":	[-5.22519898106691]
								}, {
									"case":	102,
									"scores":	[-5.22519898106691]
								}, {
									"case":	103,
									"scores":	[-5.22519898106691]
								}, {
									"case":	104,
									"scores":	[-5.22519898106691]
								}, {
									"case":	105,
									"scores":	[-5.22519898106691]
								}, {
									"case":	106,
									"scores":	[-5.22519898106691]
								}, {
									"case":	107,
									"scores":	[-5.22519898106691]
								}, {
									"case":	108,
									"scores":	[-5.22519898106691]
								}, {
									"case":	109,
									"scores":	[-5.22519898106691]
								}, {
									"case":	110,
									"scores":	[-5.22519898106691]
								}, {
									"case":	111,
									"scores":	[-5.22519898106691]
								}, {
									"case":	112,
									"scores":	[-5.22519898106691]
								}, {
									"case":	113,
									"scores":	[-5.22519898106691]
								}, {
									"case":	114,
									"scores":	[-5.22519898106691]
								}, {
									"case":	115,
									"scores":	[-5.22519898106691]
								}, {
									"case":	116,
									"scores":	[-5.22519898106691]
								}, {
									"case":	117,
									"scores":	[-5.22519898106691]
								}, {
									"case":	118,
									"scores":	[-5.22519898106691]
								}, {
									"case":	119,
									"scores":	[-5.22519898106691]
								}, {
									"case":	120,
									"scores":	[-5.22519898106691]
								}, {
									"case":	121,
									"scores":	[-5.22519898106691]
								}, {
									"case":	122,
									"scores":	[-5.22519898106691]
								}, {
									"case":	123,
									"scores":	[-5.22519898106691]
								}, {
									"case":	124,
									"scores":	[-5.22519898106691]
								}, {
									"case":	125,
									"scores":	[-5.22519898106691]
								}, {
									"case":	126,
									"scores":	[-5.22519898106691]
								}, {
									"case":	127,
									"scores":	[-5.22519898106691]
								}, {
									"case":	128,
									"scores":	[-5.22519898106691]
								}, {
									"case":	129,
									"scores":	[-5.22519898106691]
								}, {
									"case":	130,
									"scores":	[-5.22519898106691]
								}, {
									"case":	131,
									"scores":	[-5.22519898106691]
								}, {
									"case":	132,
									"scores":	[-5.22519898106691]
								}, {
									"case":	133,
									"scores":	[-5.22519898106691]
								}, {
									"case":	134,
									"scores":	[-5.22519898106691]
								}, {
									"case":	135,
									"scores":	[-5.22519898106691]
								}, {
									"case":	136,
									"scores":	[-5.22519898106691]
								}, {
									"case":	137,
									"scores":	[-5.22519898106691]
								}, {
									"case":	138,
									"scores":	[-5.22519898106691]
								}, {
									"case":	139,
									"scores":	[-5.22519898106691]
								}, {
									"case":	140,
									"scores":	[-5.22519898106691]
								}, {
									"case":	141,
									"scores":	[-5.22519898106691]
								}, {
									"case":	142,
									"scores":	[-5.22519898106691]
								}, {
									"case":	143,
									"scores":	[-5.22519898106691]
								}, {
									"case":	144,
									"scores":	[-5.22519898106691]
								}, {
									"case":	145,
									"scores":	[-5.22519898106691]
								}, {
									"case":	146,
									"scores":	[-5.22519898106691]
								}, {
									"case":	147,
									"scores":	[-5.22519898106691]
								}, {
									"case":	148,
									"scores":	[-5.22519898106691]
								}, {
									"case":	149,
									"scores":	[-5.22519898106691]
								}, {
									"case":	150,
									"scores":	[-5.22519898106691]
								}, {
									"case":	151,
									"scores":	[-5.22519898106691]
								}, {
									"case":	152,
									"scores":	[-5.22519898106691]
								}, {
									"case":	153,
									"scores":	[-5.22519898106691]
								}, {
									"case":	154,
									"scores":	[-5.22519898106691]
								}, {
									"case":	155,
									"scores":	[-5.22519898106691]
								}, {
									"case":	156,
									"scores":	[-5.22519898106691]
								}, {
									"case":	157,
									"scores":	[-5.22519898106691]
								}, {
									"case":	158,
									"scores":	[-5.22519898106691]
								}, {
									"case":	159,
									"scores":	[-5.22519898106691]
								}, {
									"case":	160,
									"scores":	[-5.22519898106691]
								}, {
									"case":	161,
									"scores":	[-5.22519898106691]
								}, {
									"case":	162,
									"scores":	[-5.22519898106691]
								}, {
									"case":	163,
									"scores":	[-5.22519898106691]
								}, {
									"case":	164,
									"scores":	[-5.22519898106691]
								}, {
									"case":	165,
									"scores":	[-5.22519898106691]
								}, {
									"case":	166,
									"scores":	[-5.22519898106691]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	151,
							"begin_column":	2,
							"end_line":	151,
							"end_column":	193,
							"patch_codes":	["if (!__is_neg(\"\", \"L151\", 45, &(intern), sizeof (intern), &(retval.handle), sizeof (retval.handle), &(retval.handlers), sizeof (retval.handlers), &(class_type), sizeof (class_type), &(obj), sizeof (obj), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_filesystem_object_handlers.add_ref), sizeof (spl_filesystem_object_handlers.add_ref), &(spl_filesystem_object_handlers.del_ref), sizeof (spl_filesystem_object_handlers.del_ref), &(spl_filesystem_object_handlers.clone_obj), sizeof (spl_filesystem_object_handlers.clone_obj), &(spl_filesystem_object_handlers.read_property), sizeof (spl_filesystem_object_handlers.read_property), &(spl_filesystem_object_handlers.write_property), sizeof (spl_filesystem_object_handlers.write_property), &(spl_filesystem_object_handlers.read_dimension), sizeof (spl_filesystem_object_handlers.read_dimension), &(spl_filesystem_object_handlers.write_dimension), sizeof (spl_filesystem_object_handlers.write_dimension), &(spl_filesystem_object_handlers.get_property_ptr_ptr), sizeof (spl_filesystem_object_handlers.get_property_ptr_ptr), &(spl_filesystem_object_handlers.get), sizeof (spl_filesystem_object_handlers.get), &(spl_filesystem_object_handlers.set), sizeof (spl_filesystem_object_handlers.set), &(spl_filesystem_object_handlers.has_property), sizeof (spl_filesystem_object_handlers.has_property), &(spl_filesystem_object_handlers.unset_property), sizeof (spl_filesystem_object_handlers.unset_property), &(spl_filesystem_object_handlers.has_dimension), sizeof (spl_filesystem_object_handlers.has_dimension), &(spl_filesystem_object_handlers.unset_dimension), sizeof (spl_filesystem_object_handlers.unset_dimension), &(spl_filesystem_object_handlers.get_properties), sizeof (spl_filesystem_object_handlers.get_properties), &(spl_filesystem_object_handlers.get_method), sizeof (spl_filesystem_object_handlers.get_method), &(spl_filesystem_object_handlers.call_method), sizeof (spl_filesystem_object_handlers.call_method), &(spl_filesystem_object_handlers.get_constructor), sizeof (spl_filesystem_object_handlers.get_constructor), &(spl_filesystem_object_handlers.get_class_entry), sizeof (spl_filesystem_object_handlers.get_class_entry), &(spl_filesystem_object_handlers.get_class_name), sizeof (spl_filesystem_object_handlers.get_class_name), &(spl_filesystem_object_handlers.compare_objects), sizeof (spl_filesystem_object_handlers.compare_objects), &(spl_filesystem_object_handlers.cast_object), sizeof (spl_filesystem_object_handlers.cast_object), &(spl_filesystem_object_handlers.count_elements), sizeof (spl_filesystem_object_handlers.count_elements), &(spl_filesystem_object_handlers.get_debug_info), sizeof (spl_filesystem_object_handlers.get_debug_info), &(spl_filesystem_object_handlers.get_closure), sizeof (spl_filesystem_object_handlers.get_closure)))\n    retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0));\n", "{\n}\n", "retval.handle = (0)", "retval.handle = zend_objects_store_put((&class_type), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((&intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((&obj), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((&retval), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.97018135156691, -5.85692658206691, -6.48170810206691, -6.60636099706691, -5.93469076156691, -6.54008249106691, -6.54008249106691, -6.74787216106691, -6.54008249106691, -6.54008249106691, -6.74787216106691, -6.45924406106691, -6.74787216106691, -6.45924406106691, -5.66797303106691, -6.45924406106691, -6.45924406106691, -5.66797303106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691, -5.98998406106691]
								}, {
									"case":	2,
									"scores":	[-5.22519898106691]
								}, {
									"case":	3,
									"scores":	[-5.22519898106691]
								}, {
									"case":	4,
									"scores":	[-5.22519898106691]
								}, {
									"case":	5,
									"scores":	[-5.22519898106691]
								}, {
									"case":	6,
									"scores":	[-5.22519898106691]
								}, {
									"case":	7,
									"scores":	[-5.22519898106691]
								}, {
									"case":	8,
									"scores":	[-5.22519898106691]
								}, {
									"case":	9,
									"scores":	[-5.22519898106691]
								}]
						}]
				}, {
					"line":	151,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	152,
							"begin_column":	0,
							"end_line":	152,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval, 0, sizeof (*(&retval)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	2,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	3,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	4,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	5,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	6,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	7,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	8,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	9,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	10,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	11,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	12,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	13,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	14,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	15,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	16,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	17,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	18,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	19,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	20,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	21,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	22,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	23,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	24,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	25,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	26,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	27,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	28,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	29,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	30,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	31,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	32,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	33,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	34,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	35,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	36,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	37,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	38,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	39,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	40,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	41,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	42,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	43,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	44,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	45,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	46,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	47,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	48,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	49,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	50,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	51,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	52,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	53,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	54,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	55,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	56,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	57,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	58,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	59,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	60,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	61,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	62,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	63,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	64,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	65,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	66,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	67,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	68,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	69,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	70,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	71,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	72,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	73,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	74,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	75,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	76,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	77,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	78,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	79,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	80,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	81,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	82,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	83,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	84,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	85,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	86,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	87,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	88,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	89,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	90,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	91,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	92,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	93,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	94,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	95,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	96,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	97,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	98,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	99,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	100,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	101,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	102,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	103,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	104,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	105,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	106,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	107,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	108,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	109,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	110,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	111,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	112,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	113,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	114,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	115,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	116,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	117,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	118,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	119,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	120,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	121,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	122,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	123,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	124,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	125,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	126,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	127,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	128,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	129,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	130,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	131,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	132,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	133,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	134,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	135,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	136,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	137,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	138,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	139,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	140,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	141,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	142,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	143,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	144,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	145,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	146,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	147,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	148,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	149,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	150,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	151,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	152,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	153,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	154,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	155,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	156,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	157,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	158,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	159,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	160,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	161,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	162,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	163,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	164,
									"scores":	[-5.2049962737493916]
								}, {
									"case":	165,
									"scores":	[-5.2049962737493916]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	152,
							"begin_column":	2,
							"end_line":	152,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L152\", 45, &(retval.handlers), sizeof (retval.handlers), &(intern), sizeof (intern), &(retval.handle), sizeof (retval.handle), &(class_type), sizeof (class_type), &(obj), sizeof (obj), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(intern->info_class), sizeof (intern->info_class), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(intern->file_class), sizeof (intern->file_class), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(spl_filesystem_object_handlers.add_ref), sizeof (spl_filesystem_object_handlers.add_ref), &(spl_filesystem_object_handlers.del_ref), sizeof (spl_filesystem_object_handlers.del_ref), &(spl_filesystem_object_handlers.clone_obj), sizeof (spl_filesystem_object_handlers.clone_obj), &(spl_filesystem_object_handlers.read_property), sizeof (spl_filesystem_object_handlers.read_property), &(spl_filesystem_object_handlers.write_property), sizeof (spl_filesystem_object_handlers.write_property), &(spl_filesystem_object_handlers.read_dimension), sizeof (spl_filesystem_object_handlers.read_dimension), &(spl_filesystem_object_handlers.write_dimension), sizeof (spl_filesystem_object_handlers.write_dimension), &(spl_filesystem_object_handlers.get_property_ptr_ptr), sizeof (spl_filesystem_object_handlers.get_property_ptr_ptr), &(spl_filesystem_object_handlers.get), sizeof (spl_filesystem_object_handlers.get), &(spl_filesystem_object_handlers.set), sizeof (spl_filesystem_object_handlers.set), &(spl_filesystem_object_handlers.has_property), sizeof (spl_filesystem_object_handlers.has_property), &(spl_filesystem_object_handlers.unset_property), sizeof (spl_filesystem_object_handlers.unset_property), &(spl_filesystem_object_handlers.has_dimension), sizeof (spl_filesystem_object_handlers.has_dimension), &(spl_filesystem_object_handlers.unset_dimension), sizeof (spl_filesystem_object_handlers.unset_dimension), &(spl_filesystem_object_handlers.get_properties), sizeof (spl_filesystem_object_handlers.get_properties), &(spl_filesystem_object_handlers.get_method), sizeof (spl_filesystem_object_handlers.get_method), &(spl_filesystem_object_handlers.call_method), sizeof (spl_filesystem_object_handlers.call_method), &(spl_filesystem_object_handlers.get_constructor), sizeof (spl_filesystem_object_handlers.get_constructor), &(spl_filesystem_object_handlers.get_class_entry), sizeof (spl_filesystem_object_handlers.get_class_entry), &(spl_filesystem_object_handlers.get_class_name), sizeof (spl_filesystem_object_handlers.get_class_name), &(spl_filesystem_object_handlers.compare_objects), sizeof (spl_filesystem_object_handlers.compare_objects), &(spl_filesystem_object_handlers.cast_object), sizeof (spl_filesystem_object_handlers.cast_object), &(spl_filesystem_object_handlers.count_elements), sizeof (spl_filesystem_object_handlers.count_elements), &(spl_filesystem_object_handlers.get_debug_info), sizeof (spl_filesystem_object_handlers.get_debug_info), &(spl_filesystem_object_handlers.get_closure), sizeof (spl_filesystem_object_handlers.get_closure)))\n    retval.handlers = &spl_filesystem_object_handlers;\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1307995747493917, -6.69921958024939, -5.62529209374939, -7.1223458897493916, -6.7447349437493918, -7.0560673837493919, -7.0560673837493919, -7.2638570537493914, -7.0560673837493919, -7.0560673837493919, -7.2638570537493914, -6.9752289537493919, -7.2638570537493914, -6.9752289537493919, -6.18395792374939, -6.9752289537493919, -6.9752289537493919, -6.18395792374939, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917, -6.5059689537493917]
								}, {
									"case":	2,
									"scores":	[-5.2049962737493916]
								}]
						}]
				}, {
					"line":	152,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	153,
							"begin_column":	0,
							"end_line":	153,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&retval, 0, sizeof (*(&retval)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern = (intern)", "intern->file_class = (class_type)", "intern->info_class = (class_type)", "memset((intern), 0, sizeof(spl_filesystem_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "rebuild_object_properties(&(intern)->std)", "retval.handle = (0)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zend_update_class_constants((class_type))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern = _emalloc((sizeof(spl_filesystem_object)))", "intern->file_class = spl_ce_SplFileObject", "intern->info_class = spl_ce_SplFileInfo", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_filesystem_object))", "object_properties_init(&intern->std, class_type)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_filesystem_object_free_storage, ((void *)0))", "retval.handlers = &spl_filesystem_object_handlers", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	2,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	3,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	4,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	5,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	6,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	7,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	8,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	9,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	10,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	11,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	12,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	13,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	14,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	15,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	16,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	17,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	18,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	19,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	20,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	21,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	22,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	23,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	24,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	25,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	26,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	27,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	28,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	29,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	30,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	31,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	32,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	33,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	34,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	35,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	36,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	37,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	38,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	39,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	40,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	41,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	42,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	43,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	44,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	45,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	46,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	47,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	48,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	49,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	50,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	51,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	52,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	53,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	54,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	55,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	56,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	57,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	58,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	59,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	60,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	61,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	62,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	63,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	64,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	65,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	66,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	67,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	68,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	69,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	70,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	71,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	72,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	73,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	74,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	75,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	76,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	77,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	78,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	79,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	80,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	81,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	82,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	83,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	84,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	85,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	86,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	87,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	88,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	89,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	90,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	91,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	92,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	93,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	94,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	95,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	96,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	97,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	98,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	99,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	100,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	101,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	102,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	103,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	104,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	105,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	106,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	107,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	108,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	109,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	110,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	111,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	112,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	113,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	114,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	115,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	116,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	117,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	118,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	119,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	120,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	121,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	122,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	123,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	124,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	125,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	126,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	127,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	128,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	129,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	130,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	131,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	132,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	133,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	134,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	135,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	136,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	137,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	138,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	139,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	140,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	141,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	142,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	143,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	144,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	145,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	146,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	147,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	148,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	149,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	150,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	151,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	152,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	153,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	154,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	155,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	156,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	157,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	158,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	159,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	160,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	161,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	162,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	163,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	164,
									"scores":	[-5.1847935664318721]
								}, {
									"case":	165,
									"scores":	[-5.1847935664318721]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	153,
							"begin_column":	2,
							"end_line":	153,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L153\", 34, &(retval.handlers), sizeof (retval.handlers), &(intern), sizeof (intern), &(retval.handle), sizeof (retval.handle), &(class_type), sizeof (class_type), &(obj), sizeof (obj), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileInfo), sizeof (spl_ce_SplFileInfo), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_ce_SplFileObject), sizeof (spl_ce_SplFileObject), &(spl_filesystem_object_handlers.add_ref), sizeof (spl_filesystem_object_handlers.add_ref), &(spl_filesystem_object_handlers.del_ref), sizeof (spl_filesystem_object_handlers.del_ref), &(spl_filesystem_object_handlers.clone_obj), sizeof (spl_filesystem_object_handlers.clone_obj), &(spl_filesystem_object_handlers.read_property), sizeof (spl_filesystem_object_handlers.read_property), &(spl_filesystem_object_handlers.write_property), sizeof (spl_filesystem_object_handlers.write_property), &(spl_filesystem_object_handlers.read_dimension), sizeof (spl_filesystem_object_handlers.read_dimension), &(spl_filesystem_object_handlers.write_dimension), sizeof (spl_filesystem_object_handlers.write_dimension), &(spl_filesystem_object_handlers.get_property_ptr_ptr), sizeof (spl_filesystem_object_handlers.get_property_ptr_ptr), &(spl_filesystem_object_handlers.get), sizeof (spl_filesystem_object_handlers.get), &(spl_filesystem_object_handlers.set), sizeof (spl_filesystem_object_handlers.set), &(spl_filesystem_object_handlers.has_property), sizeof (spl_filesystem_object_handlers.has_property), &(spl_filesystem_object_handlers.unset_property), sizeof (spl_filesystem_object_handlers.unset_property), &(spl_filesystem_object_handlers.has_dimension), sizeof (spl_filesystem_object_handlers.has_dimension), &(spl_filesystem_object_handlers.unset_dimension), sizeof (spl_filesystem_object_handlers.unset_dimension), &(spl_filesystem_object_handlers.get_properties), sizeof (spl_filesystem_object_handlers.get_properties), &(spl_filesystem_object_handlers.get_method), sizeof (spl_filesystem_object_handlers.get_method), &(spl_filesystem_object_handlers.call_method), sizeof (spl_filesystem_object_handlers.call_method), &(spl_filesystem_object_handlers.get_constructor), sizeof (spl_filesystem_object_handlers.get_constructor), &(spl_filesystem_object_handlers.get_class_entry), sizeof (spl_filesystem_object_handlers.get_class_entry), &(spl_filesystem_object_handlers.get_class_name), sizeof (spl_filesystem_object_handlers.get_class_name), &(spl_filesystem_object_handlers.compare_objects), sizeof (spl_filesystem_object_handlers.compare_objects), &(spl_filesystem_object_handlers.cast_object), sizeof (spl_filesystem_object_handlers.cast_object), &(spl_filesystem_object_handlers.count_elements), sizeof (spl_filesystem_object_handlers.count_elements), &(spl_filesystem_object_handlers.get_debug_info), sizeof (spl_filesystem_object_handlers.get_debug_info), &(spl_filesystem_object_handlers.get_closure), sizeof (spl_filesystem_object_handlers.get_closure)))\n    return retval;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8617878864318724, -7.1778272729318724, -6.1038997864318718, -7.6009535824318721, -7.2233426364318722, -7.5346750764318724, -7.5346750764318724, -7.5346750764318724, -7.5346750764318724, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721, -6.9845766464318721]
								}]
						}]
				}, {
					"line":	160,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [], [], [], [], [], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [], [], []],
							"begin_line":	161,
							"begin_column":	0,
							"end_line":	161,
							"end_column":	0,
							"patch_codes":	["spl_register_std_class(&(class_type), \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&(class_type), spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&(class_type), spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, (class_type), \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, (class_type), \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, (class_type), \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, (class_type), \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, (class_type), \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, (class_type), \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_GlobIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, (class_type))", "zend_class_implements(spl_ce_SplFileObject, 1, (class_type))", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long((class_type), \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long((class_type), \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long((class_type), \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long((class_type), \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long((class_type), \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long((class_type), \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long((class_type), \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long((class_type), \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long((class_type), \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long((class_type), \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long((class_type), \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_declare_class_constant_long((class_type), \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_throw_exception_ex((class_type), 0, \"Could not open file\")", "zend_throw_exception_ex((class_type), 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex((class_type), 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex((class_type), 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex((class_type), 0, \"Operation not supported\")", "zend_update_class_constants((class_type))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}]
						}, {
							"switch":	22,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	161,
							"begin_column":	2,
							"end_line":	161,
							"end_column":	64,
							"patch_codes":	["if (!__is_neg(\"\", \"L161\", 1, &(class_type), sizeof (class_type)))\n    return spl_filesystem_object_new_ex(class_type, ((void *)0));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6575535202421063]
								}]
						}]
				}, {
					"line":	168,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [154], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [], [], [], [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [], [], [], [], [], []],
							"begin_line":	169,
							"begin_column":	1,
							"end_line":	169,
							"end_column":	1,
							"patch_codes":	["memset(&(intern->u.dir.dirp)->abstract, 0, sizeof (*(&(intern->u.dir.dirp)->abstract)))", "memset(&(intern->u.dir.dirp)->chunk_size, 0, sizeof (*(&(intern->u.dir.dirp)->chunk_size)))", "memset(&(intern->u.dir.dirp)->context, 0, sizeof (*(&(intern->u.dir.dirp)->context)))", "memset(&(intern->u.dir.dirp)->enclosing_stream, 0, sizeof (*(&(intern->u.dir.dirp)->enclosing_stream)))", "memset(&(intern->u.dir.dirp)->eof, 0, sizeof (*(&(intern->u.dir.dirp)->eof)))", "memset(&(intern->u.dir.dirp)->fclose_stdiocast, 0, sizeof (*(&(intern->u.dir.dirp)->fclose_stdiocast)))", "memset(&(intern->u.dir.dirp)->fgetss_state, 0, sizeof (*(&(intern->u.dir.dirp)->fgetss_state)))", "memset(&(intern->u.dir.dirp)->flags, 0, sizeof (*(&(intern->u.dir.dirp)->flags)))", "memset(&(intern->u.dir.dirp)->in_free, 0, sizeof (*(&(intern->u.dir.dirp)->in_free)))", "memset(&(intern->u.dir.dirp)->is_persistent, 0, sizeof (*(&(intern->u.dir.dirp)->is_persistent)))", "memset(&(intern->u.dir.dirp)->mode, 0, sizeof (*(&(intern->u.dir.dirp)->mode)))", "memset(&(intern->u.dir.dirp)->ops, 0, sizeof (*(&(intern->u.dir.dirp)->ops)))", "memset(&(intern->u.dir.dirp)->orig_path, 0, sizeof (*(&(intern->u.dir.dirp)->orig_path)))", "memset(&(intern->u.dir.dirp)->position, 0, sizeof (*(&(intern->u.dir.dirp)->position)))", "memset(&(intern->u.dir.dirp)->readbuf, 0, sizeof (*(&(intern->u.dir.dirp)->readbuf)))", "memset(&(intern->u.dir.dirp)->readbuflen, 0, sizeof (*(&(intern->u.dir.dirp)->readbuflen)))", "memset(&(intern->u.dir.dirp)->readfilters, 0, sizeof (*(&(intern->u.dir.dirp)->readfilters)))", "memset(&(intern->u.dir.dirp)->readpos, 0, sizeof (*(&(intern->u.dir.dirp)->readpos)))", "memset(&(intern->u.dir.dirp)->rsrc_id, 0, sizeof (*(&(intern->u.dir.dirp)->rsrc_id)))", "memset(&(intern->u.dir.dirp)->stdiocast, 0, sizeof (*(&(intern->u.dir.dirp)->stdiocast)))", "memset(&(intern->u.dir.dirp)->wrapper, 0, sizeof (*(&(intern->u.dir.dirp)->wrapper)))", "memset(&(intern->u.dir.dirp)->wrapperdata, 0, sizeof (*(&(intern->u.dir.dirp)->wrapperdata)))", "memset(&(intern->u.dir.dirp)->wrapperthis, 0, sizeof (*(&(intern->u.dir.dirp)->wrapperthis)))", "memset(&(intern->u.dir.dirp)->writefilters, 0, sizeof (*(&(intern->u.dir.dirp)->writefilters)))", "memset(&(intern->u.dir.dirp)->writepos, 0, sizeof (*(&(intern->u.dir.dirp)->writepos)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset((intern->u.dir.dirp), 0, sizeof (*((intern->u.dir.dirp))))", "memset((intern->u.dir.dirp)->abstract, 0, sizeof (*((intern->u.dir.dirp)->abstract)))", "memset((intern->u.dir.dirp)->context, 0, sizeof (*((intern->u.dir.dirp)->context)))", "memset((intern->u.dir.dirp)->enclosing_stream, 0, sizeof (*((intern->u.dir.dirp)->enclosing_stream)))", "memset((intern->u.dir.dirp)->ops, 0, sizeof (*((intern->u.dir.dirp)->ops)))", "memset((intern->u.dir.dirp)->orig_path, 0, sizeof (*((intern->u.dir.dirp)->orig_path)))", "memset((intern->u.dir.dirp)->readbuf, 0, sizeof (*((intern->u.dir.dirp)->readbuf)))", "memset((intern->u.dir.dirp)->stdiocast, 0, sizeof (*((intern->u.dir.dirp)->stdiocast)))", "memset((intern->u.dir.dirp)->wrapper, 0, sizeof (*((intern->u.dir.dirp)->wrapper)))", "memset((intern->u.dir.dirp)->wrapperdata, 0, sizeof (*((intern->u.dir.dirp)->wrapperdata)))", "memset((intern->u.dir.dirp)->wrapperthis, 0, sizeof (*((intern->u.dir.dirp)->wrapperthis)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L169\", 52, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &((intern->u.dir.dirp)->ops), sizeof ((intern->u.dir.dirp)->ops), &(len), sizeof (len), &(intern->type), sizeof (intern->type), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &((intern->u.dir.dirp)->abstract), sizeof ((intern->u.dir.dirp)->abstract), &((intern->u.dir.dirp)->wrapper), sizeof ((intern->u.dir.dirp)->wrapper), &((intern->u.dir.dirp)->wrapperthis), sizeof ((intern->u.dir.dirp)->wrapperthis), &((intern->u.dir.dirp)->wrapperdata), sizeof ((intern->u.dir.dirp)->wrapperdata), &((intern->u.dir.dirp)->fgetss_state), sizeof ((intern->u.dir.dirp)->fgetss_state), &((intern->u.dir.dirp)->is_persistent), sizeof ((intern->u.dir.dirp)->is_persistent), &((intern->u.dir.dirp)->rsrc_id), sizeof ((intern->u.dir.dirp)->rsrc_id), &((intern->u.dir.dirp)->in_free), sizeof ((intern->u.dir.dirp)->in_free), &((intern->u.dir.dirp)->fclose_stdiocast), sizeof ((intern->u.dir.dirp)->fclose_stdiocast), &((intern->u.dir.dirp)->stdiocast), sizeof ((intern->u.dir.dirp)->stdiocast), &((intern->u.dir.dirp)->orig_path), sizeof ((intern->u.dir.dirp)->orig_path), &((intern->u.dir.dirp)->context), sizeof ((intern->u.dir.dirp)->context), &((intern->u.dir.dirp)->flags), sizeof ((intern->u.dir.dirp)->flags), &((intern->u.dir.dirp)->position), sizeof ((intern->u.dir.dirp)->position), &((intern->u.dir.dirp)->readbuf), sizeof ((intern->u.dir.dirp)->readbuf), &((intern->u.dir.dirp)->readbuflen), sizeof ((intern->u.dir.dirp)->readbuflen), &((intern->u.dir.dirp)->readpos), sizeof ((intern->u.dir.dirp)->readpos), &((intern->u.dir.dirp)->writepos), sizeof ((intern->u.dir.dirp)->writepos), &((intern->u.dir.dirp)->chunk_size), sizeof ((intern->u.dir.dirp)->chunk_size), &((intern->u.dir.dirp)->eof), sizeof ((intern->u.dir.dirp)->eof), &((intern->u.dir.dirp)->enclosing_stream), sizeof ((intern->u.dir.dirp)->enclosing_stream), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	2,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	3,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	4,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	5,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	6,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	7,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	8,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	9,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	10,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	11,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	12,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	13,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	14,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	15,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	16,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	17,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	18,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	19,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	20,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	21,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	22,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	23,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	24,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	25,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	26,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	27,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	28,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	29,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	30,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	31,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	32,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	33,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	34,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	35,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	36,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	37,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	38,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	39,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	40,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	41,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	42,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	43,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	44,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	45,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	46,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	47,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	48,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	49,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	50,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	51,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	52,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	53,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	54,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	55,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	56,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	57,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	58,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	59,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	60,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	61,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	62,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	63,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	64,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	65,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	66,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	67,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	68,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	69,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	70,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	71,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	72,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	73,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	74,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	75,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	76,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	77,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	78,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	79,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	80,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	81,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	82,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	83,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	84,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	85,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	86,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	87,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	88,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	89,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	90,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	91,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	92,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	93,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	94,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	95,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	96,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	97,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	98,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	99,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	100,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	101,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	102,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	103,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	104,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	105,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	106,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	107,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	108,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	109,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	110,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	111,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	112,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	113,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	114,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	115,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	116,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	117,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	118,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	119,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	120,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	121,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	122,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	123,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	124,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	125,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	126,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	127,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	128,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	129,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	130,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	131,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	132,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	133,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	134,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	135,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	136,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	137,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	138,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	139,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	140,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	141,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	142,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	143,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	144,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	145,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	146,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	147,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	148,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	149,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	150,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	151,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	152,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	153,
									"scores":	[-4.2352663225084575]
								}, {
									"case":	154,
									"scores":	[-9.30669798820846, -9.1060242412084573, -8.4609658263084562, -6.5217288795084576, -8.24808729250846, -7.7471522925084573, -8.4589764095084554, -8.4589764095084554, -7.7471522925084573, -8.24808729250846, -8.24808729250846, -8.4589764095084554, -8.4589764095084554, -8.4589764095084554, -8.4589764095084554, -8.49412620630846, -8.4589764095084554, -8.49412620630846, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.49412620630846, -8.4589764095084554, -8.49412620630846, -8.24808729250846, -8.24808729250846, -8.4589764095084554, -7.7471522925084573, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.49412620630846, -8.4589764095084554, -8.49412620630846, -8.4589764095084554, -8.4589764095084554, -7.7471522925084573, -8.24808729250846, -8.49412620630846, -8.49412620630846, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.4589764095084554, -8.24808729250846, -8.24808729250846, -8.24808729250846, -8.24808729250846]
								}]
						}, {
							"switch":	26,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	169,
							"begin_column":	3,
							"end_line":	171,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L169\", 52, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &((intern->u.dir.dirp)->ops), sizeof ((intern->u.dir.dirp)->ops), &(len), sizeof (len), &(intern->type), sizeof (intern->type), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &((intern->u.dir.dirp)->abstract), sizeof ((intern->u.dir.dirp)->abstract), &((intern->u.dir.dirp)->wrapper), sizeof ((intern->u.dir.dirp)->wrapper), &((intern->u.dir.dirp)->wrapperthis), sizeof ((intern->u.dir.dirp)->wrapperthis), &((intern->u.dir.dirp)->wrapperdata), sizeof ((intern->u.dir.dirp)->wrapperdata), &((intern->u.dir.dirp)->fgetss_state), sizeof ((intern->u.dir.dirp)->fgetss_state), &((intern->u.dir.dirp)->is_persistent), sizeof ((intern->u.dir.dirp)->is_persistent), &((intern->u.dir.dirp)->rsrc_id), sizeof ((intern->u.dir.dirp)->rsrc_id), &((intern->u.dir.dirp)->in_free), sizeof ((intern->u.dir.dirp)->in_free), &((intern->u.dir.dirp)->fclose_stdiocast), sizeof ((intern->u.dir.dirp)->fclose_stdiocast), &((intern->u.dir.dirp)->stdiocast), sizeof ((intern->u.dir.dirp)->stdiocast), &((intern->u.dir.dirp)->orig_path), sizeof ((intern->u.dir.dirp)->orig_path), &((intern->u.dir.dirp)->context), sizeof ((intern->u.dir.dirp)->context), &((intern->u.dir.dirp)->flags), sizeof ((intern->u.dir.dirp)->flags), &((intern->u.dir.dirp)->position), sizeof ((intern->u.dir.dirp)->position), &((intern->u.dir.dirp)->readbuf), sizeof ((intern->u.dir.dirp)->readbuf), &((intern->u.dir.dirp)->readbuflen), sizeof ((intern->u.dir.dirp)->readbuflen), &((intern->u.dir.dirp)->readpos), sizeof ((intern->u.dir.dirp)->readpos), &((intern->u.dir.dirp)->writepos), sizeof ((intern->u.dir.dirp)->writepos), &((intern->u.dir.dirp)->chunk_size), sizeof ((intern->u.dir.dirp)->chunk_size), &((intern->u.dir.dirp)->eof), sizeof ((intern->u.dir.dirp)->eof), &((intern->u.dir.dirp)->enclosing_stream), sizeof ((intern->u.dir.dirp)->enclosing_stream), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option))) {\n    return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n}\n", "if ((((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) || __is_neg(\"\", \"L169\", 52, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &((intern->u.dir.dirp)->ops), sizeof ((intern->u.dir.dirp)->ops), &(len), sizeof (len), &(intern->type), sizeof (intern->type), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &((intern->u.dir.dirp)->abstract), sizeof ((intern->u.dir.dirp)->abstract), &((intern->u.dir.dirp)->wrapper), sizeof ((intern->u.dir.dirp)->wrapper), &((intern->u.dir.dirp)->wrapperthis), sizeof ((intern->u.dir.dirp)->wrapperthis), &((intern->u.dir.dirp)->wrapperdata), sizeof ((intern->u.dir.dirp)->wrapperdata), &((intern->u.dir.dirp)->fgetss_state), sizeof ((intern->u.dir.dirp)->fgetss_state), &((intern->u.dir.dirp)->is_persistent), sizeof ((intern->u.dir.dirp)->is_persistent), &((intern->u.dir.dirp)->rsrc_id), sizeof ((intern->u.dir.dirp)->rsrc_id), &((intern->u.dir.dirp)->in_free), sizeof ((intern->u.dir.dirp)->in_free), &((intern->u.dir.dirp)->fclose_stdiocast), sizeof ((intern->u.dir.dirp)->fclose_stdiocast), &((intern->u.dir.dirp)->stdiocast), sizeof ((intern->u.dir.dirp)->stdiocast), &((intern->u.dir.dirp)->orig_path), sizeof ((intern->u.dir.dirp)->orig_path), &((intern->u.dir.dirp)->context), sizeof ((intern->u.dir.dirp)->context), &((intern->u.dir.dirp)->flags), sizeof ((intern->u.dir.dirp)->flags), &((intern->u.dir.dirp)->position), sizeof ((intern->u.dir.dirp)->position), &((intern->u.dir.dirp)->readbuf), sizeof ((intern->u.dir.dirp)->readbuf), &((intern->u.dir.dirp)->readbuflen), sizeof ((intern->u.dir.dirp)->readbuflen), &((intern->u.dir.dirp)->readpos), sizeof ((intern->u.dir.dirp)->readpos), &((intern->u.dir.dirp)->writepos), sizeof ((intern->u.dir.dirp)->writepos), &((intern->u.dir.dirp)->chunk_size), sizeof ((intern->u.dir.dirp)->chunk_size), &((intern->u.dir.dirp)->eof), sizeof ((intern->u.dir.dirp)->eof), &((intern->u.dir.dirp)->enclosing_stream), sizeof ((intern->u.dir.dirp)->enclosing_stream), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option))) {\n    return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n}\n", "if ((((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) && !__is_neg(\"\", \"L169\", 52, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &((intern->u.dir.dirp)->ops), sizeof ((intern->u.dir.dirp)->ops), &(len), sizeof (len), &(intern->type), sizeof (intern->type), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &((intern->u.dir.dirp)->abstract), sizeof ((intern->u.dir.dirp)->abstract), &((intern->u.dir.dirp)->wrapper), sizeof ((intern->u.dir.dirp)->wrapper), &((intern->u.dir.dirp)->wrapperthis), sizeof ((intern->u.dir.dirp)->wrapperthis), &((intern->u.dir.dirp)->wrapperdata), sizeof ((intern->u.dir.dirp)->wrapperdata), &((intern->u.dir.dirp)->fgetss_state), sizeof ((intern->u.dir.dirp)->fgetss_state), &((intern->u.dir.dirp)->is_persistent), sizeof ((intern->u.dir.dirp)->is_persistent), &((intern->u.dir.dirp)->rsrc_id), sizeof ((intern->u.dir.dirp)->rsrc_id), &((intern->u.dir.dirp)->in_free), sizeof ((intern->u.dir.dirp)->in_free), &((intern->u.dir.dirp)->fclose_stdiocast), sizeof ((intern->u.dir.dirp)->fclose_stdiocast), &((intern->u.dir.dirp)->stdiocast), sizeof ((intern->u.dir.dirp)->stdiocast), &((intern->u.dir.dirp)->orig_path), sizeof ((intern->u.dir.dirp)->orig_path), &((intern->u.dir.dirp)->context), sizeof ((intern->u.dir.dirp)->context), &((intern->u.dir.dirp)->flags), sizeof ((intern->u.dir.dirp)->flags), &((intern->u.dir.dirp)->position), sizeof ((intern->u.dir.dirp)->position), &((intern->u.dir.dirp)->readbuf), sizeof ((intern->u.dir.dirp)->readbuf), &((intern->u.dir.dirp)->readbuflen), sizeof ((intern->u.dir.dirp)->readbuflen), &((intern->u.dir.dirp)->readpos), sizeof ((intern->u.dir.dirp)->readpos), &((intern->u.dir.dirp)->writepos), sizeof ((intern->u.dir.dirp)->writepos), &((intern->u.dir.dirp)->chunk_size), sizeof ((intern->u.dir.dirp)->chunk_size), &((intern->u.dir.dirp)->eof), sizeof ((intern->u.dir.dirp)->eof), &((intern->u.dir.dirp)->enclosing_stream), sizeof ((intern->u.dir.dirp)->enclosing_stream), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option))) {\n    return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.431578187428145, -5.2509421974281452, -3.7322273014281455, -4.3024430574281451, -5.0983292014281458, -4.7763181714281462, -5.5675892014281461, -5.5675892014281461, -4.7763181714281462, -5.0983292014281458, -5.0983292014281458, -5.5675892014281461, -5.5675892014281461, -5.5675892014281461, -5.5675892014281461, -5.8562173014281464, -5.5675892014281461, -5.8562173014281464, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.8562173014281464, -5.5675892014281461, -5.8562173014281464, -5.0983292014281458, -5.0983292014281458, -5.5675892014281461, -4.7763181714281462, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.8562173014281464, -5.5675892014281461, -5.8562173014281464, -5.5675892014281461, -5.5675892014281461, -4.7763181714281462, -5.0983292014281458, -5.8562173014281464, -5.8562173014281464, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.5675892014281461, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458, -5.0983292014281458]
								}, {
									"case":	2,
									"scores":	[-5.4904593304281466, -5.3098233404281459, -3.7911084444281453, -4.3613242004281458, -5.1572103444281456, -4.835199314428146, -5.6264703444281459, -5.6264703444281459, -4.835199314428146, -5.1572103444281456, -5.1572103444281456, -5.6264703444281459, -5.6264703444281459, -5.6264703444281459, -5.6264703444281459, -5.9150984444281463, -5.6264703444281459, -5.9150984444281463, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.9150984444281463, -5.6264703444281459, -5.9150984444281463, -5.1572103444281456, -5.1572103444281456, -5.6264703444281459, -4.835199314428146, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.9150984444281463, -5.6264703444281459, -5.9150984444281463, -5.6264703444281459, -5.6264703444281459, -4.835199314428146, -5.1572103444281456, -5.9150984444281463, -5.9150984444281463, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.6264703444281459, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456]
								}, {
									"case":	3,
									"scores":	[-5.4904593304281466, -5.3098233404281459, -3.7911084444281453, -4.3613242004281458, -5.1572103444281456, -4.835199314428146, -5.6264703444281459, -5.6264703444281459, -4.835199314428146, -5.1572103444281456, -5.1572103444281456, -5.6264703444281459, -5.6264703444281459, -5.6264703444281459, -5.6264703444281459, -5.9150984444281463, -5.6264703444281459, -5.9150984444281463, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.9150984444281463, -5.6264703444281459, -5.9150984444281463, -5.1572103444281456, -5.1572103444281456, -5.6264703444281459, -4.835199314428146, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.9150984444281463, -5.6264703444281459, -5.9150984444281463, -5.6264703444281459, -5.6264703444281459, -4.835199314428146, -5.1572103444281456, -5.9150984444281463, -5.9150984444281463, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.6264703444281459, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456, -5.1572103444281456]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	169,
							"begin_column":	3,
							"end_line":	171,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L169\", 52, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &((intern->u.dir.dirp)->ops), sizeof ((intern->u.dir.dirp)->ops), &(len), sizeof (len), &(intern->type), sizeof (intern->type), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &((intern->u.dir.dirp)->abstract), sizeof ((intern->u.dir.dirp)->abstract), &((intern->u.dir.dirp)->wrapper), sizeof ((intern->u.dir.dirp)->wrapper), &((intern->u.dir.dirp)->wrapperthis), sizeof ((intern->u.dir.dirp)->wrapperthis), &((intern->u.dir.dirp)->wrapperdata), sizeof ((intern->u.dir.dirp)->wrapperdata), &((intern->u.dir.dirp)->fgetss_state), sizeof ((intern->u.dir.dirp)->fgetss_state), &((intern->u.dir.dirp)->is_persistent), sizeof ((intern->u.dir.dirp)->is_persistent), &((intern->u.dir.dirp)->rsrc_id), sizeof ((intern->u.dir.dirp)->rsrc_id), &((intern->u.dir.dirp)->in_free), sizeof ((intern->u.dir.dirp)->in_free), &((intern->u.dir.dirp)->fclose_stdiocast), sizeof ((intern->u.dir.dirp)->fclose_stdiocast), &((intern->u.dir.dirp)->stdiocast), sizeof ((intern->u.dir.dirp)->stdiocast), &((intern->u.dir.dirp)->orig_path), sizeof ((intern->u.dir.dirp)->orig_path), &((intern->u.dir.dirp)->context), sizeof ((intern->u.dir.dirp)->context), &((intern->u.dir.dirp)->flags), sizeof ((intern->u.dir.dirp)->flags), &((intern->u.dir.dirp)->position), sizeof ((intern->u.dir.dirp)->position), &((intern->u.dir.dirp)->readbuf), sizeof ((intern->u.dir.dirp)->readbuf), &((intern->u.dir.dirp)->readbuflen), sizeof ((intern->u.dir.dirp)->readbuflen), &((intern->u.dir.dirp)->readpos), sizeof ((intern->u.dir.dirp)->readpos), &((intern->u.dir.dirp)->writepos), sizeof ((intern->u.dir.dirp)->writepos), &((intern->u.dir.dirp)->chunk_size), sizeof ((intern->u.dir.dirp)->chunk_size), &((intern->u.dir.dirp)->eof), sizeof ((intern->u.dir.dirp)->eof), &((intern->u.dir.dirp)->enclosing_stream), sizeof ((intern->u.dir.dirp)->enclosing_stream), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option)))\n    if (((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) {\n        return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n    }\n", "if (!__is_neg(\"\", \"L169\", 52, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &((intern->u.dir.dirp)->ops), sizeof ((intern->u.dir.dirp)->ops), &(len), sizeof (len), &(intern->type), sizeof (intern->type), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &((intern->u.dir.dirp)->abstract), sizeof ((intern->u.dir.dirp)->abstract), &((intern->u.dir.dirp)->wrapper), sizeof ((intern->u.dir.dirp)->wrapper), &((intern->u.dir.dirp)->wrapperthis), sizeof ((intern->u.dir.dirp)->wrapperthis), &((intern->u.dir.dirp)->wrapperdata), sizeof ((intern->u.dir.dirp)->wrapperdata), &((intern->u.dir.dirp)->fgetss_state), sizeof ((intern->u.dir.dirp)->fgetss_state), &((intern->u.dir.dirp)->is_persistent), sizeof ((intern->u.dir.dirp)->is_persistent), &((intern->u.dir.dirp)->rsrc_id), sizeof ((intern->u.dir.dirp)->rsrc_id), &((intern->u.dir.dirp)->in_free), sizeof ((intern->u.dir.dirp)->in_free), &((intern->u.dir.dirp)->fclose_stdiocast), sizeof ((intern->u.dir.dirp)->fclose_stdiocast), &((intern->u.dir.dirp)->stdiocast), sizeof ((intern->u.dir.dirp)->stdiocast), &((intern->u.dir.dirp)->orig_path), sizeof ((intern->u.dir.dirp)->orig_path), &((intern->u.dir.dirp)->context), sizeof ((intern->u.dir.dirp)->context), &((intern->u.dir.dirp)->flags), sizeof ((intern->u.dir.dirp)->flags), &((intern->u.dir.dirp)->position), sizeof ((intern->u.dir.dirp)->position), &((intern->u.dir.dirp)->readbuf), sizeof ((intern->u.dir.dirp)->readbuf), &((intern->u.dir.dirp)->readbuflen), sizeof ((intern->u.dir.dirp)->readbuflen), &((intern->u.dir.dirp)->readpos), sizeof ((intern->u.dir.dirp)->readpos), &((intern->u.dir.dirp)->writepos), sizeof ((intern->u.dir.dirp)->writepos), &((intern->u.dir.dirp)->chunk_size), sizeof ((intern->u.dir.dirp)->chunk_size), &((intern->u.dir.dirp)->eof), sizeof ((intern->u.dir.dirp)->eof), &((intern->u.dir.dirp)->enclosing_stream), sizeof ((intern->u.dir.dirp)->enclosing_stream), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option)) && (((intern->u.dir.dirp)->ops == &php_glob_stream_ops))) {\n    return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9710353885084579, -6.7903993985084572, -5.2716845025084575, -5.8419002585084572, -6.637786402508457, -6.3157753725084573, -7.1070464025084572, -7.1070464025084572, -6.3157753725084573, -6.637786402508457, -6.637786402508457, -7.1070464025084572, -7.1070464025084572, -7.1070464025084572, -7.1070464025084572, -7.3956745025084576, -7.1070464025084572, -7.3956745025084576, -6.637786402508457, -6.637786402508457, -6.637786402508457, -6.637786402508457, -6.637786402508457, -7.3956745025084576, -7.1070464025084572, -7.3956745025084576, -6.637786402508457, -6.637786402508457, -7.1070464025084572, -6.3157753725084573, -6.637786402508457, -6.637786402508457, -6.637786402508457, -6.637786402508457, -7.3956745025084576, -7.1070464025084572, -7.3956745025084576, -7.1070464025084572, -7.1070464025084572, -6.3157753725084573, -6.637786402508457, -7.3956745025084576, -7.3956745025084576, -6.637786402508457, -6.637786402508457, -6.637786402508457, -6.637786402508457, -7.1070464025084572, -6.637786402508457, -6.637786402508457, -6.637786402508457, -6.637786402508457]
								}, {
									"case":	2,
									"scores":	[-7.5405475475084582, -7.3599115575084575, -5.841196661508457, -6.4114124175084575, -7.2072985615084573, -6.8852875315084567, -7.6765585615084575, -7.6765585615084575, -6.8852875315084567, -7.2072985615084573, -7.2072985615084573, -7.6765585615084575, -7.6765585615084575, -7.6765585615084575, -7.6765585615084575, -7.965186661508457, -7.6765585615084575, -7.965186661508457, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.965186661508457, -7.6765585615084575, -7.965186661508457, -7.2072985615084573, -7.2072985615084573, -7.6765585615084575, -6.8852875315084567, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.965186661508457, -7.6765585615084575, -7.965186661508457, -7.6765585615084575, -7.6765585615084575, -6.8852875315084567, -7.2072985615084573, -7.965186661508457, -7.965186661508457, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.6765585615084575, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573, -7.2072985615084573]
								}]
						}]
				}, {
					"line":	167,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [102], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [], [], [], [], [], []],
							"begin_line":	168,
							"begin_column":	0,
							"end_line":	168,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L168\", 22, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(len), sizeof (len), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.94236107862164]
								}, {
									"case":	2,
									"scores":	[-4.94236107862164]
								}, {
									"case":	3,
									"scores":	[-4.94236107862164]
								}, {
									"case":	4,
									"scores":	[-4.94236107862164]
								}, {
									"case":	5,
									"scores":	[-4.94236107862164]
								}, {
									"case":	6,
									"scores":	[-4.94236107862164]
								}, {
									"case":	7,
									"scores":	[-4.94236107862164]
								}, {
									"case":	8,
									"scores":	[-4.94236107862164]
								}, {
									"case":	9,
									"scores":	[-4.94236107862164]
								}, {
									"case":	10,
									"scores":	[-4.94236107862164]
								}, {
									"case":	11,
									"scores":	[-4.94236107862164]
								}, {
									"case":	12,
									"scores":	[-4.94236107862164]
								}, {
									"case":	13,
									"scores":	[-4.94236107862164]
								}, {
									"case":	14,
									"scores":	[-4.94236107862164]
								}, {
									"case":	15,
									"scores":	[-4.94236107862164]
								}, {
									"case":	16,
									"scores":	[-4.94236107862164]
								}, {
									"case":	17,
									"scores":	[-4.94236107862164]
								}, {
									"case":	18,
									"scores":	[-4.94236107862164]
								}, {
									"case":	19,
									"scores":	[-4.94236107862164]
								}, {
									"case":	20,
									"scores":	[-4.94236107862164]
								}, {
									"case":	21,
									"scores":	[-4.94236107862164]
								}, {
									"case":	22,
									"scores":	[-4.94236107862164]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-9.75059974432164, -9.20186566862164, -7.8317366356216382, -8.19105404862164, -9.64053567162164, -9.44591516562164, -9.48106496242164, -9.44591516562164, -9.44591516562164, -8.73409104862164, -9.23502604862164, -9.48106496242164, -9.48106496242164, -9.23502604862164, -9.23502604862164, -9.23502604862164, -9.23502604862164, -9.44591516562164, -9.23502604862164, -9.23502604862164, -9.23502604862164, -9.23502604862164]
								}]
						}, {
							"switch":	24,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	168,
							"begin_column":	2,
							"end_line":	172,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L168\", 22, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(len), sizeof (len), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option))) {\n    if (((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) {\n        return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n    }\n}\n", "if ((intern->type == SPL_FS_DIR) || __is_neg(\"\", \"L168\", 22, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(len), sizeof (len), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option))) {\n    if (((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) {\n        return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n    }\n}\n", "if ((intern->type == SPL_FS_DIR) && !__is_neg(\"\", \"L168\", 22, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(len), sizeof (len), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option))) {\n    if (((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) {\n        return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0796777013281442, -3.8240049114281445, -4.0252021274281446, -5.0123004414281453, -6.2925504174281439, -6.4172549114281452, -6.7058830114281438, -6.4172549114281452, -6.4172549114281452, -5.6259838814281453, -5.947994911428145, -6.7058830114281438, -6.7058830114281438, -5.947994911428145, -5.947994911428145, -5.947994911428145, -5.947994911428145, -6.4172549114281452, -5.947994911428145, -5.947994911428145, -5.947994911428145, -5.947994911428145]
								}, {
									"case":	2,
									"scores":	[-5.6763590043281464, -3.4206862144281458, -3.6218834304281455, -4.6089817444281458, -5.8892317204281461, -6.0139362144281456, -6.302564314428146, -6.0139362144281456, -6.0139362144281456, -5.2226651844281458, -5.5446762144281454, -6.302564314428146, -6.302564314428146, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454, -6.0139362144281456, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454]
								}, {
									"case":	3,
									"scores":	[-5.6763590043281464, -3.4206862144281458, -3.6218834304281455, -4.6089817444281458, -5.8892317204281461, -6.0139362144281456, -6.302564314428146, -6.0139362144281456, -6.0139362144281456, -5.2226651844281458, -5.5446762144281454, -6.302564314428146, -6.302564314428146, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454, -6.0139362144281456, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454, -5.5446762144281454]
								}]
						}, {
							"switch":	28,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	168,
							"begin_column":	2,
							"end_line":	172,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L168\", 22, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(len), sizeof (len), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option)))\n    if (intern->type == SPL_FS_DIR) {\n        if (((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) {\n            return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n        }\n    }\n", "if (!__is_neg(\"\", \"L168\", 22, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(len), sizeof (len), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->flags), sizeof (intern->flags), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(php_glob_stream_ops.write), sizeof (php_glob_stream_ops.write), &(php_glob_stream_ops.read), sizeof (php_glob_stream_ops.read), &(php_glob_stream_ops.close), sizeof (php_glob_stream_ops.close), &(php_glob_stream_ops.flush), sizeof (php_glob_stream_ops.flush), &(php_glob_stream_ops.label), sizeof (php_glob_stream_ops.label), &(php_glob_stream_ops.seek), sizeof (php_glob_stream_ops.seek), &(php_glob_stream_ops.cast), sizeof (php_glob_stream_ops.cast), &(php_glob_stream_ops.stat), sizeof (php_glob_stream_ops.stat), &(php_glob_stream_ops.set_option), sizeof (php_glob_stream_ops.set_option)) && (intern->type == SPL_FS_DIR)) {\n    if (((intern->u.dir.dirp)->ops == &php_glob_stream_ops)) {\n        return _php_glob_stream_get_path((intern->u.dir.dirp), (0), (len));\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.09784533852164, -4.8421725486216385, -5.04336976462164, -6.03046807862164, -7.3107180546216384, -7.43542254862164, -7.72405064862164, -7.43542254862164, -7.43542254862164, -6.64415151862164, -6.96616254862164, -7.72405064862164, -7.72405064862164, -6.96616254862164, -6.96616254862164, -6.96616254862164, -6.96616254862164, -7.43542254862164, -6.96616254862164, -6.96616254862164, -6.96616254862164, -6.96616254862164]
								}, {
									"case":	2,
									"scores":	[-7.52242466752164, -5.26675187762164, -5.46794909362164, -6.45504740762164, -7.7352973836216385, -7.860001877621638, -8.14862997762164, -7.860001877621638, -7.860001877621638, -7.06873084762164, -7.39074187762164, -8.14862997762164, -8.14862997762164, -7.39074187762164, -7.39074187762164, -7.39074187762164, -7.39074187762164, -7.860001877621638, -7.39074187762164, -7.39074187762164, -7.39074187762164, -7.39074187762164]
								}]
						}]
				}, {
					"line":	181,
					"switches":	[]
				}, {
					"line":	184,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [102], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [], [], [], [], [], []],
							"begin_line":	185,
							"begin_column":	1,
							"end_line":	185,
							"end_column":	1,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L185\", 13, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(intern->file_name), sizeof (intern->file_name), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.255469029825977]
								}, {
									"case":	2,
									"scores":	[-4.255469029825977]
								}, {
									"case":	3,
									"scores":	[-4.255469029825977]
								}, {
									"case":	4,
									"scores":	[-4.255469029825977]
								}, {
									"case":	5,
									"scores":	[-4.255469029825977]
								}, {
									"case":	6,
									"scores":	[-4.255469029825977]
								}, {
									"case":	7,
									"scores":	[-4.255469029825977]
								}, {
									"case":	8,
									"scores":	[-4.255469029825977]
								}, {
									"case":	9,
									"scores":	[-4.255469029825977]
								}, {
									"case":	10,
									"scores":	[-4.255469029825977]
								}, {
									"case":	11,
									"scores":	[-4.255469029825977]
								}, {
									"case":	12,
									"scores":	[-4.255469029825977]
								}, {
									"case":	13,
									"scores":	[-4.255469029825977]
								}, {
									"case":	14,
									"scores":	[-4.255469029825977]
								}, {
									"case":	15,
									"scores":	[-4.255469029825977]
								}, {
									"case":	16,
									"scores":	[-4.255469029825977]
								}, {
									"case":	17,
									"scores":	[-4.255469029825977]
								}, {
									"case":	18,
									"scores":	[-4.255469029825977]
								}, {
									"case":	19,
									"scores":	[-4.255469029825977]
								}, {
									"case":	20,
									"scores":	[-4.255469029825977]
								}, {
									"case":	21,
									"scores":	[-4.255469029825977]
								}, {
									"case":	22,
									"scores":	[-4.255469029825977]
								}, {
									"case":	23,
									"scores":	[-4.255469029825977]
								}, {
									"case":	24,
									"scores":	[-4.255469029825977]
								}, {
									"case":	25,
									"scores":	[-4.255469029825977]
								}, {
									"case":	26,
									"scores":	[-4.255469029825977]
								}, {
									"case":	27,
									"scores":	[-4.255469029825977]
								}, {
									"case":	28,
									"scores":	[-4.255469029825977]
								}, {
									"case":	29,
									"scores":	[-4.255469029825977]
								}, {
									"case":	30,
									"scores":	[-4.255469029825977]
								}, {
									"case":	31,
									"scores":	[-4.255469029825977]
								}, {
									"case":	32,
									"scores":	[-4.255469029825977]
								}, {
									"case":	33,
									"scores":	[-4.255469029825977]
								}, {
									"case":	34,
									"scores":	[-4.255469029825977]
								}, {
									"case":	35,
									"scores":	[-4.255469029825977]
								}, {
									"case":	36,
									"scores":	[-4.255469029825977]
								}, {
									"case":	37,
									"scores":	[-4.255469029825977]
								}, {
									"case":	38,
									"scores":	[-4.255469029825977]
								}, {
									"case":	39,
									"scores":	[-4.255469029825977]
								}, {
									"case":	40,
									"scores":	[-4.255469029825977]
								}, {
									"case":	41,
									"scores":	[-4.255469029825977]
								}, {
									"case":	42,
									"scores":	[-4.255469029825977]
								}, {
									"case":	43,
									"scores":	[-4.255469029825977]
								}, {
									"case":	44,
									"scores":	[-4.255469029825977]
								}, {
									"case":	45,
									"scores":	[-4.255469029825977]
								}, {
									"case":	46,
									"scores":	[-4.255469029825977]
								}, {
									"case":	47,
									"scores":	[-4.255469029825977]
								}, {
									"case":	48,
									"scores":	[-4.255469029825977]
								}, {
									"case":	49,
									"scores":	[-4.255469029825977]
								}, {
									"case":	50,
									"scores":	[-4.255469029825977]
								}, {
									"case":	51,
									"scores":	[-4.255469029825977]
								}, {
									"case":	52,
									"scores":	[-4.255469029825977]
								}, {
									"case":	53,
									"scores":	[-4.255469029825977]
								}, {
									"case":	54,
									"scores":	[-4.255469029825977]
								}, {
									"case":	55,
									"scores":	[-4.255469029825977]
								}, {
									"case":	56,
									"scores":	[-4.255469029825977]
								}, {
									"case":	57,
									"scores":	[-4.255469029825977]
								}, {
									"case":	58,
									"scores":	[-4.255469029825977]
								}, {
									"case":	59,
									"scores":	[-4.255469029825977]
								}, {
									"case":	60,
									"scores":	[-4.255469029825977]
								}, {
									"case":	61,
									"scores":	[-4.255469029825977]
								}, {
									"case":	62,
									"scores":	[-4.255469029825977]
								}, {
									"case":	63,
									"scores":	[-4.255469029825977]
								}, {
									"case":	64,
									"scores":	[-4.255469029825977]
								}, {
									"case":	65,
									"scores":	[-4.255469029825977]
								}, {
									"case":	66,
									"scores":	[-4.255469029825977]
								}, {
									"case":	67,
									"scores":	[-4.255469029825977]
								}, {
									"case":	68,
									"scores":	[-4.255469029825977]
								}, {
									"case":	69,
									"scores":	[-4.255469029825977]
								}, {
									"case":	70,
									"scores":	[-4.255469029825977]
								}, {
									"case":	71,
									"scores":	[-4.255469029825977]
								}, {
									"case":	72,
									"scores":	[-4.255469029825977]
								}, {
									"case":	73,
									"scores":	[-4.255469029825977]
								}, {
									"case":	74,
									"scores":	[-4.255469029825977]
								}, {
									"case":	75,
									"scores":	[-4.255469029825977]
								}, {
									"case":	76,
									"scores":	[-4.255469029825977]
								}, {
									"case":	77,
									"scores":	[-4.255469029825977]
								}, {
									"case":	78,
									"scores":	[-4.255469029825977]
								}, {
									"case":	79,
									"scores":	[-4.255469029825977]
								}, {
									"case":	80,
									"scores":	[-4.255469029825977]
								}, {
									"case":	81,
									"scores":	[-4.255469029825977]
								}, {
									"case":	82,
									"scores":	[-4.255469029825977]
								}, {
									"case":	83,
									"scores":	[-4.255469029825977]
								}, {
									"case":	84,
									"scores":	[-4.255469029825977]
								}, {
									"case":	85,
									"scores":	[-4.255469029825977]
								}, {
									"case":	86,
									"scores":	[-4.255469029825977]
								}, {
									"case":	87,
									"scores":	[-4.255469029825977]
								}, {
									"case":	88,
									"scores":	[-4.255469029825977]
								}, {
									"case":	89,
									"scores":	[-4.255469029825977]
								}, {
									"case":	90,
									"scores":	[-4.255469029825977]
								}, {
									"case":	91,
									"scores":	[-4.255469029825977]
								}, {
									"case":	92,
									"scores":	[-4.255469029825977]
								}, {
									"case":	93,
									"scores":	[-4.255469029825977]
								}, {
									"case":	94,
									"scores":	[-4.255469029825977]
								}, {
									"case":	95,
									"scores":	[-4.255469029825977]
								}, {
									"case":	96,
									"scores":	[-4.255469029825977]
								}, {
									"case":	97,
									"scores":	[-4.255469029825977]
								}, {
									"case":	98,
									"scores":	[-4.255469029825977]
								}, {
									"case":	99,
									"scores":	[-4.255469029825977]
								}, {
									"case":	100,
									"scores":	[-4.255469029825977]
								}, {
									"case":	101,
									"scores":	[-4.255469029825977]
								}, {
									"case":	102,
									"scores":	[-4.829986135525977, -6.4040189998259773, -5.1424834468259775, -6.4040189998259773, -5.0130572408259768, -3.0180968568259772, -6.6149081168259771, -6.650057913625977, -6.6149081168259771, -5.9030839998259772, -6.6149081168259771, -6.650057913625977, -6.650057913625977]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	185,
							"begin_column":	3,
							"end_line":	195,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L185\", 13, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(intern->file_name), sizeof (intern->file_name), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    switch (intern->type) {\n      case SPL_FS_INFO:\n      case SPL_FS_FILE:\n        php_error_docref0(((void *)0), (1 << 0L), \"Object not initialized\");\n        break;\n      case SPL_FS_DIR:\n        intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, ((void *)0)), slash, intern->u.dir.entry.d_name);\n        break;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1989672098259776, -5.4587537098259773, -4.9777538198259768, -5.4587537098259773, -5.0036852008259771, -3.7255646098259771, -5.9280137098259775, -6.216641809825977, -5.9280137098259775, -5.1367426798259768, -5.9280137098259775, -6.216641809825977, -6.216641809825977]
								}]
						}]
				}, {
					"line":	183,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [102], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [], [], [], [], [], []],
							"begin_line":	184,
							"begin_column":	0,
							"end_line":	184,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L184\", 13, &(intern), sizeof (intern), &(intern->file_name), sizeof (intern->file_name), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	2,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	3,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	4,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	5,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	6,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	7,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	8,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	9,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	10,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	11,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	12,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	13,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	14,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	15,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	16,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	17,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	18,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	19,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	20,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	21,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	22,
									"scores":	[-4.9625637859391585]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-7.79239459163916, -7.5696282029391586, -8.83116375593916, -8.83116375593916, -7.44020199693916, -5.44524161293916, -9.04205287293916, -9.07720266973916, -9.04205287293916, -8.33022875593916, -9.04205287293916, -9.07720266973916, -9.07720266973916]
								}]
						}, {
							"switch":	30,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	184,
							"begin_column":	2,
							"end_line":	196,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L184\", 13, &(intern), sizeof (intern), &(intern->file_name), sizeof (intern->file_name), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) {\n    switch (intern->type) {\n      case SPL_FS_INFO:\n      case SPL_FS_FILE:\n        php_error_docref0(((void *)0), (1 << 0L), \"Object not initialized\");\n        break;\n      case SPL_FS_DIR:\n        intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, ((void *)0)), slash, intern->u.dir.entry.d_name);\n        break;\n    }\n}\n", "if ((!intern->file_name) || __is_neg(\"\", \"L184\", 13, &(intern), sizeof (intern), &(intern->file_name), sizeof (intern->file_name), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) {\n    switch (intern->type) {\n      case SPL_FS_INFO:\n      case SPL_FS_FILE:\n        php_error_docref0(((void *)0), (1 << 0L), \"Object not initialized\");\n        break;\n      case SPL_FS_DIR:\n        intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, ((void *)0)), slash, intern->u.dir.entry.d_name);\n        break;\n    }\n}\n", "if ((!intern->file_name) && !__is_neg(\"\", \"L184\", 13, &(intern), sizeof (intern), &(intern->file_name), sizeof (intern->file_name), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) {\n    switch (intern->type) {\n      case SPL_FS_INFO:\n      case SPL_FS_FILE:\n        php_error_docref0(((void *)0), (1 << 0L), \"Object not initialized\");\n        break;\n      case SPL_FS_DIR:\n        intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, ((void *)0)), slash, intern->u.dir.entry.d_name);\n        break;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4722566849281469, -4.0092558044281459, -4.4902556944281464, -4.4902556944281464, -4.0351871854281454, -2.7570665944281467, -4.9595156944281467, -5.2481437944281462, -4.9595156944281467, -4.1682446644281459, -4.9595156944281467, -5.2481437944281462, -5.2481437944281462]
								}, {
									"case":	2,
									"scores":	[-5.5503384689281461, -5.087337588428146, -5.5683374784281456, -5.5683374784281456, -5.1132689694281463, -3.8351483784281455, -6.0375974784281459, -6.3262255784281454, -6.0375974784281459, -5.246326448428146, -6.0375974784281459, -6.3262255784281454, -6.3262255784281454]
								}, {
									"case":	3,
									"scores":	[-5.5503384689281461, -5.087337588428146, -5.5683374784281456, -5.5683374784281456, -5.1132689694281463, -3.8351483784281455, -6.0375974784281459, -6.3262255784281454, -6.0375974784281459, -5.246326448428146, -6.0375974784281459, -6.3262255784281454, -6.3262255784281454]
								}]
						}, {
							"switch":	33,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	184,
							"begin_column":	2,
							"end_line":	196,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L184\", 13, &(intern), sizeof (intern), &(intern->file_name), sizeof (intern->file_name), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    if (!intern->file_name) {\n        switch (intern->type) {\n          case SPL_FS_INFO:\n          case SPL_FS_FILE:\n            php_error_docref0(((void *)0), (1 << 0L), \"Object not initialized\");\n            break;\n          case SPL_FS_DIR:\n            intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, ((void *)0)), slash, intern->u.dir.entry.d_name);\n            break;\n        }\n    }\n", "if (!__is_neg(\"\", \"L184\", 13, &(intern), sizeof (intern), &(intern->file_name), sizeof (intern->file_name), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->file_name_len), sizeof (intern->file_name_len), &(slash), sizeof (slash), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)) && (!intern->file_name)) {\n    switch (intern->type) {\n      case SPL_FS_INFO:\n      case SPL_FS_FILE:\n        php_error_docref0(((void *)0), (1 << 0L), \"Object not initialized\");\n        break;\n      case SPL_FS_DIR:\n        intern->file_name_len = spprintf(&intern->file_name, 0, \"%s%c%s\", spl_filesystem_object_get_path(intern, ((void *)0)), slash, intern->u.dir.entry.d_name);\n        break;\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3470848564391584, -6.8840839759391583, -7.36508386593916, -7.36508386593916, -6.91001535693916, -5.6318947659391583, -7.83434386593916, -8.12297196593916, -7.83434386593916, -7.0430728359391583, -7.83434386593916, -8.12297196593916, -8.12297196593916]
								}, {
									"case":	2,
									"scores":	[-8.32772414943916, -7.8647232689391586, -8.34572315893916, -8.34572315893916, -7.8906546499391581, -6.6125340589391586, -8.81498315893916, -9.1036112589391571, -8.81498315893916, -8.02371212893916, -8.81498315893916, -9.1036112589391571, -9.1036112589391571]
								}]
						}]
				}, {
					"line":	221,
					"switches":	[]
				}, {
					"line":	223,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [247], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], [], [], [], [], [], []],
							"begin_line":	224,
							"begin_column":	0,
							"end_line":	224,
							"end_column":	0,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L224\", 14, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->flags), sizeof (intern->flags), &(intern->_path), sizeof (intern->_path), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	19,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	20,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	21,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	22,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	23,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	24,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	25,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	26,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	27,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	28,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	29,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	30,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	31,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	32,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	33,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	34,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	35,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	36,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	37,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	38,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	39,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	40,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	41,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	42,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	43,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	44,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	45,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	46,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	47,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	48,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	49,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	50,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	51,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	52,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	53,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	54,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	55,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	56,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	57,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	58,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	59,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	60,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	61,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	62,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	63,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	64,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	65,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	66,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	67,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	68,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	69,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	70,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	71,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	72,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	73,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	74,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	75,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	76,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	77,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	78,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	79,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	80,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	81,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	82,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	83,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	84,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	85,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	86,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	87,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	88,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	89,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	90,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	91,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	92,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	93,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	94,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	95,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	96,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	97,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	98,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	99,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	100,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	101,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	102,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	103,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	104,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	105,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	106,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	107,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	108,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	109,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	110,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	111,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	112,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	113,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	114,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	115,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	116,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	117,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	118,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	119,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	120,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	121,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	122,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	123,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	124,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	125,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	126,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	127,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	128,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	129,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-8.342174828923806, -7.3578772652238076, -8.1504990202238066, -8.07076786622381, -8.2479040242238071, -8.42739466122381, -7.4337578502238078, -8.45879314122381, -8.4939429380238067, -8.45879314122381, -8.45879314122381, -7.7469690242238078, -8.4939429380238067, -8.4939429380238067]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	224,
							"begin_column":	2,
							"end_line":	224,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L224\", 14, &(intern), sizeof (intern), &(intern->type), sizeof (intern->type), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->flags), sizeof (intern->flags), &(intern->_path), sizeof (intern->_path), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    intern->type = SPL_FS_DIR;\n", "{\n}\n", "intern->type = (0 * skip_dots)", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->type = (intern != 0)", "intern->type = (intern == 0)", "intern->type = (path != 0)", "intern->type = (path == 0)", "intern->type = (skip_dots != 0)", "intern->type = (skip_dots + 0)", "intern->type = (skip_dots - 0)", "intern->type = (skip_dots == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5790454126238078, -5.1677770452238079, -4.930820083223808, -5.1557843652238073, -5.3008345242238075, -5.6369879442238071, -4.7759897142238072, -5.7700945242238078, -6.0587226242238081, -5.7700945242238078, -5.7700945242238078, -4.9788234942238079, -6.0587226242238081, -6.0587226242238081]
								}, {
									"case":	2,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	3,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	4,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	5,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	6,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	7,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	8,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	9,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	10,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	11,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	12,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	13,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	14,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	15,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	16,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	17,
									"scores":	[-4.5989150542238075]
								}, {
									"case":	18,
									"scores":	[-4.5989150542238075]
								}]
						}]
				}, {
					"line":	224,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [247], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], [], [], [], [], [], []],
							"begin_line":	225,
							"begin_column":	0,
							"end_line":	225,
							"end_column":	0,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L225\", 22, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(intern->flags), sizeof (intern->flags), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.578712346906288]
								}, {
									"case":	2,
									"scores":	[-4.578712346906288]
								}, {
									"case":	3,
									"scores":	[-4.578712346906288]
								}, {
									"case":	4,
									"scores":	[-4.578712346906288]
								}, {
									"case":	5,
									"scores":	[-4.578712346906288]
								}, {
									"case":	6,
									"scores":	[-4.578712346906288]
								}, {
									"case":	7,
									"scores":	[-4.578712346906288]
								}, {
									"case":	8,
									"scores":	[-4.578712346906288]
								}, {
									"case":	9,
									"scores":	[-4.578712346906288]
								}, {
									"case":	10,
									"scores":	[-4.578712346906288]
								}, {
									"case":	11,
									"scores":	[-4.578712346906288]
								}, {
									"case":	12,
									"scores":	[-4.578712346906288]
								}, {
									"case":	13,
									"scores":	[-4.578712346906288]
								}, {
									"case":	14,
									"scores":	[-4.578712346906288]
								}, {
									"case":	15,
									"scores":	[-4.578712346906288]
								}, {
									"case":	16,
									"scores":	[-4.578712346906288]
								}, {
									"case":	17,
									"scores":	[-4.578712346906288]
								}, {
									"case":	18,
									"scores":	[-4.578712346906288]
								}, {
									"case":	19,
									"scores":	[-4.578712346906288]
								}, {
									"case":	20,
									"scores":	[-4.578712346906288]
								}, {
									"case":	21,
									"scores":	[-4.578712346906288]
								}, {
									"case":	22,
									"scores":	[-4.578712346906288]
								}, {
									"case":	23,
									"scores":	[-4.578712346906288]
								}, {
									"case":	24,
									"scores":	[-4.578712346906288]
								}, {
									"case":	25,
									"scores":	[-4.578712346906288]
								}, {
									"case":	26,
									"scores":	[-4.578712346906288]
								}, {
									"case":	27,
									"scores":	[-4.578712346906288]
								}, {
									"case":	28,
									"scores":	[-4.578712346906288]
								}, {
									"case":	29,
									"scores":	[-4.578712346906288]
								}, {
									"case":	30,
									"scores":	[-4.578712346906288]
								}, {
									"case":	31,
									"scores":	[-4.578712346906288]
								}, {
									"case":	32,
									"scores":	[-4.578712346906288]
								}, {
									"case":	33,
									"scores":	[-4.578712346906288]
								}, {
									"case":	34,
									"scores":	[-4.578712346906288]
								}, {
									"case":	35,
									"scores":	[-4.578712346906288]
								}, {
									"case":	36,
									"scores":	[-4.578712346906288]
								}, {
									"case":	37,
									"scores":	[-4.578712346906288]
								}, {
									"case":	38,
									"scores":	[-4.578712346906288]
								}, {
									"case":	39,
									"scores":	[-4.578712346906288]
								}, {
									"case":	40,
									"scores":	[-4.578712346906288]
								}, {
									"case":	41,
									"scores":	[-4.578712346906288]
								}, {
									"case":	42,
									"scores":	[-4.578712346906288]
								}, {
									"case":	43,
									"scores":	[-4.578712346906288]
								}, {
									"case":	44,
									"scores":	[-4.578712346906288]
								}, {
									"case":	45,
									"scores":	[-4.578712346906288]
								}, {
									"case":	46,
									"scores":	[-4.578712346906288]
								}, {
									"case":	47,
									"scores":	[-4.578712346906288]
								}, {
									"case":	48,
									"scores":	[-4.578712346906288]
								}, {
									"case":	49,
									"scores":	[-4.578712346906288]
								}, {
									"case":	50,
									"scores":	[-4.578712346906288]
								}, {
									"case":	51,
									"scores":	[-4.578712346906288]
								}, {
									"case":	52,
									"scores":	[-4.578712346906288]
								}, {
									"case":	53,
									"scores":	[-4.578712346906288]
								}, {
									"case":	54,
									"scores":	[-4.578712346906288]
								}, {
									"case":	55,
									"scores":	[-4.578712346906288]
								}, {
									"case":	56,
									"scores":	[-4.578712346906288]
								}, {
									"case":	57,
									"scores":	[-4.578712346906288]
								}, {
									"case":	58,
									"scores":	[-4.578712346906288]
								}, {
									"case":	59,
									"scores":	[-4.578712346906288]
								}, {
									"case":	60,
									"scores":	[-4.578712346906288]
								}, {
									"case":	61,
									"scores":	[-4.578712346906288]
								}, {
									"case":	62,
									"scores":	[-4.578712346906288]
								}, {
									"case":	63,
									"scores":	[-4.578712346906288]
								}, {
									"case":	64,
									"scores":	[-4.578712346906288]
								}, {
									"case":	65,
									"scores":	[-4.578712346906288]
								}, {
									"case":	66,
									"scores":	[-4.578712346906288]
								}, {
									"case":	67,
									"scores":	[-4.578712346906288]
								}, {
									"case":	68,
									"scores":	[-4.578712346906288]
								}, {
									"case":	69,
									"scores":	[-4.578712346906288]
								}, {
									"case":	70,
									"scores":	[-4.578712346906288]
								}, {
									"case":	71,
									"scores":	[-4.578712346906288]
								}, {
									"case":	72,
									"scores":	[-4.578712346906288]
								}, {
									"case":	73,
									"scores":	[-4.578712346906288]
								}, {
									"case":	74,
									"scores":	[-4.578712346906288]
								}, {
									"case":	75,
									"scores":	[-4.578712346906288]
								}, {
									"case":	76,
									"scores":	[-4.578712346906288]
								}, {
									"case":	77,
									"scores":	[-4.578712346906288]
								}, {
									"case":	78,
									"scores":	[-4.578712346906288]
								}, {
									"case":	79,
									"scores":	[-4.578712346906288]
								}, {
									"case":	80,
									"scores":	[-4.578712346906288]
								}, {
									"case":	81,
									"scores":	[-4.578712346906288]
								}, {
									"case":	82,
									"scores":	[-4.578712346906288]
								}, {
									"case":	83,
									"scores":	[-4.578712346906288]
								}, {
									"case":	84,
									"scores":	[-4.578712346906288]
								}, {
									"case":	85,
									"scores":	[-4.578712346906288]
								}, {
									"case":	86,
									"scores":	[-4.578712346906288]
								}, {
									"case":	87,
									"scores":	[-4.578712346906288]
								}, {
									"case":	88,
									"scores":	[-4.578712346906288]
								}, {
									"case":	89,
									"scores":	[-4.578712346906288]
								}, {
									"case":	90,
									"scores":	[-4.578712346906288]
								}, {
									"case":	91,
									"scores":	[-4.578712346906288]
								}, {
									"case":	92,
									"scores":	[-4.578712346906288]
								}, {
									"case":	93,
									"scores":	[-4.578712346906288]
								}, {
									"case":	94,
									"scores":	[-4.578712346906288]
								}, {
									"case":	95,
									"scores":	[-4.578712346906288]
								}, {
									"case":	96,
									"scores":	[-4.578712346906288]
								}, {
									"case":	97,
									"scores":	[-4.578712346906288]
								}, {
									"case":	98,
									"scores":	[-4.578712346906288]
								}, {
									"case":	99,
									"scores":	[-4.578712346906288]
								}, {
									"case":	100,
									"scores":	[-4.578712346906288]
								}, {
									"case":	101,
									"scores":	[-4.578712346906288]
								}, {
									"case":	102,
									"scores":	[-4.578712346906288]
								}, {
									"case":	103,
									"scores":	[-4.578712346906288]
								}, {
									"case":	104,
									"scores":	[-4.578712346906288]
								}, {
									"case":	105,
									"scores":	[-4.578712346906288]
								}, {
									"case":	106,
									"scores":	[-4.578712346906288]
								}, {
									"case":	107,
									"scores":	[-4.578712346906288]
								}, {
									"case":	108,
									"scores":	[-4.578712346906288]
								}, {
									"case":	109,
									"scores":	[-4.578712346906288]
								}, {
									"case":	110,
									"scores":	[-4.578712346906288]
								}, {
									"case":	111,
									"scores":	[-4.578712346906288]
								}, {
									"case":	112,
									"scores":	[-4.578712346906288]
								}, {
									"case":	113,
									"scores":	[-4.578712346906288]
								}, {
									"case":	114,
									"scores":	[-4.578712346906288]
								}, {
									"case":	115,
									"scores":	[-4.578712346906288]
								}, {
									"case":	116,
									"scores":	[-4.578712346906288]
								}, {
									"case":	117,
									"scores":	[-4.578712346906288]
								}, {
									"case":	118,
									"scores":	[-4.578712346906288]
								}, {
									"case":	119,
									"scores":	[-4.578712346906288]
								}, {
									"case":	120,
									"scores":	[-4.578712346906288]
								}, {
									"case":	121,
									"scores":	[-4.578712346906288]
								}, {
									"case":	122,
									"scores":	[-4.578712346906288]
								}, {
									"case":	123,
									"scores":	[-4.578712346906288]
								}, {
									"case":	124,
									"scores":	[-4.578712346906288]
								}, {
									"case":	125,
									"scores":	[-4.578712346906288]
								}, {
									"case":	126,
									"scores":	[-4.578712346906288]
								}, {
									"case":	127,
									"scores":	[-4.578712346906288]
								}, {
									"case":	128,
									"scores":	[-4.578712346906288]
								}, {
									"case":	129,
									"scores":	[-4.578712346906288]
								}, {
									"case":	130,
									"scores":	[-4.578712346906288]
								}, {
									"case":	131,
									"scores":	[-4.578712346906288]
								}, {
									"case":	132,
									"scores":	[-4.578712346906288]
								}, {
									"case":	133,
									"scores":	[-4.578712346906288]
								}, {
									"case":	134,
									"scores":	[-4.578712346906288]
								}, {
									"case":	135,
									"scores":	[-4.578712346906288]
								}, {
									"case":	136,
									"scores":	[-4.578712346906288]
								}, {
									"case":	137,
									"scores":	[-4.578712346906288]
								}, {
									"case":	138,
									"scores":	[-4.578712346906288]
								}, {
									"case":	139,
									"scores":	[-4.578712346906288]
								}, {
									"case":	140,
									"scores":	[-4.578712346906288]
								}, {
									"case":	141,
									"scores":	[-4.578712346906288]
								}, {
									"case":	142,
									"scores":	[-4.578712346906288]
								}, {
									"case":	143,
									"scores":	[-4.578712346906288]
								}, {
									"case":	144,
									"scores":	[-4.578712346906288]
								}, {
									"case":	145,
									"scores":	[-4.578712346906288]
								}, {
									"case":	146,
									"scores":	[-4.578712346906288]
								}, {
									"case":	147,
									"scores":	[-4.578712346906288]
								}, {
									"case":	148,
									"scores":	[-4.578712346906288]
								}, {
									"case":	149,
									"scores":	[-4.578712346906288]
								}, {
									"case":	150,
									"scores":	[-4.578712346906288]
								}, {
									"case":	151,
									"scores":	[-4.578712346906288]
								}, {
									"case":	152,
									"scores":	[-4.578712346906288]
								}, {
									"case":	153,
									"scores":	[-4.578712346906288]
								}, {
									"case":	154,
									"scores":	[-4.578712346906288]
								}, {
									"case":	155,
									"scores":	[-4.578712346906288]
								}, {
									"case":	156,
									"scores":	[-4.578712346906288]
								}, {
									"case":	157,
									"scores":	[-4.578712346906288]
								}, {
									"case":	158,
									"scores":	[-4.578712346906288]
								}, {
									"case":	159,
									"scores":	[-4.578712346906288]
								}, {
									"case":	160,
									"scores":	[-4.578712346906288]
								}, {
									"case":	161,
									"scores":	[-4.578712346906288]
								}, {
									"case":	162,
									"scores":	[-4.578712346906288]
								}, {
									"case":	163,
									"scores":	[-4.578712346906288]
								}, {
									"case":	164,
									"scores":	[-4.578712346906288]
								}, {
									"case":	165,
									"scores":	[-4.578712346906288]
								}, {
									"case":	166,
									"scores":	[-4.578712346906288]
								}, {
									"case":	167,
									"scores":	[-4.578712346906288]
								}, {
									"case":	168,
									"scores":	[-4.578712346906288]
								}, {
									"case":	169,
									"scores":	[-4.578712346906288]
								}, {
									"case":	170,
									"scores":	[-4.578712346906288]
								}, {
									"case":	171,
									"scores":	[-4.578712346906288]
								}, {
									"case":	172,
									"scores":	[-4.578712346906288]
								}, {
									"case":	173,
									"scores":	[-4.578712346906288]
								}, {
									"case":	174,
									"scores":	[-4.578712346906288]
								}, {
									"case":	175,
									"scores":	[-4.578712346906288]
								}, {
									"case":	176,
									"scores":	[-4.578712346906288]
								}, {
									"case":	177,
									"scores":	[-4.578712346906288]
								}, {
									"case":	178,
									"scores":	[-4.578712346906288]
								}, {
									"case":	179,
									"scores":	[-4.578712346906288]
								}, {
									"case":	180,
									"scores":	[-4.578712346906288]
								}, {
									"case":	181,
									"scores":	[-4.578712346906288]
								}, {
									"case":	182,
									"scores":	[-4.578712346906288]
								}, {
									"case":	183,
									"scores":	[-4.578712346906288]
								}, {
									"case":	184,
									"scores":	[-4.578712346906288]
								}, {
									"case":	185,
									"scores":	[-4.578712346906288]
								}, {
									"case":	186,
									"scores":	[-4.578712346906288]
								}, {
									"case":	187,
									"scores":	[-4.578712346906288]
								}, {
									"case":	188,
									"scores":	[-4.578712346906288]
								}, {
									"case":	189,
									"scores":	[-4.578712346906288]
								}, {
									"case":	190,
									"scores":	[-4.578712346906288]
								}, {
									"case":	191,
									"scores":	[-4.578712346906288]
								}, {
									"case":	192,
									"scores":	[-4.578712346906288]
								}, {
									"case":	193,
									"scores":	[-4.578712346906288]
								}, {
									"case":	194,
									"scores":	[-4.578712346906288]
								}, {
									"case":	195,
									"scores":	[-4.578712346906288]
								}, {
									"case":	196,
									"scores":	[-4.578712346906288]
								}, {
									"case":	197,
									"scores":	[-4.578712346906288]
								}, {
									"case":	198,
									"scores":	[-4.578712346906288]
								}, {
									"case":	199,
									"scores":	[-4.578712346906288]
								}, {
									"case":	200,
									"scores":	[-4.578712346906288]
								}, {
									"case":	201,
									"scores":	[-4.578712346906288]
								}, {
									"case":	202,
									"scores":	[-4.578712346906288]
								}, {
									"case":	203,
									"scores":	[-4.578712346906288]
								}, {
									"case":	204,
									"scores":	[-4.578712346906288]
								}, {
									"case":	205,
									"scores":	[-4.578712346906288]
								}, {
									"case":	206,
									"scores":	[-4.578712346906288]
								}, {
									"case":	207,
									"scores":	[-4.578712346906288]
								}, {
									"case":	208,
									"scores":	[-4.578712346906288]
								}, {
									"case":	209,
									"scores":	[-4.578712346906288]
								}, {
									"case":	210,
									"scores":	[-4.578712346906288]
								}, {
									"case":	211,
									"scores":	[-4.578712346906288]
								}, {
									"case":	212,
									"scores":	[-4.578712346906288]
								}, {
									"case":	213,
									"scores":	[-4.578712346906288]
								}, {
									"case":	214,
									"scores":	[-4.578712346906288]
								}, {
									"case":	215,
									"scores":	[-4.578712346906288]
								}, {
									"case":	216,
									"scores":	[-4.578712346906288]
								}, {
									"case":	217,
									"scores":	[-4.578712346906288]
								}, {
									"case":	218,
									"scores":	[-4.578712346906288]
								}, {
									"case":	219,
									"scores":	[-4.578712346906288]
								}, {
									"case":	220,
									"scores":	[-4.578712346906288]
								}, {
									"case":	221,
									"scores":	[-4.578712346906288]
								}, {
									"case":	222,
									"scores":	[-4.578712346906288]
								}, {
									"case":	223,
									"scores":	[-4.578712346906288]
								}, {
									"case":	224,
									"scores":	[-4.578712346906288]
								}, {
									"case":	225,
									"scores":	[-4.578712346906288]
								}, {
									"case":	226,
									"scores":	[-4.578712346906288]
								}, {
									"case":	227,
									"scores":	[-4.578712346906288]
								}, {
									"case":	228,
									"scores":	[-4.578712346906288]
								}, {
									"case":	229,
									"scores":	[-4.578712346906288]
								}, {
									"case":	230,
									"scores":	[-4.578712346906288]
								}, {
									"case":	231,
									"scores":	[-4.578712346906288]
								}, {
									"case":	232,
									"scores":	[-4.578712346906288]
								}, {
									"case":	233,
									"scores":	[-4.578712346906288]
								}, {
									"case":	234,
									"scores":	[-4.578712346906288]
								}, {
									"case":	235,
									"scores":	[-4.578712346906288]
								}, {
									"case":	236,
									"scores":	[-4.578712346906288]
								}, {
									"case":	237,
									"scores":	[-4.578712346906288]
								}, {
									"case":	238,
									"scores":	[-4.578712346906288]
								}, {
									"case":	239,
									"scores":	[-4.578712346906288]
								}, {
									"case":	240,
									"scores":	[-4.578712346906288]
								}, {
									"case":	241,
									"scores":	[-4.578712346906288]
								}, {
									"case":	242,
									"scores":	[-4.578712346906288]
								}, {
									"case":	243,
									"scores":	[-4.578712346906288]
								}, {
									"case":	244,
									"scores":	[-4.578712346906288]
								}, {
									"case":	245,
									"scores":	[-4.578712346906288]
								}, {
									"case":	246,
									"scores":	[-4.578712346906288]
								}, {
									"case":	247,
									"scores":	[-8.71515084160629, -6.5631286909062885, -7.7991908799062877, -7.0301238369062879, -9.04959575070629, -8.83495531690629, -9.0144459539062858, -8.9355338169062861, -8.02080914290629, -9.0458444339062858, -9.08099423070629, -9.0458444339062858, -9.0458444339062858, -8.3340203169062868, -9.08099423070629, -9.08099423070629, -9.0458444339062858, -8.3340203169062868, -8.83495531690629, -9.0458444339062858, -9.0458444339062858, -9.0458444339062858]
								}]
						}, {
							"switch":	37,
							"types":	[[], [], [1], [], [], [], [22, 23, 24, 25, 26, 27, 28, 29, 30], [], [21], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [20]],
							"begin_line":	225,
							"begin_column":	2,
							"end_line":	225,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L225\", 22, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(intern->flags), sizeof (intern->flags), &(intern->_path), sizeof (intern->_path), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    intern->_path_len = strlen(path);\n", "strcspn(path, 0)", "strnlen(path, 0)", "strnlen(path, 1)", "strnlen(path, 4096)", "strnlen(path, 8)", "strspn(path, 0)", "zend_get_hash_value(path, 0)", "zend_get_hash_value(path, 1)", "zend_get_hash_value(path, 4096)", "zend_get_hash_value(path, 8)", "zend_hash_func(path, 0)", "zend_hash_func(path, 1)", "zend_hash_func(path, 4096)", "zend_hash_func(path, 8)", "zend_inline_hash_func(path, 0)", "zend_inline_hash_func(path, 1)", "zend_inline_hash_func(path, 4096)", "zend_inline_hash_func(path, 8)", "{\n}\n", "intern->_path_len = strlen(path)", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((&intern))", "intern->_path_len = strlen((&path))", "intern->_path_len = strlen((&skip_dots))", "intern->_path_len = strlen((path))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6694947053062883, -5.3918323759062883, -5.6334170679062883, -4.8811699569062883, -6.2535708579062881, -5.7618468169062877, -6.0980002369062882, -5.7614994809062878, -5.2370020069062884, -6.231106816906288, -6.5197349169062884, -6.231106816906288, -6.231106816906288, -5.4398357869062881, -6.5197349169062884, -6.5197349169062884, -6.231106816906288, -5.4398357869062881, -5.7618468169062877, -6.231106816906288, -6.231106816906288, -6.231106816906288]
								}, {
									"case":	2,
									"scores":	[-4.578712346906288]
								}, {
									"case":	3,
									"scores":	[-4.578712346906288]
								}, {
									"case":	4,
									"scores":	[-4.578712346906288]
								}, {
									"case":	5,
									"scores":	[-4.578712346906288]
								}, {
									"case":	6,
									"scores":	[-4.578712346906288]
								}, {
									"case":	7,
									"scores":	[-4.578712346906288]
								}, {
									"case":	8,
									"scores":	[-4.578712346906288]
								}, {
									"case":	9,
									"scores":	[-4.578712346906288]
								}, {
									"case":	10,
									"scores":	[-4.578712346906288]
								}, {
									"case":	11,
									"scores":	[-4.578712346906288]
								}, {
									"case":	12,
									"scores":	[-4.578712346906288]
								}, {
									"case":	13,
									"scores":	[-4.578712346906288]
								}, {
									"case":	14,
									"scores":	[-4.578712346906288]
								}, {
									"case":	15,
									"scores":	[-4.578712346906288]
								}, {
									"case":	16,
									"scores":	[-4.578712346906288]
								}, {
									"case":	17,
									"scores":	[-4.578712346906288]
								}, {
									"case":	18,
									"scores":	[-4.578712346906288]
								}, {
									"case":	19,
									"scores":	[-4.578712346906288]
								}, {
									"case":	20,
									"scores":	[-4.578712346906288]
								}, {
									"case":	21,
									"scores":	[-4.578712346906288]
								}, {
									"case":	22,
									"scores":	[-4.578712346906288]
								}, {
									"case":	23,
									"scores":	[-4.578712346906288]
								}, {
									"case":	24,
									"scores":	[-4.578712346906288]
								}, {
									"case":	25,
									"scores":	[-4.578712346906288]
								}, {
									"case":	26,
									"scores":	[-4.578712346906288]
								}, {
									"case":	27,
									"scores":	[-4.578712346906288]
								}, {
									"case":	28,
									"scores":	[-4.578712346906288]
								}, {
									"case":	29,
									"scores":	[-4.578712346906288]
								}, {
									"case":	30,
									"scores":	[-4.578712346906288]
								}]
						}]
				}, {
					"line":	225,
					"switches":	[{
							"switch":	38,
							"types":	[[], [], [], [], [247], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], [], [], [], [], [], []],
							"begin_line":	226,
							"begin_column":	0,
							"end_line":	226,
							"end_column":	0,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L226\", 22, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->_path), sizeof (intern->_path), &(intern->flags), sizeof (intern->flags), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	2,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	3,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	4,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	5,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	6,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	7,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	8,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	9,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	10,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	11,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	12,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	13,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	14,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	15,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	16,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	17,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	18,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	19,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	20,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	21,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	22,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	23,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	24,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	25,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	26,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	27,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	28,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	29,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	30,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	31,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	32,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	33,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	34,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	35,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	36,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	37,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	38,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	39,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	40,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	41,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	42,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	43,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	44,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	45,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	46,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	47,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	48,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	49,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	50,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	51,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	52,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	53,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	54,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	55,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	56,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	57,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	58,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	59,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	60,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	61,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	62,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	63,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	64,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	65,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	66,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	67,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	68,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	69,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	70,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	71,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	72,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	73,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	74,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	75,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	76,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	77,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	78,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	79,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	80,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	81,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	82,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	83,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	84,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	85,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	86,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	87,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	88,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	89,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	90,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	91,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	92,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	93,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	94,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	95,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	96,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	97,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	98,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	99,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	100,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	101,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	102,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	103,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	104,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	105,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	106,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	107,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	108,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	109,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	110,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	111,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	112,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	113,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	114,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	115,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	116,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	117,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	118,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	119,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	120,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	121,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	122,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	123,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	124,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	125,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	126,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	127,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	128,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	129,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	130,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	131,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	132,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	133,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	134,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	135,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	136,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	137,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	138,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	139,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	140,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	141,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	142,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	143,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	144,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	145,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	146,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	147,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	148,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	149,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	150,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	151,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	152,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	153,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	154,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	155,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	156,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	157,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	158,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	159,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	160,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	161,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	162,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	163,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	164,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	165,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	166,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	167,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	168,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	169,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	170,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	171,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	172,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	173,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	174,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	175,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	176,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	177,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	178,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	179,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	180,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	181,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	182,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	183,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	184,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	185,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	186,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	187,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	188,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	189,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	190,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	191,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	192,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	193,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	194,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	195,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	196,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	197,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	198,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	199,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	200,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	201,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	202,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	203,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	204,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	205,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	206,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	207,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	208,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	209,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	210,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	211,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	212,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	213,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	214,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	215,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	216,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	217,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	218,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	219,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	220,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	221,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	222,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	223,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	224,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	225,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	226,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	227,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	228,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	229,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	230,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	231,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	232,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	233,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	234,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	235,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	236,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	237,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	238,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	239,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	240,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	241,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	242,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	243,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	244,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	245,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	246,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	247,
									"scores":	[-8.56289878728877, -6.3489647835887686, -9.05490276438877, -6.6058539815887682, -7.0099211295887685, -8.9942432465887663, -8.81475260958877, -8.9153311095887666, -8.00060643558877, -9.0256417265887663, -9.06079152338877, -9.0256417265887663, -9.0256417265887663, -8.3138176095887673, -9.06079152338877, -9.06079152338877, -9.0256417265887663, -8.3138176095887673, -8.81475260958877, -9.0256417265887663, -9.0256417265887663, -9.0256417265887663]
								}]
						}, {
							"switch":	39,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	226,
							"begin_column":	2,
							"end_line":	226,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L226\", 22, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->_path), sizeof (intern->_path), &(intern->flags), sizeof (intern->flags), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)));\n", "{\n}\n", "intern->u.dir.dirp = _php_stream_opendir(((&intern)), (8), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir(((&path)), (8), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir(((&skip_dots)), (8), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((0 * skip_dots)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((intern != 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((intern == 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((path != 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((path == 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((skip_dots != 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((skip_dots + 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((skip_dots - 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), ((skip_dots == 0)), (((void *)0)))", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.15319719698877, -5.14322351458877, -8.58424773058877, -2.6752341065887677, -6.1125272495887684, -7.1963000505887678, -6.99320410958877, -6.99285677358877, -6.4683592995887684, -7.46246410958877, -7.7510922095887684, -7.46246410958877, -7.46246410958877, -6.6711930795887682, -7.7510922095887684, -7.7510922095887684, -7.46246410958877, -6.6711930795887682, -6.99320410958877, -7.46246410958877, -7.46246410958877, -7.46246410958877]
								}, {
									"case":	2,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	3,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	4,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	5,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	6,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	7,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	8,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	9,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	10,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	11,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	12,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	13,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	14,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	15,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	16,
									"scores":	[-4.5585096395887685]
								}, {
									"case":	17,
									"scores":	[-4.5585096395887685]
								}]
						}]
				}, {
					"line":	230,
					"switches":	[{
							"switch":	42,
							"types":	[[], [], [], [], [247], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], [], [], [], [], [], []],
							"begin_line":	231,
							"begin_column":	1,
							"end_line":	231,
							"end_column":	1,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L231\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	2,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	3,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	4,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	5,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	6,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	7,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	8,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	9,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	10,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	11,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	12,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	13,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	14,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	15,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	16,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	17,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	18,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	19,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	20,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	21,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	22,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	23,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	24,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	25,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	26,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	27,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	28,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	29,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	30,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	31,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	32,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	33,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	34,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	35,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	36,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	37,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	38,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	39,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	40,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	41,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	42,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	43,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	44,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	45,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	46,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	47,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	48,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	49,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	50,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	51,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	52,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	53,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	54,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	55,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	56,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	57,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	58,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	59,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	60,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	61,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	62,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	63,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	64,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	65,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	66,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	67,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	68,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	69,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	70,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	71,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	72,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	73,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	74,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	75,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	76,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	77,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	78,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	79,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	80,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	81,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	82,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	83,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	84,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	85,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	86,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	87,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	88,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	89,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	90,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	91,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	92,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	93,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	94,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	95,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	96,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	97,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	98,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	99,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	100,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	101,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	102,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	103,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	104,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	105,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	106,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	107,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	108,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	109,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	110,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	111,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	112,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	113,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	114,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	115,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	116,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	117,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	118,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	119,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	120,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	121,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	122,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	123,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	124,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	125,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	126,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	127,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	128,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	129,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	130,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	131,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	132,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	133,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	134,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	135,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	136,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	137,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	138,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	139,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	140,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	141,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	142,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	143,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	144,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	145,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	146,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	147,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	148,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	149,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	150,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	151,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	152,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	153,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	154,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	155,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	156,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	157,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	158,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	159,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	160,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	161,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	162,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	163,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	164,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	165,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	166,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	167,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	168,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	169,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	170,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	171,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	172,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	173,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	174,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	175,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	176,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	177,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	178,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	179,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	180,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	181,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	182,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	183,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	184,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	185,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	186,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	187,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	188,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	189,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	190,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	191,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	192,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	193,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	194,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	195,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	196,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	197,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	198,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	199,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	200,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	201,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	202,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	203,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	204,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	205,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	206,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	207,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	208,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	209,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	210,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	211,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	212,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	213,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	214,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	215,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	216,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	217,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	218,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	219,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	220,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	221,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	222,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	223,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	224,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	225,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	226,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	227,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	228,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	229,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	230,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	231,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	232,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	233,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	234,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	235,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	236,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	237,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	238,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	239,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	240,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	241,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	242,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	243,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	244,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	245,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	246,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	247,
									"scores":	[-6.0407521898434959, -3.7567180811434966, -6.2155130651434964, -3.8219397381434965, -6.8946507071434961, -6.8946507071434961, -6.0805045331434968, -7.1055398241434968, -7.1406896209434967, -7.1055398241434968, -7.1055398241434968, -6.393715707143496, -7.1406896209434967, -7.1406896209434967]
								}]
						}, {
							"switch":	43,
							"types":	[[], [], [1], [], [], [], [12, 13, 14, 15, 16, 17, 18, 19, 20], [], [10, 11], [], [], [], [], [2, 3, 4, 5, 6, 7, 8], [], [], [9]],
							"begin_line":	231,
							"begin_column":	3,
							"end_line":	231,
							"end_column":	19,
							"patch_codes":	["if (!__is_neg(\"\", \"L231\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    intern->_path = _estrndup((path), (intern->_path_len));\n", "zend_get_compiled_variable_name((path), (intern->_path_len), 0)", "zend_ini_string((path), (intern->_path_len), 0)", "zend_ini_string((path), (intern->_path_len), 1)", "zend_ini_string((path), (intern->_path_len), 4096)", "zend_ini_string((path), (intern->_path_len), 8)", "zend_ini_string((path), (intern->_path_len), le_index_ptr)", "zend_ini_string((path), (intern->_path_len), skip_dots)", "{\n}\n", "intern->_path = zend_str_tolower_dup((path), (intern->_path_len))", "intern->_path = zend_strndup((path), (intern->_path_len))", "intern->_path = (path)", "intern->_path = _estrndup(((&intern)), (intern->_path_len))", "intern->_path = _estrndup(((&path)), (intern->_path_len))", "intern->_path = _estrndup(((&skip_dots)), (intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((&intern)->_path_len))", "intern->_path = _estrndup((path), ((&path)->_path_len))", "intern->_path = _estrndup((path), ((&skip_dots)->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.0672586171434961, -4.2601345171434968, -5.5659153381434967, -3.6993574971434966, -5.2297128171434961, -5.2297128171434961, -4.7048680071434967, -5.6989728171434963, -5.9876009171434967, -5.6989728171434963, -5.6989728171434963, -4.9077017871434965, -5.9876009171434967, -5.9876009171434967]
								}, {
									"case":	2,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	3,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	4,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	5,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	6,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	7,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	8,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	9,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	10,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	11,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	12,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	13,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	14,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	15,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	16,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	17,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	18,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	19,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	20,
									"scores":	[-4.2756717371434965]
								}]
						}]
				}, {
					"line":	227,
					"switches":	[{
							"switch":	40,
							"types":	[[], [], [], [], [247], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], [], [], [], [], [], []],
							"begin_line":	228,
							"begin_column":	0,
							"end_line":	228,
							"end_column":	0,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.45749610300117]
								}, {
									"case":	2,
									"scores":	[-4.45749610300117]
								}, {
									"case":	3,
									"scores":	[-4.45749610300117]
								}, {
									"case":	4,
									"scores":	[-4.45749610300117]
								}, {
									"case":	5,
									"scores":	[-4.45749610300117]
								}, {
									"case":	6,
									"scores":	[-4.45749610300117]
								}, {
									"case":	7,
									"scores":	[-4.45749610300117]
								}, {
									"case":	8,
									"scores":	[-4.45749610300117]
								}, {
									"case":	9,
									"scores":	[-4.45749610300117]
								}, {
									"case":	10,
									"scores":	[-4.45749610300117]
								}, {
									"case":	11,
									"scores":	[-4.45749610300117]
								}, {
									"case":	12,
									"scores":	[-4.45749610300117]
								}, {
									"case":	13,
									"scores":	[-4.45749610300117]
								}, {
									"case":	14,
									"scores":	[-4.45749610300117]
								}, {
									"case":	15,
									"scores":	[-4.45749610300117]
								}, {
									"case":	16,
									"scores":	[-4.45749610300117]
								}, {
									"case":	17,
									"scores":	[-4.45749610300117]
								}, {
									"case":	18,
									"scores":	[-4.45749610300117]
								}, {
									"case":	19,
									"scores":	[-4.45749610300117]
								}, {
									"case":	20,
									"scores":	[-4.45749610300117]
								}, {
									"case":	21,
									"scores":	[-4.45749610300117]
								}, {
									"case":	22,
									"scores":	[-4.45749610300117]
								}, {
									"case":	23,
									"scores":	[-4.45749610300117]
								}, {
									"case":	24,
									"scores":	[-4.45749610300117]
								}, {
									"case":	25,
									"scores":	[-4.45749610300117]
								}, {
									"case":	26,
									"scores":	[-4.45749610300117]
								}, {
									"case":	27,
									"scores":	[-4.45749610300117]
								}, {
									"case":	28,
									"scores":	[-4.45749610300117]
								}, {
									"case":	29,
									"scores":	[-4.45749610300117]
								}, {
									"case":	30,
									"scores":	[-4.45749610300117]
								}, {
									"case":	31,
									"scores":	[-4.45749610300117]
								}, {
									"case":	32,
									"scores":	[-4.45749610300117]
								}, {
									"case":	33,
									"scores":	[-4.45749610300117]
								}, {
									"case":	34,
									"scores":	[-4.45749610300117]
								}, {
									"case":	35,
									"scores":	[-4.45749610300117]
								}, {
									"case":	36,
									"scores":	[-4.45749610300117]
								}, {
									"case":	37,
									"scores":	[-4.45749610300117]
								}, {
									"case":	38,
									"scores":	[-4.45749610300117]
								}, {
									"case":	39,
									"scores":	[-4.45749610300117]
								}, {
									"case":	40,
									"scores":	[-4.45749610300117]
								}, {
									"case":	41,
									"scores":	[-4.45749610300117]
								}, {
									"case":	42,
									"scores":	[-4.45749610300117]
								}, {
									"case":	43,
									"scores":	[-4.45749610300117]
								}, {
									"case":	44,
									"scores":	[-4.45749610300117]
								}, {
									"case":	45,
									"scores":	[-4.45749610300117]
								}, {
									"case":	46,
									"scores":	[-4.45749610300117]
								}, {
									"case":	47,
									"scores":	[-4.45749610300117]
								}, {
									"case":	48,
									"scores":	[-4.45749610300117]
								}, {
									"case":	49,
									"scores":	[-4.45749610300117]
								}, {
									"case":	50,
									"scores":	[-4.45749610300117]
								}, {
									"case":	51,
									"scores":	[-4.45749610300117]
								}, {
									"case":	52,
									"scores":	[-4.45749610300117]
								}, {
									"case":	53,
									"scores":	[-4.45749610300117]
								}, {
									"case":	54,
									"scores":	[-4.45749610300117]
								}, {
									"case":	55,
									"scores":	[-4.45749610300117]
								}, {
									"case":	56,
									"scores":	[-4.45749610300117]
								}, {
									"case":	57,
									"scores":	[-4.45749610300117]
								}, {
									"case":	58,
									"scores":	[-4.45749610300117]
								}, {
									"case":	59,
									"scores":	[-4.45749610300117]
								}, {
									"case":	60,
									"scores":	[-4.45749610300117]
								}, {
									"case":	61,
									"scores":	[-4.45749610300117]
								}, {
									"case":	62,
									"scores":	[-4.45749610300117]
								}, {
									"case":	63,
									"scores":	[-4.45749610300117]
								}, {
									"case":	64,
									"scores":	[-4.45749610300117]
								}, {
									"case":	65,
									"scores":	[-4.45749610300117]
								}, {
									"case":	66,
									"scores":	[-4.45749610300117]
								}, {
									"case":	67,
									"scores":	[-4.45749610300117]
								}, {
									"case":	68,
									"scores":	[-4.45749610300117]
								}, {
									"case":	69,
									"scores":	[-4.45749610300117]
								}, {
									"case":	70,
									"scores":	[-4.45749610300117]
								}, {
									"case":	71,
									"scores":	[-4.45749610300117]
								}, {
									"case":	72,
									"scores":	[-4.45749610300117]
								}, {
									"case":	73,
									"scores":	[-4.45749610300117]
								}, {
									"case":	74,
									"scores":	[-4.45749610300117]
								}, {
									"case":	75,
									"scores":	[-4.45749610300117]
								}, {
									"case":	76,
									"scores":	[-4.45749610300117]
								}, {
									"case":	77,
									"scores":	[-4.45749610300117]
								}, {
									"case":	78,
									"scores":	[-4.45749610300117]
								}, {
									"case":	79,
									"scores":	[-4.45749610300117]
								}, {
									"case":	80,
									"scores":	[-4.45749610300117]
								}, {
									"case":	81,
									"scores":	[-4.45749610300117]
								}, {
									"case":	82,
									"scores":	[-4.45749610300117]
								}, {
									"case":	83,
									"scores":	[-4.45749610300117]
								}, {
									"case":	84,
									"scores":	[-4.45749610300117]
								}, {
									"case":	85,
									"scores":	[-4.45749610300117]
								}, {
									"case":	86,
									"scores":	[-4.45749610300117]
								}, {
									"case":	87,
									"scores":	[-4.45749610300117]
								}, {
									"case":	88,
									"scores":	[-4.45749610300117]
								}, {
									"case":	89,
									"scores":	[-4.45749610300117]
								}, {
									"case":	90,
									"scores":	[-4.45749610300117]
								}, {
									"case":	91,
									"scores":	[-4.45749610300117]
								}, {
									"case":	92,
									"scores":	[-4.45749610300117]
								}, {
									"case":	93,
									"scores":	[-4.45749610300117]
								}, {
									"case":	94,
									"scores":	[-4.45749610300117]
								}, {
									"case":	95,
									"scores":	[-4.45749610300117]
								}, {
									"case":	96,
									"scores":	[-4.45749610300117]
								}, {
									"case":	97,
									"scores":	[-4.45749610300117]
								}, {
									"case":	98,
									"scores":	[-4.45749610300117]
								}, {
									"case":	99,
									"scores":	[-4.45749610300117]
								}, {
									"case":	100,
									"scores":	[-4.45749610300117]
								}, {
									"case":	101,
									"scores":	[-4.45749610300117]
								}, {
									"case":	102,
									"scores":	[-4.45749610300117]
								}, {
									"case":	103,
									"scores":	[-4.45749610300117]
								}, {
									"case":	104,
									"scores":	[-4.45749610300117]
								}, {
									"case":	105,
									"scores":	[-4.45749610300117]
								}, {
									"case":	106,
									"scores":	[-4.45749610300117]
								}, {
									"case":	107,
									"scores":	[-4.45749610300117]
								}, {
									"case":	108,
									"scores":	[-4.45749610300117]
								}, {
									"case":	109,
									"scores":	[-4.45749610300117]
								}, {
									"case":	110,
									"scores":	[-4.45749610300117]
								}, {
									"case":	111,
									"scores":	[-4.45749610300117]
								}, {
									"case":	112,
									"scores":	[-4.45749610300117]
								}, {
									"case":	113,
									"scores":	[-4.45749610300117]
								}, {
									"case":	114,
									"scores":	[-4.45749610300117]
								}, {
									"case":	115,
									"scores":	[-4.45749610300117]
								}, {
									"case":	116,
									"scores":	[-4.45749610300117]
								}, {
									"case":	117,
									"scores":	[-4.45749610300117]
								}, {
									"case":	118,
									"scores":	[-4.45749610300117]
								}, {
									"case":	119,
									"scores":	[-4.45749610300117]
								}, {
									"case":	120,
									"scores":	[-4.45749610300117]
								}, {
									"case":	121,
									"scores":	[-4.45749610300117]
								}, {
									"case":	122,
									"scores":	[-4.45749610300117]
								}, {
									"case":	123,
									"scores":	[-4.45749610300117]
								}, {
									"case":	124,
									"scores":	[-4.45749610300117]
								}, {
									"case":	125,
									"scores":	[-4.45749610300117]
								}, {
									"case":	126,
									"scores":	[-4.45749610300117]
								}, {
									"case":	127,
									"scores":	[-4.45749610300117]
								}, {
									"case":	128,
									"scores":	[-4.45749610300117]
								}, {
									"case":	129,
									"scores":	[-4.45749610300117]
								}, {
									"case":	130,
									"scores":	[-4.45749610300117]
								}, {
									"case":	131,
									"scores":	[-4.45749610300117]
								}, {
									"case":	132,
									"scores":	[-4.45749610300117]
								}, {
									"case":	133,
									"scores":	[-4.45749610300117]
								}, {
									"case":	134,
									"scores":	[-4.45749610300117]
								}, {
									"case":	135,
									"scores":	[-4.45749610300117]
								}, {
									"case":	136,
									"scores":	[-4.45749610300117]
								}, {
									"case":	137,
									"scores":	[-4.45749610300117]
								}, {
									"case":	138,
									"scores":	[-4.45749610300117]
								}, {
									"case":	139,
									"scores":	[-4.45749610300117]
								}, {
									"case":	140,
									"scores":	[-4.45749610300117]
								}, {
									"case":	141,
									"scores":	[-4.45749610300117]
								}, {
									"case":	142,
									"scores":	[-4.45749610300117]
								}, {
									"case":	143,
									"scores":	[-4.45749610300117]
								}, {
									"case":	144,
									"scores":	[-4.45749610300117]
								}, {
									"case":	145,
									"scores":	[-4.45749610300117]
								}, {
									"case":	146,
									"scores":	[-4.45749610300117]
								}, {
									"case":	147,
									"scores":	[-4.45749610300117]
								}, {
									"case":	148,
									"scores":	[-4.45749610300117]
								}, {
									"case":	149,
									"scores":	[-4.45749610300117]
								}, {
									"case":	150,
									"scores":	[-4.45749610300117]
								}, {
									"case":	151,
									"scores":	[-4.45749610300117]
								}, {
									"case":	152,
									"scores":	[-4.45749610300117]
								}, {
									"case":	153,
									"scores":	[-4.45749610300117]
								}, {
									"case":	154,
									"scores":	[-4.45749610300117]
								}, {
									"case":	155,
									"scores":	[-4.45749610300117]
								}, {
									"case":	156,
									"scores":	[-4.45749610300117]
								}, {
									"case":	157,
									"scores":	[-4.45749610300117]
								}, {
									"case":	158,
									"scores":	[-4.45749610300117]
								}, {
									"case":	159,
									"scores":	[-4.45749610300117]
								}, {
									"case":	160,
									"scores":	[-4.45749610300117]
								}, {
									"case":	161,
									"scores":	[-4.45749610300117]
								}, {
									"case":	162,
									"scores":	[-4.45749610300117]
								}, {
									"case":	163,
									"scores":	[-4.45749610300117]
								}, {
									"case":	164,
									"scores":	[-4.45749610300117]
								}, {
									"case":	165,
									"scores":	[-4.45749610300117]
								}, {
									"case":	166,
									"scores":	[-4.45749610300117]
								}, {
									"case":	167,
									"scores":	[-4.45749610300117]
								}, {
									"case":	168,
									"scores":	[-4.45749610300117]
								}, {
									"case":	169,
									"scores":	[-4.45749610300117]
								}, {
									"case":	170,
									"scores":	[-4.45749610300117]
								}, {
									"case":	171,
									"scores":	[-4.45749610300117]
								}, {
									"case":	172,
									"scores":	[-4.45749610300117]
								}, {
									"case":	173,
									"scores":	[-4.45749610300117]
								}, {
									"case":	174,
									"scores":	[-4.45749610300117]
								}, {
									"case":	175,
									"scores":	[-4.45749610300117]
								}, {
									"case":	176,
									"scores":	[-4.45749610300117]
								}, {
									"case":	177,
									"scores":	[-4.45749610300117]
								}, {
									"case":	178,
									"scores":	[-4.45749610300117]
								}, {
									"case":	179,
									"scores":	[-4.45749610300117]
								}, {
									"case":	180,
									"scores":	[-4.45749610300117]
								}, {
									"case":	181,
									"scores":	[-4.45749610300117]
								}, {
									"case":	182,
									"scores":	[-4.45749610300117]
								}, {
									"case":	183,
									"scores":	[-4.45749610300117]
								}, {
									"case":	184,
									"scores":	[-4.45749610300117]
								}, {
									"case":	185,
									"scores":	[-4.45749610300117]
								}, {
									"case":	186,
									"scores":	[-4.45749610300117]
								}, {
									"case":	187,
									"scores":	[-4.45749610300117]
								}, {
									"case":	188,
									"scores":	[-4.45749610300117]
								}, {
									"case":	189,
									"scores":	[-4.45749610300117]
								}, {
									"case":	190,
									"scores":	[-4.45749610300117]
								}, {
									"case":	191,
									"scores":	[-4.45749610300117]
								}, {
									"case":	192,
									"scores":	[-4.45749610300117]
								}, {
									"case":	193,
									"scores":	[-4.45749610300117]
								}, {
									"case":	194,
									"scores":	[-4.45749610300117]
								}, {
									"case":	195,
									"scores":	[-4.45749610300117]
								}, {
									"case":	196,
									"scores":	[-4.45749610300117]
								}, {
									"case":	197,
									"scores":	[-4.45749610300117]
								}, {
									"case":	198,
									"scores":	[-4.45749610300117]
								}, {
									"case":	199,
									"scores":	[-4.45749610300117]
								}, {
									"case":	200,
									"scores":	[-4.45749610300117]
								}, {
									"case":	201,
									"scores":	[-4.45749610300117]
								}, {
									"case":	202,
									"scores":	[-4.45749610300117]
								}, {
									"case":	203,
									"scores":	[-4.45749610300117]
								}, {
									"case":	204,
									"scores":	[-4.45749610300117]
								}, {
									"case":	205,
									"scores":	[-4.45749610300117]
								}, {
									"case":	206,
									"scores":	[-4.45749610300117]
								}, {
									"case":	207,
									"scores":	[-4.45749610300117]
								}, {
									"case":	208,
									"scores":	[-4.45749610300117]
								}, {
									"case":	209,
									"scores":	[-4.45749610300117]
								}, {
									"case":	210,
									"scores":	[-4.45749610300117]
								}, {
									"case":	211,
									"scores":	[-4.45749610300117]
								}, {
									"case":	212,
									"scores":	[-4.45749610300117]
								}, {
									"case":	213,
									"scores":	[-4.45749610300117]
								}, {
									"case":	214,
									"scores":	[-4.45749610300117]
								}, {
									"case":	215,
									"scores":	[-4.45749610300117]
								}, {
									"case":	216,
									"scores":	[-4.45749610300117]
								}, {
									"case":	217,
									"scores":	[-4.45749610300117]
								}, {
									"case":	218,
									"scores":	[-4.45749610300117]
								}, {
									"case":	219,
									"scores":	[-4.45749610300117]
								}, {
									"case":	220,
									"scores":	[-4.45749610300117]
								}, {
									"case":	221,
									"scores":	[-4.45749610300117]
								}, {
									"case":	222,
									"scores":	[-4.45749610300117]
								}, {
									"case":	223,
									"scores":	[-4.45749610300117]
								}, {
									"case":	224,
									"scores":	[-4.45749610300117]
								}, {
									"case":	225,
									"scores":	[-4.45749610300117]
								}, {
									"case":	226,
									"scores":	[-4.45749610300117]
								}, {
									"case":	227,
									"scores":	[-4.45749610300117]
								}, {
									"case":	228,
									"scores":	[-4.45749610300117]
								}, {
									"case":	229,
									"scores":	[-4.45749610300117]
								}, {
									"case":	230,
									"scores":	[-4.45749610300117]
								}, {
									"case":	231,
									"scores":	[-4.45749610300117]
								}, {
									"case":	232,
									"scores":	[-4.45749610300117]
								}, {
									"case":	233,
									"scores":	[-4.45749610300117]
								}, {
									"case":	234,
									"scores":	[-4.45749610300117]
								}, {
									"case":	235,
									"scores":	[-4.45749610300117]
								}, {
									"case":	236,
									"scores":	[-4.45749610300117]
								}, {
									"case":	237,
									"scores":	[-4.45749610300117]
								}, {
									"case":	238,
									"scores":	[-4.45749610300117]
								}, {
									"case":	239,
									"scores":	[-4.45749610300117]
								}, {
									"case":	240,
									"scores":	[-4.45749610300117]
								}, {
									"case":	241,
									"scores":	[-4.45749610300117]
								}, {
									"case":	242,
									"scores":	[-4.45749610300117]
								}, {
									"case":	243,
									"scores":	[-4.45749610300117]
								}, {
									"case":	244,
									"scores":	[-4.45749610300117]
								}, {
									"case":	245,
									"scores":	[-4.45749610300117]
								}, {
									"case":	246,
									"scores":	[-4.45749610300117]
								}, {
									"case":	247,
									"scores":	[-8.952382628701173, -6.8074520470011723, -4.04862496700117, -8.93800443100117, -7.8123105930011718, -9.61714207300117, -8.80299589900117, -9.82803119000117, -9.86318098680117, -9.82803119000117, -9.82803119000117, -9.11620707300117, -9.86318098680117, -9.86318098680117]
								}]
						}, {
							"switch":	41,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	228,
							"begin_column":	2,
							"end_line":	232,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) {\n    intern->_path = _estrndup((path), (--intern->_path_len));\n} else {\n    intern->_path = _estrndup((path), (intern->_path_len));\n}\n", "if (((intern->_path_len > 1) || __is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) && (((path[intern->_path_len - 1]) == '/'))) {\n    intern->_path = _estrndup((path), (--intern->_path_len));\n} else {\n    intern->_path = _estrndup((path), (intern->_path_len));\n}\n", "if ((intern->_path_len > 1 && (((path[intern->_path_len - 1]) == '/'))) || __is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) {\n    intern->_path = _estrndup((path), (--intern->_path_len));\n} else {\n    intern->_path = _estrndup((path), (intern->_path_len));\n}\n", "if (intern->_path_len > 1) {\n    intern->_path = _estrndup((path), (--intern->_path_len));\n} else {\n    intern->_path = _estrndup((path), (intern->_path_len));\n}\n", "if ((intern->_path_len > 1 && (((path[intern->_path_len - 1]) == '/'))) && !__is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class))) {\n    intern->_path = _estrndup((path), (--intern->_path_len));\n} else {\n    intern->_path = _estrndup((path), (intern->_path_len));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3273895110281471, -3.7178519696281453, -1.5227876606281434, -6.5035989446281457, -5.2867195636281465, -6.167396423628146, -5.6425516136281457, -6.6366564236281453, -6.9252845236281457, -6.6366564236281453, -6.6366564236281453, -5.8453853936281455, -6.9252845236281457, -6.9252845236281457]
								}, {
									"case":	2,
									"scores":	[-5.5834123453281475, -2.9738748039281448, -0.778810494928149, -5.7596217789281461, -4.542742397928146, -5.4234192579281455, -4.8985744479281461, -5.8926792579281457, -6.1813073579281461, -5.8926792579281457, -5.8926792579281457, -5.1014082279281459, -6.1813073579281461, -6.1813073579281461]
								}, {
									"case":	3,
									"scores":	[-5.5834123453281475, -2.9738748039281448, -0.778810494928149, -5.7596217789281461, -4.542742397928146, -5.4234192579281455, -4.8985744479281461, -5.8926792579281457, -6.1813073579281461, -5.8926792579281457, -5.8926792579281457, -5.1014082279281459, -6.1813073579281461, -6.1813073579281461]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-5.5834123453281475, -2.9738748039281448, -0.778810494928149, -5.7596217789281461, -4.542742397928146, -5.4234192579281455, -4.8985744479281461, -5.8926792579281457, -6.1813073579281461, -5.8926792579281457, -5.8926792579281457, -5.1014082279281459, -6.1813073579281461, -6.1813073579281461]
								}]
						}, {
							"switch":	44,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	228,
							"begin_column":	2,
							"end_line":	232,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    if (intern->_path_len > 1 && (((path[intern->_path_len - 1]) == '/'))) {\n        intern->_path = _estrndup((path), (--intern->_path_len));\n    } else {\n        intern->_path = _estrndup((path), (intern->_path_len));\n    }\n", "if (!__is_neg(\"\", \"L228\", 14, &(intern), sizeof (intern), &(path), sizeof (path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->_path), sizeof (intern->_path), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(skip_dots), sizeof (skip_dots), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)) && (intern->_path_len > 1 && (((path[intern->_path_len - 1]) == '/')))) {\n    intern->_path = _estrndup((path), (--intern->_path_len));\n} else {\n    intern->_path = _estrndup((path), (intern->_path_len));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0521836604011714, -4.44264611900117, -2.24758181000117, -7.22839309400117, -6.01151371300117, -6.89219057300117, -6.36734576300117, -7.3614505730011714, -7.65007867300117, -7.3614505730011714, -7.3614505730011714, -6.57017954300117, -7.65007867300117, -7.65007867300117]
								}, {
									"case":	2,
									"scores":	[-6.9477507329011718, -4.3382131915011684, -2.14314888250117, -7.12396016650117, -5.90708078550117, -6.78775764550117, -6.26291283550117, -7.25701764550117, -7.54564574550117, -7.25701764550117, -7.25701764550117, -6.46574661550117, -7.54564574550117, -7.54564574550117]
								}]
						}]
				}, {
					"line":	232,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [247], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], [], [], [], [], [], []],
							"begin_line":	233,
							"begin_column":	0,
							"end_line":	233,
							"end_column":	0,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L233\", 22, &(intern), sizeof (intern), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	12,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	13,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	14,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	15,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	16,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	17,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	18,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	19,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	20,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	21,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	22,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	23,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	24,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	25,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	26,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	27,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	28,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	29,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	30,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	31,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	32,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	33,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	34,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	35,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	36,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	37,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	38,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	39,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	40,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	41,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	42,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	43,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	44,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	45,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	46,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	47,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	48,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	49,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	50,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	51,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	52,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	53,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	54,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	55,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	56,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	57,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	58,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	59,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	60,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	61,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	62,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	63,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	64,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	65,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	66,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	67,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	68,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	69,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	70,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	71,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	72,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	73,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	74,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	75,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	76,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	77,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	78,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	79,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	80,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	81,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	82,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	83,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	84,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	85,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	86,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	87,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	88,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	89,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	90,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	91,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	92,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	93,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	94,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	95,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	96,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	97,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	98,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	99,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	100,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	101,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	102,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	103,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	104,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	105,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	106,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	107,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	108,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	109,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	110,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	111,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	112,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	113,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	114,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	115,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	116,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	117,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	118,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	119,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	120,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	121,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	122,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	123,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	124,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	125,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	126,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	127,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	128,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	129,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	130,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	131,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	132,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	133,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	134,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	135,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	136,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	137,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	138,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	139,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	140,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	141,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	142,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	143,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	144,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	145,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	146,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	147,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	148,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	149,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	150,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	151,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	152,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	153,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	154,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	155,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	156,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	157,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	158,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	159,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	160,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	161,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	162,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	163,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	164,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	165,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	166,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	167,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	168,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	169,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	170,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	171,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	172,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	173,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	174,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	175,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	176,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	177,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	178,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	179,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	180,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	181,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	182,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	183,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	184,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	185,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	186,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	187,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	188,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	189,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	190,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	191,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	192,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	193,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	194,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	195,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	196,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	197,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	198,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	199,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	200,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	201,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	202,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	203,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	204,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	205,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	206,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	207,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	208,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	209,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	210,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	211,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	212,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	213,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	214,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	215,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	216,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	217,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	218,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	219,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	220,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	221,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	222,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	223,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	224,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	225,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	226,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	227,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	228,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	229,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	230,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	231,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	232,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	233,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	234,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	235,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	236,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	237,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	238,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	239,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	240,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	241,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	242,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	243,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	244,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	245,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	246,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	247,
									"scores":	[-8.9581507833836529, -8.96525472068365, -8.74327390868365, -7.6003960026836523, -6.9003232286836527, -8.51968379948365, -8.38019219168365, -9.19433836568365, -9.19433836568365, -9.40522748268365, -9.44037727948365, -9.40522748268365, -9.40522748268365, -8.69340336568365, -9.44037727948365, -9.44037727948365, -9.40522748268365, -8.69340336568365, -9.19433836568365, -9.40522748268365, -9.40522748268365, -9.40522748268365]
								}]
						}, {
							"switch":	46,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	233,
							"begin_column":	2,
							"end_line":	233,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L233\", 22, &(intern), sizeof (intern), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    intern->u.dir.index = 0;\n", "{\n}\n", "intern->u.dir.index = (0 * skip_dots)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (intern != 0)", "intern->u.dir.index = (intern == 0)", "intern->u.dir.index = (path != 0)", "intern->u.dir.index = (path == 0)", "intern->u.dir.index = (skip_dots != 0)", "intern->u.dir.index = (skip_dots + 0)", "intern->u.dir.index = (skip_dots - 0)", "intern->u.dir.index = (skip_dots == 0)", "intern->u.dir.index = (skip_dots)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5329044530836526, -8.2013325566836528, -7.4196594121836519, -6.97455300568365, -6.4159590376836517, -6.1054041056836521, -6.8611250556836518, -7.3859698656836521, -7.3859698656836521, -7.8552298656836523, -8.14385796568365, -7.8552298656836523, -7.8552298656836523, -7.0639588356836516, -8.14385796568365, -8.14385796568365, -7.8552298656836523, -7.0639588356836516, -7.3859698656836521, -7.8552298656836523, -7.8552298656836523, -7.8552298656836523]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	12,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	13,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	14,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	15,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	16,
									"scores":	[-4.4372933956836524]
								}]
						}]
				}, {
					"line":	236,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [248], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], [], [], [], [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247], [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], [], [], [], [], [], []],
							"begin_line":	237,
							"begin_column":	1,
							"end_line":	237,
							"end_column":	1,
							"patch_codes":	["memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.entry.d_name, 0, sizeof (*(&intern->u.dir.entry.d_name)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L237\", 22, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(skip_dots), sizeof (skip_dots), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-5.8122770801281458, -6.7770408892281466, -5.7168558014281459, -6.5310019754281461, -5.9648453184281465, -6.7418910924281459, -6.030066975428146, -6.5310019754281461, -6.5310019754281461, -6.7418910924281459, -6.7770408892281466, -6.7418910924281459, -6.7418910924281459, -6.030066975428146, -6.7770408892281466, -6.7770408892281466, -6.7418910924281459, -6.030066975428146, -6.5310019754281461, -6.7418910924281459, -6.7418910924281459, -6.7418910924281459]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	237,
							"begin_column":	3,
							"end_line":	237,
							"end_column":	35,
							"patch_codes":	["if (!__is_neg(\"\", \"L237\", 22, &(intern), sizeof (intern), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(skip_dots), sizeof (skip_dots), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid)))\n    intern->u.dir.entry.d_name[0] = '\\x00';\n", "{\n}\n", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3197128854281459, -5.6239521854281458, -4.3412192754281458, -4.8660640854281461, -5.1048300754281453, -5.3353240854281463, -4.5440530554281455, -4.8660640854281461, -4.8660640854281461, -5.3353240854281463, -5.6239521854281458, -5.3353240854281463, -5.3353240854281463, -4.5440530554281455, -5.6239521854281458, -5.6239521854281458, -5.3353240854281463, -4.5440530554281455, -4.8660640854281461, -5.3353240854281463, -5.3353240854281463, -5.3353240854281463]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}]
						}]
				}, {
					"line":	234,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [248], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], [], [], [], [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247], [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], [], [], [], [], [], []],
							"begin_line":	235,
							"begin_column":	0,
							"end_line":	235,
							"end_column":	0,
							"patch_codes":	["memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "intern->_path = (path)", "intern->_path = _estrndup(((path)), (--intern->_path_len))", "intern->_path = _estrndup(((path)), (intern->_path_len))", "intern->_path = _estrndup((path), ((intern)->_path_len))", "intern->_path = _estrndup((path), (--(intern)->_path_len))", "intern->_path_len = (0)", "intern->_path_len = (1)", "intern->_path_len = (4096)", "intern->_path_len = (8)", "intern->_path_len = (skip_dots)", "intern->_path_len = strlen((path))", "intern->type = (0)", "intern->type = (1)", "intern->type = (4096)", "intern->type = (8)", "intern->type = (SPL_FS_DIR)", "intern->type = (SPL_FS_FILE)", "intern->type = (SPL_FS_INFO)", "intern->u.dir.dirp = _php_stream_opendir(((path)), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = (0)", "intern->u.dir.entry.d_name[0] = (1)", "intern->u.dir.entry.d_name[0] = (4096)", "intern->u.dir.entry.d_name[0] = (8)", "intern->u.dir.index = (0)", "intern->u.dir.index = (1)", "intern->u.dir.index = (4096)", "intern->u.dir.index = (8)", "intern->u.dir.index = (skip_dots)", "memset((intern), 0, sizeof(spl_filesystem_object))", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "intern->_path = _estrndup((path), (--intern->_path_len))", "intern->_path = _estrndup((path), (intern->_path_len))", "intern->_path_len = strlen(path)", "intern->type = SPL_FS_DIR", "intern->u.dir.dirp = _php_stream_opendir((path), (8), (((void *)0)))", "intern->u.dir.entry.d_name[0] = '\\x00'", "intern->u.dir.index = 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_read(intern)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L235\", 112, &(intern), sizeof (intern), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	2,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	3,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	4,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	5,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	6,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	7,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	8,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	9,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	10,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	11,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	12,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	13,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	14,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	15,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	16,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	17,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	18,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	19,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	20,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	21,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	22,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	23,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	24,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	25,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	26,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	27,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	28,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	29,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	30,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	31,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	32,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	33,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	34,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	35,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	36,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	37,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	38,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	39,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	40,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	41,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	42,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	43,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	44,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	45,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	46,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	47,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	48,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	49,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	50,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	51,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	52,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	53,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	54,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	55,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	56,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	57,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	58,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	59,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	60,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	61,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	62,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	63,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	64,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	65,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	66,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	67,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	68,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	69,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	70,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	71,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	72,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	73,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	74,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	75,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	76,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	77,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	78,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	79,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	80,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	81,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	82,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	83,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	84,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	85,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	86,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	87,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	88,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	89,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	90,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	91,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	92,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	93,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	94,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	95,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	96,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	97,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	98,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	99,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	100,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	101,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	102,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	103,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	104,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	105,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	106,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	107,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	108,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	109,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	110,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	111,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	112,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	113,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	114,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	115,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	116,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	117,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	118,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	119,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	120,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	121,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	122,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	123,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	124,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	125,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	126,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	127,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	128,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	129,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	130,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	131,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	132,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	133,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	134,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	135,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	136,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	137,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	138,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	139,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	140,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	141,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	142,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	143,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	144,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	145,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	146,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	147,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	148,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	149,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	150,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	151,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	152,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	153,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	154,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	155,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	156,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	157,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	158,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	159,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	160,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	161,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	162,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	163,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	164,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	165,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	166,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	167,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	168,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	169,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	170,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	171,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	172,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	173,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	174,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	175,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	176,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	177,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	178,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	179,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	180,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	181,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	182,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	183,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	184,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	185,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	186,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	187,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	188,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	189,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	190,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	191,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	192,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	193,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	194,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	195,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	196,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	197,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	198,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	199,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	200,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	201,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	202,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	203,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	204,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	205,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	206,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	207,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	208,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	209,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	210,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	211,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	212,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	213,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	214,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	215,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	216,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	217,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	218,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	219,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	220,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	221,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	222,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	223,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	224,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	225,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	226,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	227,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	228,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	229,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	230,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	231,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	232,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	233,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	234,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	235,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	236,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	237,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	238,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	239,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	240,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	241,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	242,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	243,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	244,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	245,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	246,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	247,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	248,
									"scores":	[-8.15656845406613, -9.639785572166133, -7.8017937121661323, -9.639785572166133, -8.2575345133661333, -8.94268220136613, -7.7998042953661333, -8.2549395213661327, -8.57960048436613, -9.39374665836613, -9.39374665836613, -9.60463577536613, -9.639785572166133, -9.639785572166133, -9.60463577536613, -9.60463577536613, -9.60463577536613, -9.639785572166133, -9.60463577536613, -9.39374665836613, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.39374665836613, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.60463577536613, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.39374665836613, -9.639785572166133, -9.639785572166133, -9.39374665836613, -9.639785572166133, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.39374665836613, -9.639785572166133, -9.60463577536613, -9.39374665836613, -9.60463577536613, -9.639785572166133, -9.60463577536613, -9.60463577536613, -8.89281165836613, -9.639785572166133, -9.639785572166133, -9.60463577536613, -8.89281165836613, -9.39374665836613, -9.60463577536613, -9.60463577536613, -9.60463577536613, -9.60463577536613, -9.639785572166133, -9.639785572166133, -9.60463577536613, -9.60463577536613, -9.60463577536613, -9.639785572166133, -9.60463577536613, -9.39374665836613, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.39374665836613, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.60463577536613, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.39374665836613, -9.639785572166133, -9.639785572166133, -9.39374665836613, -9.639785572166133, -9.39374665836613, -9.39374665836613, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.639785572166133, -9.39374665836613, -9.639785572166133, -9.60463577536613, -9.39374665836613]
								}]
						}, {
							"switch":	48,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	235,
							"begin_column":	2,
							"end_line":	242,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L235\", 112, &(intern), sizeof (intern), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    intern->u.dir.entry.d_name[0] = '\\x00';\n} else {\n    do {\n        spl_filesystem_dir_read(intern);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n}\n", "if (((executor_globals.exception) || intern->u.dir.dirp == ((void *)0)) || __is_neg(\"\", \"L235\", 112, &(intern), sizeof (intern), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    intern->u.dir.entry.d_name[0] = '\\x00';\n} else {\n    do {\n        spl_filesystem_dir_read(intern);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n}\n", "if ((executor_globals.exception)) {\n    intern->u.dir.entry.d_name[0] = '\\x00';\n} else {\n    do {\n        spl_filesystem_dir_read(intern);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n}\n", "if (((executor_globals.exception) || intern->u.dir.dirp == ((void *)0)) && !__is_neg(\"\", \"L235\", 112, &(intern), sizeof (intern), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    intern->u.dir.entry.d_name[0] = '\\x00';\n} else {\n    do {\n        spl_filesystem_dir_read(intern);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3646796349281463, -8.4268559444281461, -5.422189084428144, -8.4268559444281461, -7.9346379844281447, -7.7026573909281471, -7.2575509844281463, -7.2854686764281471, -7.1441230344281461, -7.6689678444281455, -7.6689678444281455, -8.1382278444281457, -8.4268559444281461, -8.4268559444281461, -8.1382278444281457, -8.1382278444281457, -8.1382278444281457, -8.4268559444281461, -8.1382278444281457, -7.6689678444281455, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -7.6689678444281455, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -8.1382278444281457, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -7.6689678444281455, -8.4268559444281461, -8.4268559444281461, -7.6689678444281455, -8.4268559444281461, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -7.6689678444281455, -8.4268559444281461, -8.1382278444281457, -7.6689678444281455, -8.1382278444281457, -8.4268559444281461, -8.1382278444281457, -8.1382278444281457, -7.3469568144281467, -8.4268559444281461, -8.4268559444281461, -8.1382278444281457, -7.3469568144281467, -7.6689678444281455, -8.1382278444281457, -8.1382278444281457, -8.1382278444281457, -8.1382278444281457, -8.4268559444281461, -8.4268559444281461, -8.1382278444281457, -8.1382278444281457, -8.1382278444281457, -8.4268559444281461, -8.1382278444281457, -7.6689678444281455, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -7.6689678444281455, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -8.1382278444281457, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -7.6689678444281455, -8.4268559444281461, -8.4268559444281461, -7.6689678444281455, -8.4268559444281461, -7.6689678444281455, -7.6689678444281455, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -8.4268559444281461, -7.6689678444281455, -8.4268559444281461, -8.1382278444281457, -7.6689678444281455]
								}, {
									"case":	2,
									"scores":	[-5.942817642928147, -7.0049939524281459, -4.0003270924281447, -7.0049939524281459, -6.5127759924281454, -6.2807953989281451, -5.8356889924281461, -5.8636066844281451, -5.7222610424281459, -6.2471058524281453, -6.2471058524281453, -6.7163658524281455, -7.0049939524281459, -7.0049939524281459, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.7163658524281455, -7.0049939524281459, -6.7163658524281455, -6.7163658524281455, -5.9250948224281457, -7.0049939524281459, -7.0049939524281459, -6.7163658524281455, -5.9250948224281457, -6.2471058524281453, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -7.0049939524281459, -7.0049939524281459, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-5.942817642928147, -7.0049939524281459, -4.0003270924281447, -7.0049939524281459, -6.5127759924281454, -6.2807953989281451, -5.8356889924281461, -5.8636066844281451, -5.7222610424281459, -6.2471058524281453, -6.2471058524281453, -6.7163658524281455, -7.0049939524281459, -7.0049939524281459, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.7163658524281455, -7.0049939524281459, -6.7163658524281455, -6.7163658524281455, -5.9250948224281457, -7.0049939524281459, -7.0049939524281459, -6.7163658524281455, -5.9250948224281457, -6.2471058524281453, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -7.0049939524281459, -7.0049939524281459, -6.7163658524281455, -6.7163658524281455, -6.7163658524281455, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.2471058524281453, -6.2471058524281453, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -7.0049939524281459, -6.2471058524281453, -7.0049939524281459, -6.7163658524281455, -6.2471058524281453]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	235,
							"begin_column":	2,
							"end_line":	242,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L235\", 112, &(intern), sizeof (intern), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    if ((executor_globals.exception) || intern->u.dir.dirp == ((void *)0)) {\n        intern->u.dir.entry.d_name[0] = '\\x00';\n    } else {\n        do {\n            spl_filesystem_dir_read(intern);\n        } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n    }\n", "if (!__is_neg(\"\", \"L235\", 112, &(intern), sizeof (intern), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(executor_globals.exception), sizeof (executor_globals.exception), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(path), sizeof (path), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(skip_dots), sizeof (skip_dots), &(intern->type), sizeof (intern->type), &(intern->flags), sizeof (intern->flags), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)) && ((executor_globals.exception) || intern->u.dir.dirp == ((void *)0))) {\n    intern->u.dir.entry.d_name[0] = '\\x00';\n} else {\n    do {\n        spl_filesystem_dir_read(intern);\n    } while (skip_dots && spl_filesystem_is_dot(intern->u.dir.entry.d_name));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2522045588661328, -8.31438086836613, -5.3097140083661332, -8.31438086836613, -7.8221629083661322, -7.5901823148661327, -7.1450759083661328, -7.1729936003661319, -7.0316479583661327, -7.5564927683661329, -7.5564927683661329, -8.02575276836613, -8.31438086836613, -8.31438086836613, -8.02575276836613, -8.02575276836613, -8.02575276836613, -8.31438086836613, -8.02575276836613, -7.5564927683661329, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -7.5564927683661329, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -8.02575276836613, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -7.5564927683661329, -8.31438086836613, -8.31438086836613, -7.5564927683661329, -8.31438086836613, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -7.5564927683661329, -8.31438086836613, -8.02575276836613, -7.5564927683661329, -8.02575276836613, -8.31438086836613, -8.02575276836613, -8.02575276836613, -7.2344817383661333, -8.31438086836613, -8.31438086836613, -8.02575276836613, -7.2344817383661333, -7.5564927683661329, -8.02575276836613, -8.02575276836613, -8.02575276836613, -8.02575276836613, -8.31438086836613, -8.31438086836613, -8.02575276836613, -8.02575276836613, -8.02575276836613, -8.31438086836613, -8.02575276836613, -7.5564927683661329, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -7.5564927683661329, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -8.02575276836613, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -7.5564927683661329, -8.31438086836613, -8.31438086836613, -7.5564927683661329, -8.31438086836613, -7.5564927683661329, -7.5564927683661329, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -8.31438086836613, -7.5564927683661329, -8.31438086836613, -8.02575276836613, -7.5564927683661329]
								}, {
									"case":	2,
									"scores":	[-7.530814125866133, -8.5929904353661328, -5.5883235753661324, -8.5929904353661328, -8.10077247536613, -7.8687918818661329, -7.423685475366133, -7.451603167366132, -7.3102575253661319, -7.8351023353661322, -7.8351023353661322, -8.30436233536613, -8.5929904353661328, -8.5929904353661328, -8.30436233536613, -8.30436233536613, -8.30436233536613, -8.5929904353661328, -8.30436233536613, -7.8351023353661322, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -7.8351023353661322, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -8.30436233536613, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -7.8351023353661322, -8.5929904353661328, -8.5929904353661328, -7.8351023353661322, -8.5929904353661328, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -7.8351023353661322, -8.5929904353661328, -8.30436233536613, -7.8351023353661322, -8.30436233536613, -8.5929904353661328, -8.30436233536613, -8.30436233536613, -7.5130913053661317, -8.5929904353661328, -8.5929904353661328, -8.30436233536613, -7.5130913053661317, -7.8351023353661322, -8.30436233536613, -8.30436233536613, -8.30436233536613, -8.30436233536613, -8.5929904353661328, -8.5929904353661328, -8.30436233536613, -8.30436233536613, -8.30436233536613, -8.5929904353661328, -8.30436233536613, -7.8351023353661322, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -7.8351023353661322, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -8.30436233536613, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -7.8351023353661322, -8.5929904353661328, -8.5929904353661328, -7.8351023353661322, -8.5929904353661328, -7.8351023353661322, -7.8351023353661322, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -8.5929904353661328, -7.8351023353661322, -8.5929904353661328, -8.30436233536613, -7.8351023353661322]
								}]
						}]
				}, {
					"line":	624,
					"switches":	[]
				}, {
					"line":	625,
					"switches":	[]
				}, {
					"line":	626,
					"switches":	[]
				}, {
					"line":	627,
					"switches":	[]
				}, {
					"line":	628,
					"switches":	[]
				}, {
					"line":	630,
					"switches":	[{
							"switch":	52,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	631,
							"begin_column":	0,
							"end_line":	631,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L631\", 47, &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_UnexpectedValueException->type), sizeof (spl_ce_UnexpectedValueException->type), &(spl_ce_UnexpectedValueException->name), sizeof (spl_ce_UnexpectedValueException->name), &(spl_ce_UnexpectedValueException->name_length), sizeof (spl_ce_UnexpectedValueException->name_length), &(spl_ce_UnexpectedValueException->parent), sizeof (spl_ce_UnexpectedValueException->parent), &(spl_ce_UnexpectedValueException->refcount), sizeof (spl_ce_UnexpectedValueException->refcount), &(spl_ce_UnexpectedValueException->ce_flags), sizeof (spl_ce_UnexpectedValueException->ce_flags), &(spl_ce_UnexpectedValueException->default_properties_table), sizeof (spl_ce_UnexpectedValueException->default_properties_table), &(spl_ce_UnexpectedValueException->default_static_members_table), sizeof (spl_ce_UnexpectedValueException->default_static_members_table), &(spl_ce_UnexpectedValueException->static_members_table), sizeof (spl_ce_UnexpectedValueException->static_members_table), &(spl_ce_UnexpectedValueException->default_properties_count), sizeof (spl_ce_UnexpectedValueException->default_properties_count), &(spl_ce_UnexpectedValueException->default_static_members_count), sizeof (spl_ce_UnexpectedValueException->default_static_members_count), &(spl_ce_UnexpectedValueException->constructor), sizeof (spl_ce_UnexpectedValueException->constructor), &(spl_ce_UnexpectedValueException->destructor), sizeof (spl_ce_UnexpectedValueException->destructor), &(spl_ce_UnexpectedValueException->clone), sizeof (spl_ce_UnexpectedValueException->clone), &(spl_ce_UnexpectedValueException->__get), sizeof (spl_ce_UnexpectedValueException->__get), &(spl_ce_UnexpectedValueException->__set), sizeof (spl_ce_UnexpectedValueException->__set), &(spl_ce_UnexpectedValueException->__unset), sizeof (spl_ce_UnexpectedValueException->__unset), &(spl_ce_UnexpectedValueException->__isset), sizeof (spl_ce_UnexpectedValueException->__isset), &(spl_ce_UnexpectedValueException->__call), sizeof (spl_ce_UnexpectedValueException->__call), &(spl_ce_UnexpectedValueException->__callstatic), sizeof (spl_ce_UnexpectedValueException->__callstatic), &(spl_ce_UnexpectedValueException->__tostring), sizeof (spl_ce_UnexpectedValueException->__tostring), &(spl_ce_UnexpectedValueException->serialize_func), sizeof (spl_ce_UnexpectedValueException->serialize_func), &(spl_ce_UnexpectedValueException->unserialize_func), sizeof (spl_ce_UnexpectedValueException->unserialize_func), &(spl_ce_UnexpectedValueException->create_object), sizeof (spl_ce_UnexpectedValueException->create_object), &(spl_ce_UnexpectedValueException->get_iterator), sizeof (spl_ce_UnexpectedValueException->get_iterator), &(spl_ce_UnexpectedValueException->interface_gets_implemented), sizeof (spl_ce_UnexpectedValueException->interface_gets_implemented), &(spl_ce_UnexpectedValueException->get_static_method), sizeof (spl_ce_UnexpectedValueException->get_static_method), &(spl_ce_UnexpectedValueException->serialize), sizeof (spl_ce_UnexpectedValueException->serialize), &(spl_ce_UnexpectedValueException->unserialize), sizeof (spl_ce_UnexpectedValueException->unserialize), &(spl_ce_UnexpectedValueException->interfaces), sizeof (spl_ce_UnexpectedValueException->interfaces), &(spl_ce_UnexpectedValueException->num_interfaces), sizeof (spl_ce_UnexpectedValueException->num_interfaces), &(spl_ce_UnexpectedValueException->traits), sizeof (spl_ce_UnexpectedValueException->traits), &(spl_ce_UnexpectedValueException->num_traits), sizeof (spl_ce_UnexpectedValueException->num_traits), &(spl_ce_UnexpectedValueException->trait_aliases), sizeof (spl_ce_UnexpectedValueException->trait_aliases), &(spl_ce_UnexpectedValueException->trait_precedences), sizeof (spl_ce_UnexpectedValueException->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.821144834716522]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}, {
									"case":	17,
									"scores":	[-4.821144834716522]
								}, {
									"case":	18,
									"scores":	[-4.821144834716522]
								}, {
									"case":	19,
									"scores":	[-4.821144834716522]
								}, {
									"case":	20,
									"scores":	[-4.821144834716522]
								}, {
									"case":	21,
									"scores":	[-4.821144834716522]
								}, {
									"case":	22,
									"scores":	[-4.821144834716522]
								}, {
									"case":	23,
									"scores":	[-4.821144834716522]
								}, {
									"case":	24,
									"scores":	[-4.821144834716522]
								}, {
									"case":	25,
									"scores":	[-4.821144834716522]
								}, {
									"case":	26,
									"scores":	[-4.821144834716522]
								}, {
									"case":	27,
									"scores":	[-4.821144834716522]
								}, {
									"case":	28,
									"scores":	[-4.821144834716522]
								}, {
									"case":	29,
									"scores":	[-4.821144834716522]
								}, {
									"case":	30,
									"scores":	[-4.821144834716522]
								}, {
									"case":	31,
									"scores":	[-4.821144834716522]
								}, {
									"case":	32,
									"scores":	[-4.821144834716522]
								}, {
									"case":	33,
									"scores":	[-4.821144834716522]
								}, {
									"case":	34,
									"scores":	[-4.821144834716522]
								}, {
									"case":	35,
									"scores":	[-4.821144834716522]
								}, {
									"case":	36,
									"scores":	[-4.821144834716522]
								}, {
									"case":	37,
									"scores":	[-4.821144834716522]
								}, {
									"case":	38,
									"scores":	[-4.821144834716522]
								}, {
									"case":	39,
									"scores":	[-4.821144834716522]
								}, {
									"case":	40,
									"scores":	[-4.821144834716522]
								}, {
									"case":	41,
									"scores":	[-4.821144834716522]
								}, {
									"case":	42,
									"scores":	[-4.821144834716522]
								}, {
									"case":	43,
									"scores":	[-4.821144834716522]
								}, {
									"case":	44,
									"scores":	[-4.821144834716522]
								}, {
									"case":	45,
									"scores":	[-4.821144834716522]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-6.7872156449165217, -7.174512892116522, -7.7551964951165218, -6.7771585451165226, -7.5826537931165223, -7.10601401211652, -7.0817187931165222, -7.6425236139165218, -7.4205518059165225, -7.6410365799165216, -7.6425236139165218, -7.6425236139165218, -7.9515586661165223, -8.162447783116523, -7.4506236661165222, -8.19759757991652, -7.9515586661165223, -7.9515586661165223, -8.162447783116523, -8.162447783116523, -8.162447783116523, -7.9515586661165223, -7.9515586661165223, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -8.162447783116523, -7.9515586661165223, -7.9515586661165223, -7.9515586661165223, -7.9515586661165223, -7.9515586661165223, -7.9515586661165223, -8.162447783116523, -7.9515586661165223, -8.162447783116523, -7.9515586661165223, -8.162447783116523, -8.162447783116523]
								}]
						}, {
							"switch":	53,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	631,
							"begin_column":	2,
							"end_line":	631,
							"end_column":	98,
							"patch_codes":	["if (!__is_neg(\"\", \"L631\", 47, &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_UnexpectedValueException->type), sizeof (spl_ce_UnexpectedValueException->type), &(spl_ce_UnexpectedValueException->name), sizeof (spl_ce_UnexpectedValueException->name), &(spl_ce_UnexpectedValueException->name_length), sizeof (spl_ce_UnexpectedValueException->name_length), &(spl_ce_UnexpectedValueException->parent), sizeof (spl_ce_UnexpectedValueException->parent), &(spl_ce_UnexpectedValueException->refcount), sizeof (spl_ce_UnexpectedValueException->refcount), &(spl_ce_UnexpectedValueException->ce_flags), sizeof (spl_ce_UnexpectedValueException->ce_flags), &(spl_ce_UnexpectedValueException->default_properties_table), sizeof (spl_ce_UnexpectedValueException->default_properties_table), &(spl_ce_UnexpectedValueException->default_static_members_table), sizeof (spl_ce_UnexpectedValueException->default_static_members_table), &(spl_ce_UnexpectedValueException->static_members_table), sizeof (spl_ce_UnexpectedValueException->static_members_table), &(spl_ce_UnexpectedValueException->default_properties_count), sizeof (spl_ce_UnexpectedValueException->default_properties_count), &(spl_ce_UnexpectedValueException->default_static_members_count), sizeof (spl_ce_UnexpectedValueException->default_static_members_count), &(spl_ce_UnexpectedValueException->constructor), sizeof (spl_ce_UnexpectedValueException->constructor), &(spl_ce_UnexpectedValueException->destructor), sizeof (spl_ce_UnexpectedValueException->destructor), &(spl_ce_UnexpectedValueException->clone), sizeof (spl_ce_UnexpectedValueException->clone), &(spl_ce_UnexpectedValueException->__get), sizeof (spl_ce_UnexpectedValueException->__get), &(spl_ce_UnexpectedValueException->__set), sizeof (spl_ce_UnexpectedValueException->__set), &(spl_ce_UnexpectedValueException->__unset), sizeof (spl_ce_UnexpectedValueException->__unset), &(spl_ce_UnexpectedValueException->__isset), sizeof (spl_ce_UnexpectedValueException->__isset), &(spl_ce_UnexpectedValueException->__call), sizeof (spl_ce_UnexpectedValueException->__call), &(spl_ce_UnexpectedValueException->__callstatic), sizeof (spl_ce_UnexpectedValueException->__callstatic), &(spl_ce_UnexpectedValueException->__tostring), sizeof (spl_ce_UnexpectedValueException->__tostring), &(spl_ce_UnexpectedValueException->serialize_func), sizeof (spl_ce_UnexpectedValueException->serialize_func), &(spl_ce_UnexpectedValueException->unserialize_func), sizeof (spl_ce_UnexpectedValueException->unserialize_func), &(spl_ce_UnexpectedValueException->create_object), sizeof (spl_ce_UnexpectedValueException->create_object), &(spl_ce_UnexpectedValueException->get_iterator), sizeof (spl_ce_UnexpectedValueException->get_iterator), &(spl_ce_UnexpectedValueException->interface_gets_implemented), sizeof (spl_ce_UnexpectedValueException->interface_gets_implemented), &(spl_ce_UnexpectedValueException->get_static_method), sizeof (spl_ce_UnexpectedValueException->get_static_method), &(spl_ce_UnexpectedValueException->serialize), sizeof (spl_ce_UnexpectedValueException->serialize), &(spl_ce_UnexpectedValueException->unserialize), sizeof (spl_ce_UnexpectedValueException->unserialize), &(spl_ce_UnexpectedValueException->interfaces), sizeof (spl_ce_UnexpectedValueException->interfaces), &(spl_ce_UnexpectedValueException->num_interfaces), sizeof (spl_ce_UnexpectedValueException->num_interfaces), &(spl_ce_UnexpectedValueException->traits), sizeof (spl_ce_UnexpectedValueException->traits), &(spl_ce_UnexpectedValueException->num_traits), sizeof (spl_ce_UnexpectedValueException->num_traits), &(spl_ce_UnexpectedValueException->trait_aliases), sizeof (spl_ce_UnexpectedValueException->trait_aliases), &(spl_ce_UnexpectedValueException->trait_precedences), sizeof (spl_ce_UnexpectedValueException->trait_precedences)))\n    zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling);\n", "{\n}\n", "zend_replace_error_handling((0 * ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((0 * flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((0 * ht), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((0 * len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((0 * parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((0 * return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags != flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags != len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags != parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags * flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags * ht), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags * len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags * parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags * return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags + 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags + flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags + len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags + parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags - 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags - flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags - len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags - parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags == flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags == len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ctor_flags == parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((error_handling != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((error_handling == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags * ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags * ht), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags * len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags * parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags * return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags + 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags - 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((flags == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht != ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht != flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht != len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht != parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht != return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht * ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht * flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht * len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht * parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht * return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht + 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht + ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht + flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht + len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht + parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht + return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht - 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht - ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht - flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht - len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht - parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht - return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht == ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht == flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht == len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht == parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((ht == return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((intern != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((intern == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len != flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len * ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len * flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len * ht), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len * parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len * return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len + 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len + flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len - 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len - flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((len == flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed != flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed != len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed * ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed * flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed * ht), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed * len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed * return_value_used), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed + 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed + flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed + len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed - 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed - flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed - len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed == flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((parsed == len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((path != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((path == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value != this_ptr), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value == this_ptr), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_ptr != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_ptr == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used != ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used != flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used != len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used != parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used * ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used * flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used * ht), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used * len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used * parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used + 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used + ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used + flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used + len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used + parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used - 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used - ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used - flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used - len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used - parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used == ctor_flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used == flags), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used == len), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((return_value_used == parsed), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((this_ptr != 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((this_ptr == 0), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling(EH_THROW, (&ctor_flags), &error_handling)", "zend_replace_error_handling(EH_THROW, (&error_handling), &error_handling)", "zend_replace_error_handling(EH_THROW, (&flags), &error_handling)", "zend_replace_error_handling(EH_THROW, (&ht), &error_handling)", "zend_replace_error_handling(EH_THROW, (&intern), &error_handling)", "zend_replace_error_handling(EH_THROW, (&len), &error_handling)", "zend_replace_error_handling(EH_THROW, (&parsed), &error_handling)", "zend_replace_error_handling(EH_THROW, (&path), &error_handling)", "zend_replace_error_handling(EH_THROW, (&return_value), &error_handling)", "zend_replace_error_handling(EH_THROW, (&return_value_ptr), &error_handling)", "zend_replace_error_handling(EH_THROW, (&return_value_used), &error_handling)", "zend_replace_error_handling(EH_THROW, (&this_ptr), &error_handling)", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &(error_handling))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9527074347165225, -6.8855502947165217, -7.3879342697165216, -5.5916070637165216, -6.7840612647165219, -6.3250354357165222, -6.4620502347165223, -7.66614273471652, -7.6434383947165223, -7.6628852947165225, -7.66614273471652, -7.66614273471652, -7.1160443047165218, -7.58530430471652, -6.7940332747165222, -7.8739324047165216, -7.1160443047165218, -7.1160443047165218, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.1160443047165218, -7.1160443047165218, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.58530430471652, -7.1160443047165218, -7.1160443047165218, -7.1160443047165218, -7.1160443047165218, -7.1160443047165218, -7.1160443047165218, -7.58530430471652, -7.1160443047165218, -7.58530430471652, -7.1160443047165218, -7.58530430471652, -7.58530430471652]
								}, {
									"case":	2,
									"scores":	[-4.821144834716522]
								}, {
									"case":	3,
									"scores":	[-4.821144834716522]
								}, {
									"case":	4,
									"scores":	[-4.821144834716522]
								}, {
									"case":	5,
									"scores":	[-4.821144834716522]
								}, {
									"case":	6,
									"scores":	[-4.821144834716522]
								}, {
									"case":	7,
									"scores":	[-4.821144834716522]
								}, {
									"case":	8,
									"scores":	[-4.821144834716522]
								}, {
									"case":	9,
									"scores":	[-4.821144834716522]
								}, {
									"case":	10,
									"scores":	[-4.821144834716522]
								}, {
									"case":	11,
									"scores":	[-4.821144834716522]
								}, {
									"case":	12,
									"scores":	[-4.821144834716522]
								}, {
									"case":	13,
									"scores":	[-4.821144834716522]
								}, {
									"case":	14,
									"scores":	[-4.821144834716522]
								}, {
									"case":	15,
									"scores":	[-4.821144834716522]
								}, {
									"case":	16,
									"scores":	[-4.821144834716522]
								}, {
									"case":	17,
									"scores":	[-4.821144834716522]
								}, {
									"case":	18,
									"scores":	[-4.821144834716522]
								}, {
									"case":	19,
									"scores":	[-4.821144834716522]
								}, {
									"case":	20,
									"scores":	[-4.821144834716522]
								}, {
									"case":	21,
									"scores":	[-4.821144834716522]
								}, {
									"case":	22,
									"scores":	[-4.821144834716522]
								}, {
									"case":	23,
									"scores":	[-4.821144834716522]
								}, {
									"case":	24,
									"scores":	[-4.821144834716522]
								}, {
									"case":	25,
									"scores":	[-4.821144834716522]
								}, {
									"case":	26,
									"scores":	[-4.821144834716522]
								}, {
									"case":	27,
									"scores":	[-4.821144834716522]
								}, {
									"case":	28,
									"scores":	[-4.821144834716522]
								}, {
									"case":	29,
									"scores":	[-4.821144834716522]
								}, {
									"case":	30,
									"scores":	[-4.821144834716522]
								}, {
									"case":	31,
									"scores":	[-4.821144834716522]
								}, {
									"case":	32,
									"scores":	[-4.821144834716522]
								}, {
									"case":	33,
									"scores":	[-4.821144834716522]
								}, {
									"case":	34,
									"scores":	[-4.821144834716522]
								}, {
									"case":	35,
									"scores":	[-4.821144834716522]
								}, {
									"case":	36,
									"scores":	[-4.821144834716522]
								}, {
									"case":	37,
									"scores":	[-4.821144834716522]
								}, {
									"case":	38,
									"scores":	[-4.821144834716522]
								}, {
									"case":	39,
									"scores":	[-4.821144834716522]
								}, {
									"case":	40,
									"scores":	[-4.821144834716522]
								}, {
									"case":	41,
									"scores":	[-4.821144834716522]
								}, {
									"case":	42,
									"scores":	[-4.821144834716522]
								}, {
									"case":	43,
									"scores":	[-4.821144834716522]
								}, {
									"case":	44,
									"scores":	[-4.821144834716522]
								}, {
									"case":	45,
									"scores":	[-4.821144834716522]
								}, {
									"case":	46,
									"scores":	[-4.821144834716522]
								}, {
									"case":	47,
									"scores":	[-4.821144834716522]
								}, {
									"case":	48,
									"scores":	[-4.821144834716522]
								}, {
									"case":	49,
									"scores":	[-4.821144834716522]
								}, {
									"case":	50,
									"scores":	[-4.821144834716522]
								}, {
									"case":	51,
									"scores":	[-4.821144834716522]
								}, {
									"case":	52,
									"scores":	[-4.821144834716522]
								}, {
									"case":	53,
									"scores":	[-4.821144834716522]
								}, {
									"case":	54,
									"scores":	[-4.821144834716522]
								}, {
									"case":	55,
									"scores":	[-4.821144834716522]
								}, {
									"case":	56,
									"scores":	[-4.821144834716522]
								}, {
									"case":	57,
									"scores":	[-4.821144834716522]
								}, {
									"case":	58,
									"scores":	[-4.821144834716522]
								}, {
									"case":	59,
									"scores":	[-4.821144834716522]
								}, {
									"case":	60,
									"scores":	[-4.821144834716522]
								}, {
									"case":	61,
									"scores":	[-4.821144834716522]
								}, {
									"case":	62,
									"scores":	[-4.821144834716522]
								}, {
									"case":	63,
									"scores":	[-4.821144834716522]
								}, {
									"case":	64,
									"scores":	[-4.821144834716522]
								}, {
									"case":	65,
									"scores":	[-4.821144834716522]
								}, {
									"case":	66,
									"scores":	[-4.821144834716522]
								}, {
									"case":	67,
									"scores":	[-4.821144834716522]
								}, {
									"case":	68,
									"scores":	[-4.821144834716522]
								}, {
									"case":	69,
									"scores":	[-4.821144834716522]
								}, {
									"case":	70,
									"scores":	[-4.821144834716522]
								}, {
									"case":	71,
									"scores":	[-4.821144834716522]
								}, {
									"case":	72,
									"scores":	[-4.821144834716522]
								}, {
									"case":	73,
									"scores":	[-4.821144834716522]
								}, {
									"case":	74,
									"scores":	[-4.821144834716522]
								}, {
									"case":	75,
									"scores":	[-4.821144834716522]
								}, {
									"case":	76,
									"scores":	[-4.821144834716522]
								}, {
									"case":	77,
									"scores":	[-4.821144834716522]
								}, {
									"case":	78,
									"scores":	[-4.821144834716522]
								}, {
									"case":	79,
									"scores":	[-4.821144834716522]
								}, {
									"case":	80,
									"scores":	[-4.821144834716522]
								}, {
									"case":	81,
									"scores":	[-4.821144834716522]
								}, {
									"case":	82,
									"scores":	[-4.821144834716522]
								}, {
									"case":	83,
									"scores":	[-4.821144834716522]
								}, {
									"case":	84,
									"scores":	[-4.821144834716522]
								}, {
									"case":	85,
									"scores":	[-4.821144834716522]
								}, {
									"case":	86,
									"scores":	[-4.821144834716522]
								}, {
									"case":	87,
									"scores":	[-4.821144834716522]
								}, {
									"case":	88,
									"scores":	[-4.821144834716522]
								}, {
									"case":	89,
									"scores":	[-4.821144834716522]
								}, {
									"case":	90,
									"scores":	[-4.821144834716522]
								}, {
									"case":	91,
									"scores":	[-4.821144834716522]
								}, {
									"case":	92,
									"scores":	[-4.821144834716522]
								}, {
									"case":	93,
									"scores":	[-4.821144834716522]
								}, {
									"case":	94,
									"scores":	[-4.821144834716522]
								}, {
									"case":	95,
									"scores":	[-4.821144834716522]
								}, {
									"case":	96,
									"scores":	[-4.821144834716522]
								}, {
									"case":	97,
									"scores":	[-4.821144834716522]
								}, {
									"case":	98,
									"scores":	[-4.821144834716522]
								}, {
									"case":	99,
									"scores":	[-4.821144834716522]
								}, {
									"case":	100,
									"scores":	[-4.821144834716522]
								}, {
									"case":	101,
									"scores":	[-4.821144834716522]
								}, {
									"case":	102,
									"scores":	[-4.821144834716522]
								}, {
									"case":	103,
									"scores":	[-4.821144834716522]
								}, {
									"case":	104,
									"scores":	[-4.821144834716522]
								}, {
									"case":	105,
									"scores":	[-4.821144834716522]
								}, {
									"case":	106,
									"scores":	[-4.821144834716522]
								}, {
									"case":	107,
									"scores":	[-4.821144834716522]
								}, {
									"case":	108,
									"scores":	[-4.821144834716522]
								}, {
									"case":	109,
									"scores":	[-4.821144834716522]
								}, {
									"case":	110,
									"scores":	[-4.821144834716522]
								}, {
									"case":	111,
									"scores":	[-4.821144834716522]
								}, {
									"case":	112,
									"scores":	[-4.821144834716522]
								}, {
									"case":	113,
									"scores":	[-4.821144834716522]
								}, {
									"case":	114,
									"scores":	[-4.821144834716522]
								}, {
									"case":	115,
									"scores":	[-4.821144834716522]
								}, {
									"case":	116,
									"scores":	[-4.821144834716522]
								}, {
									"case":	117,
									"scores":	[-4.821144834716522]
								}, {
									"case":	118,
									"scores":	[-4.821144834716522]
								}, {
									"case":	119,
									"scores":	[-4.821144834716522]
								}, {
									"case":	120,
									"scores":	[-4.821144834716522]
								}, {
									"case":	121,
									"scores":	[-4.821144834716522]
								}, {
									"case":	122,
									"scores":	[-4.821144834716522]
								}, {
									"case":	123,
									"scores":	[-4.821144834716522]
								}, {
									"case":	124,
									"scores":	[-4.821144834716522]
								}, {
									"case":	125,
									"scores":	[-4.821144834716522]
								}, {
									"case":	126,
									"scores":	[-4.821144834716522]
								}, {
									"case":	127,
									"scores":	[-4.821144834716522]
								}, {
									"case":	128,
									"scores":	[-4.821144834716522]
								}, {
									"case":	129,
									"scores":	[-4.821144834716522]
								}, {
									"case":	130,
									"scores":	[-4.821144834716522]
								}, {
									"case":	131,
									"scores":	[-4.821144834716522]
								}, {
									"case":	132,
									"scores":	[-4.821144834716522]
								}, {
									"case":	133,
									"scores":	[-4.821144834716522]
								}, {
									"case":	134,
									"scores":	[-4.821144834716522]
								}, {
									"case":	135,
									"scores":	[-4.821144834716522]
								}, {
									"case":	136,
									"scores":	[-4.821144834716522]
								}, {
									"case":	137,
									"scores":	[-4.821144834716522]
								}, {
									"case":	138,
									"scores":	[-4.821144834716522]
								}, {
									"case":	139,
									"scores":	[-4.821144834716522]
								}, {
									"case":	140,
									"scores":	[-4.821144834716522]
								}, {
									"case":	141,
									"scores":	[-4.821144834716522]
								}, {
									"case":	142,
									"scores":	[-4.821144834716522]
								}, {
									"case":	143,
									"scores":	[-4.821144834716522]
								}, {
									"case":	144,
									"scores":	[-4.821144834716522]
								}, {
									"case":	145,
									"scores":	[-4.821144834716522]
								}, {
									"case":	146,
									"scores":	[-4.821144834716522]
								}, {
									"case":	147,
									"scores":	[-4.821144834716522]
								}, {
									"case":	148,
									"scores":	[-4.821144834716522]
								}, {
									"case":	149,
									"scores":	[-4.821144834716522]
								}, {
									"case":	150,
									"scores":	[-4.821144834716522]
								}, {
									"case":	151,
									"scores":	[-4.821144834716522]
								}, {
									"case":	152,
									"scores":	[-4.821144834716522]
								}]
						}]
				}, {
					"line":	636,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	637,
							"begin_column":	1,
							"end_line":	637,
							"end_column":	1,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L637\", 12, &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(ctor_flags), sizeof (ctor_flags), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	2,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	3,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	4,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	5,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	6,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	7,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	8,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	9,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	10,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	11,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	12,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	13,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	14,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	15,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	16,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	17,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	18,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	19,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	20,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	21,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	22,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	23,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	24,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	25,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	26,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	27,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	28,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	29,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	30,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	31,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	32,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	33,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	34,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	35,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	36,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	37,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	38,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	39,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	40,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	41,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	42,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	43,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	44,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	45,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	46,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	47,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	48,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	49,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	50,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	51,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	52,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	53,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	54,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	55,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	56,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	57,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	58,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	59,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	60,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	61,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	62,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	63,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	64,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	65,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	66,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	67,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	68,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	69,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	70,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	71,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	72,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	73,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	74,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	75,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	76,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	77,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	78,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	79,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	80,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	81,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	82,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	83,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	84,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	85,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	86,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	87,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	88,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	89,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	90,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	91,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	92,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	93,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	94,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	95,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	96,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	97,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	98,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	99,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	100,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	101,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	102,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	103,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	104,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	105,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	106,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	107,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	108,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	109,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	110,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	111,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	112,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	113,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	114,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	115,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	116,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	117,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	118,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	119,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	120,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	121,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	122,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	123,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	124,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	125,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	126,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	127,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	128,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	129,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	130,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	131,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	132,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	133,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	134,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	135,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	136,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	137,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	138,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	139,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	140,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	141,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	142,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	143,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	144,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	145,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	146,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	147,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	148,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	149,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	150,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	151,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	152,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	153,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	154,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	155,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	156,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	157,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	158,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	159,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	160,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	161,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	162,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	163,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	164,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	165,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	166,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	167,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	168,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	169,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	170,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	171,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	172,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	173,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	174,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	175,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	176,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	177,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	178,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	179,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	180,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	181,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	182,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	183,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	184,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	185,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	186,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	187,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	188,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	189,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	190,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	191,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	192,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	193,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	194,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	195,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	196,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	197,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	198,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	199,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	200,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	201,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	202,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	203,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	204,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	205,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	206,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	207,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	208,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	209,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	210,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	211,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	212,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	213,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	214,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	215,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	216,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	217,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	218,
									"scores":	[-5.8386734647785357, -5.7421687007785351, -6.5476639487785349, -6.0710241677785355, -6.0467289487785356, -6.1395230477785354, -6.6075337695785352, -6.6075337695785352, -6.3855619615785351, -6.6060467355785359, -6.6075337695785352, -6.6075337695785352]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	637,
							"begin_column":	3,
							"end_line":	637,
							"end_column":	40,
							"patch_codes":	["if (!__is_neg(\"\", \"L637\", 12, &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(ctor_flags), sizeof (ctor_flags), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    flags = 0 | 16;\n", "{\n}\n", "flags = (-1)", "flags = (0 * ctor_flags) | 16", "flags = (0 * flags) | 16", "flags = (0 * ht) | 16", "flags = (0 * len) | 16", "flags = (0 * parsed) | 16", "flags = (0 * return_value_used) | 16", "flags = (0) | 16", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags != 0) | 16", "flags = (ctor_flags != flags) | 16", "flags = (ctor_flags != len) | 16", "flags = (ctor_flags != parsed) | 16", "flags = (ctor_flags * flags) | 16", "flags = (ctor_flags * ht) | 16", "flags = (ctor_flags * len) | 16", "flags = (ctor_flags * parsed) | 16", "flags = (ctor_flags * return_value_used) | 16", "flags = (ctor_flags + 0) | 16", "flags = (ctor_flags + flags) | 16", "flags = (ctor_flags + len) | 16", "flags = (ctor_flags + parsed) | 16", "flags = (ctor_flags - 0) | 16", "flags = (ctor_flags - flags) | 16", "flags = (ctor_flags - len) | 16", "flags = (ctor_flags - parsed) | 16", "flags = (ctor_flags == 0) | 16", "flags = (ctor_flags == flags) | 16", "flags = (ctor_flags == len) | 16", "flags = (ctor_flags == parsed) | 16", "flags = (ctor_flags)", "flags = (error_handling != 0) | 16", "flags = (error_handling == 0) | 16", "flags = (flags != 0) | 16", "flags = (flags * ctor_flags) | 16", "flags = (flags * ht) | 16", "flags = (flags * len) | 16", "flags = (flags * parsed) | 16", "flags = (flags * return_value_used) | 16", "flags = (flags + 0) | 16", "flags = (flags - 0) | 16", "flags = (flags == 0) | 16", "flags = (flags)", "flags = (ht != 0) | 16", "flags = (ht != ctor_flags) | 16", "flags = (ht != flags) | 16", "flags = (ht != len) | 16", "flags = (ht != parsed) | 16", "flags = (ht != return_value_used) | 16", "flags = (ht * ctor_flags) | 16", "flags = (ht * flags) | 16", "flags = (ht * len) | 16", "flags = (ht * parsed) | 16", "flags = (ht * return_value_used) | 16", "flags = (ht + 0) | 16", "flags = (ht + ctor_flags) | 16", "flags = (ht + flags) | 16", "flags = (ht + len) | 16", "flags = (ht + parsed) | 16", "flags = (ht + return_value_used) | 16", "flags = (ht - 0) | 16", "flags = (ht - ctor_flags) | 16", "flags = (ht - flags) | 16", "flags = (ht - len) | 16", "flags = (ht - parsed) | 16", "flags = (ht - return_value_used) | 16", "flags = (ht == 0) | 16", "flags = (ht == ctor_flags) | 16", "flags = (ht == flags) | 16", "flags = (ht == len) | 16", "flags = (ht == parsed) | 16", "flags = (ht == return_value_used) | 16", "flags = (intern != 0) | 16", "flags = (intern == 0) | 16", "flags = (len != 0) | 16", "flags = (len != flags) | 16", "flags = (len * ctor_flags) | 16", "flags = (len * flags) | 16", "flags = (len * ht) | 16", "flags = (len * parsed) | 16", "flags = (len * return_value_used) | 16", "flags = (len + 0) | 16", "flags = (len + flags) | 16", "flags = (len - 0) | 16", "flags = (len - flags) | 16", "flags = (len == 0) | 16", "flags = (len == flags) | 16", "flags = (parsed != 0) | 16", "flags = (parsed != flags) | 16", "flags = (parsed != len) | 16", "flags = (parsed * ctor_flags) | 16", "flags = (parsed * flags) | 16", "flags = (parsed * ht) | 16", "flags = (parsed * len) | 16", "flags = (parsed * return_value_used) | 16", "flags = (parsed + 0) | 16", "flags = (parsed + flags) | 16", "flags = (parsed + len) | 16", "flags = (parsed - 0) | 16", "flags = (parsed - flags) | 16", "flags = (parsed - len) | 16", "flags = (parsed == 0) | 16", "flags = (parsed == flags) | 16", "flags = (parsed == len) | 16", "flags = (path != 0) | 16", "flags = (path == 0) | 16", "flags = (return_value != 0) | 16", "flags = (return_value != this_ptr) | 16", "flags = (return_value == 0) | 16", "flags = (return_value == this_ptr) | 16", "flags = (return_value_ptr != 0) | 16", "flags = (return_value_ptr == 0) | 16", "flags = (return_value_used != 0) | 16", "flags = (return_value_used != ctor_flags) | 16", "flags = (return_value_used != flags) | 16", "flags = (return_value_used != len) | 16", "flags = (return_value_used != parsed) | 16", "flags = (return_value_used * ctor_flags) | 16", "flags = (return_value_used * flags) | 16", "flags = (return_value_used * ht) | 16", "flags = (return_value_used * len) | 16", "flags = (return_value_used * parsed) | 16", "flags = (return_value_used + 0) | 16", "flags = (return_value_used + ctor_flags) | 16", "flags = (return_value_used + flags) | 16", "flags = (return_value_used + len) | 16", "flags = (return_value_used + parsed) | 16", "flags = (return_value_used - 0) | 16", "flags = (return_value_used - ctor_flags) | 16", "flags = (return_value_used - flags) | 16", "flags = (return_value_used - len) | 16", "flags = (return_value_used - parsed) | 16", "flags = (return_value_used == 0) | 16", "flags = (return_value_used == ctor_flags) | 16", "flags = (return_value_used == flags) | 16", "flags = (return_value_used == len) | 16", "flags = (return_value_used == parsed) | 16", "flags = (this_ptr != 0) | 16", "flags = (this_ptr == 0) | 16", "flags = 0 | (0 * ctor_flags)", "flags = 0 | (0 * flags)", "flags = 0 | (0 * ht)", "flags = 0 | (0 * len)", "flags = 0 | (0 * parsed)", "flags = 0 | (0 * return_value_used)", "flags = 0 | (0)", "flags = 0 | (ctor_flags != 0)", "flags = 0 | (ctor_flags != flags)", "flags = 0 | (ctor_flags != len)", "flags = 0 | (ctor_flags != parsed)", "flags = 0 | (ctor_flags * flags)", "flags = 0 | (ctor_flags * ht)", "flags = 0 | (ctor_flags * len)", "flags = 0 | (ctor_flags * parsed)", "flags = 0 | (ctor_flags * return_value_used)", "flags = 0 | (ctor_flags + 0)", "flags = 0 | (ctor_flags + flags)", "flags = 0 | (ctor_flags + len)", "flags = 0 | (ctor_flags + parsed)", "flags = 0 | (ctor_flags - 0)", "flags = 0 | (ctor_flags - flags)", "flags = 0 | (ctor_flags - len)", "flags = 0 | (ctor_flags - parsed)", "flags = 0 | (ctor_flags == 0)", "flags = 0 | (ctor_flags == flags)", "flags = 0 | (ctor_flags == len)", "flags = 0 | (ctor_flags == parsed)", "flags = 0 | (error_handling != 0)", "flags = 0 | (error_handling == 0)", "flags = 0 | (flags != 0)", "flags = 0 | (flags * ctor_flags)", "flags = 0 | (flags * ht)", "flags = 0 | (flags * len)", "flags = 0 | (flags * parsed)", "flags = 0 | (flags * return_value_used)", "flags = 0 | (flags + 0)", "flags = 0 | (flags - 0)", "flags = 0 | (flags == 0)", "flags = 0 | (ht != 0)", "flags = 0 | (ht != ctor_flags)", "flags = 0 | (ht != flags)", "flags = 0 | (ht != len)", "flags = 0 | (ht != parsed)", "flags = 0 | (ht != return_value_used)", "flags = 0 | (ht * ctor_flags)", "flags = 0 | (ht * flags)", "flags = 0 | (ht * len)", "flags = 0 | (ht * parsed)", "flags = 0 | (ht * return_value_used)", "flags = 0 | (ht + 0)", "flags = 0 | (ht + ctor_flags)", "flags = 0 | (ht + flags)", "flags = 0 | (ht + len)", "flags = 0 | (ht + parsed)", "flags = 0 | (ht + return_value_used)", "flags = 0 | (ht - 0)", "flags = 0 | (ht - ctor_flags)", "flags = 0 | (ht - flags)", "flags = 0 | (ht - len)", "flags = 0 | (ht - parsed)", "flags = 0 | (ht - return_value_used)", "flags = 0 | (ht == 0)", "flags = 0 | (ht == ctor_flags)", "flags = 0 | (ht == flags)", "flags = 0 | (ht == len)", "flags = 0 | (ht == parsed)", "flags = 0 | (ht == return_value_used)", "flags = 0 | (intern != 0)", "flags = 0 | (intern == 0)", "flags = 0 | (len != 0)", "flags = 0 | (len != flags)", "flags = 0 | (len * ctor_flags)", "flags = 0 | (len * flags)", "flags = 0 | (len * ht)", "flags = 0 | (len * parsed)", "flags = 0 | (len * return_value_used)", "flags = 0 | (len + 0)", "flags = 0 | (len + flags)", "flags = 0 | (len - 0)", "flags = 0 | (len - flags)", "flags = 0 | (len == 0)", "flags = 0 | (len == flags)", "flags = 0 | (parsed != 0)", "flags = 0 | (parsed != flags)", "flags = 0 | (parsed != len)", "flags = 0 | (parsed * ctor_flags)", "flags = 0 | (parsed * flags)", "flags = 0 | (parsed * ht)", "flags = 0 | (parsed * len)", "flags = 0 | (parsed * return_value_used)", "flags = 0 | (parsed + 0)", "flags = 0 | (parsed + flags)", "flags = 0 | (parsed + len)", "flags = 0 | (parsed - 0)", "flags = 0 | (parsed - flags)", "flags = 0 | (parsed - len)", "flags = 0 | (parsed == 0)", "flags = 0 | (parsed == flags)", "flags = 0 | (parsed == len)", "flags = 0 | (path != 0)", "flags = 0 | (path == 0)", "flags = 0 | (return_value != 0)", "flags = 0 | (return_value != this_ptr)", "flags = 0 | (return_value == 0)", "flags = 0 | (return_value == this_ptr)", "flags = 0 | (return_value_ptr != 0)", "flags = 0 | (return_value_ptr == 0)", "flags = 0 | (return_value_used != 0)", "flags = 0 | (return_value_used != ctor_flags)", "flags = 0 | (return_value_used != flags)", "flags = 0 | (return_value_used != len)", "flags = 0 | (return_value_used != parsed)", "flags = 0 | (return_value_used * ctor_flags)", "flags = 0 | (return_value_used * flags)", "flags = 0 | (return_value_used * ht)", "flags = 0 | (return_value_used * len)", "flags = 0 | (return_value_used * parsed)", "flags = 0 | (return_value_used + 0)", "flags = 0 | (return_value_used + ctor_flags)", "flags = 0 | (return_value_used + flags)", "flags = 0 | (return_value_used + len)", "flags = 0 | (return_value_used + parsed)", "flags = 0 | (return_value_used - 0)", "flags = 0 | (return_value_used - ctor_flags)", "flags = 0 | (return_value_used - flags)", "flags = 0 | (return_value_used - len)", "flags = 0 | (return_value_used - parsed)", "flags = 0 | (return_value_used == 0)", "flags = 0 | (return_value_used == ctor_flags)", "flags = 0 | (return_value_used == flags)", "flags = 0 | (return_value_used == len)", "flags = 0 | (return_value_used == parsed)", "flags = 0 | (this_ptr != 0)", "flags = 0 | (this_ptr == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2451996427785357, -3.4688786907785354, -4.6613328917785353, -4.2023070627785355, -4.3393218617785356, -4.762821921778535, -5.5434143617785354, -5.5434143617785354, -5.5207100217785356, -5.5401569217785358, -5.5434143617785354, -5.5434143617785354]
								}, {
									"case":	2,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	3,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	4,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	5,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	6,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	7,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	8,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	9,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	10,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	11,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	12,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	13,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	14,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	15,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	16,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	17,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	18,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	19,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	20,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	21,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	22,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	23,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	24,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	25,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	26,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	27,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	28,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	29,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	30,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	31,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	32,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	33,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	34,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	35,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	36,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	37,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	38,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	39,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	40,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	41,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	42,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	43,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	44,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	45,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	46,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	47,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	48,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	49,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	50,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	51,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	52,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	53,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	54,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	55,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	56,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	57,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	58,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	59,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	60,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	61,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	62,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	63,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	64,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	65,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	66,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	67,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	68,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	69,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	70,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	71,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	72,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	73,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	74,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	75,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	76,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	77,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	78,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	79,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	80,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	81,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	82,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	83,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	84,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	85,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	86,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	87,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	88,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	89,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	90,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	91,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	92,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	93,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	94,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	95,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	96,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	97,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	98,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	99,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	100,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	101,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	102,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	103,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	104,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	105,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	106,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	107,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	108,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	109,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	110,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	111,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	112,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	113,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	114,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	115,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	116,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	117,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	118,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	119,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	120,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	121,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	122,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	123,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	124,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	125,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	126,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	127,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	128,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	129,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	130,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	131,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	132,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	133,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	134,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	135,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	136,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	137,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	138,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	139,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	140,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	141,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	142,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	143,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	144,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	145,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	146,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	147,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	148,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	149,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	150,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	151,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	152,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	153,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	154,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	155,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	156,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	157,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	158,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	159,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	160,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	161,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	162,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	163,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	164,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	165,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	166,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	167,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	168,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	169,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	170,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	171,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	172,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	173,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	174,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	175,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	176,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	177,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	178,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	179,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	180,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	181,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	182,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	183,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	184,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	185,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	186,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	187,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	188,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	189,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	190,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	191,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	192,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	193,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	194,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	195,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	196,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	197,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	198,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	199,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	200,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	201,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	202,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	203,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	204,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	205,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	206,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	207,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	208,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	209,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	210,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	211,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	212,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	213,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	214,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	215,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	216,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	217,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	218,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	219,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	220,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	221,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	222,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	223,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	224,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	225,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	226,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	227,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	228,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	229,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	230,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	231,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	232,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	233,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	234,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	235,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	236,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	237,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	238,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	239,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	240,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	241,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	242,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	243,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	244,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	245,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	246,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	247,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	248,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	249,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	250,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	251,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	252,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	253,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	254,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	255,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	256,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	257,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	258,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	259,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	260,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	261,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	262,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	263,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	264,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	265,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	266,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	267,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	268,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	269,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	270,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	271,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	272,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	273,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	274,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	275,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	276,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	277,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	278,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	279,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	280,
									"scores":	[-4.3160771517785355]
								}, {
									"case":	281,
									"scores":	[-4.3160771517785355]
								}]
						}]
				}, {
					"line":	637,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	638,
							"begin_column":	1,
							"end_line":	638,
							"end_column":	1,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L638\", 12, &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.295874444461016]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}, {
									"case":	71,
									"scores":	[-4.295874444461016]
								}, {
									"case":	72,
									"scores":	[-4.295874444461016]
								}, {
									"case":	73,
									"scores":	[-4.295874444461016]
								}, {
									"case":	74,
									"scores":	[-4.295874444461016]
								}, {
									"case":	75,
									"scores":	[-4.295874444461016]
								}, {
									"case":	76,
									"scores":	[-4.295874444461016]
								}, {
									"case":	77,
									"scores":	[-4.295874444461016]
								}, {
									"case":	78,
									"scores":	[-4.295874444461016]
								}, {
									"case":	79,
									"scores":	[-4.295874444461016]
								}, {
									"case":	80,
									"scores":	[-4.295874444461016]
								}, {
									"case":	81,
									"scores":	[-4.295874444461016]
								}, {
									"case":	82,
									"scores":	[-4.295874444461016]
								}, {
									"case":	83,
									"scores":	[-4.295874444461016]
								}, {
									"case":	84,
									"scores":	[-4.295874444461016]
								}, {
									"case":	85,
									"scores":	[-4.295874444461016]
								}, {
									"case":	86,
									"scores":	[-4.295874444461016]
								}, {
									"case":	87,
									"scores":	[-4.295874444461016]
								}, {
									"case":	88,
									"scores":	[-4.295874444461016]
								}, {
									"case":	89,
									"scores":	[-4.295874444461016]
								}, {
									"case":	90,
									"scores":	[-4.295874444461016]
								}, {
									"case":	91,
									"scores":	[-4.295874444461016]
								}, {
									"case":	92,
									"scores":	[-4.295874444461016]
								}, {
									"case":	93,
									"scores":	[-4.295874444461016]
								}, {
									"case":	94,
									"scores":	[-4.295874444461016]
								}, {
									"case":	95,
									"scores":	[-4.295874444461016]
								}, {
									"case":	96,
									"scores":	[-4.295874444461016]
								}, {
									"case":	97,
									"scores":	[-4.295874444461016]
								}, {
									"case":	98,
									"scores":	[-4.295874444461016]
								}, {
									"case":	99,
									"scores":	[-4.295874444461016]
								}, {
									"case":	100,
									"scores":	[-4.295874444461016]
								}, {
									"case":	101,
									"scores":	[-4.295874444461016]
								}, {
									"case":	102,
									"scores":	[-4.295874444461016]
								}, {
									"case":	103,
									"scores":	[-4.295874444461016]
								}, {
									"case":	104,
									"scores":	[-4.295874444461016]
								}, {
									"case":	105,
									"scores":	[-4.295874444461016]
								}, {
									"case":	106,
									"scores":	[-4.295874444461016]
								}, {
									"case":	107,
									"scores":	[-4.295874444461016]
								}, {
									"case":	108,
									"scores":	[-4.295874444461016]
								}, {
									"case":	109,
									"scores":	[-4.295874444461016]
								}, {
									"case":	110,
									"scores":	[-4.295874444461016]
								}, {
									"case":	111,
									"scores":	[-4.295874444461016]
								}, {
									"case":	112,
									"scores":	[-4.295874444461016]
								}, {
									"case":	113,
									"scores":	[-4.295874444461016]
								}, {
									"case":	114,
									"scores":	[-4.295874444461016]
								}, {
									"case":	115,
									"scores":	[-4.295874444461016]
								}, {
									"case":	116,
									"scores":	[-4.295874444461016]
								}, {
									"case":	117,
									"scores":	[-4.295874444461016]
								}, {
									"case":	118,
									"scores":	[-4.295874444461016]
								}, {
									"case":	119,
									"scores":	[-4.295874444461016]
								}, {
									"case":	120,
									"scores":	[-4.295874444461016]
								}, {
									"case":	121,
									"scores":	[-4.295874444461016]
								}, {
									"case":	122,
									"scores":	[-4.295874444461016]
								}, {
									"case":	123,
									"scores":	[-4.295874444461016]
								}, {
									"case":	124,
									"scores":	[-4.295874444461016]
								}, {
									"case":	125,
									"scores":	[-4.295874444461016]
								}, {
									"case":	126,
									"scores":	[-4.295874444461016]
								}, {
									"case":	127,
									"scores":	[-4.295874444461016]
								}, {
									"case":	128,
									"scores":	[-4.295874444461016]
								}, {
									"case":	129,
									"scores":	[-4.295874444461016]
								}, {
									"case":	130,
									"scores":	[-4.295874444461016]
								}, {
									"case":	131,
									"scores":	[-4.295874444461016]
								}, {
									"case":	132,
									"scores":	[-4.295874444461016]
								}, {
									"case":	133,
									"scores":	[-4.295874444461016]
								}, {
									"case":	134,
									"scores":	[-4.295874444461016]
								}, {
									"case":	135,
									"scores":	[-4.295874444461016]
								}, {
									"case":	136,
									"scores":	[-4.295874444461016]
								}, {
									"case":	137,
									"scores":	[-4.295874444461016]
								}, {
									"case":	138,
									"scores":	[-4.295874444461016]
								}, {
									"case":	139,
									"scores":	[-4.295874444461016]
								}, {
									"case":	140,
									"scores":	[-4.295874444461016]
								}, {
									"case":	141,
									"scores":	[-4.295874444461016]
								}, {
									"case":	142,
									"scores":	[-4.295874444461016]
								}, {
									"case":	143,
									"scores":	[-4.295874444461016]
								}, {
									"case":	144,
									"scores":	[-4.295874444461016]
								}, {
									"case":	145,
									"scores":	[-4.295874444461016]
								}, {
									"case":	146,
									"scores":	[-4.295874444461016]
								}, {
									"case":	147,
									"scores":	[-4.295874444461016]
								}, {
									"case":	148,
									"scores":	[-4.295874444461016]
								}, {
									"case":	149,
									"scores":	[-4.295874444461016]
								}, {
									"case":	150,
									"scores":	[-4.295874444461016]
								}, {
									"case":	151,
									"scores":	[-4.295874444461016]
								}, {
									"case":	152,
									"scores":	[-4.295874444461016]
								}, {
									"case":	153,
									"scores":	[-4.295874444461016]
								}, {
									"case":	154,
									"scores":	[-4.295874444461016]
								}, {
									"case":	155,
									"scores":	[-4.295874444461016]
								}, {
									"case":	156,
									"scores":	[-4.295874444461016]
								}, {
									"case":	157,
									"scores":	[-4.295874444461016]
								}, {
									"case":	158,
									"scores":	[-4.295874444461016]
								}, {
									"case":	159,
									"scores":	[-4.295874444461016]
								}, {
									"case":	160,
									"scores":	[-4.295874444461016]
								}, {
									"case":	161,
									"scores":	[-4.295874444461016]
								}, {
									"case":	162,
									"scores":	[-4.295874444461016]
								}, {
									"case":	163,
									"scores":	[-4.295874444461016]
								}, {
									"case":	164,
									"scores":	[-4.295874444461016]
								}, {
									"case":	165,
									"scores":	[-4.295874444461016]
								}, {
									"case":	166,
									"scores":	[-4.295874444461016]
								}, {
									"case":	167,
									"scores":	[-4.295874444461016]
								}, {
									"case":	168,
									"scores":	[-4.295874444461016]
								}, {
									"case":	169,
									"scores":	[-4.295874444461016]
								}, {
									"case":	170,
									"scores":	[-4.295874444461016]
								}, {
									"case":	171,
									"scores":	[-4.295874444461016]
								}, {
									"case":	172,
									"scores":	[-4.295874444461016]
								}, {
									"case":	173,
									"scores":	[-4.295874444461016]
								}, {
									"case":	174,
									"scores":	[-4.295874444461016]
								}, {
									"case":	175,
									"scores":	[-4.295874444461016]
								}, {
									"case":	176,
									"scores":	[-4.295874444461016]
								}, {
									"case":	177,
									"scores":	[-4.295874444461016]
								}, {
									"case":	178,
									"scores":	[-4.295874444461016]
								}, {
									"case":	179,
									"scores":	[-4.295874444461016]
								}, {
									"case":	180,
									"scores":	[-4.295874444461016]
								}, {
									"case":	181,
									"scores":	[-4.295874444461016]
								}, {
									"case":	182,
									"scores":	[-4.295874444461016]
								}, {
									"case":	183,
									"scores":	[-4.295874444461016]
								}, {
									"case":	184,
									"scores":	[-4.295874444461016]
								}, {
									"case":	185,
									"scores":	[-4.295874444461016]
								}, {
									"case":	186,
									"scores":	[-4.295874444461016]
								}, {
									"case":	187,
									"scores":	[-4.295874444461016]
								}, {
									"case":	188,
									"scores":	[-4.295874444461016]
								}, {
									"case":	189,
									"scores":	[-4.295874444461016]
								}, {
									"case":	190,
									"scores":	[-4.295874444461016]
								}, {
									"case":	191,
									"scores":	[-4.295874444461016]
								}, {
									"case":	192,
									"scores":	[-4.295874444461016]
								}, {
									"case":	193,
									"scores":	[-4.295874444461016]
								}, {
									"case":	194,
									"scores":	[-4.295874444461016]
								}, {
									"case":	195,
									"scores":	[-4.295874444461016]
								}, {
									"case":	196,
									"scores":	[-4.295874444461016]
								}, {
									"case":	197,
									"scores":	[-4.295874444461016]
								}, {
									"case":	198,
									"scores":	[-4.295874444461016]
								}, {
									"case":	199,
									"scores":	[-4.295874444461016]
								}, {
									"case":	200,
									"scores":	[-4.295874444461016]
								}, {
									"case":	201,
									"scores":	[-4.295874444461016]
								}, {
									"case":	202,
									"scores":	[-4.295874444461016]
								}, {
									"case":	203,
									"scores":	[-4.295874444461016]
								}, {
									"case":	204,
									"scores":	[-4.295874444461016]
								}, {
									"case":	205,
									"scores":	[-4.295874444461016]
								}, {
									"case":	206,
									"scores":	[-4.295874444461016]
								}, {
									"case":	207,
									"scores":	[-4.295874444461016]
								}, {
									"case":	208,
									"scores":	[-4.295874444461016]
								}, {
									"case":	209,
									"scores":	[-4.295874444461016]
								}, {
									"case":	210,
									"scores":	[-4.295874444461016]
								}, {
									"case":	211,
									"scores":	[-4.295874444461016]
								}, {
									"case":	212,
									"scores":	[-4.295874444461016]
								}, {
									"case":	213,
									"scores":	[-4.295874444461016]
								}, {
									"case":	214,
									"scores":	[-4.295874444461016]
								}, {
									"case":	215,
									"scores":	[-4.295874444461016]
								}, {
									"case":	216,
									"scores":	[-4.295874444461016]
								}, {
									"case":	217,
									"scores":	[-4.295874444461016]
								}, {
									"case":	218,
									"scores":	[-4.1547983714610162, -5.6855235614610162, -5.7994471814610158, -5.1845885614610161, -5.4388157754610154, -6.7265743404610152, -7.1945850622610159, -7.1945850622610159, -6.9726132542610149, -7.1930980282610157, -7.1945850622610159, -7.1945850622610159]
								}]
						}, {
							"switch":	59,
							"types":	[[], [], [1], [], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], [], [3, 4], [], [], [], [], [], [], [], [2]],
							"begin_line":	638,
							"begin_column":	3,
							"end_line":	638,
							"end_column":	77,
							"patch_codes":	["if (!__is_neg(\"\", \"L638\", 12, &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    parsed = zend_parse_parameters((ht), \"s\", &path, &len);\n", "{\n}\n", "parsed = dprintf((ht), \"s\", &path, &len)", "parsed = zend_get_parameters_ex((ht), \"s\", &path, &len)", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters(((0 * ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((0 * flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((0 * ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((0 * len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((0 * parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((0 * return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags != flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags != len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags != parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags * flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags * ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags * len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags * parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags * return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags + 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags + flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags + len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags + parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags - 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags - flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags - len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags - parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags == flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags == len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ctor_flags == parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((error_handling != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((error_handling == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags * ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags * ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags * len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags * parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags * return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags + 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags - 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((flags == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht != ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht != flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht != len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht != parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht != return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht * ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht * flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht * len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht * parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht * return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht + 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht + ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht + flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht + len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht + parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht + return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht - 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht - ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht - flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht - len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht - parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht - return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht == ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht == flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht == len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht == parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht == return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((intern != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((intern == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len != flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len * ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len * flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len * ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len * parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len * return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len + 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len + flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len - 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len - flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len == flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed != flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed != len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed * ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed * flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed * ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed * len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed * return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed + 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed + flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed + len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed - 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed - flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed - len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed == flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed == len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((path != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((path == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value != this_ptr)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value == this_ptr)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_ptr != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_ptr == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used != ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used != flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used != len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used != parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used * ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used * flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used * ht)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used * len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used * parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used + 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used + ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used + flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used + len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used + parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used - 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used - ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used - flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used - len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used - parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used == ctor_flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used == flags)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used == len)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used == parsed)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((return_value_used)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((this_ptr != 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters(((this_ptr == 0)), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&ctor_flags), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&error_handling), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&flags), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&ht), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&intern), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&len), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&parsed), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&path), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&return_value), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&return_value_ptr), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&return_value_used), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(&this_ptr), &len)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s\", &path, &(0 * ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(0 * flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(0 * ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(0 * len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(0 * parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(0 * return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags != flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags != len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags != parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags * flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags * ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags * len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags * parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags * return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags + 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags + flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags + len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags + parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags - 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags - flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags - len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags - parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags == flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags == len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ctor_flags == parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(error_handling != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(error_handling == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags * ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags * ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags * len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags * parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags * return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags + 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags - 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(flags == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht != ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht != flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht != len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht != parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht != return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht * ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht * flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht * len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht * parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht * return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht + 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht + ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht + flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht + len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht + parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht + return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht - 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht - ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht - flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht - len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht - parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht - return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht == ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht == flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht == len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht == parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht == return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(intern != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(intern == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len != flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len * ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len * flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len * ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len * parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len * return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len + 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len + flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len - 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len - flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len == flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed != flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed != len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed * ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed * flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed * ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed * len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed * return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed + 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed + flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed + len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed - 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed - flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed - len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed == flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed == len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(path != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(path == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value != this_ptr))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value == this_ptr))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_ptr != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_ptr == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used != ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used != flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used != len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used != parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used * ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used * flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used * ht))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used * len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used * parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used + 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used + ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used + flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used + len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used + parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used - 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used - ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used - flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used - len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used - parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used == 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used == ctor_flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used == flags))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used == len))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used == parsed))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(return_value_used))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(this_ptr != 0))", "parsed = zend_parse_parameters((ht), \"s\", &path, &(this_ptr == 0))", "parsed = zend_parse_parameters((ht), (&ctor_flags), &path, &len)", "parsed = zend_parse_parameters((ht), (&error_handling), &path, &len)", "parsed = zend_parse_parameters((ht), (&flags), &path, &len)", "parsed = zend_parse_parameters((ht), (&ht), &path, &len)", "parsed = zend_parse_parameters((ht), (&intern), &path, &len)", "parsed = zend_parse_parameters((ht), (&len), &path, &len)", "parsed = zend_parse_parameters((ht), (&parsed), &path, &len)", "parsed = zend_parse_parameters((ht), (&path), &path, &len)", "parsed = zend_parse_parameters((ht), (&return_value), &path, &len)", "parsed = zend_parse_parameters((ht), (&return_value_ptr), &path, &len)", "parsed = zend_parse_parameters((ht), (&return_value_used), &path, &len)", "parsed = zend_parse_parameters((ht), (&this_ptr), &path, &len)", "parsed = zend_parse_parameters((ht), (0), &path, &len)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2738049244610155, -5.0205962244610163, -5.054740935461016, -4.6985851944610157, -5.2225505544610158, -5.4821492144610158, -6.2627416544610162, -6.2627416544610162, -6.2400373144610164, -6.2594842144610165, -6.2627416544610162, -6.2627416544610162]
								}, {
									"case":	2,
									"scores":	[-4.295874444461016]
								}, {
									"case":	3,
									"scores":	[-4.295874444461016]
								}, {
									"case":	4,
									"scores":	[-4.295874444461016]
								}, {
									"case":	5,
									"scores":	[-4.295874444461016]
								}, {
									"case":	6,
									"scores":	[-4.295874444461016]
								}, {
									"case":	7,
									"scores":	[-4.295874444461016]
								}, {
									"case":	8,
									"scores":	[-4.295874444461016]
								}, {
									"case":	9,
									"scores":	[-4.295874444461016]
								}, {
									"case":	10,
									"scores":	[-4.295874444461016]
								}, {
									"case":	11,
									"scores":	[-4.295874444461016]
								}, {
									"case":	12,
									"scores":	[-4.295874444461016]
								}, {
									"case":	13,
									"scores":	[-4.295874444461016]
								}, {
									"case":	14,
									"scores":	[-4.295874444461016]
								}, {
									"case":	15,
									"scores":	[-4.295874444461016]
								}, {
									"case":	16,
									"scores":	[-4.295874444461016]
								}, {
									"case":	17,
									"scores":	[-4.295874444461016]
								}, {
									"case":	18,
									"scores":	[-4.295874444461016]
								}, {
									"case":	19,
									"scores":	[-4.295874444461016]
								}, {
									"case":	20,
									"scores":	[-4.295874444461016]
								}, {
									"case":	21,
									"scores":	[-4.295874444461016]
								}, {
									"case":	22,
									"scores":	[-4.295874444461016]
								}, {
									"case":	23,
									"scores":	[-4.295874444461016]
								}, {
									"case":	24,
									"scores":	[-4.295874444461016]
								}, {
									"case":	25,
									"scores":	[-4.295874444461016]
								}, {
									"case":	26,
									"scores":	[-4.295874444461016]
								}, {
									"case":	27,
									"scores":	[-4.295874444461016]
								}, {
									"case":	28,
									"scores":	[-4.295874444461016]
								}, {
									"case":	29,
									"scores":	[-4.295874444461016]
								}, {
									"case":	30,
									"scores":	[-4.295874444461016]
								}, {
									"case":	31,
									"scores":	[-4.295874444461016]
								}, {
									"case":	32,
									"scores":	[-4.295874444461016]
								}, {
									"case":	33,
									"scores":	[-4.295874444461016]
								}, {
									"case":	34,
									"scores":	[-4.295874444461016]
								}, {
									"case":	35,
									"scores":	[-4.295874444461016]
								}, {
									"case":	36,
									"scores":	[-4.295874444461016]
								}, {
									"case":	37,
									"scores":	[-4.295874444461016]
								}, {
									"case":	38,
									"scores":	[-4.295874444461016]
								}, {
									"case":	39,
									"scores":	[-4.295874444461016]
								}, {
									"case":	40,
									"scores":	[-4.295874444461016]
								}, {
									"case":	41,
									"scores":	[-4.295874444461016]
								}, {
									"case":	42,
									"scores":	[-4.295874444461016]
								}, {
									"case":	43,
									"scores":	[-4.295874444461016]
								}, {
									"case":	44,
									"scores":	[-4.295874444461016]
								}, {
									"case":	45,
									"scores":	[-4.295874444461016]
								}, {
									"case":	46,
									"scores":	[-4.295874444461016]
								}, {
									"case":	47,
									"scores":	[-4.295874444461016]
								}, {
									"case":	48,
									"scores":	[-4.295874444461016]
								}, {
									"case":	49,
									"scores":	[-4.295874444461016]
								}, {
									"case":	50,
									"scores":	[-4.295874444461016]
								}, {
									"case":	51,
									"scores":	[-4.295874444461016]
								}, {
									"case":	52,
									"scores":	[-4.295874444461016]
								}, {
									"case":	53,
									"scores":	[-4.295874444461016]
								}, {
									"case":	54,
									"scores":	[-4.295874444461016]
								}, {
									"case":	55,
									"scores":	[-4.295874444461016]
								}, {
									"case":	56,
									"scores":	[-4.295874444461016]
								}, {
									"case":	57,
									"scores":	[-4.295874444461016]
								}, {
									"case":	58,
									"scores":	[-4.295874444461016]
								}, {
									"case":	59,
									"scores":	[-4.295874444461016]
								}, {
									"case":	60,
									"scores":	[-4.295874444461016]
								}, {
									"case":	61,
									"scores":	[-4.295874444461016]
								}, {
									"case":	62,
									"scores":	[-4.295874444461016]
								}, {
									"case":	63,
									"scores":	[-4.295874444461016]
								}, {
									"case":	64,
									"scores":	[-4.295874444461016]
								}, {
									"case":	65,
									"scores":	[-4.295874444461016]
								}, {
									"case":	66,
									"scores":	[-4.295874444461016]
								}, {
									"case":	67,
									"scores":	[-4.295874444461016]
								}, {
									"case":	68,
									"scores":	[-4.295874444461016]
								}, {
									"case":	69,
									"scores":	[-4.295874444461016]
								}, {
									"case":	70,
									"scores":	[-4.295874444461016]
								}, {
									"case":	71,
									"scores":	[-4.295874444461016]
								}, {
									"case":	72,
									"scores":	[-4.295874444461016]
								}, {
									"case":	73,
									"scores":	[-4.295874444461016]
								}, {
									"case":	74,
									"scores":	[-4.295874444461016]
								}, {
									"case":	75,
									"scores":	[-4.295874444461016]
								}, {
									"case":	76,
									"scores":	[-4.295874444461016]
								}, {
									"case":	77,
									"scores":	[-4.295874444461016]
								}, {
									"case":	78,
									"scores":	[-4.295874444461016]
								}, {
									"case":	79,
									"scores":	[-4.295874444461016]
								}, {
									"case":	80,
									"scores":	[-4.295874444461016]
								}, {
									"case":	81,
									"scores":	[-4.295874444461016]
								}, {
									"case":	82,
									"scores":	[-4.295874444461016]
								}, {
									"case":	83,
									"scores":	[-4.295874444461016]
								}, {
									"case":	84,
									"scores":	[-4.295874444461016]
								}, {
									"case":	85,
									"scores":	[-4.295874444461016]
								}, {
									"case":	86,
									"scores":	[-4.295874444461016]
								}, {
									"case":	87,
									"scores":	[-4.295874444461016]
								}, {
									"case":	88,
									"scores":	[-4.295874444461016]
								}, {
									"case":	89,
									"scores":	[-4.295874444461016]
								}, {
									"case":	90,
									"scores":	[-4.295874444461016]
								}, {
									"case":	91,
									"scores":	[-4.295874444461016]
								}, {
									"case":	92,
									"scores":	[-4.295874444461016]
								}, {
									"case":	93,
									"scores":	[-4.295874444461016]
								}, {
									"case":	94,
									"scores":	[-4.295874444461016]
								}, {
									"case":	95,
									"scores":	[-4.295874444461016]
								}, {
									"case":	96,
									"scores":	[-4.295874444461016]
								}, {
									"case":	97,
									"scores":	[-4.295874444461016]
								}, {
									"case":	98,
									"scores":	[-4.295874444461016]
								}, {
									"case":	99,
									"scores":	[-4.295874444461016]
								}, {
									"case":	100,
									"scores":	[-4.295874444461016]
								}, {
									"case":	101,
									"scores":	[-4.295874444461016]
								}, {
									"case":	102,
									"scores":	[-4.295874444461016]
								}, {
									"case":	103,
									"scores":	[-4.295874444461016]
								}, {
									"case":	104,
									"scores":	[-4.295874444461016]
								}, {
									"case":	105,
									"scores":	[-4.295874444461016]
								}, {
									"case":	106,
									"scores":	[-4.295874444461016]
								}, {
									"case":	107,
									"scores":	[-4.295874444461016]
								}, {
									"case":	108,
									"scores":	[-4.295874444461016]
								}, {
									"case":	109,
									"scores":	[-4.295874444461016]
								}, {
									"case":	110,
									"scores":	[-4.295874444461016]
								}, {
									"case":	111,
									"scores":	[-4.295874444461016]
								}, {
									"case":	112,
									"scores":	[-4.295874444461016]
								}, {
									"case":	113,
									"scores":	[-4.295874444461016]
								}, {
									"case":	114,
									"scores":	[-4.295874444461016]
								}, {
									"case":	115,
									"scores":	[-4.295874444461016]
								}, {
									"case":	116,
									"scores":	[-4.295874444461016]
								}, {
									"case":	117,
									"scores":	[-4.295874444461016]
								}, {
									"case":	118,
									"scores":	[-4.295874444461016]
								}, {
									"case":	119,
									"scores":	[-4.295874444461016]
								}, {
									"case":	120,
									"scores":	[-4.295874444461016]
								}, {
									"case":	121,
									"scores":	[-4.295874444461016]
								}, {
									"case":	122,
									"scores":	[-4.295874444461016]
								}, {
									"case":	123,
									"scores":	[-4.295874444461016]
								}, {
									"case":	124,
									"scores":	[-4.295874444461016]
								}, {
									"case":	125,
									"scores":	[-4.295874444461016]
								}, {
									"case":	126,
									"scores":	[-4.295874444461016]
								}, {
									"case":	127,
									"scores":	[-4.295874444461016]
								}, {
									"case":	128,
									"scores":	[-4.295874444461016]
								}, {
									"case":	129,
									"scores":	[-4.295874444461016]
								}, {
									"case":	130,
									"scores":	[-4.295874444461016]
								}, {
									"case":	131,
									"scores":	[-4.295874444461016]
								}, {
									"case":	132,
									"scores":	[-4.295874444461016]
								}, {
									"case":	133,
									"scores":	[-4.295874444461016]
								}, {
									"case":	134,
									"scores":	[-4.295874444461016]
								}, {
									"case":	135,
									"scores":	[-4.295874444461016]
								}, {
									"case":	136,
									"scores":	[-4.295874444461016]
								}, {
									"case":	137,
									"scores":	[-4.295874444461016]
								}, {
									"case":	138,
									"scores":	[-4.295874444461016]
								}, {
									"case":	139,
									"scores":	[-4.295874444461016]
								}, {
									"case":	140,
									"scores":	[-4.295874444461016]
								}, {
									"case":	141,
									"scores":	[-4.295874444461016]
								}, {
									"case":	142,
									"scores":	[-4.295874444461016]
								}, {
									"case":	143,
									"scores":	[-4.295874444461016]
								}, {
									"case":	144,
									"scores":	[-4.295874444461016]
								}, {
									"case":	145,
									"scores":	[-4.295874444461016]
								}, {
									"case":	146,
									"scores":	[-4.295874444461016]
								}, {
									"case":	147,
									"scores":	[-4.295874444461016]
								}, {
									"case":	148,
									"scores":	[-4.295874444461016]
								}, {
									"case":	149,
									"scores":	[-4.295874444461016]
								}, {
									"case":	150,
									"scores":	[-4.295874444461016]
								}, {
									"case":	151,
									"scores":	[-4.295874444461016]
								}, {
									"case":	152,
									"scores":	[-4.295874444461016]
								}, {
									"case":	153,
									"scores":	[-4.295874444461016]
								}, {
									"case":	154,
									"scores":	[-4.295874444461016]
								}, {
									"case":	155,
									"scores":	[-4.295874444461016]
								}, {
									"case":	156,
									"scores":	[-4.295874444461016]
								}, {
									"case":	157,
									"scores":	[-4.295874444461016]
								}, {
									"case":	158,
									"scores":	[-4.295874444461016]
								}, {
									"case":	159,
									"scores":	[-4.295874444461016]
								}, {
									"case":	160,
									"scores":	[-4.295874444461016]
								}, {
									"case":	161,
									"scores":	[-4.295874444461016]
								}, {
									"case":	162,
									"scores":	[-4.295874444461016]
								}, {
									"case":	163,
									"scores":	[-4.295874444461016]
								}, {
									"case":	164,
									"scores":	[-4.295874444461016]
								}, {
									"case":	165,
									"scores":	[-4.295874444461016]
								}, {
									"case":	166,
									"scores":	[-4.295874444461016]
								}, {
									"case":	167,
									"scores":	[-4.295874444461016]
								}, {
									"case":	168,
									"scores":	[-4.295874444461016]
								}, {
									"case":	169,
									"scores":	[-4.295874444461016]
								}, {
									"case":	170,
									"scores":	[-4.295874444461016]
								}, {
									"case":	171,
									"scores":	[-4.295874444461016]
								}, {
									"case":	172,
									"scores":	[-4.295874444461016]
								}, {
									"case":	173,
									"scores":	[-4.295874444461016]
								}, {
									"case":	174,
									"scores":	[-4.295874444461016]
								}, {
									"case":	175,
									"scores":	[-4.295874444461016]
								}, {
									"case":	176,
									"scores":	[-4.295874444461016]
								}, {
									"case":	177,
									"scores":	[-4.295874444461016]
								}, {
									"case":	178,
									"scores":	[-4.295874444461016]
								}, {
									"case":	179,
									"scores":	[-4.295874444461016]
								}, {
									"case":	180,
									"scores":	[-4.295874444461016]
								}, {
									"case":	181,
									"scores":	[-4.295874444461016]
								}, {
									"case":	182,
									"scores":	[-4.295874444461016]
								}, {
									"case":	183,
									"scores":	[-4.295874444461016]
								}, {
									"case":	184,
									"scores":	[-4.295874444461016]
								}, {
									"case":	185,
									"scores":	[-4.295874444461016]
								}, {
									"case":	186,
									"scores":	[-4.295874444461016]
								}, {
									"case":	187,
									"scores":	[-4.295874444461016]
								}, {
									"case":	188,
									"scores":	[-4.295874444461016]
								}, {
									"case":	189,
									"scores":	[-4.295874444461016]
								}, {
									"case":	190,
									"scores":	[-4.295874444461016]
								}, {
									"case":	191,
									"scores":	[-4.295874444461016]
								}, {
									"case":	192,
									"scores":	[-4.295874444461016]
								}, {
									"case":	193,
									"scores":	[-4.295874444461016]
								}, {
									"case":	194,
									"scores":	[-4.295874444461016]
								}, {
									"case":	195,
									"scores":	[-4.295874444461016]
								}, {
									"case":	196,
									"scores":	[-4.295874444461016]
								}, {
									"case":	197,
									"scores":	[-4.295874444461016]
								}, {
									"case":	198,
									"scores":	[-4.295874444461016]
								}, {
									"case":	199,
									"scores":	[-4.295874444461016]
								}, {
									"case":	200,
									"scores":	[-4.295874444461016]
								}, {
									"case":	201,
									"scores":	[-4.295874444461016]
								}, {
									"case":	202,
									"scores":	[-4.295874444461016]
								}, {
									"case":	203,
									"scores":	[-4.295874444461016]
								}, {
									"case":	204,
									"scores":	[-4.295874444461016]
								}, {
									"case":	205,
									"scores":	[-4.295874444461016]
								}, {
									"case":	206,
									"scores":	[-4.295874444461016]
								}, {
									"case":	207,
									"scores":	[-4.295874444461016]
								}, {
									"case":	208,
									"scores":	[-4.295874444461016]
								}, {
									"case":	209,
									"scores":	[-4.295874444461016]
								}, {
									"case":	210,
									"scores":	[-4.295874444461016]
								}, {
									"case":	211,
									"scores":	[-4.295874444461016]
								}, {
									"case":	212,
									"scores":	[-4.295874444461016]
								}, {
									"case":	213,
									"scores":	[-4.295874444461016]
								}, {
									"case":	214,
									"scores":	[-4.295874444461016]
								}, {
									"case":	215,
									"scores":	[-4.295874444461016]
								}, {
									"case":	216,
									"scores":	[-4.295874444461016]
								}, {
									"case":	217,
									"scores":	[-4.295874444461016]
								}, {
									"case":	218,
									"scores":	[-4.295874444461016]
								}, {
									"case":	219,
									"scores":	[-4.295874444461016]
								}, {
									"case":	220,
									"scores":	[-4.295874444461016]
								}, {
									"case":	221,
									"scores":	[-4.295874444461016]
								}, {
									"case":	222,
									"scores":	[-4.295874444461016]
								}, {
									"case":	223,
									"scores":	[-4.295874444461016]
								}, {
									"case":	224,
									"scores":	[-4.295874444461016]
								}, {
									"case":	225,
									"scores":	[-4.295874444461016]
								}, {
									"case":	226,
									"scores":	[-4.295874444461016]
								}, {
									"case":	227,
									"scores":	[-4.295874444461016]
								}, {
									"case":	228,
									"scores":	[-4.295874444461016]
								}, {
									"case":	229,
									"scores":	[-4.295874444461016]
								}, {
									"case":	230,
									"scores":	[-4.295874444461016]
								}, {
									"case":	231,
									"scores":	[-4.295874444461016]
								}, {
									"case":	232,
									"scores":	[-4.295874444461016]
								}, {
									"case":	233,
									"scores":	[-4.295874444461016]
								}, {
									"case":	234,
									"scores":	[-4.295874444461016]
								}, {
									"case":	235,
									"scores":	[-4.295874444461016]
								}, {
									"case":	236,
									"scores":	[-4.295874444461016]
								}, {
									"case":	237,
									"scores":	[-4.295874444461016]
								}, {
									"case":	238,
									"scores":	[-4.295874444461016]
								}, {
									"case":	239,
									"scores":	[-4.295874444461016]
								}, {
									"case":	240,
									"scores":	[-4.295874444461016]
								}, {
									"case":	241,
									"scores":	[-4.295874444461016]
								}, {
									"case":	242,
									"scores":	[-4.295874444461016]
								}, {
									"case":	243,
									"scores":	[-4.295874444461016]
								}, {
									"case":	244,
									"scores":	[-4.295874444461016]
								}, {
									"case":	245,
									"scores":	[-4.295874444461016]
								}, {
									"case":	246,
									"scores":	[-4.295874444461016]
								}, {
									"case":	247,
									"scores":	[-4.295874444461016]
								}, {
									"case":	248,
									"scores":	[-4.295874444461016]
								}, {
									"case":	249,
									"scores":	[-4.295874444461016]
								}, {
									"case":	250,
									"scores":	[-4.295874444461016]
								}, {
									"case":	251,
									"scores":	[-4.295874444461016]
								}, {
									"case":	252,
									"scores":	[-4.295874444461016]
								}, {
									"case":	253,
									"scores":	[-4.295874444461016]
								}, {
									"case":	254,
									"scores":	[-4.295874444461016]
								}, {
									"case":	255,
									"scores":	[-4.295874444461016]
								}, {
									"case":	256,
									"scores":	[-4.295874444461016]
								}, {
									"case":	257,
									"scores":	[-4.295874444461016]
								}, {
									"case":	258,
									"scores":	[-4.295874444461016]
								}, {
									"case":	259,
									"scores":	[-4.295874444461016]
								}, {
									"case":	260,
									"scores":	[-4.295874444461016]
								}, {
									"case":	261,
									"scores":	[-4.295874444461016]
								}, {
									"case":	262,
									"scores":	[-4.295874444461016]
								}, {
									"case":	263,
									"scores":	[-4.295874444461016]
								}, {
									"case":	264,
									"scores":	[-4.295874444461016]
								}, {
									"case":	265,
									"scores":	[-4.295874444461016]
								}, {
									"case":	266,
									"scores":	[-4.295874444461016]
								}, {
									"case":	267,
									"scores":	[-4.295874444461016]
								}, {
									"case":	268,
									"scores":	[-4.295874444461016]
								}, {
									"case":	269,
									"scores":	[-4.295874444461016]
								}, {
									"case":	270,
									"scores":	[-4.295874444461016]
								}, {
									"case":	271,
									"scores":	[-4.295874444461016]
								}, {
									"case":	272,
									"scores":	[-4.295874444461016]
								}, {
									"case":	273,
									"scores":	[-4.295874444461016]
								}, {
									"case":	274,
									"scores":	[-4.295874444461016]
								}, {
									"case":	275,
									"scores":	[-4.295874444461016]
								}, {
									"case":	276,
									"scores":	[-4.295874444461016]
								}, {
									"case":	277,
									"scores":	[-4.295874444461016]
								}, {
									"case":	278,
									"scores":	[-4.295874444461016]
								}, {
									"case":	279,
									"scores":	[-4.295874444461016]
								}, {
									"case":	280,
									"scores":	[-4.295874444461016]
								}, {
									"case":	281,
									"scores":	[-4.295874444461016]
								}, {
									"case":	282,
									"scores":	[-4.295874444461016]
								}, {
									"case":	283,
									"scores":	[-4.295874444461016]
								}, {
									"case":	284,
									"scores":	[-4.295874444461016]
								}, {
									"case":	285,
									"scores":	[-4.295874444461016]
								}, {
									"case":	286,
									"scores":	[-4.295874444461016]
								}, {
									"case":	287,
									"scores":	[-4.295874444461016]
								}, {
									"case":	288,
									"scores":	[-4.295874444461016]
								}, {
									"case":	289,
									"scores":	[-4.295874444461016]
								}, {
									"case":	290,
									"scores":	[-4.295874444461016]
								}, {
									"case":	291,
									"scores":	[-4.295874444461016]
								}, {
									"case":	292,
									"scores":	[-4.295874444461016]
								}, {
									"case":	293,
									"scores":	[-4.295874444461016]
								}, {
									"case":	294,
									"scores":	[-4.295874444461016]
								}, {
									"case":	295,
									"scores":	[-4.295874444461016]
								}, {
									"case":	296,
									"scores":	[-4.295874444461016]
								}, {
									"case":	297,
									"scores":	[-4.295874444461016]
								}, {
									"case":	298,
									"scores":	[-4.295874444461016]
								}, {
									"case":	299,
									"scores":	[-4.295874444461016]
								}, {
									"case":	300,
									"scores":	[-4.295874444461016]
								}, {
									"case":	301,
									"scores":	[-4.295874444461016]
								}, {
									"case":	302,
									"scores":	[-4.295874444461016]
								}, {
									"case":	303,
									"scores":	[-4.295874444461016]
								}, {
									"case":	304,
									"scores":	[-4.295874444461016]
								}, {
									"case":	305,
									"scores":	[-4.295874444461016]
								}, {
									"case":	306,
									"scores":	[-4.295874444461016]
								}, {
									"case":	307,
									"scores":	[-4.295874444461016]
								}, {
									"case":	308,
									"scores":	[-4.295874444461016]
								}, {
									"case":	309,
									"scores":	[-4.295874444461016]
								}, {
									"case":	310,
									"scores":	[-4.295874444461016]
								}, {
									"case":	311,
									"scores":	[-4.295874444461016]
								}, {
									"case":	312,
									"scores":	[-4.295874444461016]
								}, {
									"case":	313,
									"scores":	[-4.295874444461016]
								}, {
									"case":	314,
									"scores":	[-4.295874444461016]
								}, {
									"case":	315,
									"scores":	[-4.295874444461016]
								}, {
									"case":	316,
									"scores":	[-4.295874444461016]
								}, {
									"case":	317,
									"scores":	[-4.295874444461016]
								}]
						}]
				}, {
					"line":	632,
					"switches":	[{
							"switch":	54,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	633,
							"begin_column":	0,
							"end_line":	633,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L633\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	2,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	3,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	4,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	5,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	6,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	7,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	8,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	9,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	10,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	11,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	12,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	13,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	14,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	15,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	16,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	17,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	18,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	19,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	20,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	21,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	22,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	23,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	24,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	25,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	26,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	27,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	28,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	29,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	30,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	31,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	32,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	33,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	34,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	35,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	36,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	37,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	38,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	39,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	40,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	41,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	42,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	43,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	44,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	45,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	46,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	47,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	48,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	49,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	50,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	51,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	52,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	53,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	54,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	55,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	56,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	57,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	58,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	59,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	60,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	61,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	62,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	63,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	64,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	65,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	66,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	67,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	68,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	69,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	70,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	71,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	72,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	73,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	74,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	75,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	76,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	77,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	78,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	79,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	80,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	81,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	82,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	83,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	84,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	85,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	86,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	87,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	88,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	89,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	90,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	91,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	92,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	93,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	94,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	95,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	96,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	97,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	98,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	99,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	100,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	101,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	102,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	103,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	104,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	105,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	106,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	107,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	108,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	109,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	110,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	111,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	112,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	113,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	114,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	115,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	116,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	117,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	118,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	119,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	120,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	121,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	122,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	123,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	124,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	125,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	126,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	127,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	128,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	129,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	130,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	131,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	132,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	133,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	134,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	135,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	136,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	137,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	138,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	139,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	140,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	141,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	142,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	143,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	144,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	145,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	146,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	147,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	148,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	149,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	150,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	151,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	152,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	153,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	154,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	155,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	156,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	157,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	158,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	159,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	160,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	161,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	162,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	163,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	164,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	165,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	166,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	167,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	168,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	169,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	170,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	171,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	172,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	173,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	174,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	175,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	176,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	177,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	178,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	179,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	180,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	181,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	182,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	183,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	184,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	185,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	186,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	187,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	188,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	189,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	190,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	191,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	192,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	193,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	194,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	195,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	196,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	197,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	198,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	199,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	200,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	201,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	202,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	203,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	204,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	205,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	206,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	207,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	208,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	209,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	210,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	211,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	212,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	213,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	214,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	215,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	216,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	217,
									"scores":	[-4.8009421273990025]
								}, {
									"case":	218,
									"scores":	[-8.048114023399, -7.9913077703990023, -5.4763380543990028, -7.0070632443990029, -8.005124864399, -6.5061282443990027, -8.5362388251990033, -8.516124745199, -8.2941529371990033, -8.514637711199, -8.516124745199, -8.516124745199]
								}]
						}, {
							"switch":	55,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	633,
							"begin_column":	2,
							"end_line":	639,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L633\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags = 0 | 0;\n    parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags);\n} else {\n    flags = 0 | 16;\n    parsed = zend_parse_parameters((ht), \"s\", &path, &len);\n}\n", "if ((((ctor_flags & 1) ? 1 : 0)) || __is_neg(\"\", \"L633\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags = 0 | 0;\n    parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags);\n} else {\n    flags = 0 | 16;\n    parsed = zend_parse_parameters((ht), \"s\", &path, &len);\n}\n", "if ((((ctor_flags & 1) ? 1 : 0)) && !__is_neg(\"\", \"L633\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags = 0 | 0;\n    parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags);\n} else {\n    flags = 0 | 16;\n    parsed = zend_parse_parameters((ht), \"s\", &path, &len);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1034198388281453, -4.1327349398281443, -2.895075548828145, -3.6418668488281458, -4.6422245598281453, -3.3198558188281462, -4.9729951248281461, -4.8840122788281457, -4.861307938828145, -4.8807548388281452, -4.8840122788281457, -4.8840122788281457]
								}, {
									"case":	2,
									"scores":	[-4.7832915984281454, -4.8126066994281462, -3.574947308428146, -4.3217386084281459, -5.3220963194281463, -3.9997275784281459, -5.6528668844281462, -5.5638840384281458, -5.5411796984281461, -5.5606265984281453, -5.5638840384281458, -5.5638840384281458]
								}, {
									"case":	3,
									"scores":	[-4.7832915984281454, -4.8126066994281462, -3.574947308428146, -4.3217386084281459, -5.3220963194281463, -3.9997275784281459, -5.6528668844281462, -5.5638840384281458, -5.5411796984281461, -5.5606265984281453, -5.5638840384281458, -5.5638840384281458]
								}]
						}, {
							"switch":	60,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	633,
							"begin_column":	2,
							"end_line":	639,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L633\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    if (((ctor_flags & 1) ? 1 : 0)) {\n        flags = 0 | 0;\n        parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags);\n    } else {\n        flags = 0 | 16;\n        parsed = zend_parse_parameters((ht), \"s\", &path, &len);\n    }\n", "if (!__is_neg(\"\", \"L633\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)) && (((ctor_flags & 1) ? 1 : 0))) {\n    flags = 0 | 0;\n    parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags);\n} else {\n    flags = 0 | 16;\n    parsed = zend_parse_parameters((ht), \"s\", &path, &len);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1589782873990018, -7.1882933883990017, -5.9506339973990023, -6.6974252973990023, -7.6977830083990018, -6.3754142673990026, -8.028553573399, -7.939570727399003, -7.9168663873990024, -7.9363132873990025, -7.939570727399003, -7.939570727399003]
								}, {
									"case":	2,
									"scores":	[-6.9620592873990024, -6.9913743883990023, -5.7537149973990029, -6.500506297399002, -7.5008640083990024, -6.1784952673990023, -7.8316345733990023, -7.7426517273990019, -7.719947387399003, -7.7393942873990031, -7.7426517273990019, -7.7426517273990019]
								}]
						}]
				}, {
					"line":	639,
					"switches":	[{
							"switch":	61,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	640,
							"begin_column":	0,
							"end_line":	640,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L640\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.780739420081483]
								}, {
									"case":	2,
									"scores":	[-4.780739420081483]
								}, {
									"case":	3,
									"scores":	[-4.780739420081483]
								}, {
									"case":	4,
									"scores":	[-4.780739420081483]
								}, {
									"case":	5,
									"scores":	[-4.780739420081483]
								}, {
									"case":	6,
									"scores":	[-4.780739420081483]
								}, {
									"case":	7,
									"scores":	[-4.780739420081483]
								}, {
									"case":	8,
									"scores":	[-4.780739420081483]
								}, {
									"case":	9,
									"scores":	[-4.780739420081483]
								}, {
									"case":	10,
									"scores":	[-4.780739420081483]
								}, {
									"case":	11,
									"scores":	[-4.780739420081483]
								}, {
									"case":	12,
									"scores":	[-4.780739420081483]
								}, {
									"case":	13,
									"scores":	[-4.780739420081483]
								}, {
									"case":	14,
									"scores":	[-4.780739420081483]
								}, {
									"case":	15,
									"scores":	[-4.780739420081483]
								}, {
									"case":	16,
									"scores":	[-4.780739420081483]
								}, {
									"case":	17,
									"scores":	[-4.780739420081483]
								}, {
									"case":	18,
									"scores":	[-4.780739420081483]
								}, {
									"case":	19,
									"scores":	[-4.780739420081483]
								}, {
									"case":	20,
									"scores":	[-4.780739420081483]
								}, {
									"case":	21,
									"scores":	[-4.780739420081483]
								}, {
									"case":	22,
									"scores":	[-4.780739420081483]
								}, {
									"case":	23,
									"scores":	[-4.780739420081483]
								}, {
									"case":	24,
									"scores":	[-4.780739420081483]
								}, {
									"case":	25,
									"scores":	[-4.780739420081483]
								}, {
									"case":	26,
									"scores":	[-4.780739420081483]
								}, {
									"case":	27,
									"scores":	[-4.780739420081483]
								}, {
									"case":	28,
									"scores":	[-4.780739420081483]
								}, {
									"case":	29,
									"scores":	[-4.780739420081483]
								}, {
									"case":	30,
									"scores":	[-4.780739420081483]
								}, {
									"case":	31,
									"scores":	[-4.780739420081483]
								}, {
									"case":	32,
									"scores":	[-4.780739420081483]
								}, {
									"case":	33,
									"scores":	[-4.780739420081483]
								}, {
									"case":	34,
									"scores":	[-4.780739420081483]
								}, {
									"case":	35,
									"scores":	[-4.780739420081483]
								}, {
									"case":	36,
									"scores":	[-4.780739420081483]
								}, {
									"case":	37,
									"scores":	[-4.780739420081483]
								}, {
									"case":	38,
									"scores":	[-4.780739420081483]
								}, {
									"case":	39,
									"scores":	[-4.780739420081483]
								}, {
									"case":	40,
									"scores":	[-4.780739420081483]
								}, {
									"case":	41,
									"scores":	[-4.780739420081483]
								}, {
									"case":	42,
									"scores":	[-4.780739420081483]
								}, {
									"case":	43,
									"scores":	[-4.780739420081483]
								}, {
									"case":	44,
									"scores":	[-4.780739420081483]
								}, {
									"case":	45,
									"scores":	[-4.780739420081483]
								}, {
									"case":	46,
									"scores":	[-4.780739420081483]
								}, {
									"case":	47,
									"scores":	[-4.780739420081483]
								}, {
									"case":	48,
									"scores":	[-4.780739420081483]
								}, {
									"case":	49,
									"scores":	[-4.780739420081483]
								}, {
									"case":	50,
									"scores":	[-4.780739420081483]
								}, {
									"case":	51,
									"scores":	[-4.780739420081483]
								}, {
									"case":	52,
									"scores":	[-4.780739420081483]
								}, {
									"case":	53,
									"scores":	[-4.780739420081483]
								}, {
									"case":	54,
									"scores":	[-4.780739420081483]
								}, {
									"case":	55,
									"scores":	[-4.780739420081483]
								}, {
									"case":	56,
									"scores":	[-4.780739420081483]
								}, {
									"case":	57,
									"scores":	[-4.780739420081483]
								}, {
									"case":	58,
									"scores":	[-4.780739420081483]
								}, {
									"case":	59,
									"scores":	[-4.780739420081483]
								}, {
									"case":	60,
									"scores":	[-4.780739420081483]
								}, {
									"case":	61,
									"scores":	[-4.780739420081483]
								}, {
									"case":	62,
									"scores":	[-4.780739420081483]
								}, {
									"case":	63,
									"scores":	[-4.780739420081483]
								}, {
									"case":	64,
									"scores":	[-4.780739420081483]
								}, {
									"case":	65,
									"scores":	[-4.780739420081483]
								}, {
									"case":	66,
									"scores":	[-4.780739420081483]
								}, {
									"case":	67,
									"scores":	[-4.780739420081483]
								}, {
									"case":	68,
									"scores":	[-4.780739420081483]
								}, {
									"case":	69,
									"scores":	[-4.780739420081483]
								}, {
									"case":	70,
									"scores":	[-4.780739420081483]
								}, {
									"case":	71,
									"scores":	[-4.780739420081483]
								}, {
									"case":	72,
									"scores":	[-4.780739420081483]
								}, {
									"case":	73,
									"scores":	[-4.780739420081483]
								}, {
									"case":	74,
									"scores":	[-4.780739420081483]
								}, {
									"case":	75,
									"scores":	[-4.780739420081483]
								}, {
									"case":	76,
									"scores":	[-4.780739420081483]
								}, {
									"case":	77,
									"scores":	[-4.780739420081483]
								}, {
									"case":	78,
									"scores":	[-4.780739420081483]
								}, {
									"case":	79,
									"scores":	[-4.780739420081483]
								}, {
									"case":	80,
									"scores":	[-4.780739420081483]
								}, {
									"case":	81,
									"scores":	[-4.780739420081483]
								}, {
									"case":	82,
									"scores":	[-4.780739420081483]
								}, {
									"case":	83,
									"scores":	[-4.780739420081483]
								}, {
									"case":	84,
									"scores":	[-4.780739420081483]
								}, {
									"case":	85,
									"scores":	[-4.780739420081483]
								}, {
									"case":	86,
									"scores":	[-4.780739420081483]
								}, {
									"case":	87,
									"scores":	[-4.780739420081483]
								}, {
									"case":	88,
									"scores":	[-4.780739420081483]
								}, {
									"case":	89,
									"scores":	[-4.780739420081483]
								}, {
									"case":	90,
									"scores":	[-4.780739420081483]
								}, {
									"case":	91,
									"scores":	[-4.780739420081483]
								}, {
									"case":	92,
									"scores":	[-4.780739420081483]
								}, {
									"case":	93,
									"scores":	[-4.780739420081483]
								}, {
									"case":	94,
									"scores":	[-4.780739420081483]
								}, {
									"case":	95,
									"scores":	[-4.780739420081483]
								}, {
									"case":	96,
									"scores":	[-4.780739420081483]
								}, {
									"case":	97,
									"scores":	[-4.780739420081483]
								}, {
									"case":	98,
									"scores":	[-4.780739420081483]
								}, {
									"case":	99,
									"scores":	[-4.780739420081483]
								}, {
									"case":	100,
									"scores":	[-4.780739420081483]
								}, {
									"case":	101,
									"scores":	[-4.780739420081483]
								}, {
									"case":	102,
									"scores":	[-4.780739420081483]
								}, {
									"case":	103,
									"scores":	[-4.780739420081483]
								}, {
									"case":	104,
									"scores":	[-4.780739420081483]
								}, {
									"case":	105,
									"scores":	[-4.780739420081483]
								}, {
									"case":	106,
									"scores":	[-4.780739420081483]
								}, {
									"case":	107,
									"scores":	[-4.780739420081483]
								}, {
									"case":	108,
									"scores":	[-4.780739420081483]
								}, {
									"case":	109,
									"scores":	[-4.780739420081483]
								}, {
									"case":	110,
									"scores":	[-4.780739420081483]
								}, {
									"case":	111,
									"scores":	[-4.780739420081483]
								}, {
									"case":	112,
									"scores":	[-4.780739420081483]
								}, {
									"case":	113,
									"scores":	[-4.780739420081483]
								}, {
									"case":	114,
									"scores":	[-4.780739420081483]
								}, {
									"case":	115,
									"scores":	[-4.780739420081483]
								}, {
									"case":	116,
									"scores":	[-4.780739420081483]
								}, {
									"case":	117,
									"scores":	[-4.780739420081483]
								}, {
									"case":	118,
									"scores":	[-4.780739420081483]
								}, {
									"case":	119,
									"scores":	[-4.780739420081483]
								}, {
									"case":	120,
									"scores":	[-4.780739420081483]
								}, {
									"case":	121,
									"scores":	[-4.780739420081483]
								}, {
									"case":	122,
									"scores":	[-4.780739420081483]
								}, {
									"case":	123,
									"scores":	[-4.780739420081483]
								}, {
									"case":	124,
									"scores":	[-4.780739420081483]
								}, {
									"case":	125,
									"scores":	[-4.780739420081483]
								}, {
									"case":	126,
									"scores":	[-4.780739420081483]
								}, {
									"case":	127,
									"scores":	[-4.780739420081483]
								}, {
									"case":	128,
									"scores":	[-4.780739420081483]
								}, {
									"case":	129,
									"scores":	[-4.780739420081483]
								}, {
									"case":	130,
									"scores":	[-4.780739420081483]
								}, {
									"case":	131,
									"scores":	[-4.780739420081483]
								}, {
									"case":	132,
									"scores":	[-4.780739420081483]
								}, {
									"case":	133,
									"scores":	[-4.780739420081483]
								}, {
									"case":	134,
									"scores":	[-4.780739420081483]
								}, {
									"case":	135,
									"scores":	[-4.780739420081483]
								}, {
									"case":	136,
									"scores":	[-4.780739420081483]
								}, {
									"case":	137,
									"scores":	[-4.780739420081483]
								}, {
									"case":	138,
									"scores":	[-4.780739420081483]
								}, {
									"case":	139,
									"scores":	[-4.780739420081483]
								}, {
									"case":	140,
									"scores":	[-4.780739420081483]
								}, {
									"case":	141,
									"scores":	[-4.780739420081483]
								}, {
									"case":	142,
									"scores":	[-4.780739420081483]
								}, {
									"case":	143,
									"scores":	[-4.780739420081483]
								}, {
									"case":	144,
									"scores":	[-4.780739420081483]
								}, {
									"case":	145,
									"scores":	[-4.780739420081483]
								}, {
									"case":	146,
									"scores":	[-4.780739420081483]
								}, {
									"case":	147,
									"scores":	[-4.780739420081483]
								}, {
									"case":	148,
									"scores":	[-4.780739420081483]
								}, {
									"case":	149,
									"scores":	[-4.780739420081483]
								}, {
									"case":	150,
									"scores":	[-4.780739420081483]
								}, {
									"case":	151,
									"scores":	[-4.780739420081483]
								}, {
									"case":	152,
									"scores":	[-4.780739420081483]
								}, {
									"case":	153,
									"scores":	[-4.780739420081483]
								}, {
									"case":	154,
									"scores":	[-4.780739420081483]
								}, {
									"case":	155,
									"scores":	[-4.780739420081483]
								}, {
									"case":	156,
									"scores":	[-4.780739420081483]
								}, {
									"case":	157,
									"scores":	[-4.780739420081483]
								}, {
									"case":	158,
									"scores":	[-4.780739420081483]
								}, {
									"case":	159,
									"scores":	[-4.780739420081483]
								}, {
									"case":	160,
									"scores":	[-4.780739420081483]
								}, {
									"case":	161,
									"scores":	[-4.780739420081483]
								}, {
									"case":	162,
									"scores":	[-4.780739420081483]
								}, {
									"case":	163,
									"scores":	[-4.780739420081483]
								}, {
									"case":	164,
									"scores":	[-4.780739420081483]
								}, {
									"case":	165,
									"scores":	[-4.780739420081483]
								}, {
									"case":	166,
									"scores":	[-4.780739420081483]
								}, {
									"case":	167,
									"scores":	[-4.780739420081483]
								}, {
									"case":	168,
									"scores":	[-4.780739420081483]
								}, {
									"case":	169,
									"scores":	[-4.780739420081483]
								}, {
									"case":	170,
									"scores":	[-4.780739420081483]
								}, {
									"case":	171,
									"scores":	[-4.780739420081483]
								}, {
									"case":	172,
									"scores":	[-4.780739420081483]
								}, {
									"case":	173,
									"scores":	[-4.780739420081483]
								}, {
									"case":	174,
									"scores":	[-4.780739420081483]
								}, {
									"case":	175,
									"scores":	[-4.780739420081483]
								}, {
									"case":	176,
									"scores":	[-4.780739420081483]
								}, {
									"case":	177,
									"scores":	[-4.780739420081483]
								}, {
									"case":	178,
									"scores":	[-4.780739420081483]
								}, {
									"case":	179,
									"scores":	[-4.780739420081483]
								}, {
									"case":	180,
									"scores":	[-4.780739420081483]
								}, {
									"case":	181,
									"scores":	[-4.780739420081483]
								}, {
									"case":	182,
									"scores":	[-4.780739420081483]
								}, {
									"case":	183,
									"scores":	[-4.780739420081483]
								}, {
									"case":	184,
									"scores":	[-4.780739420081483]
								}, {
									"case":	185,
									"scores":	[-4.780739420081483]
								}, {
									"case":	186,
									"scores":	[-4.780739420081483]
								}, {
									"case":	187,
									"scores":	[-4.780739420081483]
								}, {
									"case":	188,
									"scores":	[-4.780739420081483]
								}, {
									"case":	189,
									"scores":	[-4.780739420081483]
								}, {
									"case":	190,
									"scores":	[-4.780739420081483]
								}, {
									"case":	191,
									"scores":	[-4.780739420081483]
								}, {
									"case":	192,
									"scores":	[-4.780739420081483]
								}, {
									"case":	193,
									"scores":	[-4.780739420081483]
								}, {
									"case":	194,
									"scores":	[-4.780739420081483]
								}, {
									"case":	195,
									"scores":	[-4.780739420081483]
								}, {
									"case":	196,
									"scores":	[-4.780739420081483]
								}, {
									"case":	197,
									"scores":	[-4.780739420081483]
								}, {
									"case":	198,
									"scores":	[-4.780739420081483]
								}, {
									"case":	199,
									"scores":	[-4.780739420081483]
								}, {
									"case":	200,
									"scores":	[-4.780739420081483]
								}, {
									"case":	201,
									"scores":	[-4.780739420081483]
								}, {
									"case":	202,
									"scores":	[-4.780739420081483]
								}, {
									"case":	203,
									"scores":	[-4.780739420081483]
								}, {
									"case":	204,
									"scores":	[-4.780739420081483]
								}, {
									"case":	205,
									"scores":	[-4.780739420081483]
								}, {
									"case":	206,
									"scores":	[-4.780739420081483]
								}, {
									"case":	207,
									"scores":	[-4.780739420081483]
								}, {
									"case":	208,
									"scores":	[-4.780739420081483]
								}, {
									"case":	209,
									"scores":	[-4.780739420081483]
								}, {
									"case":	210,
									"scores":	[-4.780739420081483]
								}, {
									"case":	211,
									"scores":	[-4.780739420081483]
								}, {
									"case":	212,
									"scores":	[-4.780739420081483]
								}, {
									"case":	213,
									"scores":	[-4.780739420081483]
								}, {
									"case":	214,
									"scores":	[-4.780739420081483]
								}, {
									"case":	215,
									"scores":	[-4.780739420081483]
								}, {
									"case":	216,
									"scores":	[-4.780739420081483]
								}, {
									"case":	217,
									"scores":	[-4.780739420081483]
								}, {
									"case":	218,
									"scores":	[-8.52871331608148, -7.1846014220814816, -8.33475211608148, -8.40432756708148, -7.570919436081482, -7.9033925670814824, -9.016838117881484, -9.1424066908814829, -8.77475222988148, -8.9952370038814831, -8.99672403788148, -8.99672403788148]
								}]
						}, {
							"switch":	62,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	640,
							"begin_column":	2,
							"end_line":	642,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L640\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags |= 4096;\n}\n", "if ((((ctor_flags & 4096) ? 1 : 0)) || __is_neg(\"\", \"L640\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags |= 4096;\n}\n", "if ((((ctor_flags & 4096) ? 1 : 0)) && !__is_neg(\"\", \"L640\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags |= 4096;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.9465789214281459, -5.3219882764281463, -5.6649987674281457, -5.868750045428146, -5.7377642614281461, -5.5467390154281455, -6.8161542074281458, -6.7603468704281457, -6.7044670214281457, -6.7239139214281458, -6.7271713614281454, -6.7271713614281454]
								}, {
									"case":	2,
									"scores":	[-4.8491212984281455, -4.2245306534281459, -4.5675411444281462, -4.7712924224281457, -4.6403066384281457, -4.449281392428146, -5.7186965844281463, -5.6628892474281454, -5.6070093984281462, -5.6264562984281454, -5.6297137384281459, -5.6297137384281459]
								}, {
									"case":	3,
									"scores":	[-4.8491212984281455, -4.2245306534281459, -4.5675411444281462, -4.7712924224281457, -4.6403066384281457, -4.449281392428146, -5.7186965844281463, -5.6628892474281454, -5.6070093984281462, -5.6264562984281454, -5.6297137384281459, -5.6297137384281459]
								}]
						}, {
							"switch":	63,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	640,
							"begin_column":	2,
							"end_line":	642,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L640\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(ht), sizeof (ht), &(path), sizeof (path), &(parsed), sizeof (parsed), &(len), sizeof (len), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    if (((ctor_flags & 4096) ? 1 : 0)) {\n        flags |= 4096;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.394442580081483, -6.7698519350814825, -7.1128624260814828, -7.3166137040814831, -7.1856279200814823, -6.9946026740814826, -8.2640178660814829, -8.2082105290814837, -8.1523306800814836, -8.1717775800814838, -8.17503502008148, -8.17503502008148]
								}]
						}]
				}, {
					"line":	642,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	643,
							"begin_column":	0,
							"end_line":	643,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L643\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(path), sizeof (path), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	2,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	3,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	4,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	5,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	6,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	7,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	8,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	9,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	10,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	11,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	12,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	13,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	14,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	15,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	16,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	17,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	18,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	19,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	20,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	21,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	22,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	23,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	24,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	25,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	26,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	27,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	28,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	29,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	30,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	31,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	32,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	33,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	34,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	35,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	36,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	37,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	38,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	39,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	40,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	41,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	42,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	43,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	44,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	45,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	46,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	47,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	48,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	49,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	50,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	51,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	52,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	53,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	54,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	55,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	56,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	57,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	58,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	59,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	60,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	61,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	62,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	63,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	64,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	65,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	66,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	67,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	68,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	69,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	70,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	71,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	72,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	73,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	74,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	75,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	76,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	77,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	78,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	79,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	80,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	81,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	82,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	83,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	84,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	85,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	86,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	87,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	88,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	89,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	90,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	91,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	92,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	93,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	94,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	95,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	96,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	97,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	98,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	99,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	100,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	101,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	102,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	103,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	104,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	105,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	106,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	107,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	108,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	109,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	110,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	111,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	112,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	113,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	114,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	115,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	116,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	117,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	118,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	119,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	120,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	121,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	122,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	123,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	124,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	125,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	126,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	127,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	128,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	129,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	130,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	131,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	132,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	133,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	134,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	135,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	136,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	137,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	138,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	139,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	140,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	141,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	142,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	143,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	144,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	145,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	146,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	147,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	148,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	149,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	150,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	151,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	152,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	153,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	154,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	155,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	156,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	157,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	158,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	159,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	160,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	161,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	162,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	163,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	164,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	165,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	166,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	167,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	168,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	169,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	170,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	171,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	172,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	173,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	174,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	175,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	176,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	177,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	178,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	179,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	180,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	181,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	182,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	183,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	184,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	185,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	186,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	187,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	188,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	189,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	190,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	191,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	192,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	193,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	194,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	195,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	196,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	197,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	198,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	199,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	200,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	201,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	202,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	203,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	204,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	205,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	206,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	207,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	208,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	209,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	210,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	211,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	212,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	213,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	214,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	215,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	216,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	217,
									"scores":	[-4.7605367127639635]
								}, {
									"case":	218,
									"scores":	[-9.1923026087639634, -7.8481907147639625, -8.2345087287639629, -8.998341408763963, -9.0679168597639634, -8.5669818597639633, -9.8059959835639638, -9.6804274105639632, -9.0409871755639628, -9.627427816563964, -9.66031333056396, -9.66031333056396]
								}]
						}, {
							"switch":	65,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	643,
							"begin_column":	2,
							"end_line":	645,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L643\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(path), sizeof (path), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags |= 8192;\n}\n", "if ((((ctor_flags & 8192) ? 1 : 0)) || __is_neg(\"\", \"L643\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(path), sizeof (path), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags |= 8192;\n}\n", "if ((((ctor_flags & 8192) ? 1 : 0)) && !__is_neg(\"\", \"L643\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(path), sizeof (path), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    flags |= 8192;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.7490483214281456, -5.1221693964281458, -3.4162436614281462, -5.4674681674281462, -5.6712194454281457, -5.3492084154281461, -6.5628162704281454, -6.6186236074281455, -6.4213374804281464, -6.3932767414281457, -6.529640761428146, -6.529640761428146]
								}, {
									"case":	2,
									"scores":	[-4.7262222984281461, -4.0993433734281464, -2.3934176384281454, -4.4446421444281459, -4.6483934224281462, -4.3263823924281457, -5.5399902474281459, -5.595797584428146, -5.3985114574281461, -5.3704507184281454, -5.5068147384281456, -5.5068147384281456]
								}, {
									"case":	3,
									"scores":	[-4.7262222984281461, -4.0993433734281464, -2.3934176384281454, -4.4446421444281459, -4.6483934224281462, -4.3263823924281457, -5.5399902474281459, -5.595797584428146, -5.3985114574281461, -5.3704507184281454, -5.5068147384281456, -5.5068147384281456]
								}]
						}, {
							"switch":	66,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	643,
							"begin_column":	2,
							"end_line":	645,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L643\", 12, &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(path), sizeof (path), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    if (((ctor_flags & 8192) ? 1 : 0)) {\n        flags |= 8192;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.115924872763963, -6.4890459477639642, -4.7831202127639632, -6.8343447187639637, -7.038095996763964, -6.7160849667639635, -7.9296928217639628, -7.9855001587639638, -7.7882140317639639, -7.7601532927639632, -7.8965173127639634, -7.8965173127639634]
								}]
						}]
				}, {
					"line":	645,
					"switches":	[{
							"switch":	67,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	646,
							"begin_column":	0,
							"end_line":	646,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L646\", 12, &(parsed), sizeof (parsed), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(ht), sizeof (ht), &(path), sizeof (path), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.740334005446444]
								}, {
									"case":	2,
									"scores":	[-4.740334005446444]
								}, {
									"case":	3,
									"scores":	[-4.740334005446444]
								}, {
									"case":	4,
									"scores":	[-4.740334005446444]
								}, {
									"case":	5,
									"scores":	[-4.740334005446444]
								}, {
									"case":	6,
									"scores":	[-4.740334005446444]
								}, {
									"case":	7,
									"scores":	[-4.740334005446444]
								}, {
									"case":	8,
									"scores":	[-4.740334005446444]
								}, {
									"case":	9,
									"scores":	[-4.740334005446444]
								}, {
									"case":	10,
									"scores":	[-4.740334005446444]
								}, {
									"case":	11,
									"scores":	[-4.740334005446444]
								}, {
									"case":	12,
									"scores":	[-4.740334005446444]
								}, {
									"case":	13,
									"scores":	[-4.740334005446444]
								}, {
									"case":	14,
									"scores":	[-4.740334005446444]
								}, {
									"case":	15,
									"scores":	[-4.740334005446444]
								}, {
									"case":	16,
									"scores":	[-4.740334005446444]
								}, {
									"case":	17,
									"scores":	[-4.740334005446444]
								}, {
									"case":	18,
									"scores":	[-4.740334005446444]
								}, {
									"case":	19,
									"scores":	[-4.740334005446444]
								}, {
									"case":	20,
									"scores":	[-4.740334005446444]
								}, {
									"case":	21,
									"scores":	[-4.740334005446444]
								}, {
									"case":	22,
									"scores":	[-4.740334005446444]
								}, {
									"case":	23,
									"scores":	[-4.740334005446444]
								}, {
									"case":	24,
									"scores":	[-4.740334005446444]
								}, {
									"case":	25,
									"scores":	[-4.740334005446444]
								}, {
									"case":	26,
									"scores":	[-4.740334005446444]
								}, {
									"case":	27,
									"scores":	[-4.740334005446444]
								}, {
									"case":	28,
									"scores":	[-4.740334005446444]
								}, {
									"case":	29,
									"scores":	[-4.740334005446444]
								}, {
									"case":	30,
									"scores":	[-4.740334005446444]
								}, {
									"case":	31,
									"scores":	[-4.740334005446444]
								}, {
									"case":	32,
									"scores":	[-4.740334005446444]
								}, {
									"case":	33,
									"scores":	[-4.740334005446444]
								}, {
									"case":	34,
									"scores":	[-4.740334005446444]
								}, {
									"case":	35,
									"scores":	[-4.740334005446444]
								}, {
									"case":	36,
									"scores":	[-4.740334005446444]
								}, {
									"case":	37,
									"scores":	[-4.740334005446444]
								}, {
									"case":	38,
									"scores":	[-4.740334005446444]
								}, {
									"case":	39,
									"scores":	[-4.740334005446444]
								}, {
									"case":	40,
									"scores":	[-4.740334005446444]
								}, {
									"case":	41,
									"scores":	[-4.740334005446444]
								}, {
									"case":	42,
									"scores":	[-4.740334005446444]
								}, {
									"case":	43,
									"scores":	[-4.740334005446444]
								}, {
									"case":	44,
									"scores":	[-4.740334005446444]
								}, {
									"case":	45,
									"scores":	[-4.740334005446444]
								}, {
									"case":	46,
									"scores":	[-4.740334005446444]
								}, {
									"case":	47,
									"scores":	[-4.740334005446444]
								}, {
									"case":	48,
									"scores":	[-4.740334005446444]
								}, {
									"case":	49,
									"scores":	[-4.740334005446444]
								}, {
									"case":	50,
									"scores":	[-4.740334005446444]
								}, {
									"case":	51,
									"scores":	[-4.740334005446444]
								}, {
									"case":	52,
									"scores":	[-4.740334005446444]
								}, {
									"case":	53,
									"scores":	[-4.740334005446444]
								}, {
									"case":	54,
									"scores":	[-4.740334005446444]
								}, {
									"case":	55,
									"scores":	[-4.740334005446444]
								}, {
									"case":	56,
									"scores":	[-4.740334005446444]
								}, {
									"case":	57,
									"scores":	[-4.740334005446444]
								}, {
									"case":	58,
									"scores":	[-4.740334005446444]
								}, {
									"case":	59,
									"scores":	[-4.740334005446444]
								}, {
									"case":	60,
									"scores":	[-4.740334005446444]
								}, {
									"case":	61,
									"scores":	[-4.740334005446444]
								}, {
									"case":	62,
									"scores":	[-4.740334005446444]
								}, {
									"case":	63,
									"scores":	[-4.740334005446444]
								}, {
									"case":	64,
									"scores":	[-4.740334005446444]
								}, {
									"case":	65,
									"scores":	[-4.740334005446444]
								}, {
									"case":	66,
									"scores":	[-4.740334005446444]
								}, {
									"case":	67,
									"scores":	[-4.740334005446444]
								}, {
									"case":	68,
									"scores":	[-4.740334005446444]
								}, {
									"case":	69,
									"scores":	[-4.740334005446444]
								}, {
									"case":	70,
									"scores":	[-4.740334005446444]
								}, {
									"case":	71,
									"scores":	[-4.740334005446444]
								}, {
									"case":	72,
									"scores":	[-4.740334005446444]
								}, {
									"case":	73,
									"scores":	[-4.740334005446444]
								}, {
									"case":	74,
									"scores":	[-4.740334005446444]
								}, {
									"case":	75,
									"scores":	[-4.740334005446444]
								}, {
									"case":	76,
									"scores":	[-4.740334005446444]
								}, {
									"case":	77,
									"scores":	[-4.740334005446444]
								}, {
									"case":	78,
									"scores":	[-4.740334005446444]
								}, {
									"case":	79,
									"scores":	[-4.740334005446444]
								}, {
									"case":	80,
									"scores":	[-4.740334005446444]
								}, {
									"case":	81,
									"scores":	[-4.740334005446444]
								}, {
									"case":	82,
									"scores":	[-4.740334005446444]
								}, {
									"case":	83,
									"scores":	[-4.740334005446444]
								}, {
									"case":	84,
									"scores":	[-4.740334005446444]
								}, {
									"case":	85,
									"scores":	[-4.740334005446444]
								}, {
									"case":	86,
									"scores":	[-4.740334005446444]
								}, {
									"case":	87,
									"scores":	[-4.740334005446444]
								}, {
									"case":	88,
									"scores":	[-4.740334005446444]
								}, {
									"case":	89,
									"scores":	[-4.740334005446444]
								}, {
									"case":	90,
									"scores":	[-4.740334005446444]
								}, {
									"case":	91,
									"scores":	[-4.740334005446444]
								}, {
									"case":	92,
									"scores":	[-4.740334005446444]
								}, {
									"case":	93,
									"scores":	[-4.740334005446444]
								}, {
									"case":	94,
									"scores":	[-4.740334005446444]
								}, {
									"case":	95,
									"scores":	[-4.740334005446444]
								}, {
									"case":	96,
									"scores":	[-4.740334005446444]
								}, {
									"case":	97,
									"scores":	[-4.740334005446444]
								}, {
									"case":	98,
									"scores":	[-4.740334005446444]
								}, {
									"case":	99,
									"scores":	[-4.740334005446444]
								}, {
									"case":	100,
									"scores":	[-4.740334005446444]
								}, {
									"case":	101,
									"scores":	[-4.740334005446444]
								}, {
									"case":	102,
									"scores":	[-4.740334005446444]
								}, {
									"case":	103,
									"scores":	[-4.740334005446444]
								}, {
									"case":	104,
									"scores":	[-4.740334005446444]
								}, {
									"case":	105,
									"scores":	[-4.740334005446444]
								}, {
									"case":	106,
									"scores":	[-4.740334005446444]
								}, {
									"case":	107,
									"scores":	[-4.740334005446444]
								}, {
									"case":	108,
									"scores":	[-4.740334005446444]
								}, {
									"case":	109,
									"scores":	[-4.740334005446444]
								}, {
									"case":	110,
									"scores":	[-4.740334005446444]
								}, {
									"case":	111,
									"scores":	[-4.740334005446444]
								}, {
									"case":	112,
									"scores":	[-4.740334005446444]
								}, {
									"case":	113,
									"scores":	[-4.740334005446444]
								}, {
									"case":	114,
									"scores":	[-4.740334005446444]
								}, {
									"case":	115,
									"scores":	[-4.740334005446444]
								}, {
									"case":	116,
									"scores":	[-4.740334005446444]
								}, {
									"case":	117,
									"scores":	[-4.740334005446444]
								}, {
									"case":	118,
									"scores":	[-4.740334005446444]
								}, {
									"case":	119,
									"scores":	[-4.740334005446444]
								}, {
									"case":	120,
									"scores":	[-4.740334005446444]
								}, {
									"case":	121,
									"scores":	[-4.740334005446444]
								}, {
									"case":	122,
									"scores":	[-4.740334005446444]
								}, {
									"case":	123,
									"scores":	[-4.740334005446444]
								}, {
									"case":	124,
									"scores":	[-4.740334005446444]
								}, {
									"case":	125,
									"scores":	[-4.740334005446444]
								}, {
									"case":	126,
									"scores":	[-4.740334005446444]
								}, {
									"case":	127,
									"scores":	[-4.740334005446444]
								}, {
									"case":	128,
									"scores":	[-4.740334005446444]
								}, {
									"case":	129,
									"scores":	[-4.740334005446444]
								}, {
									"case":	130,
									"scores":	[-4.740334005446444]
								}, {
									"case":	131,
									"scores":	[-4.740334005446444]
								}, {
									"case":	132,
									"scores":	[-4.740334005446444]
								}, {
									"case":	133,
									"scores":	[-4.740334005446444]
								}, {
									"case":	134,
									"scores":	[-4.740334005446444]
								}, {
									"case":	135,
									"scores":	[-4.740334005446444]
								}, {
									"case":	136,
									"scores":	[-4.740334005446444]
								}, {
									"case":	137,
									"scores":	[-4.740334005446444]
								}, {
									"case":	138,
									"scores":	[-4.740334005446444]
								}, {
									"case":	139,
									"scores":	[-4.740334005446444]
								}, {
									"case":	140,
									"scores":	[-4.740334005446444]
								}, {
									"case":	141,
									"scores":	[-4.740334005446444]
								}, {
									"case":	142,
									"scores":	[-4.740334005446444]
								}, {
									"case":	143,
									"scores":	[-4.740334005446444]
								}, {
									"case":	144,
									"scores":	[-4.740334005446444]
								}, {
									"case":	145,
									"scores":	[-4.740334005446444]
								}, {
									"case":	146,
									"scores":	[-4.740334005446444]
								}, {
									"case":	147,
									"scores":	[-4.740334005446444]
								}, {
									"case":	148,
									"scores":	[-4.740334005446444]
								}, {
									"case":	149,
									"scores":	[-4.740334005446444]
								}, {
									"case":	150,
									"scores":	[-4.740334005446444]
								}, {
									"case":	151,
									"scores":	[-4.740334005446444]
								}, {
									"case":	152,
									"scores":	[-4.740334005446444]
								}, {
									"case":	153,
									"scores":	[-4.740334005446444]
								}, {
									"case":	154,
									"scores":	[-4.740334005446444]
								}, {
									"case":	155,
									"scores":	[-4.740334005446444]
								}, {
									"case":	156,
									"scores":	[-4.740334005446444]
								}, {
									"case":	157,
									"scores":	[-4.740334005446444]
								}, {
									"case":	158,
									"scores":	[-4.740334005446444]
								}, {
									"case":	159,
									"scores":	[-4.740334005446444]
								}, {
									"case":	160,
									"scores":	[-4.740334005446444]
								}, {
									"case":	161,
									"scores":	[-4.740334005446444]
								}, {
									"case":	162,
									"scores":	[-4.740334005446444]
								}, {
									"case":	163,
									"scores":	[-4.740334005446444]
								}, {
									"case":	164,
									"scores":	[-4.740334005446444]
								}, {
									"case":	165,
									"scores":	[-4.740334005446444]
								}, {
									"case":	166,
									"scores":	[-4.740334005446444]
								}, {
									"case":	167,
									"scores":	[-4.740334005446444]
								}, {
									"case":	168,
									"scores":	[-4.740334005446444]
								}, {
									"case":	169,
									"scores":	[-4.740334005446444]
								}, {
									"case":	170,
									"scores":	[-4.740334005446444]
								}, {
									"case":	171,
									"scores":	[-4.740334005446444]
								}, {
									"case":	172,
									"scores":	[-4.740334005446444]
								}, {
									"case":	173,
									"scores":	[-4.740334005446444]
								}, {
									"case":	174,
									"scores":	[-4.740334005446444]
								}, {
									"case":	175,
									"scores":	[-4.740334005446444]
								}, {
									"case":	176,
									"scores":	[-4.740334005446444]
								}, {
									"case":	177,
									"scores":	[-4.740334005446444]
								}, {
									"case":	178,
									"scores":	[-4.740334005446444]
								}, {
									"case":	179,
									"scores":	[-4.740334005446444]
								}, {
									"case":	180,
									"scores":	[-4.740334005446444]
								}, {
									"case":	181,
									"scores":	[-4.740334005446444]
								}, {
									"case":	182,
									"scores":	[-4.740334005446444]
								}, {
									"case":	183,
									"scores":	[-4.740334005446444]
								}, {
									"case":	184,
									"scores":	[-4.740334005446444]
								}, {
									"case":	185,
									"scores":	[-4.740334005446444]
								}, {
									"case":	186,
									"scores":	[-4.740334005446444]
								}, {
									"case":	187,
									"scores":	[-4.740334005446444]
								}, {
									"case":	188,
									"scores":	[-4.740334005446444]
								}, {
									"case":	189,
									"scores":	[-4.740334005446444]
								}, {
									"case":	190,
									"scores":	[-4.740334005446444]
								}, {
									"case":	191,
									"scores":	[-4.740334005446444]
								}, {
									"case":	192,
									"scores":	[-4.740334005446444]
								}, {
									"case":	193,
									"scores":	[-4.740334005446444]
								}, {
									"case":	194,
									"scores":	[-4.740334005446444]
								}, {
									"case":	195,
									"scores":	[-4.740334005446444]
								}, {
									"case":	196,
									"scores":	[-4.740334005446444]
								}, {
									"case":	197,
									"scores":	[-4.740334005446444]
								}, {
									"case":	198,
									"scores":	[-4.740334005446444]
								}, {
									"case":	199,
									"scores":	[-4.740334005446444]
								}, {
									"case":	200,
									"scores":	[-4.740334005446444]
								}, {
									"case":	201,
									"scores":	[-4.740334005446444]
								}, {
									"case":	202,
									"scores":	[-4.740334005446444]
								}, {
									"case":	203,
									"scores":	[-4.740334005446444]
								}, {
									"case":	204,
									"scores":	[-4.740334005446444]
								}, {
									"case":	205,
									"scores":	[-4.740334005446444]
								}, {
									"case":	206,
									"scores":	[-4.740334005446444]
								}, {
									"case":	207,
									"scores":	[-4.740334005446444]
								}, {
									"case":	208,
									"scores":	[-4.740334005446444]
								}, {
									"case":	209,
									"scores":	[-4.740334005446444]
								}, {
									"case":	210,
									"scores":	[-4.740334005446444]
								}, {
									"case":	211,
									"scores":	[-4.740334005446444]
								}, {
									"case":	212,
									"scores":	[-4.740334005446444]
								}, {
									"case":	213,
									"scores":	[-4.740334005446444]
								}, {
									"case":	214,
									"scores":	[-4.740334005446444]
								}, {
									"case":	215,
									"scores":	[-4.740334005446444]
								}, {
									"case":	216,
									"scores":	[-4.740334005446444]
								}, {
									"case":	217,
									"scores":	[-4.740334005446444]
								}, {
									"case":	218,
									"scores":	[-7.1229026414464425, -6.8255149764464438, -8.9979949014464431, -8.372674152446443, -9.6116882762464435, -8.8040337014464445, -8.8736091524464449, -8.8466794682464442, -10.299623366146445, -9.4660056232464438, -9.4660056232464438, -9.4660056232464438]
								}]
						}, {
							"switch":	68,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	646,
							"begin_column":	2,
							"end_line":	649,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L646\", 12, &(parsed), sizeof (parsed), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(ht), sizeof (ht), &(path), sizeof (path), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n", "if ((parsed == -1) || __is_neg(\"\", \"L646\", 12, &(parsed), sizeof (parsed), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(ht), sizeof (ht), &(path), sizeof (path), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n", "if ((parsed == -1) && !__is_neg(\"\", \"L646\", 12, &(parsed), sizeof (parsed), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(ht), sizeof (ht), &(path), sizeof (path), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator))) {\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.7457834304281441, -4.4704552044281467, -5.0448010904281455, -4.644961184428146, -5.1451337394281458, -4.7632209364281461, -4.9669722144281465, -5.7170902494281464, -6.2258512483281461, -5.8253935304281459, -5.8253935304281459, -5.8253935304281459]
								}, {
									"case":	2,
									"scores":	[-1.324394699428145, -4.0490664734281463, -4.623412359428146, -4.2235724534281456, -4.7237450084281463, -4.3418322054281457, -4.5455834834281461, -5.295701518428146, -5.8044625173281457, -5.4040047994281455, -5.4040047994281455, -5.4040047994281455]
								}, {
									"case":	3,
									"scores":	[-1.324394699428145, -4.0490664734281463, -4.623412359428146, -4.2235724534281456, -4.7237450084281463, -4.3418322054281457, -4.5455834834281461, -5.295701518428146, -5.8044625173281457, -5.4040047994281455, -5.4040047994281455, -5.4040047994281455]
								}]
						}, {
							"switch":	69,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	646,
							"begin_column":	2,
							"end_line":	649,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L646\", 12, &(parsed), sizeof (parsed), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(ht), sizeof (ht), &(path), sizeof (path), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)))\n    if (parsed == -1) {\n        zend_restore_error_handling(&error_handling);\n        return;\n    }\n", "if (!__is_neg(\"\", \"L646\", 12, &(parsed), sizeof (parsed), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(ht), sizeof (ht), &(path), sizeof (path), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator)) && (parsed == -1)) {\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.5984005054464436, -6.3230722794464445, -6.8974181654464441, -6.4975782594464437, -6.9977508144464444, -6.6158380114464439, -6.8195892894464443, -7.5697073244464441, -8.0784683233464438, -7.6780106054464436, -7.6780106054464436, -7.6780106054464436]
								}, {
									"case":	2,
									"scores":	[-3.462894889446444, -6.1875666634464439, -6.7619125494464445, -6.3620726434464441, -6.8622451984464439, -6.4803323954464442, -6.6840836734464437, -7.4342017084464436, -7.9429627073464442, -7.542504989446444, -7.542504989446444, -7.542504989446444]
								}]
						}]
				}, {
					"line":	649,
					"switches":	[{
							"switch":	70,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	650,
							"begin_column":	0,
							"end_line":	650,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L650\", 47, &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(parsed), sizeof (parsed), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RuntimeException->type), sizeof (spl_ce_RuntimeException->type), &(spl_ce_RuntimeException->name), sizeof (spl_ce_RuntimeException->name), &(spl_ce_RuntimeException->name_length), sizeof (spl_ce_RuntimeException->name_length), &(spl_ce_RuntimeException->parent), sizeof (spl_ce_RuntimeException->parent), &(spl_ce_RuntimeException->refcount), sizeof (spl_ce_RuntimeException->refcount), &(spl_ce_RuntimeException->ce_flags), sizeof (spl_ce_RuntimeException->ce_flags), &(spl_ce_RuntimeException->default_properties_table), sizeof (spl_ce_RuntimeException->default_properties_table), &(spl_ce_RuntimeException->default_static_members_table), sizeof (spl_ce_RuntimeException->default_static_members_table), &(spl_ce_RuntimeException->static_members_table), sizeof (spl_ce_RuntimeException->static_members_table), &(spl_ce_RuntimeException->default_properties_count), sizeof (spl_ce_RuntimeException->default_properties_count), &(spl_ce_RuntimeException->default_static_members_count), sizeof (spl_ce_RuntimeException->default_static_members_count), &(spl_ce_RuntimeException->constructor), sizeof (spl_ce_RuntimeException->constructor), &(spl_ce_RuntimeException->destructor), sizeof (spl_ce_RuntimeException->destructor), &(spl_ce_RuntimeException->clone), sizeof (spl_ce_RuntimeException->clone), &(spl_ce_RuntimeException->__get), sizeof (spl_ce_RuntimeException->__get), &(spl_ce_RuntimeException->__set), sizeof (spl_ce_RuntimeException->__set), &(spl_ce_RuntimeException->__unset), sizeof (spl_ce_RuntimeException->__unset), &(spl_ce_RuntimeException->__isset), sizeof (spl_ce_RuntimeException->__isset), &(spl_ce_RuntimeException->__call), sizeof (spl_ce_RuntimeException->__call), &(spl_ce_RuntimeException->__callstatic), sizeof (spl_ce_RuntimeException->__callstatic), &(spl_ce_RuntimeException->__tostring), sizeof (spl_ce_RuntimeException->__tostring), &(spl_ce_RuntimeException->serialize_func), sizeof (spl_ce_RuntimeException->serialize_func), &(spl_ce_RuntimeException->unserialize_func), sizeof (spl_ce_RuntimeException->unserialize_func), &(spl_ce_RuntimeException->create_object), sizeof (spl_ce_RuntimeException->create_object), &(spl_ce_RuntimeException->get_iterator), sizeof (spl_ce_RuntimeException->get_iterator), &(spl_ce_RuntimeException->interface_gets_implemented), sizeof (spl_ce_RuntimeException->interface_gets_implemented), &(spl_ce_RuntimeException->get_static_method), sizeof (spl_ce_RuntimeException->get_static_method), &(spl_ce_RuntimeException->serialize), sizeof (spl_ce_RuntimeException->serialize), &(spl_ce_RuntimeException->unserialize), sizeof (spl_ce_RuntimeException->unserialize), &(spl_ce_RuntimeException->interfaces), sizeof (spl_ce_RuntimeException->interfaces), &(spl_ce_RuntimeException->num_interfaces), sizeof (spl_ce_RuntimeException->num_interfaces), &(spl_ce_RuntimeException->traits), sizeof (spl_ce_RuntimeException->traits), &(spl_ce_RuntimeException->num_traits), sizeof (spl_ce_RuntimeException->num_traits), &(spl_ce_RuntimeException->trait_aliases), sizeof (spl_ce_RuntimeException->trait_aliases), &(spl_ce_RuntimeException->trait_precedences), sizeof (spl_ce_RuntimeException->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	2,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	3,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	4,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	5,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	6,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	7,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	8,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	9,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	10,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	11,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	12,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	13,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	14,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	15,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	16,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	17,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	18,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	19,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	20,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	21,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	22,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	23,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	24,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	25,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	26,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	27,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	28,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	29,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	30,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	31,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	32,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	33,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	34,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	35,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	36,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	37,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	38,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	39,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	40,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	41,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	42,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	43,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	44,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	45,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	46,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	47,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	48,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	49,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	50,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	51,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	52,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	53,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	54,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	55,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	56,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	57,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	58,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	59,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	60,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	61,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	62,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	63,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	64,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	65,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	66,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	67,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	68,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	69,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	70,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	71,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	72,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	73,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	74,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	75,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	76,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	77,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	78,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	79,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	80,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	81,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	82,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	83,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	84,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	85,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	86,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	87,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	88,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	89,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	90,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	91,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	92,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	93,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	94,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	95,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	96,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	97,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	98,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	99,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	100,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	101,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	102,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	103,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	104,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	105,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	106,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	107,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	108,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	109,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	110,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	111,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	112,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	113,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	114,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	115,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	116,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	117,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	118,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	119,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	120,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	121,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	122,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	123,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	124,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	125,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	126,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	127,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	128,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	129,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	130,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	131,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	132,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	133,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	134,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	135,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	136,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	137,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	138,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	139,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	140,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	141,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	142,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	143,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	144,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	145,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	146,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	147,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	148,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	149,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	150,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	151,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	152,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	153,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	154,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	155,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	156,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	157,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	158,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	159,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	160,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	161,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	162,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	163,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	164,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	165,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	166,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	167,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	168,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	169,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	170,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	171,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	172,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	173,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	174,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	175,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	176,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	177,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	178,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	179,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	180,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	181,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	182,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	183,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	184,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	185,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	186,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	187,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	188,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	189,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	190,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	191,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	192,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	193,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	194,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	195,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	196,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	197,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	198,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	199,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	200,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	201,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	202,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	203,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	204,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	205,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	206,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	207,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	208,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	209,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	210,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	211,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	212,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	213,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	214,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	215,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	216,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	217,
									"scores":	[-4.7201312981289245]
								}, {
									"case":	218,
									"scores":	[-8.9267183851289253, -8.6089822469289246, -8.4673750941289239, -8.8449640609289233, -10.443590611828927, -7.9805938941289245, -8.9962794941289239, -10.699546048128926, -8.9962794941289239, -9.4642902159289228, -9.4642902159289228, -9.4642902159289228, -9.7733252681289233, -9.98421438512892, -9.2723902681289232, -10.019364181928925, -9.7733252681289233, -9.7733252681289233, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.7733252681289233, -9.7733252681289233, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.98421438512892, -9.7733252681289233, -9.7733252681289233, -9.7733252681289233, -9.7733252681289233, -9.7733252681289233, -9.7733252681289233, -9.98421438512892, -9.7733252681289233, -9.98421438512892, -9.7733252681289233, -9.98421438512892, -9.98421438512892]
								}]
						}, {
							"switch":	71,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	650,
							"begin_column":	2,
							"end_line":	654,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L650\", 47, &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(parsed), sizeof (parsed), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RuntimeException->type), sizeof (spl_ce_RuntimeException->type), &(spl_ce_RuntimeException->name), sizeof (spl_ce_RuntimeException->name), &(spl_ce_RuntimeException->name_length), sizeof (spl_ce_RuntimeException->name_length), &(spl_ce_RuntimeException->parent), sizeof (spl_ce_RuntimeException->parent), &(spl_ce_RuntimeException->refcount), sizeof (spl_ce_RuntimeException->refcount), &(spl_ce_RuntimeException->ce_flags), sizeof (spl_ce_RuntimeException->ce_flags), &(spl_ce_RuntimeException->default_properties_table), sizeof (spl_ce_RuntimeException->default_properties_table), &(spl_ce_RuntimeException->default_static_members_table), sizeof (spl_ce_RuntimeException->default_static_members_table), &(spl_ce_RuntimeException->static_members_table), sizeof (spl_ce_RuntimeException->static_members_table), &(spl_ce_RuntimeException->default_properties_count), sizeof (spl_ce_RuntimeException->default_properties_count), &(spl_ce_RuntimeException->default_static_members_count), sizeof (spl_ce_RuntimeException->default_static_members_count), &(spl_ce_RuntimeException->constructor), sizeof (spl_ce_RuntimeException->constructor), &(spl_ce_RuntimeException->destructor), sizeof (spl_ce_RuntimeException->destructor), &(spl_ce_RuntimeException->clone), sizeof (spl_ce_RuntimeException->clone), &(spl_ce_RuntimeException->__get), sizeof (spl_ce_RuntimeException->__get), &(spl_ce_RuntimeException->__set), sizeof (spl_ce_RuntimeException->__set), &(spl_ce_RuntimeException->__unset), sizeof (spl_ce_RuntimeException->__unset), &(spl_ce_RuntimeException->__isset), sizeof (spl_ce_RuntimeException->__isset), &(spl_ce_RuntimeException->__call), sizeof (spl_ce_RuntimeException->__call), &(spl_ce_RuntimeException->__callstatic), sizeof (spl_ce_RuntimeException->__callstatic), &(spl_ce_RuntimeException->__tostring), sizeof (spl_ce_RuntimeException->__tostring), &(spl_ce_RuntimeException->serialize_func), sizeof (spl_ce_RuntimeException->serialize_func), &(spl_ce_RuntimeException->unserialize_func), sizeof (spl_ce_RuntimeException->unserialize_func), &(spl_ce_RuntimeException->create_object), sizeof (spl_ce_RuntimeException->create_object), &(spl_ce_RuntimeException->get_iterator), sizeof (spl_ce_RuntimeException->get_iterator), &(spl_ce_RuntimeException->interface_gets_implemented), sizeof (spl_ce_RuntimeException->interface_gets_implemented), &(spl_ce_RuntimeException->get_static_method), sizeof (spl_ce_RuntimeException->get_static_method), &(spl_ce_RuntimeException->serialize), sizeof (spl_ce_RuntimeException->serialize), &(spl_ce_RuntimeException->unserialize), sizeof (spl_ce_RuntimeException->unserialize), &(spl_ce_RuntimeException->interfaces), sizeof (spl_ce_RuntimeException->interfaces), &(spl_ce_RuntimeException->num_interfaces), sizeof (spl_ce_RuntimeException->num_interfaces), &(spl_ce_RuntimeException->traits), sizeof (spl_ce_RuntimeException->traits), &(spl_ce_RuntimeException->num_traits), sizeof (spl_ce_RuntimeException->num_traits), &(spl_ce_RuntimeException->trait_aliases), sizeof (spl_ce_RuntimeException->trait_aliases), &(spl_ce_RuntimeException->trait_precedences), sizeof (spl_ce_RuntimeException->trait_precedences))) {\n    zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\");\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n", "if ((!len) || __is_neg(\"\", \"L650\", 47, &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(parsed), sizeof (parsed), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RuntimeException->type), sizeof (spl_ce_RuntimeException->type), &(spl_ce_RuntimeException->name), sizeof (spl_ce_RuntimeException->name), &(spl_ce_RuntimeException->name_length), sizeof (spl_ce_RuntimeException->name_length), &(spl_ce_RuntimeException->parent), sizeof (spl_ce_RuntimeException->parent), &(spl_ce_RuntimeException->refcount), sizeof (spl_ce_RuntimeException->refcount), &(spl_ce_RuntimeException->ce_flags), sizeof (spl_ce_RuntimeException->ce_flags), &(spl_ce_RuntimeException->default_properties_table), sizeof (spl_ce_RuntimeException->default_properties_table), &(spl_ce_RuntimeException->default_static_members_table), sizeof (spl_ce_RuntimeException->default_static_members_table), &(spl_ce_RuntimeException->static_members_table), sizeof (spl_ce_RuntimeException->static_members_table), &(spl_ce_RuntimeException->default_properties_count), sizeof (spl_ce_RuntimeException->default_properties_count), &(spl_ce_RuntimeException->default_static_members_count), sizeof (spl_ce_RuntimeException->default_static_members_count), &(spl_ce_RuntimeException->constructor), sizeof (spl_ce_RuntimeException->constructor), &(spl_ce_RuntimeException->destructor), sizeof (spl_ce_RuntimeException->destructor), &(spl_ce_RuntimeException->clone), sizeof (spl_ce_RuntimeException->clone), &(spl_ce_RuntimeException->__get), sizeof (spl_ce_RuntimeException->__get), &(spl_ce_RuntimeException->__set), sizeof (spl_ce_RuntimeException->__set), &(spl_ce_RuntimeException->__unset), sizeof (spl_ce_RuntimeException->__unset), &(spl_ce_RuntimeException->__isset), sizeof (spl_ce_RuntimeException->__isset), &(spl_ce_RuntimeException->__call), sizeof (spl_ce_RuntimeException->__call), &(spl_ce_RuntimeException->__callstatic), sizeof (spl_ce_RuntimeException->__callstatic), &(spl_ce_RuntimeException->__tostring), sizeof (spl_ce_RuntimeException->__tostring), &(spl_ce_RuntimeException->serialize_func), sizeof (spl_ce_RuntimeException->serialize_func), &(spl_ce_RuntimeException->unserialize_func), sizeof (spl_ce_RuntimeException->unserialize_func), &(spl_ce_RuntimeException->create_object), sizeof (spl_ce_RuntimeException->create_object), &(spl_ce_RuntimeException->get_iterator), sizeof (spl_ce_RuntimeException->get_iterator), &(spl_ce_RuntimeException->interface_gets_implemented), sizeof (spl_ce_RuntimeException->interface_gets_implemented), &(spl_ce_RuntimeException->get_static_method), sizeof (spl_ce_RuntimeException->get_static_method), &(spl_ce_RuntimeException->serialize), sizeof (spl_ce_RuntimeException->serialize), &(spl_ce_RuntimeException->unserialize), sizeof (spl_ce_RuntimeException->unserialize), &(spl_ce_RuntimeException->interfaces), sizeof (spl_ce_RuntimeException->interfaces), &(spl_ce_RuntimeException->num_interfaces), sizeof (spl_ce_RuntimeException->num_interfaces), &(spl_ce_RuntimeException->traits), sizeof (spl_ce_RuntimeException->traits), &(spl_ce_RuntimeException->num_traits), sizeof (spl_ce_RuntimeException->num_traits), &(spl_ce_RuntimeException->trait_aliases), sizeof (spl_ce_RuntimeException->trait_aliases), &(spl_ce_RuntimeException->trait_precedences), sizeof (spl_ce_RuntimeException->trait_precedences))) {\n    zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\");\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n", "if ((!len) && !__is_neg(\"\", \"L650\", 47, &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(parsed), sizeof (parsed), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RuntimeException->type), sizeof (spl_ce_RuntimeException->type), &(spl_ce_RuntimeException->name), sizeof (spl_ce_RuntimeException->name), &(spl_ce_RuntimeException->name_length), sizeof (spl_ce_RuntimeException->name_length), &(spl_ce_RuntimeException->parent), sizeof (spl_ce_RuntimeException->parent), &(spl_ce_RuntimeException->refcount), sizeof (spl_ce_RuntimeException->refcount), &(spl_ce_RuntimeException->ce_flags), sizeof (spl_ce_RuntimeException->ce_flags), &(spl_ce_RuntimeException->default_properties_table), sizeof (spl_ce_RuntimeException->default_properties_table), &(spl_ce_RuntimeException->default_static_members_table), sizeof (spl_ce_RuntimeException->default_static_members_table), &(spl_ce_RuntimeException->static_members_table), sizeof (spl_ce_RuntimeException->static_members_table), &(spl_ce_RuntimeException->default_properties_count), sizeof (spl_ce_RuntimeException->default_properties_count), &(spl_ce_RuntimeException->default_static_members_count), sizeof (spl_ce_RuntimeException->default_static_members_count), &(spl_ce_RuntimeException->constructor), sizeof (spl_ce_RuntimeException->constructor), &(spl_ce_RuntimeException->destructor), sizeof (spl_ce_RuntimeException->destructor), &(spl_ce_RuntimeException->clone), sizeof (spl_ce_RuntimeException->clone), &(spl_ce_RuntimeException->__get), sizeof (spl_ce_RuntimeException->__get), &(spl_ce_RuntimeException->__set), sizeof (spl_ce_RuntimeException->__set), &(spl_ce_RuntimeException->__unset), sizeof (spl_ce_RuntimeException->__unset), &(spl_ce_RuntimeException->__isset), sizeof (spl_ce_RuntimeException->__isset), &(spl_ce_RuntimeException->__call), sizeof (spl_ce_RuntimeException->__call), &(spl_ce_RuntimeException->__callstatic), sizeof (spl_ce_RuntimeException->__callstatic), &(spl_ce_RuntimeException->__tostring), sizeof (spl_ce_RuntimeException->__tostring), &(spl_ce_RuntimeException->serialize_func), sizeof (spl_ce_RuntimeException->serialize_func), &(spl_ce_RuntimeException->unserialize_func), sizeof (spl_ce_RuntimeException->unserialize_func), &(spl_ce_RuntimeException->create_object), sizeof (spl_ce_RuntimeException->create_object), &(spl_ce_RuntimeException->get_iterator), sizeof (spl_ce_RuntimeException->get_iterator), &(spl_ce_RuntimeException->interface_gets_implemented), sizeof (spl_ce_RuntimeException->interface_gets_implemented), &(spl_ce_RuntimeException->get_static_method), sizeof (spl_ce_RuntimeException->get_static_method), &(spl_ce_RuntimeException->serialize), sizeof (spl_ce_RuntimeException->serialize), &(spl_ce_RuntimeException->unserialize), sizeof (spl_ce_RuntimeException->unserialize), &(spl_ce_RuntimeException->interfaces), sizeof (spl_ce_RuntimeException->interfaces), &(spl_ce_RuntimeException->num_interfaces), sizeof (spl_ce_RuntimeException->num_interfaces), &(spl_ce_RuntimeException->traits), sizeof (spl_ce_RuntimeException->traits), &(spl_ce_RuntimeException->num_traits), sizeof (spl_ce_RuntimeException->num_traits), &(spl_ce_RuntimeException->trait_aliases), sizeof (spl_ce_RuntimeException->trait_aliases), &(spl_ce_RuntimeException->trait_precedences), sizeof (spl_ce_RuntimeException->trait_precedences))) {\n    zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\");\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2870799284281453, -5.1875411984281463, -4.439277418428146, -4.584328927428146, -6.2015522463281449, -4.7836566084281458, -5.1203840584281455, -6.9225905674281449, -5.1203840584281455, -5.900976498428145, -5.900976498428145, -5.900976498428145, -5.3508780684281456, -5.820138068428145, -5.028867038428146, -6.1087661684281453, -5.3508780684281456, -5.3508780684281456, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.3508780684281456, -5.3508780684281456, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.820138068428145, -5.3508780684281456, -5.3508780684281456, -5.3508780684281456, -5.3508780684281456, -5.3508780684281456, -5.3508780684281456, -5.820138068428145, -5.3508780684281456, -5.820138068428145, -5.3508780684281456, -5.820138068428145, -5.820138068428145]
								}, {
									"case":	2,
									"scores":	[-4.8944661454281455, -4.7949274154281456, -4.0466636354281462, -4.1917151444281462, -5.808938463328146, -4.3910428254281459, -4.7277702754281457, -6.5299767844281451, -4.7277702754281457, -5.5083627154281452, -5.5083627154281452, -5.5083627154281452, -4.9582642854281458, -5.427524285428146, -4.6362532554281461, -5.7161523854281455, -4.9582642854281458, -4.9582642854281458, -5.427524285428146, -5.427524285428146, -5.427524285428146, -4.9582642854281458, -4.9582642854281458, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -5.427524285428146, -4.9582642854281458, -5.427524285428146, -4.9582642854281458, -5.427524285428146, -5.427524285428146]
								}, {
									"case":	3,
									"scores":	[-4.8944661454281455, -4.7949274154281456, -4.0466636354281462, -4.1917151444281462, -5.808938463328146, -4.3910428254281459, -4.7277702754281457, -6.5299767844281451, -4.7277702754281457, -5.5083627154281452, -5.5083627154281452, -5.5083627154281452, -4.9582642854281458, -5.427524285428146, -4.6362532554281461, -5.7161523854281455, -4.9582642854281458, -4.9582642854281458, -5.427524285428146, -5.427524285428146, -5.427524285428146, -4.9582642854281458, -4.9582642854281458, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -5.427524285428146, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -4.9582642854281458, -5.427524285428146, -4.9582642854281458, -5.427524285428146, -4.9582642854281458, -5.427524285428146, -5.427524285428146]
								}]
						}, {
							"switch":	72,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	650,
							"begin_column":	2,
							"end_line":	654,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L650\", 47, &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(parsed), sizeof (parsed), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RuntimeException->type), sizeof (spl_ce_RuntimeException->type), &(spl_ce_RuntimeException->name), sizeof (spl_ce_RuntimeException->name), &(spl_ce_RuntimeException->name_length), sizeof (spl_ce_RuntimeException->name_length), &(spl_ce_RuntimeException->parent), sizeof (spl_ce_RuntimeException->parent), &(spl_ce_RuntimeException->refcount), sizeof (spl_ce_RuntimeException->refcount), &(spl_ce_RuntimeException->ce_flags), sizeof (spl_ce_RuntimeException->ce_flags), &(spl_ce_RuntimeException->default_properties_table), sizeof (spl_ce_RuntimeException->default_properties_table), &(spl_ce_RuntimeException->default_static_members_table), sizeof (spl_ce_RuntimeException->default_static_members_table), &(spl_ce_RuntimeException->static_members_table), sizeof (spl_ce_RuntimeException->static_members_table), &(spl_ce_RuntimeException->default_properties_count), sizeof (spl_ce_RuntimeException->default_properties_count), &(spl_ce_RuntimeException->default_static_members_count), sizeof (spl_ce_RuntimeException->default_static_members_count), &(spl_ce_RuntimeException->constructor), sizeof (spl_ce_RuntimeException->constructor), &(spl_ce_RuntimeException->destructor), sizeof (spl_ce_RuntimeException->destructor), &(spl_ce_RuntimeException->clone), sizeof (spl_ce_RuntimeException->clone), &(spl_ce_RuntimeException->__get), sizeof (spl_ce_RuntimeException->__get), &(spl_ce_RuntimeException->__set), sizeof (spl_ce_RuntimeException->__set), &(spl_ce_RuntimeException->__unset), sizeof (spl_ce_RuntimeException->__unset), &(spl_ce_RuntimeException->__isset), sizeof (spl_ce_RuntimeException->__isset), &(spl_ce_RuntimeException->__call), sizeof (spl_ce_RuntimeException->__call), &(spl_ce_RuntimeException->__callstatic), sizeof (spl_ce_RuntimeException->__callstatic), &(spl_ce_RuntimeException->__tostring), sizeof (spl_ce_RuntimeException->__tostring), &(spl_ce_RuntimeException->serialize_func), sizeof (spl_ce_RuntimeException->serialize_func), &(spl_ce_RuntimeException->unserialize_func), sizeof (spl_ce_RuntimeException->unserialize_func), &(spl_ce_RuntimeException->create_object), sizeof (spl_ce_RuntimeException->create_object), &(spl_ce_RuntimeException->get_iterator), sizeof (spl_ce_RuntimeException->get_iterator), &(spl_ce_RuntimeException->interface_gets_implemented), sizeof (spl_ce_RuntimeException->interface_gets_implemented), &(spl_ce_RuntimeException->get_static_method), sizeof (spl_ce_RuntimeException->get_static_method), &(spl_ce_RuntimeException->serialize), sizeof (spl_ce_RuntimeException->serialize), &(spl_ce_RuntimeException->unserialize), sizeof (spl_ce_RuntimeException->unserialize), &(spl_ce_RuntimeException->interfaces), sizeof (spl_ce_RuntimeException->interfaces), &(spl_ce_RuntimeException->num_interfaces), sizeof (spl_ce_RuntimeException->num_interfaces), &(spl_ce_RuntimeException->traits), sizeof (spl_ce_RuntimeException->traits), &(spl_ce_RuntimeException->num_traits), sizeof (spl_ce_RuntimeException->num_traits), &(spl_ce_RuntimeException->trait_aliases), sizeof (spl_ce_RuntimeException->trait_aliases), &(spl_ce_RuntimeException->trait_precedences), sizeof (spl_ce_RuntimeException->trait_precedences)))\n    if (!len) {\n        zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\");\n        zend_restore_error_handling(&error_handling);\n        return;\n    }\n", "if (!__is_neg(\"\", \"L650\", 47, &(len), sizeof (len), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(parsed), sizeof (parsed), &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RuntimeException->type), sizeof (spl_ce_RuntimeException->type), &(spl_ce_RuntimeException->name), sizeof (spl_ce_RuntimeException->name), &(spl_ce_RuntimeException->name_length), sizeof (spl_ce_RuntimeException->name_length), &(spl_ce_RuntimeException->parent), sizeof (spl_ce_RuntimeException->parent), &(spl_ce_RuntimeException->refcount), sizeof (spl_ce_RuntimeException->refcount), &(spl_ce_RuntimeException->ce_flags), sizeof (spl_ce_RuntimeException->ce_flags), &(spl_ce_RuntimeException->default_properties_table), sizeof (spl_ce_RuntimeException->default_properties_table), &(spl_ce_RuntimeException->default_static_members_table), sizeof (spl_ce_RuntimeException->default_static_members_table), &(spl_ce_RuntimeException->static_members_table), sizeof (spl_ce_RuntimeException->static_members_table), &(spl_ce_RuntimeException->default_properties_count), sizeof (spl_ce_RuntimeException->default_properties_count), &(spl_ce_RuntimeException->default_static_members_count), sizeof (spl_ce_RuntimeException->default_static_members_count), &(spl_ce_RuntimeException->constructor), sizeof (spl_ce_RuntimeException->constructor), &(spl_ce_RuntimeException->destructor), sizeof (spl_ce_RuntimeException->destructor), &(spl_ce_RuntimeException->clone), sizeof (spl_ce_RuntimeException->clone), &(spl_ce_RuntimeException->__get), sizeof (spl_ce_RuntimeException->__get), &(spl_ce_RuntimeException->__set), sizeof (spl_ce_RuntimeException->__set), &(spl_ce_RuntimeException->__unset), sizeof (spl_ce_RuntimeException->__unset), &(spl_ce_RuntimeException->__isset), sizeof (spl_ce_RuntimeException->__isset), &(spl_ce_RuntimeException->__call), sizeof (spl_ce_RuntimeException->__call), &(spl_ce_RuntimeException->__callstatic), sizeof (spl_ce_RuntimeException->__callstatic), &(spl_ce_RuntimeException->__tostring), sizeof (spl_ce_RuntimeException->__tostring), &(spl_ce_RuntimeException->serialize_func), sizeof (spl_ce_RuntimeException->serialize_func), &(spl_ce_RuntimeException->unserialize_func), sizeof (spl_ce_RuntimeException->unserialize_func), &(spl_ce_RuntimeException->create_object), sizeof (spl_ce_RuntimeException->create_object), &(spl_ce_RuntimeException->get_iterator), sizeof (spl_ce_RuntimeException->get_iterator), &(spl_ce_RuntimeException->interface_gets_implemented), sizeof (spl_ce_RuntimeException->interface_gets_implemented), &(spl_ce_RuntimeException->get_static_method), sizeof (spl_ce_RuntimeException->get_static_method), &(spl_ce_RuntimeException->serialize), sizeof (spl_ce_RuntimeException->serialize), &(spl_ce_RuntimeException->unserialize), sizeof (spl_ce_RuntimeException->unserialize), &(spl_ce_RuntimeException->interfaces), sizeof (spl_ce_RuntimeException->interfaces), &(spl_ce_RuntimeException->num_interfaces), sizeof (spl_ce_RuntimeException->num_interfaces), &(spl_ce_RuntimeException->traits), sizeof (spl_ce_RuntimeException->traits), &(spl_ce_RuntimeException->num_traits), sizeof (spl_ce_RuntimeException->num_traits), &(spl_ce_RuntimeException->trait_aliases), sizeof (spl_ce_RuntimeException->trait_aliases), &(spl_ce_RuntimeException->trait_precedences), sizeof (spl_ce_RuntimeException->trait_precedences)) && (!len)) {\n    zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\");\n    zend_restore_error_handling(&error_handling);\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8654796281289245, -6.7659408981289246, -6.0176771181289244, -6.1627286271289243, -7.779951946028925, -6.3620563081289241, -6.6987837581289247, -8.5009902671289233, -6.6987837581289247, -7.4793761981289242, -7.4793761981289242, -7.4793761981289242, -6.9292777681289239, -7.3985377681289233, -6.6072667381289243, -7.6871658681289237, -6.9292777681289239, -6.9292777681289239, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -6.9292777681289239, -6.9292777681289239, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -7.3985377681289233, -6.9292777681289239, -6.9292777681289239, -6.9292777681289239, -6.9292777681289239, -6.9292777681289239, -6.9292777681289239, -7.3985377681289233, -6.9292777681289239, -7.3985377681289233, -6.9292777681289239, -7.3985377681289233, -7.3985377681289233]
								}, {
									"case":	2,
									"scores":	[-6.8039902281289244, -6.7044514981289245, -5.9561877181289251, -6.1012392271289251, -7.7184625460289258, -6.3005669081289248, -6.6372943581289245, -8.439500867128924, -6.6372943581289245, -7.417886798128924, -7.417886798128924, -7.417886798128924, -6.8677883681289238, -7.337048368128924, -6.5457773381289241, -7.6256764681289244, -6.8677883681289238, -6.8677883681289238, -7.337048368128924, -7.337048368128924, -7.337048368128924, -6.8677883681289238, -6.8677883681289238, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -7.337048368128924, -6.8677883681289238, -6.8677883681289238, -6.8677883681289238, -6.8677883681289238, -6.8677883681289238, -6.8677883681289238, -7.337048368128924, -6.8677883681289238, -7.337048368128924, -6.8677883681289238, -7.337048368128924, -7.337048368128924]
								}]
						}]
				}, {
					"line":	655,
					"switches":	[{
							"switch":	73,
							"types":	[[], [], [], [], [219], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], [], [], [], [], [], []],
							"begin_line":	656,
							"begin_column":	0,
							"end_line":	656,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L656\", 23, &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.699928590811405]
								}, {
									"case":	2,
									"scores":	[-4.699928590811405]
								}, {
									"case":	3,
									"scores":	[-4.699928590811405]
								}, {
									"case":	4,
									"scores":	[-4.699928590811405]
								}, {
									"case":	5,
									"scores":	[-4.699928590811405]
								}, {
									"case":	6,
									"scores":	[-4.699928590811405]
								}, {
									"case":	7,
									"scores":	[-4.699928590811405]
								}, {
									"case":	8,
									"scores":	[-4.699928590811405]
								}, {
									"case":	9,
									"scores":	[-4.699928590811405]
								}, {
									"case":	10,
									"scores":	[-4.699928590811405]
								}, {
									"case":	11,
									"scores":	[-4.699928590811405]
								}, {
									"case":	12,
									"scores":	[-4.699928590811405]
								}, {
									"case":	13,
									"scores":	[-4.699928590811405]
								}, {
									"case":	14,
									"scores":	[-4.699928590811405]
								}, {
									"case":	15,
									"scores":	[-4.699928590811405]
								}, {
									"case":	16,
									"scores":	[-4.699928590811405]
								}, {
									"case":	17,
									"scores":	[-4.699928590811405]
								}, {
									"case":	18,
									"scores":	[-4.699928590811405]
								}, {
									"case":	19,
									"scores":	[-4.699928590811405]
								}, {
									"case":	20,
									"scores":	[-4.699928590811405]
								}, {
									"case":	21,
									"scores":	[-4.699928590811405]
								}, {
									"case":	22,
									"scores":	[-4.699928590811405]
								}, {
									"case":	23,
									"scores":	[-4.699928590811405]
								}, {
									"case":	24,
									"scores":	[-4.699928590811405]
								}, {
									"case":	25,
									"scores":	[-4.699928590811405]
								}, {
									"case":	26,
									"scores":	[-4.699928590811405]
								}, {
									"case":	27,
									"scores":	[-4.699928590811405]
								}, {
									"case":	28,
									"scores":	[-4.699928590811405]
								}, {
									"case":	29,
									"scores":	[-4.699928590811405]
								}, {
									"case":	30,
									"scores":	[-4.699928590811405]
								}, {
									"case":	31,
									"scores":	[-4.699928590811405]
								}, {
									"case":	32,
									"scores":	[-4.699928590811405]
								}, {
									"case":	33,
									"scores":	[-4.699928590811405]
								}, {
									"case":	34,
									"scores":	[-4.699928590811405]
								}, {
									"case":	35,
									"scores":	[-4.699928590811405]
								}, {
									"case":	36,
									"scores":	[-4.699928590811405]
								}, {
									"case":	37,
									"scores":	[-4.699928590811405]
								}, {
									"case":	38,
									"scores":	[-4.699928590811405]
								}, {
									"case":	39,
									"scores":	[-4.699928590811405]
								}, {
									"case":	40,
									"scores":	[-4.699928590811405]
								}, {
									"case":	41,
									"scores":	[-4.699928590811405]
								}, {
									"case":	42,
									"scores":	[-4.699928590811405]
								}, {
									"case":	43,
									"scores":	[-4.699928590811405]
								}, {
									"case":	44,
									"scores":	[-4.699928590811405]
								}, {
									"case":	45,
									"scores":	[-4.699928590811405]
								}, {
									"case":	46,
									"scores":	[-4.699928590811405]
								}, {
									"case":	47,
									"scores":	[-4.699928590811405]
								}, {
									"case":	48,
									"scores":	[-4.699928590811405]
								}, {
									"case":	49,
									"scores":	[-4.699928590811405]
								}, {
									"case":	50,
									"scores":	[-4.699928590811405]
								}, {
									"case":	51,
									"scores":	[-4.699928590811405]
								}, {
									"case":	52,
									"scores":	[-4.699928590811405]
								}, {
									"case":	53,
									"scores":	[-4.699928590811405]
								}, {
									"case":	54,
									"scores":	[-4.699928590811405]
								}, {
									"case":	55,
									"scores":	[-4.699928590811405]
								}, {
									"case":	56,
									"scores":	[-4.699928590811405]
								}, {
									"case":	57,
									"scores":	[-4.699928590811405]
								}, {
									"case":	58,
									"scores":	[-4.699928590811405]
								}, {
									"case":	59,
									"scores":	[-4.699928590811405]
								}, {
									"case":	60,
									"scores":	[-4.699928590811405]
								}, {
									"case":	61,
									"scores":	[-4.699928590811405]
								}, {
									"case":	62,
									"scores":	[-4.699928590811405]
								}, {
									"case":	63,
									"scores":	[-4.699928590811405]
								}, {
									"case":	64,
									"scores":	[-4.699928590811405]
								}, {
									"case":	65,
									"scores":	[-4.699928590811405]
								}, {
									"case":	66,
									"scores":	[-4.699928590811405]
								}, {
									"case":	67,
									"scores":	[-4.699928590811405]
								}, {
									"case":	68,
									"scores":	[-4.699928590811405]
								}, {
									"case":	69,
									"scores":	[-4.699928590811405]
								}, {
									"case":	70,
									"scores":	[-4.699928590811405]
								}, {
									"case":	71,
									"scores":	[-4.699928590811405]
								}, {
									"case":	72,
									"scores":	[-4.699928590811405]
								}, {
									"case":	73,
									"scores":	[-4.699928590811405]
								}, {
									"case":	74,
									"scores":	[-4.699928590811405]
								}, {
									"case":	75,
									"scores":	[-4.699928590811405]
								}, {
									"case":	76,
									"scores":	[-4.699928590811405]
								}, {
									"case":	77,
									"scores":	[-4.699928590811405]
								}, {
									"case":	78,
									"scores":	[-4.699928590811405]
								}, {
									"case":	79,
									"scores":	[-4.699928590811405]
								}, {
									"case":	80,
									"scores":	[-4.699928590811405]
								}, {
									"case":	81,
									"scores":	[-4.699928590811405]
								}, {
									"case":	82,
									"scores":	[-4.699928590811405]
								}, {
									"case":	83,
									"scores":	[-4.699928590811405]
								}, {
									"case":	84,
									"scores":	[-4.699928590811405]
								}, {
									"case":	85,
									"scores":	[-4.699928590811405]
								}, {
									"case":	86,
									"scores":	[-4.699928590811405]
								}, {
									"case":	87,
									"scores":	[-4.699928590811405]
								}, {
									"case":	88,
									"scores":	[-4.699928590811405]
								}, {
									"case":	89,
									"scores":	[-4.699928590811405]
								}, {
									"case":	90,
									"scores":	[-4.699928590811405]
								}, {
									"case":	91,
									"scores":	[-4.699928590811405]
								}, {
									"case":	92,
									"scores":	[-4.699928590811405]
								}, {
									"case":	93,
									"scores":	[-4.699928590811405]
								}, {
									"case":	94,
									"scores":	[-4.699928590811405]
								}, {
									"case":	95,
									"scores":	[-4.699928590811405]
								}, {
									"case":	96,
									"scores":	[-4.699928590811405]
								}, {
									"case":	97,
									"scores":	[-4.699928590811405]
								}, {
									"case":	98,
									"scores":	[-4.699928590811405]
								}, {
									"case":	99,
									"scores":	[-4.699928590811405]
								}, {
									"case":	100,
									"scores":	[-4.699928590811405]
								}, {
									"case":	101,
									"scores":	[-4.699928590811405]
								}, {
									"case":	102,
									"scores":	[-4.699928590811405]
								}, {
									"case":	103,
									"scores":	[-4.699928590811405]
								}, {
									"case":	104,
									"scores":	[-4.699928590811405]
								}, {
									"case":	105,
									"scores":	[-4.699928590811405]
								}, {
									"case":	106,
									"scores":	[-4.699928590811405]
								}, {
									"case":	107,
									"scores":	[-4.699928590811405]
								}, {
									"case":	108,
									"scores":	[-4.699928590811405]
								}, {
									"case":	109,
									"scores":	[-4.699928590811405]
								}, {
									"case":	110,
									"scores":	[-4.699928590811405]
								}, {
									"case":	111,
									"scores":	[-4.699928590811405]
								}, {
									"case":	112,
									"scores":	[-4.699928590811405]
								}, {
									"case":	113,
									"scores":	[-4.699928590811405]
								}, {
									"case":	114,
									"scores":	[-4.699928590811405]
								}, {
									"case":	115,
									"scores":	[-4.699928590811405]
								}, {
									"case":	116,
									"scores":	[-4.699928590811405]
								}, {
									"case":	117,
									"scores":	[-4.699928590811405]
								}, {
									"case":	118,
									"scores":	[-4.699928590811405]
								}, {
									"case":	119,
									"scores":	[-4.699928590811405]
								}, {
									"case":	120,
									"scores":	[-4.699928590811405]
								}, {
									"case":	121,
									"scores":	[-4.699928590811405]
								}, {
									"case":	122,
									"scores":	[-4.699928590811405]
								}, {
									"case":	123,
									"scores":	[-4.699928590811405]
								}, {
									"case":	124,
									"scores":	[-4.699928590811405]
								}, {
									"case":	125,
									"scores":	[-4.699928590811405]
								}, {
									"case":	126,
									"scores":	[-4.699928590811405]
								}, {
									"case":	127,
									"scores":	[-4.699928590811405]
								}, {
									"case":	128,
									"scores":	[-4.699928590811405]
								}, {
									"case":	129,
									"scores":	[-4.699928590811405]
								}, {
									"case":	130,
									"scores":	[-4.699928590811405]
								}, {
									"case":	131,
									"scores":	[-4.699928590811405]
								}, {
									"case":	132,
									"scores":	[-4.699928590811405]
								}, {
									"case":	133,
									"scores":	[-4.699928590811405]
								}, {
									"case":	134,
									"scores":	[-4.699928590811405]
								}, {
									"case":	135,
									"scores":	[-4.699928590811405]
								}, {
									"case":	136,
									"scores":	[-4.699928590811405]
								}, {
									"case":	137,
									"scores":	[-4.699928590811405]
								}, {
									"case":	138,
									"scores":	[-4.699928590811405]
								}, {
									"case":	139,
									"scores":	[-4.699928590811405]
								}, {
									"case":	140,
									"scores":	[-4.699928590811405]
								}, {
									"case":	141,
									"scores":	[-4.699928590811405]
								}, {
									"case":	142,
									"scores":	[-4.699928590811405]
								}, {
									"case":	143,
									"scores":	[-4.699928590811405]
								}, {
									"case":	144,
									"scores":	[-4.699928590811405]
								}, {
									"case":	145,
									"scores":	[-4.699928590811405]
								}, {
									"case":	146,
									"scores":	[-4.699928590811405]
								}, {
									"case":	147,
									"scores":	[-4.699928590811405]
								}, {
									"case":	148,
									"scores":	[-4.699928590811405]
								}, {
									"case":	149,
									"scores":	[-4.699928590811405]
								}, {
									"case":	150,
									"scores":	[-4.699928590811405]
								}, {
									"case":	151,
									"scores":	[-4.699928590811405]
								}, {
									"case":	152,
									"scores":	[-4.699928590811405]
								}, {
									"case":	153,
									"scores":	[-4.699928590811405]
								}, {
									"case":	154,
									"scores":	[-4.699928590811405]
								}, {
									"case":	155,
									"scores":	[-4.699928590811405]
								}, {
									"case":	156,
									"scores":	[-4.699928590811405]
								}, {
									"case":	157,
									"scores":	[-4.699928590811405]
								}, {
									"case":	158,
									"scores":	[-4.699928590811405]
								}, {
									"case":	159,
									"scores":	[-4.699928590811405]
								}, {
									"case":	160,
									"scores":	[-4.699928590811405]
								}, {
									"case":	161,
									"scores":	[-4.699928590811405]
								}, {
									"case":	162,
									"scores":	[-4.699928590811405]
								}, {
									"case":	163,
									"scores":	[-4.699928590811405]
								}, {
									"case":	164,
									"scores":	[-4.699928590811405]
								}, {
									"case":	165,
									"scores":	[-4.699928590811405]
								}, {
									"case":	166,
									"scores":	[-4.699928590811405]
								}, {
									"case":	167,
									"scores":	[-4.699928590811405]
								}, {
									"case":	168,
									"scores":	[-4.699928590811405]
								}, {
									"case":	169,
									"scores":	[-4.699928590811405]
								}, {
									"case":	170,
									"scores":	[-4.699928590811405]
								}, {
									"case":	171,
									"scores":	[-4.699928590811405]
								}, {
									"case":	172,
									"scores":	[-4.699928590811405]
								}, {
									"case":	173,
									"scores":	[-4.699928590811405]
								}, {
									"case":	174,
									"scores":	[-4.699928590811405]
								}, {
									"case":	175,
									"scores":	[-4.699928590811405]
								}, {
									"case":	176,
									"scores":	[-4.699928590811405]
								}, {
									"case":	177,
									"scores":	[-4.699928590811405]
								}, {
									"case":	178,
									"scores":	[-4.699928590811405]
								}, {
									"case":	179,
									"scores":	[-4.699928590811405]
								}, {
									"case":	180,
									"scores":	[-4.699928590811405]
								}, {
									"case":	181,
									"scores":	[-4.699928590811405]
								}, {
									"case":	182,
									"scores":	[-4.699928590811405]
								}, {
									"case":	183,
									"scores":	[-4.699928590811405]
								}, {
									"case":	184,
									"scores":	[-4.699928590811405]
								}, {
									"case":	185,
									"scores":	[-4.699928590811405]
								}, {
									"case":	186,
									"scores":	[-4.699928590811405]
								}, {
									"case":	187,
									"scores":	[-4.699928590811405]
								}, {
									"case":	188,
									"scores":	[-4.699928590811405]
								}, {
									"case":	189,
									"scores":	[-4.699928590811405]
								}, {
									"case":	190,
									"scores":	[-4.699928590811405]
								}, {
									"case":	191,
									"scores":	[-4.699928590811405]
								}, {
									"case":	192,
									"scores":	[-4.699928590811405]
								}, {
									"case":	193,
									"scores":	[-4.699928590811405]
								}, {
									"case":	194,
									"scores":	[-4.699928590811405]
								}, {
									"case":	195,
									"scores":	[-4.699928590811405]
								}, {
									"case":	196,
									"scores":	[-4.699928590811405]
								}, {
									"case":	197,
									"scores":	[-4.699928590811405]
								}, {
									"case":	198,
									"scores":	[-4.699928590811405]
								}, {
									"case":	199,
									"scores":	[-4.699928590811405]
								}, {
									"case":	200,
									"scores":	[-4.699928590811405]
								}, {
									"case":	201,
									"scores":	[-4.699928590811405]
								}, {
									"case":	202,
									"scores":	[-4.699928590811405]
								}, {
									"case":	203,
									"scores":	[-4.699928590811405]
								}, {
									"case":	204,
									"scores":	[-4.699928590811405]
								}, {
									"case":	205,
									"scores":	[-4.699928590811405]
								}, {
									"case":	206,
									"scores":	[-4.699928590811405]
								}, {
									"case":	207,
									"scores":	[-4.699928590811405]
								}, {
									"case":	208,
									"scores":	[-4.699928590811405]
								}, {
									"case":	209,
									"scores":	[-4.699928590811405]
								}, {
									"case":	210,
									"scores":	[-4.699928590811405]
								}, {
									"case":	211,
									"scores":	[-4.699928590811405]
								}, {
									"case":	212,
									"scores":	[-4.699928590811405]
								}, {
									"case":	213,
									"scores":	[-4.699928590811405]
								}, {
									"case":	214,
									"scores":	[-4.699928590811405]
								}, {
									"case":	215,
									"scores":	[-4.699928590811405]
								}, {
									"case":	216,
									"scores":	[-4.699928590811405]
								}, {
									"case":	217,
									"scores":	[-4.699928590811405]
								}, {
									"case":	218,
									"scores":	[-4.699928590811405]
								}, {
									"case":	219,
									"scores":	[-5.7469367316114051, -8.6613566255114041, -7.0569881868114042, -8.8183210808114048, -8.0726737868114036, -9.7759403408114043, -8.5607985886114051, -8.003112677811405, -7.5437693868114053, -8.143330161611404, -8.143330161611404, -8.0726737868114036, -8.5406845086114043, -9.0606086778114037, -9.0957584746114044, -9.0606086778114037, -8.3487845608114046, -9.0606086778114037, -9.0606086778114037, -8.3487845608114046, -8.8497195608114048, -9.0957584746114044, -9.0957584746114044]
								}]
						}, {
							"switch":	74,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	656,
							"begin_column":	2,
							"end_line":	656,
							"end_column":	83,
							"patch_codes":	["if (!__is_neg(\"\", \"L656\", 23, &(this_ptr), sizeof (this_ptr), &(intern), sizeof (intern), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr));\n", "{\n}\n", "intern = (intern)", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.976564860811405, -6.6298873687114046, -4.5953846108114051, -5.3913510018114046, -5.4270210508114047, -7.2292275598114051, -6.2965963368114046, -5.5937169208114046, -4.7459144108114053, -6.1220145498114054, -6.1220145498114054, -5.4270210508114047, -6.2076134908114051, -6.1267750608114051, -6.4154031608114046, -6.1267750608114051, -5.3355040308114052, -6.1267750608114051, -6.1267750608114051, -5.3355040308114052, -5.6575150608114049, -6.4154031608114046, -6.4154031608114046]
								}, {
									"case":	2,
									"scores":	[-4.699928590811405]
								}, {
									"case":	3,
									"scores":	[-4.699928590811405]
								}, {
									"case":	4,
									"scores":	[-4.699928590811405]
								}]
						}]
				}, {
					"line":	656,
					"switches":	[{
							"switch":	75,
							"types":	[[], [], [], [], [219], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], [], [], [], [], [], []],
							"begin_line":	657,
							"begin_column":	0,
							"end_line":	657,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L657\", 23, &(intern), sizeof (intern), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(this_ptr), sizeof (this_ptr), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	16,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	17,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	18,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	19,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	20,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	21,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	22,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	23,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	24,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	25,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	26,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	27,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	28,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	29,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	30,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	31,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	32,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	33,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	34,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	35,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	36,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	37,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	38,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	39,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	40,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	41,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	42,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	43,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	44,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	45,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	46,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	47,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	48,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	49,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	50,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	51,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	52,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	53,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	54,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	55,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	56,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	57,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	58,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	59,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	60,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	61,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	62,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	63,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	64,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	65,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	66,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	67,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	68,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	69,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	70,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	71,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	72,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	73,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	74,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	75,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	76,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	77,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	78,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	79,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	80,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	81,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	82,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	83,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	84,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	85,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	86,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	87,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	88,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	89,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	90,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	91,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	92,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	93,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	94,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	95,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	96,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	97,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	98,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	99,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	100,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	101,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	102,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	103,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	104,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	105,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	106,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	107,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	108,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	109,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	110,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	111,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	112,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	113,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	114,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	115,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	116,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	117,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	118,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	119,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	120,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	121,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	122,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	123,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	124,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	125,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	126,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	127,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	128,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	129,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	130,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	131,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	132,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	133,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	134,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	135,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	136,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	137,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	138,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	139,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	140,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	141,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	142,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	143,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	144,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	145,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	146,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	147,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	148,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	149,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	150,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	151,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	152,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	153,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	154,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	155,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	156,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	157,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	158,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	159,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	160,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	161,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	162,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	163,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	164,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	165,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	166,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	167,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	168,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	169,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	170,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	171,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	172,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	173,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	174,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	175,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	176,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	177,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	178,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	179,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	180,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	181,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	182,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	183,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	184,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	185,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	186,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	187,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	188,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	189,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	190,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	191,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	192,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	193,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	194,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	195,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	196,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	197,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	198,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	199,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	200,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	201,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	202,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	203,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	204,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	205,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	206,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	207,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	208,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	209,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	210,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	211,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	212,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	213,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	214,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	215,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	216,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	217,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	218,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	219,
									"scores":	[-7.0217667925938851, -6.9061267408938853, -8.5467141558938842, -8.7117728546938871, -8.6596951408938843, -10.362961694893887, -9.1478199426938858, -8.5901340318938857, -8.1307907408938842, -8.7303515156938847, -8.7303515156938847, -8.6596951408938843, -9.127705862693885, -9.6476300318938844, -9.6827798286938851, -9.6476300318938844, -8.9358059148938853, -9.6476300318938844, -9.6476300318938844, -8.9358059148938853, -9.4367409148938854, -9.6827798286938851, -9.6827798286938851]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	657,
							"begin_column":	2,
							"end_line":	657,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L657\", 23, &(intern), sizeof (intern), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(this_ptr), sizeof (this_ptr), &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    intern->flags = flags;\n", "{\n}\n", "intern->flags = (-1)", "intern->flags = (0 * ctor_flags)", "intern->flags = (0 * flags)", "intern->flags = (0 * ht)", "intern->flags = (0 * len)", "intern->flags = (0 * parsed)", "intern->flags = (0 * return_value_used)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags != 0)", "intern->flags = (ctor_flags != flags)", "intern->flags = (ctor_flags != len)", "intern->flags = (ctor_flags != parsed)", "intern->flags = (ctor_flags * flags)", "intern->flags = (ctor_flags * ht)", "intern->flags = (ctor_flags * len)", "intern->flags = (ctor_flags * parsed)", "intern->flags = (ctor_flags * return_value_used)", "intern->flags = (ctor_flags + 0)", "intern->flags = (ctor_flags + flags)", "intern->flags = (ctor_flags + len)", "intern->flags = (ctor_flags + parsed)", "intern->flags = (ctor_flags - 0)", "intern->flags = (ctor_flags - flags)", "intern->flags = (ctor_flags - len)", "intern->flags = (ctor_flags - parsed)", "intern->flags = (ctor_flags == 0)", "intern->flags = (ctor_flags == flags)", "intern->flags = (ctor_flags == len)", "intern->flags = (ctor_flags == parsed)", "intern->flags = (ctor_flags)", "intern->flags = (error_handling != 0)", "intern->flags = (error_handling == 0)", "intern->flags = (flags != 0)", "intern->flags = (flags * ctor_flags)", "intern->flags = (flags * ht)", "intern->flags = (flags * len)", "intern->flags = (flags * parsed)", "intern->flags = (flags * return_value_used)", "intern->flags = (flags + 0)", "intern->flags = (flags - 0)", "intern->flags = (flags == 0)", "intern->flags = (flags)", "intern->flags = (ht != 0)", "intern->flags = (ht != ctor_flags)", "intern->flags = (ht != flags)", "intern->flags = (ht != len)", "intern->flags = (ht != parsed)", "intern->flags = (ht != return_value_used)", "intern->flags = (ht * ctor_flags)", "intern->flags = (ht * flags)", "intern->flags = (ht * len)", "intern->flags = (ht * parsed)", "intern->flags = (ht * return_value_used)", "intern->flags = (ht + 0)", "intern->flags = (ht + ctor_flags)", "intern->flags = (ht + flags)", "intern->flags = (ht + len)", "intern->flags = (ht + parsed)", "intern->flags = (ht + return_value_used)", "intern->flags = (ht - 0)", "intern->flags = (ht - ctor_flags)", "intern->flags = (ht - flags)", "intern->flags = (ht - len)", "intern->flags = (ht - parsed)", "intern->flags = (ht - return_value_used)", "intern->flags = (ht == 0)", "intern->flags = (ht == ctor_flags)", "intern->flags = (ht == flags)", "intern->flags = (ht == len)", "intern->flags = (ht == parsed)", "intern->flags = (ht == return_value_used)", "intern->flags = (intern != 0)", "intern->flags = (intern == 0)", "intern->flags = (len != 0)", "intern->flags = (len != flags)", "intern->flags = (len * ctor_flags)", "intern->flags = (len * flags)", "intern->flags = (len * ht)", "intern->flags = (len * parsed)", "intern->flags = (len * return_value_used)", "intern->flags = (len + 0)", "intern->flags = (len + flags)", "intern->flags = (len - 0)", "intern->flags = (len - flags)", "intern->flags = (len == 0)", "intern->flags = (len == flags)", "intern->flags = (parsed != 0)", "intern->flags = (parsed != flags)", "intern->flags = (parsed != len)", "intern->flags = (parsed * ctor_flags)", "intern->flags = (parsed * flags)", "intern->flags = (parsed * ht)", "intern->flags = (parsed * len)", "intern->flags = (parsed * return_value_used)", "intern->flags = (parsed + 0)", "intern->flags = (parsed + flags)", "intern->flags = (parsed + len)", "intern->flags = (parsed - 0)", "intern->flags = (parsed - flags)", "intern->flags = (parsed - len)", "intern->flags = (parsed == 0)", "intern->flags = (parsed == flags)", "intern->flags = (parsed == len)", "intern->flags = (path != 0)", "intern->flags = (path == 0)", "intern->flags = (return_value != 0)", "intern->flags = (return_value != this_ptr)", "intern->flags = (return_value == 0)", "intern->flags = (return_value == this_ptr)", "intern->flags = (return_value_ptr != 0)", "intern->flags = (return_value_ptr == 0)", "intern->flags = (return_value_used != 0)", "intern->flags = (return_value_used != ctor_flags)", "intern->flags = (return_value_used != flags)", "intern->flags = (return_value_used != len)", "intern->flags = (return_value_used != parsed)", "intern->flags = (return_value_used * ctor_flags)", "intern->flags = (return_value_used * flags)", "intern->flags = (return_value_used * ht)", "intern->flags = (return_value_used * len)", "intern->flags = (return_value_used * parsed)", "intern->flags = (return_value_used + 0)", "intern->flags = (return_value_used + ctor_flags)", "intern->flags = (return_value_used + flags)", "intern->flags = (return_value_used + len)", "intern->flags = (return_value_used + parsed)", "intern->flags = (return_value_used - 0)", "intern->flags = (return_value_used - ctor_flags)", "intern->flags = (return_value_used - flags)", "intern->flags = (return_value_used - len)", "intern->flags = (return_value_used - parsed)", "intern->flags = (return_value_used == 0)", "intern->flags = (return_value_used == ctor_flags)", "intern->flags = (return_value_used == flags)", "intern->flags = (return_value_used == len)", "intern->flags = (return_value_used == parsed)", "intern->flags = (this_ptr != 0)", "intern->flags = (this_ptr == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0540959903938854, -6.0179335534938847, -6.9046298744938852, -7.2835012894938851, -6.8071933434938856, -5.9327266524938853, -7.6767686294938855, -6.9738892134938846, -6.1260867034938853, -7.5021868424938845, -7.5021868424938845, -6.8071933434938856, -7.5877857834938851, -7.5069473534938851, -7.7955754534938846, -7.5069473534938851, -6.7156763234938843, -7.5069473534938851, -7.5069473534938851, -6.7156763234938843, -7.0376873534938849, -7.7955754534938846, -7.7955754534938846]
								}, {
									"case":	2,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	3,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	4,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	5,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	6,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	7,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	8,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	9,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	10,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	11,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	12,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	13,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	14,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	15,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	16,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	17,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	18,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	19,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	20,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	21,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	22,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	23,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	24,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	25,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	26,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	27,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	28,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	29,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	30,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	31,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	32,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	33,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	34,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	35,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	36,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	37,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	38,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	39,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	40,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	41,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	42,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	43,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	44,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	45,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	46,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	47,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	48,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	49,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	50,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	51,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	52,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	53,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	54,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	55,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	56,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	57,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	58,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	59,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	60,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	61,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	62,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	63,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	64,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	65,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	66,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	67,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	68,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	69,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	70,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	71,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	72,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	73,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	74,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	75,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	76,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	77,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	78,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	79,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	80,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	81,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	82,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	83,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	84,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	85,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	86,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	87,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	88,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	89,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	90,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	91,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	92,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	93,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	94,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	95,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	96,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	97,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	98,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	99,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	100,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	101,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	102,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	103,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	104,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	105,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	106,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	107,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	108,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	109,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	110,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	111,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	112,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	113,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	114,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	115,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	116,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	117,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	118,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	119,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	120,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	121,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	122,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	123,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	124,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	125,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	126,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	127,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	128,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	129,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	130,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	131,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	132,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	133,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	134,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	135,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	136,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	137,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	138,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	139,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	140,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	141,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	142,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	143,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	144,
									"scores":	[-4.6797258834938855]
								}, {
									"case":	145,
									"scores":	[-4.6797258834938855]
								}]
						}]
				}, {
					"line":	665,
					"switches":	[{
							"switch":	79,
							"types":	[[], [], [], [], [219], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], [], [], [], [], [], []],
							"begin_line":	666,
							"begin_column":	1,
							"end_line":	666,
							"end_column":	1,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L666\", 23, &(intern), sizeof (intern), &(path), sizeof (path), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	2,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	3,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	4,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	5,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	6,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	7,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	8,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	9,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	10,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	11,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	12,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	13,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	14,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	15,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	16,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	17,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	18,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	19,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	20,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	21,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	22,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	23,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	24,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	25,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	26,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	27,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	28,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	29,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	30,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	31,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	32,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	33,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	34,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	35,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	36,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	37,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	38,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	39,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	40,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	41,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	42,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	43,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	44,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	45,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	46,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	47,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	48,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	49,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	50,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	51,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	52,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	53,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	54,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	55,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	56,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	57,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	58,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	59,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	60,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	61,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	62,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	63,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	64,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	65,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	66,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	67,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	68,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	69,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	70,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	71,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	72,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	73,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	74,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	75,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	76,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	77,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	78,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	79,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	80,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	81,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	82,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	83,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	84,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	85,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	86,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	87,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	88,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	89,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	90,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	91,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	92,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	93,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	94,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	95,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	96,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	97,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	98,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	99,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	100,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	101,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	102,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	103,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	104,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	105,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	106,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	107,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	108,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	109,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	110,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	111,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	112,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	113,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	114,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	115,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	116,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	117,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	118,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	119,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	120,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	121,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	122,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	123,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	124,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	125,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	126,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	127,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	128,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	129,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	130,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	131,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	132,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	133,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	134,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	135,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	136,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	137,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	138,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	139,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	140,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	141,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	142,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	143,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	144,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	145,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	146,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	147,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	148,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	149,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	150,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	151,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	152,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	153,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	154,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	155,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	156,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	157,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	158,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	159,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	160,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	161,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	162,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	163,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	164,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	165,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	166,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	167,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	168,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	169,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	170,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	171,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	172,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	173,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	174,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	175,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	176,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	177,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	178,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	179,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	180,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	181,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	182,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	183,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	184,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	185,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	186,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	187,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	188,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	189,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	190,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	191,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	192,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	193,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	194,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	195,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	196,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	197,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	198,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	199,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	200,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	201,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	202,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	203,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	204,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	205,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	206,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	207,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	208,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	209,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	210,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	211,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	212,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	213,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	214,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	215,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	216,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	217,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	218,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	219,
									"scores":	[-5.5738942450588462, -5.5387444482588464, -6.4306892480588465, -6.4306892480588465, -5.9626785262588466, -5.9255781262588467, -6.7397243002588461, -6.2087174400588463, -6.4306892480588465, -5.8931174172588463, -5.9255781262588467, -5.9626785262588466, -6.4306892480588465, -6.9506134172588467, -6.9857632140588466, -6.9506134172588467, -6.2387893002588459, -6.9506134172588467, -6.9506134172588467, -6.2387893002588459, -6.7397243002588461, -6.9857632140588466, -6.9857632140588466]
								}]
						}, {
							"switch":	80,
							"types":	[[], [], [1], [], [], [], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], [], [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [], [], [110]],
							"begin_line":	666,
							"begin_column":	3,
							"end_line":	666,
							"end_column":	49,
							"patch_codes":	["if (!__is_neg(\"\", \"L666\", 23, &(intern), sizeof (intern), &(path), sizeof (path), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class)))\n    spl_filesystem_dir_open(intern, path);\n", "__trident_output(intern, path, -1)", "__trident_output(intern, path, 0)", "__trident_output(intern, path, 1)", "__trident_output(intern, path, 16)", "__trident_output(intern, path, 2)", "__trident_output(intern, path, 4096)", "__trident_output(intern, path, 8192)", "__trident_output(intern, path, ht)", "__trident_output(intern, path, le_index_ptr)", "__trident_output(intern, path, len)", "__trident_output(intern, path, parsed)", "__trident_output(intern, path, return_value_used)", "_php_stream_read(intern, path, -1)", "_php_stream_read(intern, path, 0)", "_php_stream_read(intern, path, 1)", "_php_stream_read(intern, path, 16)", "_php_stream_read(intern, path, 2)", "_php_stream_read(intern, path, 4096)", "_php_stream_read(intern, path, 8192)", "php_copy_file_ex(intern, path, -1)", "php_copy_file_ex(intern, path, 0)", "php_copy_file_ex(intern, path, 1)", "php_copy_file_ex(intern, path, 16)", "php_copy_file_ex(intern, path, 2)", "php_copy_file_ex(intern, path, 4096)", "php_copy_file_ex(intern, path, 8192)", "php_copy_file_ex(intern, path, ht)", "php_copy_file_ex(intern, path, le_index_ptr)", "php_copy_file_ex(intern, path, len)", "php_copy_file_ex(intern, path, parsed)", "php_copy_file_ex(intern, path, return_value_used)", "php_parse_user_ini_file(intern, path, 0)", "php_stream_locate_eol(intern, path, -1)", "php_stream_locate_eol(intern, path, 0)", "php_stream_locate_eol(intern, path, 1)", "php_stream_locate_eol(intern, path, 16)", "php_stream_locate_eol(intern, path, 2)", "php_stream_locate_eol(intern, path, 4096)", "php_stream_locate_eol(intern, path, 8192)", "readlink(intern, path, -1)", "readlink(intern, path, 0)", "readlink(intern, path, 1)", "readlink(intern, path, 16)", "readlink(intern, path, 2)", "readlink(intern, path, 4096)", "readlink(intern, path, 8192)", "setbuffer(intern, path, -1)", "setbuffer(intern, path, 0)", "setbuffer(intern, path, 1)", "setbuffer(intern, path, 16)", "setbuffer(intern, path, 2)", "setbuffer(intern, path, 4096)", "setbuffer(intern, path, 8192)", "spl_register_interface(intern, path, 0)", "zend_check_property_access(intern, path, -1)", "zend_check_property_access(intern, path, 0)", "zend_check_property_access(intern, path, 1)", "zend_check_property_access(intern, path, 16)", "zend_check_property_access(intern, path, 2)", "zend_check_property_access(intern, path, 4096)", "zend_check_property_access(intern, path, 8192)", "zend_check_property_access(intern, path, ht)", "zend_check_property_access(intern, path, le_index_ptr)", "zend_check_property_access(intern, path, len)", "zend_check_property_access(intern, path, parsed)", "zend_check_property_access(intern, path, return_value_used)", "zend_throw_exception(intern, path, -1)", "zend_throw_exception(intern, path, 0)", "zend_throw_exception(intern, path, 1)", "zend_throw_exception(intern, path, 16)", "zend_throw_exception(intern, path, 2)", "zend_throw_exception(intern, path, 4096)", "zend_throw_exception(intern, path, 8192)", "zend_throw_exception(intern, path, ctor_flags)", "zend_throw_exception(intern, path, flags)", "zend_ts_get_hash_value(intern, path, -1)", "zend_ts_get_hash_value(intern, path, 0)", "zend_ts_get_hash_value(intern, path, 1)", "zend_ts_get_hash_value(intern, path, 16)", "zend_ts_get_hash_value(intern, path, 2)", "zend_ts_get_hash_value(intern, path, 4096)", "zend_ts_get_hash_value(intern, path, 8192)", "zend_ts_hash_add_empty_element(intern, path, -1)", "zend_ts_hash_add_empty_element(intern, path, 0)", "zend_ts_hash_add_empty_element(intern, path, 1)", "zend_ts_hash_add_empty_element(intern, path, 16)", "zend_ts_hash_add_empty_element(intern, path, 2)", "zend_ts_hash_add_empty_element(intern, path, 4096)", "zend_ts_hash_add_empty_element(intern, path, 8192)", "zend_ts_hash_exists(intern, path, -1)", "zend_ts_hash_exists(intern, path, 0)", "zend_ts_hash_exists(intern, path, 1)", "zend_ts_hash_exists(intern, path, 16)", "zend_ts_hash_exists(intern, path, 2)", "zend_ts_hash_exists(intern, path, 4096)", "zend_ts_hash_exists(intern, path, 8192)", "zend_update_static_property_null(intern, path, -1)", "zend_update_static_property_null(intern, path, 0)", "zend_update_static_property_null(intern, path, 1)", "zend_update_static_property_null(intern, path, 16)", "zend_update_static_property_null(intern, path, 2)", "zend_update_static_property_null(intern, path, 4096)", "zend_update_static_property_null(intern, path, 8192)", "zend_update_static_property_null(intern, path, ht)", "zend_update_static_property_null(intern, path, le_index_ptr)", "zend_update_static_property_null(intern, path, len)", "zend_update_static_property_null(intern, path, parsed)", "zend_update_static_property_null(intern, path, return_value_used)", "{\n}\n", "Debug(intern, path)", "__stat_file_close(intern, path)", "_php_stream_puts(intern, path)", "asctime_r(intern, path)", "compile_string(intern, path)", "ctime_r(intern, path)", "expand_filepath(intern, path)", "php_copy_file(intern, path)", "php_printf(intern, path)", "php_spl_object_hash(intern, path)", "printf(intern, path)", "realpath(intern, path)", "setbuf(intern, path)", "spl_filesystem_object_get_path(intern, path)", "spl_filesystem_object_get_pathname(intern, path)", "tsrm_realpath(intern, path)", "virtual_realpath(intern, path)", "virtual_rename(intern, path)", "wprintf(intern, path)", "spl_filesystem_dir_open((&ctor_flags), path)", "spl_filesystem_dir_open((&error_handling), path)", "spl_filesystem_dir_open((&flags), path)", "spl_filesystem_dir_open((&ht), path)", "spl_filesystem_dir_open((&intern), path)", "spl_filesystem_dir_open((&len), path)", "spl_filesystem_dir_open((&parsed), path)", "spl_filesystem_dir_open((&path), path)", "spl_filesystem_dir_open((&return_value), path)", "spl_filesystem_dir_open((&return_value_ptr), path)", "spl_filesystem_dir_open((&return_value_used), path)", "spl_filesystem_dir_open((&this_ptr), path)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (&ctor_flags))", "spl_filesystem_dir_open(intern, (&error_handling))", "spl_filesystem_dir_open(intern, (&flags))", "spl_filesystem_dir_open(intern, (&ht))", "spl_filesystem_dir_open(intern, (&intern))", "spl_filesystem_dir_open(intern, (&len))", "spl_filesystem_dir_open(intern, (&parsed))", "spl_filesystem_dir_open(intern, (&path))", "spl_filesystem_dir_open(intern, (&return_value))", "spl_filesystem_dir_open(intern, (&return_value_ptr))", "spl_filesystem_dir_open(intern, (&return_value_used))", "spl_filesystem_dir_open(intern, (&this_ptr))", "spl_filesystem_dir_open(intern, (path))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.509872238858847, -5.2212441388588466, -6.2265649788588462, -6.2265649788588462, -5.4459725388588467, -5.1516217388588466, -5.6764665488588468, -6.2038606388588464, -6.2265649788588462, -5.6126684088588465, -5.1516217388588466, -5.4459725388588467, -6.2265649788588462, -6.1457265488588462, -6.4343546488588466, -6.1457265488588462, -5.3544555188588463, -6.1457265488588462, -6.1457265488588462, -5.3544555188588463, -5.6764665488588468, -6.4343546488588466, -6.4343546488588466]
								}, {
									"case":	2,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	3,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	4,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	5,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	6,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	7,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	8,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	9,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	10,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	11,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	12,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	13,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	14,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	15,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	16,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	17,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	18,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	19,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	20,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	21,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	22,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	23,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	24,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	25,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	26,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	27,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	28,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	29,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	30,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	31,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	32,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	33,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	34,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	35,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	36,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	37,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	38,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	39,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	40,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	41,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	42,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	43,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	44,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	45,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	46,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	47,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	48,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	49,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	50,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	51,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	52,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	53,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	54,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	55,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	56,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	57,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	58,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	59,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	60,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	61,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	62,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	63,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	64,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	65,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	66,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	67,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	68,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	69,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	70,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	71,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	72,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	73,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	74,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	75,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	76,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	77,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	78,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	79,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	80,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	81,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	82,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	83,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	84,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	85,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	86,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	87,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	88,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	89,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	90,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	91,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	92,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	93,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	94,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	95,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	96,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	97,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	98,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	99,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	100,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	101,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	102,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	103,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	104,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	105,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	106,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	107,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	108,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	109,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	110,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	111,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	112,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	113,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	114,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	115,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	116,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	117,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	118,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	119,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	120,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	121,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	122,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	123,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	124,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	125,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	126,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	127,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	128,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	129,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	130,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	131,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	132,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	133,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	134,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	135,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	136,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	137,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	138,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	139,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	140,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	141,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	142,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	143,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	144,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	145,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	146,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	147,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	148,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	149,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	150,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	151,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	152,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	153,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	154,
									"scores":	[-4.6393204688588465]
								}, {
									"case":	155,
									"scores":	[-4.6393204688588465]
								}]
						}]
				}, {
					"line":	658,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [219], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], [], [], [], [], [], []],
							"begin_line":	659,
							"begin_column":	0,
							"end_line":	659,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.659523176176366]
								}, {
									"case":	2,
									"scores":	[-4.659523176176366]
								}, {
									"case":	3,
									"scores":	[-4.659523176176366]
								}, {
									"case":	4,
									"scores":	[-4.659523176176366]
								}, {
									"case":	5,
									"scores":	[-4.659523176176366]
								}, {
									"case":	6,
									"scores":	[-4.659523176176366]
								}, {
									"case":	7,
									"scores":	[-4.659523176176366]
								}, {
									"case":	8,
									"scores":	[-4.659523176176366]
								}, {
									"case":	9,
									"scores":	[-4.659523176176366]
								}, {
									"case":	10,
									"scores":	[-4.659523176176366]
								}, {
									"case":	11,
									"scores":	[-4.659523176176366]
								}, {
									"case":	12,
									"scores":	[-4.659523176176366]
								}, {
									"case":	13,
									"scores":	[-4.659523176176366]
								}, {
									"case":	14,
									"scores":	[-4.659523176176366]
								}, {
									"case":	15,
									"scores":	[-4.659523176176366]
								}, {
									"case":	16,
									"scores":	[-4.659523176176366]
								}, {
									"case":	17,
									"scores":	[-4.659523176176366]
								}, {
									"case":	18,
									"scores":	[-4.659523176176366]
								}, {
									"case":	19,
									"scores":	[-4.659523176176366]
								}, {
									"case":	20,
									"scores":	[-4.659523176176366]
								}, {
									"case":	21,
									"scores":	[-4.659523176176366]
								}, {
									"case":	22,
									"scores":	[-4.659523176176366]
								}, {
									"case":	23,
									"scores":	[-4.659523176176366]
								}, {
									"case":	24,
									"scores":	[-4.659523176176366]
								}, {
									"case":	25,
									"scores":	[-4.659523176176366]
								}, {
									"case":	26,
									"scores":	[-4.659523176176366]
								}, {
									"case":	27,
									"scores":	[-4.659523176176366]
								}, {
									"case":	28,
									"scores":	[-4.659523176176366]
								}, {
									"case":	29,
									"scores":	[-4.659523176176366]
								}, {
									"case":	30,
									"scores":	[-4.659523176176366]
								}, {
									"case":	31,
									"scores":	[-4.659523176176366]
								}, {
									"case":	32,
									"scores":	[-4.659523176176366]
								}, {
									"case":	33,
									"scores":	[-4.659523176176366]
								}, {
									"case":	34,
									"scores":	[-4.659523176176366]
								}, {
									"case":	35,
									"scores":	[-4.659523176176366]
								}, {
									"case":	36,
									"scores":	[-4.659523176176366]
								}, {
									"case":	37,
									"scores":	[-4.659523176176366]
								}, {
									"case":	38,
									"scores":	[-4.659523176176366]
								}, {
									"case":	39,
									"scores":	[-4.659523176176366]
								}, {
									"case":	40,
									"scores":	[-4.659523176176366]
								}, {
									"case":	41,
									"scores":	[-4.659523176176366]
								}, {
									"case":	42,
									"scores":	[-4.659523176176366]
								}, {
									"case":	43,
									"scores":	[-4.659523176176366]
								}, {
									"case":	44,
									"scores":	[-4.659523176176366]
								}, {
									"case":	45,
									"scores":	[-4.659523176176366]
								}, {
									"case":	46,
									"scores":	[-4.659523176176366]
								}, {
									"case":	47,
									"scores":	[-4.659523176176366]
								}, {
									"case":	48,
									"scores":	[-4.659523176176366]
								}, {
									"case":	49,
									"scores":	[-4.659523176176366]
								}, {
									"case":	50,
									"scores":	[-4.659523176176366]
								}, {
									"case":	51,
									"scores":	[-4.659523176176366]
								}, {
									"case":	52,
									"scores":	[-4.659523176176366]
								}, {
									"case":	53,
									"scores":	[-4.659523176176366]
								}, {
									"case":	54,
									"scores":	[-4.659523176176366]
								}, {
									"case":	55,
									"scores":	[-4.659523176176366]
								}, {
									"case":	56,
									"scores":	[-4.659523176176366]
								}, {
									"case":	57,
									"scores":	[-4.659523176176366]
								}, {
									"case":	58,
									"scores":	[-4.659523176176366]
								}, {
									"case":	59,
									"scores":	[-4.659523176176366]
								}, {
									"case":	60,
									"scores":	[-4.659523176176366]
								}, {
									"case":	61,
									"scores":	[-4.659523176176366]
								}, {
									"case":	62,
									"scores":	[-4.659523176176366]
								}, {
									"case":	63,
									"scores":	[-4.659523176176366]
								}, {
									"case":	64,
									"scores":	[-4.659523176176366]
								}, {
									"case":	65,
									"scores":	[-4.659523176176366]
								}, {
									"case":	66,
									"scores":	[-4.659523176176366]
								}, {
									"case":	67,
									"scores":	[-4.659523176176366]
								}, {
									"case":	68,
									"scores":	[-4.659523176176366]
								}, {
									"case":	69,
									"scores":	[-4.659523176176366]
								}, {
									"case":	70,
									"scores":	[-4.659523176176366]
								}, {
									"case":	71,
									"scores":	[-4.659523176176366]
								}, {
									"case":	72,
									"scores":	[-4.659523176176366]
								}, {
									"case":	73,
									"scores":	[-4.659523176176366]
								}, {
									"case":	74,
									"scores":	[-4.659523176176366]
								}, {
									"case":	75,
									"scores":	[-4.659523176176366]
								}, {
									"case":	76,
									"scores":	[-4.659523176176366]
								}, {
									"case":	77,
									"scores":	[-4.659523176176366]
								}, {
									"case":	78,
									"scores":	[-4.659523176176366]
								}, {
									"case":	79,
									"scores":	[-4.659523176176366]
								}, {
									"case":	80,
									"scores":	[-4.659523176176366]
								}, {
									"case":	81,
									"scores":	[-4.659523176176366]
								}, {
									"case":	82,
									"scores":	[-4.659523176176366]
								}, {
									"case":	83,
									"scores":	[-4.659523176176366]
								}, {
									"case":	84,
									"scores":	[-4.659523176176366]
								}, {
									"case":	85,
									"scores":	[-4.659523176176366]
								}, {
									"case":	86,
									"scores":	[-4.659523176176366]
								}, {
									"case":	87,
									"scores":	[-4.659523176176366]
								}, {
									"case":	88,
									"scores":	[-4.659523176176366]
								}, {
									"case":	89,
									"scores":	[-4.659523176176366]
								}, {
									"case":	90,
									"scores":	[-4.659523176176366]
								}, {
									"case":	91,
									"scores":	[-4.659523176176366]
								}, {
									"case":	92,
									"scores":	[-4.659523176176366]
								}, {
									"case":	93,
									"scores":	[-4.659523176176366]
								}, {
									"case":	94,
									"scores":	[-4.659523176176366]
								}, {
									"case":	95,
									"scores":	[-4.659523176176366]
								}, {
									"case":	96,
									"scores":	[-4.659523176176366]
								}, {
									"case":	97,
									"scores":	[-4.659523176176366]
								}, {
									"case":	98,
									"scores":	[-4.659523176176366]
								}, {
									"case":	99,
									"scores":	[-4.659523176176366]
								}, {
									"case":	100,
									"scores":	[-4.659523176176366]
								}, {
									"case":	101,
									"scores":	[-4.659523176176366]
								}, {
									"case":	102,
									"scores":	[-4.659523176176366]
								}, {
									"case":	103,
									"scores":	[-4.659523176176366]
								}, {
									"case":	104,
									"scores":	[-4.659523176176366]
								}, {
									"case":	105,
									"scores":	[-4.659523176176366]
								}, {
									"case":	106,
									"scores":	[-4.659523176176366]
								}, {
									"case":	107,
									"scores":	[-4.659523176176366]
								}, {
									"case":	108,
									"scores":	[-4.659523176176366]
								}, {
									"case":	109,
									"scores":	[-4.659523176176366]
								}, {
									"case":	110,
									"scores":	[-4.659523176176366]
								}, {
									"case":	111,
									"scores":	[-4.659523176176366]
								}, {
									"case":	112,
									"scores":	[-4.659523176176366]
								}, {
									"case":	113,
									"scores":	[-4.659523176176366]
								}, {
									"case":	114,
									"scores":	[-4.659523176176366]
								}, {
									"case":	115,
									"scores":	[-4.659523176176366]
								}, {
									"case":	116,
									"scores":	[-4.659523176176366]
								}, {
									"case":	117,
									"scores":	[-4.659523176176366]
								}, {
									"case":	118,
									"scores":	[-4.659523176176366]
								}, {
									"case":	119,
									"scores":	[-4.659523176176366]
								}, {
									"case":	120,
									"scores":	[-4.659523176176366]
								}, {
									"case":	121,
									"scores":	[-4.659523176176366]
								}, {
									"case":	122,
									"scores":	[-4.659523176176366]
								}, {
									"case":	123,
									"scores":	[-4.659523176176366]
								}, {
									"case":	124,
									"scores":	[-4.659523176176366]
								}, {
									"case":	125,
									"scores":	[-4.659523176176366]
								}, {
									"case":	126,
									"scores":	[-4.659523176176366]
								}, {
									"case":	127,
									"scores":	[-4.659523176176366]
								}, {
									"case":	128,
									"scores":	[-4.659523176176366]
								}, {
									"case":	129,
									"scores":	[-4.659523176176366]
								}, {
									"case":	130,
									"scores":	[-4.659523176176366]
								}, {
									"case":	131,
									"scores":	[-4.659523176176366]
								}, {
									"case":	132,
									"scores":	[-4.659523176176366]
								}, {
									"case":	133,
									"scores":	[-4.659523176176366]
								}, {
									"case":	134,
									"scores":	[-4.659523176176366]
								}, {
									"case":	135,
									"scores":	[-4.659523176176366]
								}, {
									"case":	136,
									"scores":	[-4.659523176176366]
								}, {
									"case":	137,
									"scores":	[-4.659523176176366]
								}, {
									"case":	138,
									"scores":	[-4.659523176176366]
								}, {
									"case":	139,
									"scores":	[-4.659523176176366]
								}, {
									"case":	140,
									"scores":	[-4.659523176176366]
								}, {
									"case":	141,
									"scores":	[-4.659523176176366]
								}, {
									"case":	142,
									"scores":	[-4.659523176176366]
								}, {
									"case":	143,
									"scores":	[-4.659523176176366]
								}, {
									"case":	144,
									"scores":	[-4.659523176176366]
								}, {
									"case":	145,
									"scores":	[-4.659523176176366]
								}, {
									"case":	146,
									"scores":	[-4.659523176176366]
								}, {
									"case":	147,
									"scores":	[-4.659523176176366]
								}, {
									"case":	148,
									"scores":	[-4.659523176176366]
								}, {
									"case":	149,
									"scores":	[-4.659523176176366]
								}, {
									"case":	150,
									"scores":	[-4.659523176176366]
								}, {
									"case":	151,
									"scores":	[-4.659523176176366]
								}, {
									"case":	152,
									"scores":	[-4.659523176176366]
								}, {
									"case":	153,
									"scores":	[-4.659523176176366]
								}, {
									"case":	154,
									"scores":	[-4.659523176176366]
								}, {
									"case":	155,
									"scores":	[-4.659523176176366]
								}, {
									"case":	156,
									"scores":	[-4.659523176176366]
								}, {
									"case":	157,
									"scores":	[-4.659523176176366]
								}, {
									"case":	158,
									"scores":	[-4.659523176176366]
								}, {
									"case":	159,
									"scores":	[-4.659523176176366]
								}, {
									"case":	160,
									"scores":	[-4.659523176176366]
								}, {
									"case":	161,
									"scores":	[-4.659523176176366]
								}, {
									"case":	162,
									"scores":	[-4.659523176176366]
								}, {
									"case":	163,
									"scores":	[-4.659523176176366]
								}, {
									"case":	164,
									"scores":	[-4.659523176176366]
								}, {
									"case":	165,
									"scores":	[-4.659523176176366]
								}, {
									"case":	166,
									"scores":	[-4.659523176176366]
								}, {
									"case":	167,
									"scores":	[-4.659523176176366]
								}, {
									"case":	168,
									"scores":	[-4.659523176176366]
								}, {
									"case":	169,
									"scores":	[-4.659523176176366]
								}, {
									"case":	170,
									"scores":	[-4.659523176176366]
								}, {
									"case":	171,
									"scores":	[-4.659523176176366]
								}, {
									"case":	172,
									"scores":	[-4.659523176176366]
								}, {
									"case":	173,
									"scores":	[-4.659523176176366]
								}, {
									"case":	174,
									"scores":	[-4.659523176176366]
								}, {
									"case":	175,
									"scores":	[-4.659523176176366]
								}, {
									"case":	176,
									"scores":	[-4.659523176176366]
								}, {
									"case":	177,
									"scores":	[-4.659523176176366]
								}, {
									"case":	178,
									"scores":	[-4.659523176176366]
								}, {
									"case":	179,
									"scores":	[-4.659523176176366]
								}, {
									"case":	180,
									"scores":	[-4.659523176176366]
								}, {
									"case":	181,
									"scores":	[-4.659523176176366]
								}, {
									"case":	182,
									"scores":	[-4.659523176176366]
								}, {
									"case":	183,
									"scores":	[-4.659523176176366]
								}, {
									"case":	184,
									"scores":	[-4.659523176176366]
								}, {
									"case":	185,
									"scores":	[-4.659523176176366]
								}, {
									"case":	186,
									"scores":	[-4.659523176176366]
								}, {
									"case":	187,
									"scores":	[-4.659523176176366]
								}, {
									"case":	188,
									"scores":	[-4.659523176176366]
								}, {
									"case":	189,
									"scores":	[-4.659523176176366]
								}, {
									"case":	190,
									"scores":	[-4.659523176176366]
								}, {
									"case":	191,
									"scores":	[-4.659523176176366]
								}, {
									"case":	192,
									"scores":	[-4.659523176176366]
								}, {
									"case":	193,
									"scores":	[-4.659523176176366]
								}, {
									"case":	194,
									"scores":	[-4.659523176176366]
								}, {
									"case":	195,
									"scores":	[-4.659523176176366]
								}, {
									"case":	196,
									"scores":	[-4.659523176176366]
								}, {
									"case":	197,
									"scores":	[-4.659523176176366]
								}, {
									"case":	198,
									"scores":	[-4.659523176176366]
								}, {
									"case":	199,
									"scores":	[-4.659523176176366]
								}, {
									"case":	200,
									"scores":	[-4.659523176176366]
								}, {
									"case":	201,
									"scores":	[-4.659523176176366]
								}, {
									"case":	202,
									"scores":	[-4.659523176176366]
								}, {
									"case":	203,
									"scores":	[-4.659523176176366]
								}, {
									"case":	204,
									"scores":	[-4.659523176176366]
								}, {
									"case":	205,
									"scores":	[-4.659523176176366]
								}, {
									"case":	206,
									"scores":	[-4.659523176176366]
								}, {
									"case":	207,
									"scores":	[-4.659523176176366]
								}, {
									"case":	208,
									"scores":	[-4.659523176176366]
								}, {
									"case":	209,
									"scores":	[-4.659523176176366]
								}, {
									"case":	210,
									"scores":	[-4.659523176176366]
								}, {
									"case":	211,
									"scores":	[-4.659523176176366]
								}, {
									"case":	212,
									"scores":	[-4.659523176176366]
								}, {
									"case":	213,
									"scores":	[-4.659523176176366]
								}, {
									"case":	214,
									"scores":	[-4.659523176176366]
								}, {
									"case":	215,
									"scores":	[-4.659523176176366]
								}, {
									"case":	216,
									"scores":	[-4.659523176176366]
								}, {
									"case":	217,
									"scores":	[-4.659523176176366]
								}, {
									"case":	218,
									"scores":	[-4.659523176176366]
								}, {
									"case":	219,
									"scores":	[-9.5244081335763653, -9.4465306275763652, -8.1895223292763664, -9.2732324535763659, -9.5764858473763663, -10.012532935376367, -9.4548470245763667, -9.5950645083763639, -9.5950645083763639, -9.4873077335763654, -9.5244081335763653, -9.9924188553763642]
								}]
						}, {
							"switch":	78,
							"types":	[[18], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [4]],
							"begin_line":	659,
							"begin_column":	2,
							"end_line":	668,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException))) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((((ctor_flags & 2) ? 1 : 0)) || __is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException))) && strstr(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if ((((ctor_flags & 2) ? 1 : 0) && strstr(path, \"glob://\") != path) || __is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException))) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0)) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && __stpcpy(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && expand_filepath(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && realpath(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && stpcpy(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && strcat(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && strcpy(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && strpbrk(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && strsep(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && strstr(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && strtok(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && tempnam(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && tsrm_realpath(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if (((ctor_flags & 2) ? 1 : 0) && virtual_realpath(path, \"glob://\") != path) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n", "if ((((ctor_flags & 2) ? 1 : 0) && strstr(path, \"glob://\") != path) && !__is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException))) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4636405934281465, -2.2756742934281462, -4.4714255218281451, -3.7987267934281461, -4.939948539428145, -5.3332158794281455, -4.6303364634281463, -5.1586340924281462, -5.1586340924281462, -4.1692897934281463, -4.4636405934281465, -5.244233033428146]
								}, {
									"case":	2,
									"scores":	[-3.7037185834281461, -1.5157522834281449, -3.7115035118281452, -3.0388047834281458, -4.1800265294281456, -4.5732938694281451, -3.8704144534281459, -4.3987120824281458, -4.3987120824281458, -3.4093677834281459, -3.7037185834281461, -4.4843110234281456]
								}, {
									"case":	3,
									"scores":	[-3.7037185834281461, -1.5157522834281449, -3.7115035118281452, -3.0388047834281458, -4.1800265294281456, -4.5732938694281451, -3.8704144534281459, -4.3987120824281458, -4.3987120824281458, -3.4093677834281459, -3.7037185834281461, -4.4843110234281456]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.7037185834281461, -1.5157522834281449, -3.7115035118281452, -3.0388047834281458, -4.1800265294281456, -4.5732938694281451, -3.8704144534281459, -4.3987120824281458, -4.3987120824281458, -3.4093677834281459, -3.7037185834281461, -4.4843110234281456]
								}]
						}, {
							"switch":	81,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	659,
							"begin_column":	2,
							"end_line":	668,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException)))\n    if (((ctor_flags & 2) ? 1 : 0) && strstr(path, \"glob://\") != path) {\n        spprintf(&path, 0, \"glob://%s\", path);\n        spl_filesystem_dir_open(intern, path);\n        _efree((path));\n    } else {\n        spl_filesystem_dir_open(intern, path);\n    }\n", "if (!__is_neg(\"\", \"L659\", 12, &(ctor_flags), sizeof (ctor_flags), &(path), sizeof (path), &(intern), sizeof (intern), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException)) && (((ctor_flags & 2) ? 1 : 0) && strstr(path, \"glob://\") != path)) {\n    spprintf(&path, 0, \"glob://%s\", path);\n    spl_filesystem_dir_open(intern, path);\n    _efree((path));\n} else {\n    spl_filesystem_dir_open(intern, path);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.7623099461763658, -4.5743436461763656, -6.3825518845763654, -6.0973961461763659, -7.2386178921763662, -7.6318852321763657, -6.9290058161763657, -6.2489591551763652, -6.2489591551763652, -6.4679591461763657, -6.7623099461763658, -7.5429023861763653]
								}, {
									"case":	2,
									"scores":	[-5.2758856171763657, -3.087919317176365, -5.2836705455763653, -4.6109718171763658, -5.7521935631763661, -6.1454609031763656, -5.4425814871763656, -5.9708791161763664, -5.9708791161763664, -4.9815348171763656, -5.2758856171763657, -6.0564780571763652]
								}]
						}]
				}, {
					"line":	669,
					"switches":	[{
							"switch":	82,
							"types":	[[], [], [], [], [219], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], [], [], [], [], [], []],
							"begin_line":	670,
							"begin_column":	0,
							"end_line":	670,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L670\", 105, &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->std.ce), sizeof (intern->std.ce), &(path), sizeof (path), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->std.properties), sizeof (intern->std.properties), &(intern->std.properties_table), sizeof (intern->std.properties_table), &(intern->std.guards), sizeof (intern->std.guards), &(spl_ce_RecursiveDirectoryIterator->type), sizeof (spl_ce_RecursiveDirectoryIterator->type), &(spl_ce_RecursiveDirectoryIterator->name), sizeof (spl_ce_RecursiveDirectoryIterator->name), &(spl_ce_RecursiveDirectoryIterator->name_length), sizeof (spl_ce_RecursiveDirectoryIterator->name_length), &(spl_ce_RecursiveDirectoryIterator->parent), sizeof (spl_ce_RecursiveDirectoryIterator->parent), &(spl_ce_RecursiveDirectoryIterator->refcount), sizeof (spl_ce_RecursiveDirectoryIterator->refcount), &(spl_ce_RecursiveDirectoryIterator->ce_flags), sizeof (spl_ce_RecursiveDirectoryIterator->ce_flags), &(spl_ce_RecursiveDirectoryIterator->default_properties_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_table), &(spl_ce_RecursiveDirectoryIterator->default_static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_table), &(spl_ce_RecursiveDirectoryIterator->static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->static_members_table), &(spl_ce_RecursiveDirectoryIterator->default_properties_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_count), &(spl_ce_RecursiveDirectoryIterator->default_static_members_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_count), &(spl_ce_RecursiveDirectoryIterator->constructor), sizeof (spl_ce_RecursiveDirectoryIterator->constructor), &(spl_ce_RecursiveDirectoryIterator->destructor), sizeof (spl_ce_RecursiveDirectoryIterator->destructor), &(spl_ce_RecursiveDirectoryIterator->clone), sizeof (spl_ce_RecursiveDirectoryIterator->clone), &(spl_ce_RecursiveDirectoryIterator->__get), sizeof (spl_ce_RecursiveDirectoryIterator->__get), &(spl_ce_RecursiveDirectoryIterator->__set), sizeof (spl_ce_RecursiveDirectoryIterator->__set), &(spl_ce_RecursiveDirectoryIterator->__unset), sizeof (spl_ce_RecursiveDirectoryIterator->__unset), &(spl_ce_RecursiveDirectoryIterator->__isset), sizeof (spl_ce_RecursiveDirectoryIterator->__isset), &(spl_ce_RecursiveDirectoryIterator->__call), sizeof (spl_ce_RecursiveDirectoryIterator->__call), &(spl_ce_RecursiveDirectoryIterator->__callstatic), sizeof (spl_ce_RecursiveDirectoryIterator->__callstatic), &(spl_ce_RecursiveDirectoryIterator->__tostring), sizeof (spl_ce_RecursiveDirectoryIterator->__tostring), &(spl_ce_RecursiveDirectoryIterator->serialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->serialize_func), &(spl_ce_RecursiveDirectoryIterator->unserialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize_func), &(spl_ce_RecursiveDirectoryIterator->create_object), sizeof (spl_ce_RecursiveDirectoryIterator->create_object), &(spl_ce_RecursiveDirectoryIterator->get_iterator), sizeof (spl_ce_RecursiveDirectoryIterator->get_iterator), &(spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), sizeof (spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), &(spl_ce_RecursiveDirectoryIterator->get_static_method), sizeof (spl_ce_RecursiveDirectoryIterator->get_static_method), &(spl_ce_RecursiveDirectoryIterator->serialize), sizeof (spl_ce_RecursiveDirectoryIterator->serialize), &(spl_ce_RecursiveDirectoryIterator->unserialize), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize), &(spl_ce_RecursiveDirectoryIterator->interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->interfaces), &(spl_ce_RecursiveDirectoryIterator->num_interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->num_interfaces), &(spl_ce_RecursiveDirectoryIterator->traits), sizeof (spl_ce_RecursiveDirectoryIterator->traits), &(spl_ce_RecursiveDirectoryIterator->num_traits), sizeof (spl_ce_RecursiveDirectoryIterator->num_traits), &(spl_ce_RecursiveDirectoryIterator->trait_aliases), sizeof (spl_ce_RecursiveDirectoryIterator->trait_aliases), &(spl_ce_RecursiveDirectoryIterator->trait_precedences), sizeof (spl_ce_RecursiveDirectoryIterator->trait_precedences), &(spl_ce_RecursiveDirectoryIterator->type), sizeof (spl_ce_RecursiveDirectoryIterator->type), &(spl_ce_RecursiveDirectoryIterator->name), sizeof (spl_ce_RecursiveDirectoryIterator->name), &(spl_ce_RecursiveDirectoryIterator->name_length), sizeof (spl_ce_RecursiveDirectoryIterator->name_length), &(spl_ce_RecursiveDirectoryIterator->parent), sizeof (spl_ce_RecursiveDirectoryIterator->parent), &(spl_ce_RecursiveDirectoryIterator->refcount), sizeof (spl_ce_RecursiveDirectoryIterator->refcount), &(spl_ce_RecursiveDirectoryIterator->ce_flags), sizeof (spl_ce_RecursiveDirectoryIterator->ce_flags), &(spl_ce_RecursiveDirectoryIterator->default_properties_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_table), &(spl_ce_RecursiveDirectoryIterator->default_static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_table), &(spl_ce_RecursiveDirectoryIterator->static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->static_members_table), &(spl_ce_RecursiveDirectoryIterator->default_properties_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_count), &(spl_ce_RecursiveDirectoryIterator->default_static_members_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_count), &(spl_ce_RecursiveDirectoryIterator->constructor), sizeof (spl_ce_RecursiveDirectoryIterator->constructor), &(spl_ce_RecursiveDirectoryIterator->destructor), sizeof (spl_ce_RecursiveDirectoryIterator->destructor), &(spl_ce_RecursiveDirectoryIterator->clone), sizeof (spl_ce_RecursiveDirectoryIterator->clone), &(spl_ce_RecursiveDirectoryIterator->__get), sizeof (spl_ce_RecursiveDirectoryIterator->__get), &(spl_ce_RecursiveDirectoryIterator->__set), sizeof (spl_ce_RecursiveDirectoryIterator->__set), &(spl_ce_RecursiveDirectoryIterator->__unset), sizeof (spl_ce_RecursiveDirectoryIterator->__unset), &(spl_ce_RecursiveDirectoryIterator->__isset), sizeof (spl_ce_RecursiveDirectoryIterator->__isset), &(spl_ce_RecursiveDirectoryIterator->__call), sizeof (spl_ce_RecursiveDirectoryIterator->__call), &(spl_ce_RecursiveDirectoryIterator->__callstatic), sizeof (spl_ce_RecursiveDirectoryIterator->__callstatic), &(spl_ce_RecursiveDirectoryIterator->__tostring), sizeof (spl_ce_RecursiveDirectoryIterator->__tostring), &(spl_ce_RecursiveDirectoryIterator->serialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->serialize_func), &(spl_ce_RecursiveDirectoryIterator->unserialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize_func), &(spl_ce_RecursiveDirectoryIterator->create_object), sizeof (spl_ce_RecursiveDirectoryIterator->create_object), &(spl_ce_RecursiveDirectoryIterator->get_iterator), sizeof (spl_ce_RecursiveDirectoryIterator->get_iterator), &(spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), sizeof (spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), &(spl_ce_RecursiveDirectoryIterator->get_static_method), sizeof (spl_ce_RecursiveDirectoryIterator->get_static_method), &(spl_ce_RecursiveDirectoryIterator->serialize), sizeof (spl_ce_RecursiveDirectoryIterator->serialize), &(spl_ce_RecursiveDirectoryIterator->unserialize), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize), &(spl_ce_RecursiveDirectoryIterator->interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->interfaces), &(spl_ce_RecursiveDirectoryIterator->num_interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->num_interfaces), &(spl_ce_RecursiveDirectoryIterator->traits), sizeof (spl_ce_RecursiveDirectoryIterator->traits), &(spl_ce_RecursiveDirectoryIterator->num_traits), sizeof (spl_ce_RecursiveDirectoryIterator->num_traits), &(spl_ce_RecursiveDirectoryIterator->trait_aliases), sizeof (spl_ce_RecursiveDirectoryIterator->trait_aliases), &(spl_ce_RecursiveDirectoryIterator->trait_precedences), sizeof (spl_ce_RecursiveDirectoryIterator->trait_precedences)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	2,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	3,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	4,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	5,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	6,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	7,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	8,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	9,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	10,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	11,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	12,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	13,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	14,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	15,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	16,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	17,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	18,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	19,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	20,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	21,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	22,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	23,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	24,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	25,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	26,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	27,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	28,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	29,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	30,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	31,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	32,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	33,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	34,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	35,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	36,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	37,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	38,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	39,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	40,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	41,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	42,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	43,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	44,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	45,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	46,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	47,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	48,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	49,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	50,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	51,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	52,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	53,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	54,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	55,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	56,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	57,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	58,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	59,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	60,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	61,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	62,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	63,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	64,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	65,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	66,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	67,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	68,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	69,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	70,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	71,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	72,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	73,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	74,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	75,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	76,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	77,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	78,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	79,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	80,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	81,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	82,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	83,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	84,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	85,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	86,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	87,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	88,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	89,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	90,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	91,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	92,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	93,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	94,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	95,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	96,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	97,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	98,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	99,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	100,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	101,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	102,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	103,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	104,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	105,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	106,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	107,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	108,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	109,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	110,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	111,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	112,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	113,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	114,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	115,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	116,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	117,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	118,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	119,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	120,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	121,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	122,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	123,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	124,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	125,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	126,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	127,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	128,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	129,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	130,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	131,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	132,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	133,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	134,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	135,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	136,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	137,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	138,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	139,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	140,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	141,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	142,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	143,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	144,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	145,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	146,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	147,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	148,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	149,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	150,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	151,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	152,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	153,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	154,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	155,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	156,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	157,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	158,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	159,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	160,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	161,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	162,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	163,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	164,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	165,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	166,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	167,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	168,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	169,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	170,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	171,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	172,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	173,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	174,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	175,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	176,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	177,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	178,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	179,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	180,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	181,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	182,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	183,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	184,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	185,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	186,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	187,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	188,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	189,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	190,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	191,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	192,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	193,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	194,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	195,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	196,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	197,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	198,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	199,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	200,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	201,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	202,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	203,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	204,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	205,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	206,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	207,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	208,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	209,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	210,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	211,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	212,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	213,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	214,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	215,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	216,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	217,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	218,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	219,
									"scores":	[-5.9834403951486133, -5.2430819912486131, -5.2430819912486131, -7.233866253448614, -5.7981559572486132, -6.9491806094486126, -7.3468472384486132, -7.095671558448613, -6.3190615324486128, -7.3989249522486134, -7.814857960248613, -7.2772861294486129, -7.3097468384486124, -7.3468472384486132, -7.814857960248613, -8.3699319262486132, -8.33478212944861, -7.6229580124486134, -8.1238930124486135, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.3699319262486132, -8.33478212944861, -7.6229580124486134, -8.33478212944861, -8.33478212944861, -7.6229580124486134, -8.1238930124486135, -8.3699319262486132, -8.3699319262486132, -8.3699319262486132, -8.33478212944861, -8.3699319262486132, -8.1238930124486135, -8.33478212944861, -7.6229580124486134, -8.3699319262486132, -8.1238930124486135, -8.1238930124486135, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.1238930124486135, -8.1238930124486135, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.33478212944861, -8.1238930124486135, -8.33478212944861, -8.1238930124486135, -8.33478212944861, -8.33478212944861, -8.1238930124486135, -8.33478212944861, -7.6229580124486134, -8.3699319262486132, -8.1238930124486135, -8.1238930124486135, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.1238930124486135, -8.1238930124486135, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.33478212944861, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.1238930124486135, -8.33478212944861, -8.1238930124486135, -8.33478212944861, -8.1238930124486135, -8.33478212944861, -8.33478212944861]
								}]
						}, {
							"switch":	83,
							"types":	[[], [], [1], [], [], [], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376], [], [], [], [], [], [], [2, 3, 4, 5, 6, 7, 8], [], [], [9]],
							"begin_line":	670,
							"begin_column":	2,
							"end_line":	670,
							"end_column":	118,
							"patch_codes":	["if (!__is_neg(\"\", \"L670\", 105, &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(intern->u.dir.is_recursive), sizeof (intern->u.dir.is_recursive), &(intern->std.ce), sizeof (intern->std.ce), &(path), sizeof (path), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(intern->flags), sizeof (intern->flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException), &(intern->u.dir.dirp), sizeof (intern->u.dir.dirp), &(intern->u.dir.sub_path), sizeof (intern->u.dir.sub_path), &(intern->u.dir.sub_path_len), sizeof (intern->u.dir.sub_path_len), &(intern->u.dir.index), sizeof (intern->u.dir.index), &(intern->u.dir.func_rewind), sizeof (intern->u.dir.func_rewind), &(intern->u.dir.func_next), sizeof (intern->u.dir.func_next), &(intern->u.dir.func_valid), sizeof (intern->u.dir.func_valid), &(intern->oth), sizeof (intern->oth), &(intern->oth_handler), sizeof (intern->oth_handler), &(intern->_path), sizeof (intern->_path), &(intern->_path_len), sizeof (intern->_path_len), &(intern->orig_path), sizeof (intern->orig_path), &(intern->file_name), sizeof (intern->file_name), &(intern->file_name_len), sizeof (intern->file_name_len), &(intern->type), sizeof (intern->type), &(intern->file_class), sizeof (intern->file_class), &(intern->info_class), sizeof (intern->info_class), &(intern->std.properties), sizeof (intern->std.properties), &(intern->std.properties_table), sizeof (intern->std.properties_table), &(intern->std.guards), sizeof (intern->std.guards), &(spl_ce_RecursiveDirectoryIterator->type), sizeof (spl_ce_RecursiveDirectoryIterator->type), &(spl_ce_RecursiveDirectoryIterator->name), sizeof (spl_ce_RecursiveDirectoryIterator->name), &(spl_ce_RecursiveDirectoryIterator->name_length), sizeof (spl_ce_RecursiveDirectoryIterator->name_length), &(spl_ce_RecursiveDirectoryIterator->parent), sizeof (spl_ce_RecursiveDirectoryIterator->parent), &(spl_ce_RecursiveDirectoryIterator->refcount), sizeof (spl_ce_RecursiveDirectoryIterator->refcount), &(spl_ce_RecursiveDirectoryIterator->ce_flags), sizeof (spl_ce_RecursiveDirectoryIterator->ce_flags), &(spl_ce_RecursiveDirectoryIterator->default_properties_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_table), &(spl_ce_RecursiveDirectoryIterator->default_static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_table), &(spl_ce_RecursiveDirectoryIterator->static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->static_members_table), &(spl_ce_RecursiveDirectoryIterator->default_properties_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_count), &(spl_ce_RecursiveDirectoryIterator->default_static_members_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_count), &(spl_ce_RecursiveDirectoryIterator->constructor), sizeof (spl_ce_RecursiveDirectoryIterator->constructor), &(spl_ce_RecursiveDirectoryIterator->destructor), sizeof (spl_ce_RecursiveDirectoryIterator->destructor), &(spl_ce_RecursiveDirectoryIterator->clone), sizeof (spl_ce_RecursiveDirectoryIterator->clone), &(spl_ce_RecursiveDirectoryIterator->__get), sizeof (spl_ce_RecursiveDirectoryIterator->__get), &(spl_ce_RecursiveDirectoryIterator->__set), sizeof (spl_ce_RecursiveDirectoryIterator->__set), &(spl_ce_RecursiveDirectoryIterator->__unset), sizeof (spl_ce_RecursiveDirectoryIterator->__unset), &(spl_ce_RecursiveDirectoryIterator->__isset), sizeof (spl_ce_RecursiveDirectoryIterator->__isset), &(spl_ce_RecursiveDirectoryIterator->__call), sizeof (spl_ce_RecursiveDirectoryIterator->__call), &(spl_ce_RecursiveDirectoryIterator->__callstatic), sizeof (spl_ce_RecursiveDirectoryIterator->__callstatic), &(spl_ce_RecursiveDirectoryIterator->__tostring), sizeof (spl_ce_RecursiveDirectoryIterator->__tostring), &(spl_ce_RecursiveDirectoryIterator->serialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->serialize_func), &(spl_ce_RecursiveDirectoryIterator->unserialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize_func), &(spl_ce_RecursiveDirectoryIterator->create_object), sizeof (spl_ce_RecursiveDirectoryIterator->create_object), &(spl_ce_RecursiveDirectoryIterator->get_iterator), sizeof (spl_ce_RecursiveDirectoryIterator->get_iterator), &(spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), sizeof (spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), &(spl_ce_RecursiveDirectoryIterator->get_static_method), sizeof (spl_ce_RecursiveDirectoryIterator->get_static_method), &(spl_ce_RecursiveDirectoryIterator->serialize), sizeof (spl_ce_RecursiveDirectoryIterator->serialize), &(spl_ce_RecursiveDirectoryIterator->unserialize), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize), &(spl_ce_RecursiveDirectoryIterator->interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->interfaces), &(spl_ce_RecursiveDirectoryIterator->num_interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->num_interfaces), &(spl_ce_RecursiveDirectoryIterator->traits), sizeof (spl_ce_RecursiveDirectoryIterator->traits), &(spl_ce_RecursiveDirectoryIterator->num_traits), sizeof (spl_ce_RecursiveDirectoryIterator->num_traits), &(spl_ce_RecursiveDirectoryIterator->trait_aliases), sizeof (spl_ce_RecursiveDirectoryIterator->trait_aliases), &(spl_ce_RecursiveDirectoryIterator->trait_precedences), sizeof (spl_ce_RecursiveDirectoryIterator->trait_precedences), &(spl_ce_RecursiveDirectoryIterator->type), sizeof (spl_ce_RecursiveDirectoryIterator->type), &(spl_ce_RecursiveDirectoryIterator->name), sizeof (spl_ce_RecursiveDirectoryIterator->name), &(spl_ce_RecursiveDirectoryIterator->name_length), sizeof (spl_ce_RecursiveDirectoryIterator->name_length), &(spl_ce_RecursiveDirectoryIterator->parent), sizeof (spl_ce_RecursiveDirectoryIterator->parent), &(spl_ce_RecursiveDirectoryIterator->refcount), sizeof (spl_ce_RecursiveDirectoryIterator->refcount), &(spl_ce_RecursiveDirectoryIterator->ce_flags), sizeof (spl_ce_RecursiveDirectoryIterator->ce_flags), &(spl_ce_RecursiveDirectoryIterator->default_properties_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_table), &(spl_ce_RecursiveDirectoryIterator->default_static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_table), &(spl_ce_RecursiveDirectoryIterator->static_members_table), sizeof (spl_ce_RecursiveDirectoryIterator->static_members_table), &(spl_ce_RecursiveDirectoryIterator->default_properties_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_properties_count), &(spl_ce_RecursiveDirectoryIterator->default_static_members_count), sizeof (spl_ce_RecursiveDirectoryIterator->default_static_members_count), &(spl_ce_RecursiveDirectoryIterator->constructor), sizeof (spl_ce_RecursiveDirectoryIterator->constructor), &(spl_ce_RecursiveDirectoryIterator->destructor), sizeof (spl_ce_RecursiveDirectoryIterator->destructor), &(spl_ce_RecursiveDirectoryIterator->clone), sizeof (spl_ce_RecursiveDirectoryIterator->clone), &(spl_ce_RecursiveDirectoryIterator->__get), sizeof (spl_ce_RecursiveDirectoryIterator->__get), &(spl_ce_RecursiveDirectoryIterator->__set), sizeof (spl_ce_RecursiveDirectoryIterator->__set), &(spl_ce_RecursiveDirectoryIterator->__unset), sizeof (spl_ce_RecursiveDirectoryIterator->__unset), &(spl_ce_RecursiveDirectoryIterator->__isset), sizeof (spl_ce_RecursiveDirectoryIterator->__isset), &(spl_ce_RecursiveDirectoryIterator->__call), sizeof (spl_ce_RecursiveDirectoryIterator->__call), &(spl_ce_RecursiveDirectoryIterator->__callstatic), sizeof (spl_ce_RecursiveDirectoryIterator->__callstatic), &(spl_ce_RecursiveDirectoryIterator->__tostring), sizeof (spl_ce_RecursiveDirectoryIterator->__tostring), &(spl_ce_RecursiveDirectoryIterator->serialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->serialize_func), &(spl_ce_RecursiveDirectoryIterator->unserialize_func), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize_func), &(spl_ce_RecursiveDirectoryIterator->create_object), sizeof (spl_ce_RecursiveDirectoryIterator->create_object), &(spl_ce_RecursiveDirectoryIterator->get_iterator), sizeof (spl_ce_RecursiveDirectoryIterator->get_iterator), &(spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), sizeof (spl_ce_RecursiveDirectoryIterator->interface_gets_implemented), &(spl_ce_RecursiveDirectoryIterator->get_static_method), sizeof (spl_ce_RecursiveDirectoryIterator->get_static_method), &(spl_ce_RecursiveDirectoryIterator->serialize), sizeof (spl_ce_RecursiveDirectoryIterator->serialize), &(spl_ce_RecursiveDirectoryIterator->unserialize), sizeof (spl_ce_RecursiveDirectoryIterator->unserialize), &(spl_ce_RecursiveDirectoryIterator->interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->interfaces), &(spl_ce_RecursiveDirectoryIterator->num_interfaces), sizeof (spl_ce_RecursiveDirectoryIterator->num_interfaces), &(spl_ce_RecursiveDirectoryIterator->traits), sizeof (spl_ce_RecursiveDirectoryIterator->traits), &(spl_ce_RecursiveDirectoryIterator->num_traits), sizeof (spl_ce_RecursiveDirectoryIterator->num_traits), &(spl_ce_RecursiveDirectoryIterator->trait_aliases), sizeof (spl_ce_RecursiveDirectoryIterator->trait_aliases), &(spl_ce_RecursiveDirectoryIterator->trait_precedences), sizeof (spl_ce_RecursiveDirectoryIterator->trait_precedences)))\n    intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0;\n", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, -1)", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, 0)", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, 1)", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, 16)", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, 2)", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, 4096)", "instanceof_function_ex(intern->std.ce, spl_ce_RecursiveDirectoryIterator, 8192)", "{\n}\n", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((&ctor_flags)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&error_handling)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&flags)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&ht)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&len)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&parsed)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&path)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&return_value)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&return_value_ptr)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&return_value_used)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((&this_ptr)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&ctor_flags)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&error_handling)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&flags)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&ht)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&intern)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&len)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&parsed)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&path)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&return_value)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&return_value_ptr)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&return_value_used)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, (&this_ptr)) ? 1 : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0 * ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0 * flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0 * ht) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0 * len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0 * parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0 * return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags != flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags != len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags != parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags * flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags * ht) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags * len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags * parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags * return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags + 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags + flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags + len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags + parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags - 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags - flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags - len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags - parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags == flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags == len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ctor_flags == parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (error_handling != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (error_handling == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags * ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags * ht) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags * len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags * parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags * return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags + 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags - 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (flags == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht != ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht != flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht != len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht != parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht != return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht * ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht * flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht * len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht * parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht * return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht + 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht + ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht + flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht + len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht + parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht + return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht - 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht - ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht - flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht - len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht - parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht - return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht == ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht == flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht == len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht == parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (ht == return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->_path != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->_path_len != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->file_class != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->file_name != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->file_name_len != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->flags != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->info_class != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->orig_path != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->oth != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->oth_handler != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->std.ce != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->std.guards != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->std.properties != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->std.properties_table != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->type != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.dirp != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.func_next != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.func_rewind != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.func_valid != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.index != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.is_recursive != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.sub_path != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (intern->u.dir.sub_path_len != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len != flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len * ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len * flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len * ht) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len * parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len * return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len + 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len + flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len - 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len - flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (len == flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed != flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed != len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed * ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed * flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed * ht) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed * len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed * return_value_used) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed + 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed + flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed + len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed - 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed - flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed - len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed == flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (parsed == len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (path != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (path == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value != this_ptr) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value == this_ptr) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_ptr != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_ptr == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used != ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used != flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used != len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used != parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used * ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used * flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used * ht) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used * len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used * parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used + 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used + ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used + flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used + len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used + parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used - 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used - ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used - flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used - len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used - parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used == ctor_flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used == flags) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used == len) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (return_value_used == parsed) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__call != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__callstatic != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__get != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__isset != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__set != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__tostring != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->__unset != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->ce_flags != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->clone != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->constructor != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->create_object != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->default_properties_count != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->default_properties_table != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->default_static_members_count != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->default_static_members_table != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->destructor != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->get_iterator != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->get_static_method != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->interface_gets_implemented != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->interfaces != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->name != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->name_length != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->num_interfaces != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->num_traits != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->parent != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->refcount != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->serialize != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->serialize_func != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->static_members_table != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->trait_aliases != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->trait_precedences != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->traits != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->type != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->unserialize != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RecursiveDirectoryIterator->unserialize_func != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_RuntimeException != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (spl_ce_UnexpectedValueException != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (this_ptr != 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? (this_ptr == 0) : 0", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0 * ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0 * flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0 * ht)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0 * len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0 * parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0 * return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags != flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags != len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags != parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags * flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags * ht)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags * len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags * parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags * return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags + 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags + flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags + len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags + parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags - 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags - flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags - len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags - parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags == flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags == len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ctor_flags == parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (error_handling != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (error_handling == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags * ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags * ht)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags * len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags * parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags * return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags + 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags - 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (flags == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht != ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht != flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht != len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht != parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht != return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht * ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht * flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht * len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht * parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht * return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht + 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht + ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht + flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht + len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht + parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht + return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht - 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht - ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht - flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht - len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht - parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht - return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht == ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht == flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht == len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht == parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (ht == return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (intern != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (intern == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len != flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len * ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len * flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len * ht)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len * parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len * return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len + 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len + flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len - 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len - flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (len == flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed != flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed != len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed * ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed * flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed * ht)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed * len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed * return_value_used)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed + 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed + flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed + len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed - 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed - flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed - len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed == flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (parsed == len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (path != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (path == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value != this_ptr)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value == this_ptr)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_ptr != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_ptr == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used != ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used != flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used != len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used != parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used * ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used * flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used * ht)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used * len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used * parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used + 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used + ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used + flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used + len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used + parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used - 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used - ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used - flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used - len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used - parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used == 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used == ctor_flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used == flags)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used == len)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (return_value_used == parsed)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (this_ptr != 0)", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : (this_ptr == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6348855375486133, -4.9833512010486132, -4.9833512010486132, -5.5085395820486136, -5.1911408710486135, -5.3217903810486131, -5.4111030510486131, -4.7461892510486132, -4.7609202010486138, -5.8874109970486135, -6.1916954910486135, -5.577798921048613, -5.1167522510486139, -5.4111030510486131, -6.1916954910486135, -6.399485161048613, -6.1108570610486135, -5.3195860310486136, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.399485161048613, -6.1108570610486135, -5.3195860310486136, -6.1108570610486135, -6.1108570610486135, -5.3195860310486136, -5.6415970610486132, -6.399485161048613, -6.399485161048613, -6.399485161048613, -6.1108570610486135, -6.399485161048613, -5.6415970610486132, -6.1108570610486135, -5.3195860310486136, -6.399485161048613, -5.6415970610486132, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -5.6415970610486132, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -6.1108570610486135, -5.6415970610486132, -6.1108570610486135, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135, -5.6415970610486132, -6.1108570610486135, -5.3195860310486136, -6.399485161048613, -5.6415970610486132, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -5.6415970610486132, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -6.1108570610486135, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -5.6415970610486132, -6.1108570610486135, -5.6415970610486132, -6.1108570610486135, -5.6415970610486132, -6.1108570610486135, -6.1108570610486135]
								}, {
									"case":	2,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	3,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	4,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	5,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	6,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	7,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	8,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	9,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	10,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	11,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	12,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	13,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	14,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	15,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	16,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	17,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	18,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	19,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	20,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	21,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	22,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	23,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	24,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	25,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	26,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	27,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	28,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	29,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	30,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	31,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	32,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	33,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	34,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	35,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	36,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	37,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	38,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	39,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	40,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	41,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	42,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	43,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	44,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	45,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	46,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	47,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	48,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	49,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	50,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	51,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	52,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	53,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	54,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	55,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	56,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	57,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	58,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	59,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	60,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	61,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	62,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	63,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	64,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	65,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	66,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	67,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	68,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	69,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	70,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	71,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	72,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	73,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	74,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	75,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	76,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	77,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	78,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	79,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	80,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	81,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	82,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	83,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	84,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	85,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	86,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	87,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	88,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	89,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	90,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	91,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	92,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	93,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	94,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	95,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	96,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	97,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	98,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	99,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	100,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	101,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	102,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	103,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	104,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	105,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	106,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	107,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	108,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	109,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	110,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	111,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	112,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	113,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	114,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	115,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	116,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	117,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	118,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	119,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	120,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	121,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	122,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	123,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	124,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	125,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	126,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	127,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	128,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	129,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	130,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	131,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	132,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	133,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	134,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	135,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	136,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	137,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	138,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	139,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	140,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	141,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	142,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	143,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	144,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	145,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	146,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	147,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	148,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	149,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	150,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	151,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	152,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	153,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	154,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	155,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	156,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	157,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	158,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	159,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	160,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	161,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	162,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	163,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	164,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	165,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	166,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	167,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	168,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	169,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	170,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	171,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	172,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	173,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	174,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	175,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	176,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	177,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	178,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	179,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	180,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	181,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	182,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	183,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	184,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	185,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	186,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	187,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	188,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	189,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	190,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	191,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	192,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	193,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	194,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	195,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	196,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	197,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	198,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	199,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	200,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	201,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	202,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	203,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	204,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	205,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	206,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	207,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	208,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	209,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	210,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	211,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	212,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	213,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	214,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	215,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	216,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	217,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	218,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	219,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	220,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	221,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	222,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	223,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	224,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	225,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	226,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	227,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	228,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	229,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	230,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	231,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	232,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	233,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	234,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	235,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	236,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	237,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	238,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	239,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	240,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	241,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	242,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	243,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	244,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	245,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	246,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	247,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	248,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	249,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	250,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	251,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	252,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	253,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	254,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	255,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	256,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	257,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	258,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	259,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	260,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	261,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	262,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	263,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	264,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	265,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	266,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	267,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	268,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	269,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	270,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	271,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	272,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	273,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	274,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	275,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	276,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	277,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	278,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	279,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	280,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	281,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	282,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	283,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	284,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	285,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	286,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	287,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	288,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	289,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	290,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	291,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	292,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	293,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	294,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	295,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	296,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	297,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	298,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	299,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	300,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	301,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	302,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	303,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	304,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	305,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	306,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	307,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	308,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	309,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	310,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	311,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	312,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	313,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	314,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	315,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	316,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	317,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	318,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	319,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	320,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	321,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	322,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	323,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	324,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	325,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	326,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	327,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	328,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	329,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	330,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	331,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	332,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	333,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	334,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	335,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	336,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	337,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	338,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	339,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	340,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	341,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	342,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	343,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	344,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	345,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	346,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	347,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	348,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	349,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	350,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	351,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	352,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	353,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	354,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	355,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	356,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	357,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	358,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	359,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	360,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	361,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	362,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	363,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	364,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	365,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	366,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	367,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	368,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	369,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	370,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	371,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	372,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	373,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	374,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	375,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	376,
									"scores":	[-4.3968879810486134]
								}]
						}]
				}, {
					"line":	671,
					"switches":	[{
							"switch":	84,
							"types":	[[], [], [], [], [218], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [], [], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [], [], []],
							"begin_line":	672,
							"begin_column":	0,
							"end_line":	672,
							"end_column":	0,
							"patch_codes":	["memset(&intern->_path, 0, sizeof (*(&intern->_path)))", "memset(&intern->_path_len, 0, sizeof (*(&intern->_path_len)))", "memset(&intern->file_class, 0, sizeof (*(&intern->file_class)))", "memset(&intern->file_name, 0, sizeof (*(&intern->file_name)))", "memset(&intern->file_name_len, 0, sizeof (*(&intern->file_name_len)))", "memset(&intern->flags, 0, sizeof (*(&intern->flags)))", "memset(&intern->info_class, 0, sizeof (*(&intern->info_class)))", "memset(&intern->it, 0, sizeof (*(&intern->it)))", "memset(&intern->orig_path, 0, sizeof (*(&intern->orig_path)))", "memset(&intern->oth, 0, sizeof (*(&intern->oth)))", "memset(&intern->oth_handler, 0, sizeof (*(&intern->oth_handler)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&intern->std.ce, 0, sizeof (*(&intern->std.ce)))", "memset(&intern->std.guards, 0, sizeof (*(&intern->std.guards)))", "memset(&intern->std.properties, 0, sizeof (*(&intern->std.properties)))", "memset(&intern->std.properties_table, 0, sizeof (*(&intern->std.properties_table)))", "memset(&intern->type, 0, sizeof (*(&intern->type)))", "memset(&intern->u, 0, sizeof (*(&intern->u)))", "memset(&intern->u.dir, 0, sizeof (*(&intern->u.dir)))", "memset(&intern->u.dir.dirp, 0, sizeof (*(&intern->u.dir.dirp)))", "memset(&intern->u.dir.entry, 0, sizeof (*(&intern->u.dir.entry)))", "memset(&intern->u.dir.func_next, 0, sizeof (*(&intern->u.dir.func_next)))", "memset(&intern->u.dir.func_rewind, 0, sizeof (*(&intern->u.dir.func_rewind)))", "memset(&intern->u.dir.func_valid, 0, sizeof (*(&intern->u.dir.func_valid)))", "memset(&intern->u.dir.index, 0, sizeof (*(&intern->u.dir.index)))", "memset(&intern->u.dir.is_recursive, 0, sizeof (*(&intern->u.dir.is_recursive)))", "memset(&intern->u.dir.sub_path, 0, sizeof (*(&intern->u.dir.sub_path)))", "memset(&intern->u.dir.sub_path_len, 0, sizeof (*(&intern->u.dir.sub_path_len)))", "memset(&intern->u.file, 0, sizeof (*(&intern->u.file)))", "memset(intern->_path, 0, sizeof (*(intern->_path)))", "memset(intern->file_class, 0, sizeof (*(intern->file_class)))", "memset(intern->file_name, 0, sizeof (*(intern->file_name)))", "memset(intern->info_class, 0, sizeof (*(intern->info_class)))", "memset(intern->orig_path, 0, sizeof (*(intern->orig_path)))", "memset(intern->oth, 0, sizeof (*(intern->oth)))", "memset(intern->oth_handler, 0, sizeof (*(intern->oth_handler)))", "memset(intern->std.ce, 0, sizeof (*(intern->std.ce)))", "memset(intern->std.guards, 0, sizeof (*(intern->std.guards)))", "memset(intern->std.properties, 0, sizeof (*(intern->std.properties)))", "memset(intern->std.properties_table, 0, sizeof (*(intern->std.properties_table)))", "memset(intern->u.dir.dirp, 0, sizeof (*(intern->u.dir.dirp)))", "memset(intern->u.dir.func_next, 0, sizeof (*(intern->u.dir.func_next)))", "memset(intern->u.dir.func_rewind, 0, sizeof (*(intern->u.dir.func_rewind)))", "memset(intern->u.dir.func_valid, 0, sizeof (*(intern->u.dir.func_valid)))", "memset(intern->u.dir.sub_path, 0, sizeof (*(intern->u.dir.sub_path)))", "(intern)->file_name_len--", "(intern)->u.dir.index++", "(intern)->u.file.current_line_num++", "(path)++", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->_path))", "_efree(((intern)->file_name))", "_efree(((intern)->orig_path))", "_efree(((intern)->u.dir.sub_path))", "_efree(((intern)->u.file.current_line))", "_efree(((intern)->u.file.open_mode))", "_efree(((path)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_php_stream_free(((intern)->u.dir.dirp), (1 | 2))", "_php_stream_free(((intern)->u.file.stream), (((1 | 2) | 16)))", "_php_stream_free(((intern)->u.file.stream), ((1 | 2)))", "_php_stream_seek((((intern)->u.dir.dirp)), 0L, 0)", "_zend_list_addref((*(intern)->u.file.zcontext).value.lval)", "_zval_copy_ctor(((intern)->u.file.current_zval))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(intern)->u.file.current_zval))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "flags = (-1)", "flags = (0)", "flags = (1)", "flags = (16)", "flags = (2)", "flags = (4096)", "flags = (8192)", "flags = (ctor_flags)", "flags = (flags)", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "intern = (intern)", "intern->flags = (-1)", "intern->flags = (0)", "intern->flags = (1)", "intern->flags = (16)", "intern->flags = (2)", "intern->flags = (4096)", "intern->flags = (8192)", "intern->flags = (ctor_flags)", "intern->flags = (flags)", "intern->u.dir.is_recursive = (-1)", "intern->u.dir.is_recursive = (0)", "intern->u.dir.is_recursive = (1)", "intern->u.dir.is_recursive = (16)", "intern->u.dir.is_recursive = (2)", "intern->u.dir.is_recursive = (4096)", "intern->u.dir.is_recursive = (8192)", "intern->u.dir.is_recursive = (ht)", "intern->u.dir.is_recursive = (len)", "intern->u.dir.is_recursive = (parsed)", "intern->u.dir.is_recursive = (return_value_used)", "intern->u.dir.is_recursive = instanceof_function((intern)->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memset((intern), 0, sizeof(spl_filesystem_object))", "parsed = (-1)", "parsed = (0)", "parsed = (1)", "parsed = (16)", "parsed = (2)", "parsed = (4096)", "parsed = (8192)", "parsed = (ht)", "parsed = (len)", "parsed = (parsed)", "parsed = (return_value_used)", "parsed = zend_parse_parameters((ht), \"s\", &(path), &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &(path), &len, &flags)", "rebuild_object_properties(&(intern)->std)", "spl_filesystem_dir_open((intern), path)", "spl_filesystem_dir_open(intern, (path))", "spl_filesystem_dir_read((intern))", "spl_filesystem_file_free_line((intern))", "spl_filesystem_object_get_file_name((intern))", "spprintf(&(path), 0, \"glob://%s\", path)", "spprintf(&path, 0, \"glob://%s\", (path))", "zend_object_std_dtor(&(intern)->std)", "zend_replace_error_handling((EH_NORMAL), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_SUPPRESS), spl_ce_UnexpectedValueException, &error_handling)", "zend_replace_error_handling((EH_THROW), spl_ce_UnexpectedValueException, &error_handling)", "zend_throw_exception_ex(spl_ce_LogicException, 0, \"Can't truncate file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot read from file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Cannot rewind file %s\", (intern)->file_name)", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Unable to read link %s, error: %s\", (intern)->file_name, strerror((*__errno_location())))", "zval_set_refcount_p(&((intern)->u.file.zresource), 1)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_efree((path))", "exit(1)", "flags = 0 | 0", "flags = 0 | 16", "intern = (spl_filesystem_object *)zend_object_store_get_object((this_ptr))", "intern->flags = flags", "intern->u.dir.is_recursive = instanceof_function(intern->std.ce, spl_ce_RecursiveDirectoryIterator) ? 1 : 0", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "parsed = zend_parse_parameters((ht), \"s\", &path, &len)", "parsed = zend_parse_parameters((ht), \"s|l\", &path, &len, &flags)", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_dir_open(intern, path)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "spprintf(&path, 0, \"glob://%s\", path)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling)", "zend_restore_error_handling(&error_handling)", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L672\", 12, &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(path), sizeof (path), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.376685273731094]
								}, {
									"case":	2,
									"scores":	[-4.376685273731094]
								}, {
									"case":	3,
									"scores":	[-4.376685273731094]
								}, {
									"case":	4,
									"scores":	[-4.376685273731094]
								}, {
									"case":	5,
									"scores":	[-4.376685273731094]
								}, {
									"case":	6,
									"scores":	[-4.376685273731094]
								}, {
									"case":	7,
									"scores":	[-4.376685273731094]
								}, {
									"case":	8,
									"scores":	[-4.376685273731094]
								}, {
									"case":	9,
									"scores":	[-4.376685273731094]
								}, {
									"case":	10,
									"scores":	[-4.376685273731094]
								}, {
									"case":	11,
									"scores":	[-4.376685273731094]
								}, {
									"case":	12,
									"scores":	[-4.376685273731094]
								}, {
									"case":	13,
									"scores":	[-4.376685273731094]
								}, {
									"case":	14,
									"scores":	[-4.376685273731094]
								}, {
									"case":	15,
									"scores":	[-4.376685273731094]
								}, {
									"case":	16,
									"scores":	[-4.376685273731094]
								}, {
									"case":	17,
									"scores":	[-4.376685273731094]
								}, {
									"case":	18,
									"scores":	[-4.376685273731094]
								}, {
									"case":	19,
									"scores":	[-4.376685273731094]
								}, {
									"case":	20,
									"scores":	[-4.376685273731094]
								}, {
									"case":	21,
									"scores":	[-4.376685273731094]
								}, {
									"case":	22,
									"scores":	[-4.376685273731094]
								}, {
									"case":	23,
									"scores":	[-4.376685273731094]
								}, {
									"case":	24,
									"scores":	[-4.376685273731094]
								}, {
									"case":	25,
									"scores":	[-4.376685273731094]
								}, {
									"case":	26,
									"scores":	[-4.376685273731094]
								}, {
									"case":	27,
									"scores":	[-4.376685273731094]
								}, {
									"case":	28,
									"scores":	[-4.376685273731094]
								}, {
									"case":	29,
									"scores":	[-4.376685273731094]
								}, {
									"case":	30,
									"scores":	[-4.376685273731094]
								}, {
									"case":	31,
									"scores":	[-4.376685273731094]
								}, {
									"case":	32,
									"scores":	[-4.376685273731094]
								}, {
									"case":	33,
									"scores":	[-4.376685273731094]
								}, {
									"case":	34,
									"scores":	[-4.376685273731094]
								}, {
									"case":	35,
									"scores":	[-4.376685273731094]
								}, {
									"case":	36,
									"scores":	[-4.376685273731094]
								}, {
									"case":	37,
									"scores":	[-4.376685273731094]
								}, {
									"case":	38,
									"scores":	[-4.376685273731094]
								}, {
									"case":	39,
									"scores":	[-4.376685273731094]
								}, {
									"case":	40,
									"scores":	[-4.376685273731094]
								}, {
									"case":	41,
									"scores":	[-4.376685273731094]
								}, {
									"case":	42,
									"scores":	[-4.376685273731094]
								}, {
									"case":	43,
									"scores":	[-4.376685273731094]
								}, {
									"case":	44,
									"scores":	[-4.376685273731094]
								}, {
									"case":	45,
									"scores":	[-4.376685273731094]
								}, {
									"case":	46,
									"scores":	[-4.376685273731094]
								}, {
									"case":	47,
									"scores":	[-4.376685273731094]
								}, {
									"case":	48,
									"scores":	[-4.376685273731094]
								}, {
									"case":	49,
									"scores":	[-4.376685273731094]
								}, {
									"case":	50,
									"scores":	[-4.376685273731094]
								}, {
									"case":	51,
									"scores":	[-4.376685273731094]
								}, {
									"case":	52,
									"scores":	[-4.376685273731094]
								}, {
									"case":	53,
									"scores":	[-4.376685273731094]
								}, {
									"case":	54,
									"scores":	[-4.376685273731094]
								}, {
									"case":	55,
									"scores":	[-4.376685273731094]
								}, {
									"case":	56,
									"scores":	[-4.376685273731094]
								}, {
									"case":	57,
									"scores":	[-4.376685273731094]
								}, {
									"case":	58,
									"scores":	[-4.376685273731094]
								}, {
									"case":	59,
									"scores":	[-4.376685273731094]
								}, {
									"case":	60,
									"scores":	[-4.376685273731094]
								}, {
									"case":	61,
									"scores":	[-4.376685273731094]
								}, {
									"case":	62,
									"scores":	[-4.376685273731094]
								}, {
									"case":	63,
									"scores":	[-4.376685273731094]
								}, {
									"case":	64,
									"scores":	[-4.376685273731094]
								}, {
									"case":	65,
									"scores":	[-4.376685273731094]
								}, {
									"case":	66,
									"scores":	[-4.376685273731094]
								}, {
									"case":	67,
									"scores":	[-4.376685273731094]
								}, {
									"case":	68,
									"scores":	[-4.376685273731094]
								}, {
									"case":	69,
									"scores":	[-4.376685273731094]
								}, {
									"case":	70,
									"scores":	[-4.376685273731094]
								}, {
									"case":	71,
									"scores":	[-4.376685273731094]
								}, {
									"case":	72,
									"scores":	[-4.376685273731094]
								}, {
									"case":	73,
									"scores":	[-4.376685273731094]
								}, {
									"case":	74,
									"scores":	[-4.376685273731094]
								}, {
									"case":	75,
									"scores":	[-4.376685273731094]
								}, {
									"case":	76,
									"scores":	[-4.376685273731094]
								}, {
									"case":	77,
									"scores":	[-4.376685273731094]
								}, {
									"case":	78,
									"scores":	[-4.376685273731094]
								}, {
									"case":	79,
									"scores":	[-4.376685273731094]
								}, {
									"case":	80,
									"scores":	[-4.376685273731094]
								}, {
									"case":	81,
									"scores":	[-4.376685273731094]
								}, {
									"case":	82,
									"scores":	[-4.376685273731094]
								}, {
									"case":	83,
									"scores":	[-4.376685273731094]
								}, {
									"case":	84,
									"scores":	[-4.376685273731094]
								}, {
									"case":	85,
									"scores":	[-4.376685273731094]
								}, {
									"case":	86,
									"scores":	[-4.376685273731094]
								}, {
									"case":	87,
									"scores":	[-4.376685273731094]
								}, {
									"case":	88,
									"scores":	[-4.376685273731094]
								}, {
									"case":	89,
									"scores":	[-4.376685273731094]
								}, {
									"case":	90,
									"scores":	[-4.376685273731094]
								}, {
									"case":	91,
									"scores":	[-4.376685273731094]
								}, {
									"case":	92,
									"scores":	[-4.376685273731094]
								}, {
									"case":	93,
									"scores":	[-4.376685273731094]
								}, {
									"case":	94,
									"scores":	[-4.376685273731094]
								}, {
									"case":	95,
									"scores":	[-4.376685273731094]
								}, {
									"case":	96,
									"scores":	[-4.376685273731094]
								}, {
									"case":	97,
									"scores":	[-4.376685273731094]
								}, {
									"case":	98,
									"scores":	[-4.376685273731094]
								}, {
									"case":	99,
									"scores":	[-4.376685273731094]
								}, {
									"case":	100,
									"scores":	[-4.376685273731094]
								}, {
									"case":	101,
									"scores":	[-4.376685273731094]
								}, {
									"case":	102,
									"scores":	[-4.376685273731094]
								}, {
									"case":	103,
									"scores":	[-4.376685273731094]
								}, {
									"case":	104,
									"scores":	[-4.376685273731094]
								}, {
									"case":	105,
									"scores":	[-4.376685273731094]
								}, {
									"case":	106,
									"scores":	[-4.376685273731094]
								}, {
									"case":	107,
									"scores":	[-4.376685273731094]
								}, {
									"case":	108,
									"scores":	[-4.376685273731094]
								}, {
									"case":	109,
									"scores":	[-4.376685273731094]
								}, {
									"case":	110,
									"scores":	[-4.376685273731094]
								}, {
									"case":	111,
									"scores":	[-4.376685273731094]
								}, {
									"case":	112,
									"scores":	[-4.376685273731094]
								}, {
									"case":	113,
									"scores":	[-4.376685273731094]
								}, {
									"case":	114,
									"scores":	[-4.376685273731094]
								}, {
									"case":	115,
									"scores":	[-4.376685273731094]
								}, {
									"case":	116,
									"scores":	[-4.376685273731094]
								}, {
									"case":	117,
									"scores":	[-4.376685273731094]
								}, {
									"case":	118,
									"scores":	[-4.376685273731094]
								}, {
									"case":	119,
									"scores":	[-4.376685273731094]
								}, {
									"case":	120,
									"scores":	[-4.376685273731094]
								}, {
									"case":	121,
									"scores":	[-4.376685273731094]
								}, {
									"case":	122,
									"scores":	[-4.376685273731094]
								}, {
									"case":	123,
									"scores":	[-4.376685273731094]
								}, {
									"case":	124,
									"scores":	[-4.376685273731094]
								}, {
									"case":	125,
									"scores":	[-4.376685273731094]
								}, {
									"case":	126,
									"scores":	[-4.376685273731094]
								}, {
									"case":	127,
									"scores":	[-4.376685273731094]
								}, {
									"case":	128,
									"scores":	[-4.376685273731094]
								}, {
									"case":	129,
									"scores":	[-4.376685273731094]
								}, {
									"case":	130,
									"scores":	[-4.376685273731094]
								}, {
									"case":	131,
									"scores":	[-4.376685273731094]
								}, {
									"case":	132,
									"scores":	[-4.376685273731094]
								}, {
									"case":	133,
									"scores":	[-4.376685273731094]
								}, {
									"case":	134,
									"scores":	[-4.376685273731094]
								}, {
									"case":	135,
									"scores":	[-4.376685273731094]
								}, {
									"case":	136,
									"scores":	[-4.376685273731094]
								}, {
									"case":	137,
									"scores":	[-4.376685273731094]
								}, {
									"case":	138,
									"scores":	[-4.376685273731094]
								}, {
									"case":	139,
									"scores":	[-4.376685273731094]
								}, {
									"case":	140,
									"scores":	[-4.376685273731094]
								}, {
									"case":	141,
									"scores":	[-4.376685273731094]
								}, {
									"case":	142,
									"scores":	[-4.376685273731094]
								}, {
									"case":	143,
									"scores":	[-4.376685273731094]
								}, {
									"case":	144,
									"scores":	[-4.376685273731094]
								}, {
									"case":	145,
									"scores":	[-4.376685273731094]
								}, {
									"case":	146,
									"scores":	[-4.376685273731094]
								}, {
									"case":	147,
									"scores":	[-4.376685273731094]
								}, {
									"case":	148,
									"scores":	[-4.376685273731094]
								}, {
									"case":	149,
									"scores":	[-4.376685273731094]
								}, {
									"case":	150,
									"scores":	[-4.376685273731094]
								}, {
									"case":	151,
									"scores":	[-4.376685273731094]
								}, {
									"case":	152,
									"scores":	[-4.376685273731094]
								}, {
									"case":	153,
									"scores":	[-4.376685273731094]
								}, {
									"case":	154,
									"scores":	[-4.376685273731094]
								}, {
									"case":	155,
									"scores":	[-4.376685273731094]
								}, {
									"case":	156,
									"scores":	[-4.376685273731094]
								}, {
									"case":	157,
									"scores":	[-4.376685273731094]
								}, {
									"case":	158,
									"scores":	[-4.376685273731094]
								}, {
									"case":	159,
									"scores":	[-4.376685273731094]
								}, {
									"case":	160,
									"scores":	[-4.376685273731094]
								}, {
									"case":	161,
									"scores":	[-4.376685273731094]
								}, {
									"case":	162,
									"scores":	[-4.376685273731094]
								}, {
									"case":	163,
									"scores":	[-4.376685273731094]
								}, {
									"case":	164,
									"scores":	[-4.376685273731094]
								}, {
									"case":	165,
									"scores":	[-4.376685273731094]
								}, {
									"case":	166,
									"scores":	[-4.376685273731094]
								}, {
									"case":	167,
									"scores":	[-4.376685273731094]
								}, {
									"case":	168,
									"scores":	[-4.376685273731094]
								}, {
									"case":	169,
									"scores":	[-4.376685273731094]
								}, {
									"case":	170,
									"scores":	[-4.376685273731094]
								}, {
									"case":	171,
									"scores":	[-4.376685273731094]
								}, {
									"case":	172,
									"scores":	[-4.376685273731094]
								}, {
									"case":	173,
									"scores":	[-4.376685273731094]
								}, {
									"case":	174,
									"scores":	[-4.376685273731094]
								}, {
									"case":	175,
									"scores":	[-4.376685273731094]
								}, {
									"case":	176,
									"scores":	[-4.376685273731094]
								}, {
									"case":	177,
									"scores":	[-4.376685273731094]
								}, {
									"case":	178,
									"scores":	[-4.376685273731094]
								}, {
									"case":	179,
									"scores":	[-4.376685273731094]
								}, {
									"case":	180,
									"scores":	[-4.376685273731094]
								}, {
									"case":	181,
									"scores":	[-4.376685273731094]
								}, {
									"case":	182,
									"scores":	[-4.376685273731094]
								}, {
									"case":	183,
									"scores":	[-4.376685273731094]
								}, {
									"case":	184,
									"scores":	[-4.376685273731094]
								}, {
									"case":	185,
									"scores":	[-4.376685273731094]
								}, {
									"case":	186,
									"scores":	[-4.376685273731094]
								}, {
									"case":	187,
									"scores":	[-4.376685273731094]
								}, {
									"case":	188,
									"scores":	[-4.376685273731094]
								}, {
									"case":	189,
									"scores":	[-4.376685273731094]
								}, {
									"case":	190,
									"scores":	[-4.376685273731094]
								}, {
									"case":	191,
									"scores":	[-4.376685273731094]
								}, {
									"case":	192,
									"scores":	[-4.376685273731094]
								}, {
									"case":	193,
									"scores":	[-4.376685273731094]
								}, {
									"case":	194,
									"scores":	[-4.376685273731094]
								}, {
									"case":	195,
									"scores":	[-4.376685273731094]
								}, {
									"case":	196,
									"scores":	[-4.376685273731094]
								}, {
									"case":	197,
									"scores":	[-4.376685273731094]
								}, {
									"case":	198,
									"scores":	[-4.376685273731094]
								}, {
									"case":	199,
									"scores":	[-4.376685273731094]
								}, {
									"case":	200,
									"scores":	[-4.376685273731094]
								}, {
									"case":	201,
									"scores":	[-4.376685273731094]
								}, {
									"case":	202,
									"scores":	[-4.376685273731094]
								}, {
									"case":	203,
									"scores":	[-4.376685273731094]
								}, {
									"case":	204,
									"scores":	[-4.376685273731094]
								}, {
									"case":	205,
									"scores":	[-4.376685273731094]
								}, {
									"case":	206,
									"scores":	[-4.376685273731094]
								}, {
									"case":	207,
									"scores":	[-4.376685273731094]
								}, {
									"case":	208,
									"scores":	[-4.376685273731094]
								}, {
									"case":	209,
									"scores":	[-4.376685273731094]
								}, {
									"case":	210,
									"scores":	[-4.376685273731094]
								}, {
									"case":	211,
									"scores":	[-4.376685273731094]
								}, {
									"case":	212,
									"scores":	[-4.376685273731094]
								}, {
									"case":	213,
									"scores":	[-4.376685273731094]
								}, {
									"case":	214,
									"scores":	[-4.376685273731094]
								}, {
									"case":	215,
									"scores":	[-4.376685273731094]
								}, {
									"case":	216,
									"scores":	[-4.376685273731094]
								}, {
									"case":	217,
									"scores":	[-4.376685273731094]
								}, {
									"case":	218,
									"scores":	[-7.5974382189310941, -7.0636615529310935, -7.0636615529310935, -6.3919454021310944, -6.7896120311310941, -6.538436351131093, -7.0356509449310938, -7.2576227529310939, -6.7200509221310938, -6.7525116311310933, -6.7896120311310941, -7.2576227529310939]
								}]
						}, {
							"switch":	85,
							"types":	[[], [], [1], [], [], [], [4], [], [3], [], [], [], [], [], [], [], [2]],
							"begin_line":	672,
							"begin_column":	2,
							"end_line":	672,
							"end_column":	55,
							"patch_codes":	["if (!__is_neg(\"\", \"L672\", 12, &(intern), sizeof (intern), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(spl_ce_RecursiveDirectoryIterator), sizeof (spl_ce_RecursiveDirectoryIterator), &(path), sizeof (path), &(ctor_flags), sizeof (ctor_flags), &(flags), sizeof (flags), &(this_ptr), sizeof (this_ptr), &(spl_ce_RuntimeException), sizeof (spl_ce_RuntimeException), &(len), sizeof (len), &(parsed), sizeof (parsed), &(ht), sizeof (ht), &(spl_ce_UnexpectedValueException), sizeof (spl_ce_UnexpectedValueException)))\n    zend_restore_error_handling(&error_handling);\n", "{\n}\n", "zend_save_error_handling(&error_handling)", "zend_restore_error_handling(&(error_handling))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6392743802310941, -6.4007443297310935, -6.4007443297310935, -5.8124193737310943, -5.9017320437310943, -5.2368182437310944, -6.659620143731094, -6.6823244837310938, -6.0684279137310941, -5.6073812437310941, -5.9017320437310943, -6.6823244837310938]
								}, {
									"case":	2,
									"scores":	[-4.376685273731094]
								}, {
									"case":	3,
									"scores":	[-4.376685273731094]
								}, {
									"case":	4,
									"scores":	[-4.376685273731094]
								}]
						}]
				}, {
					"line":	679,
					"switches":	[{
							"switch":	86,
							"types":	[[], [], [], [], [87], [], [], [], [], [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [], [], [], [], [], []],
							"begin_line":	680,
							"begin_column":	0,
							"end_line":	680,
							"end_column":	0,
							"patch_codes":	["_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&((return_value))))", "_zval_ptr_dtor((&((this_ptr))))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "spl_filesystem_object_construct(ht, (return_value), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (this_ptr), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (return_value_ptr), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (return_value), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (this_ptr), return_value_used, 0)", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_filesystem_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 0L), \"GlobIterator lost glob state\")", "php_error_docref0(((void *)0), (1 << 1L), \"No such file or directory\")", "php_error_docref0(((void *)0), (1 << 1L), \"delimiter must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"enclosure must be a character\")", "php_error_docref0(((void *)0), (1 << 1L), \"escape must be a character\")", "spl_ce_DirectoryIterator->get_iterator = spl_filesystem_dir_get_iterator", "spl_ce_FilesystemIterator->get_iterator = spl_filesystem_tree_get_iterator", "spl_ce_SplFileInfo->serialize = zend_class_serialize_deny", "spl_ce_SplFileInfo->unserialize = zend_class_unserialize_deny", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_handlers.cast_object = spl_filesystem_object_cast", "spl_filesystem_object_handlers.clone_obj = spl_filesystem_object_clone", "spl_filesystem_object_handlers.get_debug_info = spl_filesystem_object_get_debug_info", "spl_register_std_class(&spl_ce_SplFileInfo, \"SplFileInfo\", spl_filesystem_object_new, spl_SplFileInfo_functions)", "spl_register_sub_class(&spl_ce_DirectoryIterator, spl_ce_SplFileInfo, \"DirectoryIterator\", spl_filesystem_object_new, spl_DirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_FilesystemIterator, spl_ce_DirectoryIterator, \"FilesystemIterator\", spl_filesystem_object_new, spl_FilesystemIterator_functions)", "spl_register_sub_class(&spl_ce_GlobIterator, spl_ce_FilesystemIterator, \"GlobIterator\", spl_filesystem_object_new, spl_GlobIterator_functions)", "spl_register_sub_class(&spl_ce_RecursiveDirectoryIterator, spl_ce_FilesystemIterator, \"RecursiveDirectoryIterator\", spl_filesystem_object_new, spl_RecursiveDirectoryIterator_functions)", "spl_register_sub_class(&spl_ce_SplFileObject, spl_ce_SplFileInfo, \"SplFileObject\", spl_filesystem_object_new, spl_SplFileObject_functions)", "spl_register_sub_class(&spl_ce_SplTempFileObject, spl_ce_SplFileObject, \"SplTempFileObject\", spl_filesystem_object_new, spl_SplTempFileObject_functions)", "zend_class_implements(spl_ce_DirectoryIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_DirectoryIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_GlobIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_RecursiveDirectoryIterator, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_RecursiveIterator)", "zend_class_implements(spl_ce_SplFileObject, 1, spl_ce_SeekableIterator)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_FILEINFO\", sizeof (\"CURRENT_AS_FILEINFO\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_PATHNAME\", sizeof (\"CURRENT_AS_PATHNAME\") - 1, (long)32)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_AS_SELF\", sizeof (\"CURRENT_AS_SELF\") - 1, (long)16)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"CURRENT_MODE_MASK\", sizeof (\"CURRENT_MODE_MASK\") - 1, (long)240)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"FOLLOW_SYMLINKS\", sizeof (\"FOLLOW_SYMLINKS\") - 1, (long)512)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_FILENAME\", sizeof (\"KEY_AS_FILENAME\") - 1, (long)256)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_AS_PATHNAME\", sizeof (\"KEY_AS_PATHNAME\") - 1, (long)0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"KEY_MODE_MASK\", sizeof (\"KEY_MODE_MASK\") - 1, (long)3840)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"NEW_CURRENT_AND_KEY\", sizeof (\"NEW_CURRENT_AND_KEY\") - 1, (long)256 | 0)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"SKIP_DOTS\", sizeof (\"SKIP_DOTS\") - 1, (long)4096)", "zend_declare_class_constant_long(spl_ce_FilesystemIterator, \"UNIX_PATHS\", sizeof (\"UNIX_PATHS\") - 1, (long)8192)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"DROP_NEW_LINE\", sizeof (\"DROP_NEW_LINE\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_AHEAD\", sizeof (\"READ_AHEAD\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"READ_CSV\", sizeof (\"READ_CSV\") - 1, (long)8)", "zend_declare_class_constant_long(spl_ce_SplFileObject, \"SKIP_EMPTY\", sizeof (\"SKIP_EMPTY\") - 1, (long)6)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception_ex(spl_ce_DomainException, 0, \"Maximum line length must be greater than or equal zero\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Could not open file\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Directory name must not be empty.\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fgetss\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"flock\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Internal error, function '%s' not found. Please report\", \"fstat\")", "zend_throw_exception_ex(spl_ce_RuntimeException, 0, \"Operation not supported\")", "if (__is_neg(\"\", \"L680\", 5, &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(return_value_ptr), sizeof (return_value_ptr), &(this_ptr), sizeof (this_ptr), &(return_value_used), sizeof (return_value_used)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-4.9604072214960553, -5.2064461352960549, -5.1712963384960551, -5.2064461352960549, -4.9604072214960553]
								}]
						}, {
							"switch":	87,
							"types":	[[], [], [1], [], [], [], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], [], [2]],
							"begin_line":	680,
							"begin_column":	2,
							"end_line":	680,
							"end_column":	69,
							"patch_codes":	["if (!__is_neg(\"\", \"L680\", 5, &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(return_value_ptr), sizeof (return_value_ptr), &(this_ptr), sizeof (this_ptr), &(return_value_used), sizeof (return_value_used)))\n    spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0);\n", "{\n}\n", "dprintf(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "multi_convert_to_double_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "multi_convert_to_long_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "multi_convert_to_string_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "php_info_print_table_header(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "php_info_print_table_row(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "php_info_print_table_row_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "zend_error(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "zend_error_noreturn(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "zend_get_parameters_ex(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "zend_parse_method_parameters(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "zend_parse_parameters(ht, return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((0 * ht), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((0 * return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht != 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht != return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht * return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht + 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht + return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht - 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht - return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht == 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht == return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((ht), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value != 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value != this_ptr), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value == 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value == this_ptr), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_ptr != 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_ptr == 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_used != 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_used * ht), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_used + 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_used - 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_used == 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((return_value_used), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((this_ptr != 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct((this_ptr == 0), return_value, return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (&ht), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (&return_value), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (&return_value_ptr), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (&return_value_used), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (&this_ptr), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (return_value), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, (this_ptr), return_value_ptr, this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (&ht), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (&return_value), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (&return_value_ptr), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (&return_value_used), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (&this_ptr), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, (return_value_ptr), this_ptr, return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (&ht), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (&return_value), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (&return_value_ptr), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (&return_value_used), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (&this_ptr), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (return_value), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, (this_ptr), return_value_used, 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (0 * ht), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (0 * return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht != 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht != return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht * return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht + 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht + return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht - 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht - return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht == 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht == return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (ht), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value != 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value != this_ptr), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value == 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value == this_ptr), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_ptr != 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_ptr == 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used != 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used * ht), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used + 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used - 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used == 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (return_value_used), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (this_ptr != 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, (this_ptr == 0), 0)", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (0 * ht))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (0 * return_value_used))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht != 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht != return_value_used))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht * return_value_used))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht + 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht + return_value_used))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht - 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht - return_value_used))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht == 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (ht == return_value_used))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value != 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value != this_ptr))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value == 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value == this_ptr))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_ptr != 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_ptr == 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_used != 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_used * ht))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_used + 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_used - 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (return_value_used == 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (this_ptr != 0))", "spl_filesystem_object_construct(ht, return_value, return_value_ptr, this_ptr, return_value_used, (this_ptr == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6417864290960553, -5.3996745290960551, -5.1110464290960547, -5.3996745290960551, -4.6417864290960553]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	1,
			"case":	1,
			"size":	18
		}, {
			"switch":	3,
			"case":	1,
			"size":	18
		}, {
			"switch":	5,
			"case":	1,
			"size":	158
		}, {
			"switch":	7,
			"case":	1,
			"size":	158
		}, {
			"switch":	9,
			"case":	1,
			"size":	88
		}, {
			"switch":	9,
			"case":	2,
			"size":	88
		}, {
			"switch":	9,
			"case":	3,
			"size":	88
		}, {
			"switch":	10,
			"case":	1,
			"size":	88
		}, {
			"switch":	12,
			"case":	1,
			"size":	22
		}, {
			"switch":	14,
			"case":	1,
			"size":	22
		}, {
			"switch":	16,
			"case":	1,
			"size":	45
		}, {
			"switch":	18,
			"case":	1,
			"size":	45
		}, {
			"switch":	20,
			"case":	1,
			"size":	34
		}, {
			"switch":	22,
			"case":	1,
			"size":	1
		}, {
			"switch":	23,
			"case":	102,
			"size":	22
		}, {
			"switch":	24,
			"case":	1,
			"size":	22
		}, {
			"switch":	24,
			"case":	2,
			"size":	22
		}, {
			"switch":	24,
			"case":	3,
			"size":	22
		}, {
			"switch":	25,
			"case":	154,
			"size":	52
		}, {
			"switch":	26,
			"case":	1,
			"size":	52
		}, {
			"switch":	26,
			"case":	2,
			"size":	52
		}, {
			"switch":	26,
			"case":	3,
			"size":	52
		}, {
			"switch":	27,
			"case":	1,
			"size":	52
		}, {
			"switch":	27,
			"case":	2,
			"size":	52
		}, {
			"switch":	28,
			"case":	1,
			"size":	22
		}, {
			"switch":	28,
			"case":	2,
			"size":	22
		}, {
			"switch":	29,
			"case":	102,
			"size":	13
		}, {
			"switch":	30,
			"case":	1,
			"size":	13
		}, {
			"switch":	30,
			"case":	2,
			"size":	13
		}, {
			"switch":	30,
			"case":	3,
			"size":	13
		}, {
			"switch":	31,
			"case":	102,
			"size":	13
		}, {
			"switch":	32,
			"case":	1,
			"size":	13
		}, {
			"switch":	33,
			"case":	1,
			"size":	13
		}, {
			"switch":	33,
			"case":	2,
			"size":	13
		}, {
			"switch":	34,
			"case":	247,
			"size":	14
		}, {
			"switch":	35,
			"case":	1,
			"size":	14
		}, {
			"switch":	36,
			"case":	247,
			"size":	22
		}, {
			"switch":	37,
			"case":	1,
			"size":	22
		}, {
			"switch":	38,
			"case":	247,
			"size":	22
		}, {
			"switch":	39,
			"case":	1,
			"size":	22
		}, {
			"switch":	40,
			"case":	247,
			"size":	14
		}, {
			"switch":	41,
			"case":	1,
			"size":	14
		}, {
			"switch":	41,
			"case":	2,
			"size":	14
		}, {
			"switch":	41,
			"case":	3,
			"size":	14
		}, {
			"switch":	41,
			"case":	5,
			"size":	14
		}, {
			"switch":	42,
			"case":	247,
			"size":	14
		}, {
			"switch":	43,
			"case":	1,
			"size":	14
		}, {
			"switch":	44,
			"case":	1,
			"size":	14
		}, {
			"switch":	44,
			"case":	2,
			"size":	14
		}, {
			"switch":	45,
			"case":	247,
			"size":	22
		}, {
			"switch":	46,
			"case":	1,
			"size":	22
		}, {
			"switch":	47,
			"case":	248,
			"size":	112
		}, {
			"switch":	48,
			"case":	1,
			"size":	112
		}, {
			"switch":	48,
			"case":	2,
			"size":	112
		}, {
			"switch":	48,
			"case":	4,
			"size":	112
		}, {
			"switch":	49,
			"case":	248,
			"size":	22
		}, {
			"switch":	50,
			"case":	1,
			"size":	22
		}, {
			"switch":	51,
			"case":	1,
			"size":	112
		}, {
			"switch":	51,
			"case":	2,
			"size":	112
		}, {
			"switch":	52,
			"case":	218,
			"size":	47
		}, {
			"switch":	53,
			"case":	1,
			"size":	47
		}, {
			"switch":	54,
			"case":	218,
			"size":	12
		}, {
			"switch":	55,
			"case":	1,
			"size":	12
		}, {
			"switch":	55,
			"case":	2,
			"size":	12
		}, {
			"switch":	55,
			"case":	3,
			"size":	12
		}, {
			"switch":	56,
			"case":	218,
			"size":	12
		}, {
			"switch":	57,
			"case":	1,
			"size":	12
		}, {
			"switch":	58,
			"case":	218,
			"size":	12
		}, {
			"switch":	59,
			"case":	1,
			"size":	12
		}, {
			"switch":	60,
			"case":	1,
			"size":	12
		}, {
			"switch":	60,
			"case":	2,
			"size":	12
		}, {
			"switch":	61,
			"case":	218,
			"size":	12
		}, {
			"switch":	62,
			"case":	1,
			"size":	12
		}, {
			"switch":	62,
			"case":	2,
			"size":	12
		}, {
			"switch":	62,
			"case":	3,
			"size":	12
		}, {
			"switch":	63,
			"case":	1,
			"size":	12
		}, {
			"switch":	64,
			"case":	218,
			"size":	12
		}, {
			"switch":	65,
			"case":	1,
			"size":	12
		}, {
			"switch":	65,
			"case":	2,
			"size":	12
		}, {
			"switch":	65,
			"case":	3,
			"size":	12
		}, {
			"switch":	66,
			"case":	1,
			"size":	12
		}, {
			"switch":	67,
			"case":	218,
			"size":	12
		}, {
			"switch":	68,
			"case":	1,
			"size":	12
		}, {
			"switch":	68,
			"case":	2,
			"size":	12
		}, {
			"switch":	68,
			"case":	3,
			"size":	12
		}, {
			"switch":	69,
			"case":	1,
			"size":	12
		}, {
			"switch":	69,
			"case":	2,
			"size":	12
		}, {
			"switch":	70,
			"case":	218,
			"size":	47
		}, {
			"switch":	71,
			"case":	1,
			"size":	47
		}, {
			"switch":	71,
			"case":	2,
			"size":	47
		}, {
			"switch":	71,
			"case":	3,
			"size":	47
		}, {
			"switch":	72,
			"case":	1,
			"size":	47
		}, {
			"switch":	72,
			"case":	2,
			"size":	47
		}, {
			"switch":	73,
			"case":	219,
			"size":	23
		}, {
			"switch":	74,
			"case":	1,
			"size":	23
		}, {
			"switch":	75,
			"case":	219,
			"size":	23
		}, {
			"switch":	76,
			"case":	1,
			"size":	23
		}, {
			"switch":	77,
			"case":	219,
			"size":	12
		}, {
			"switch":	78,
			"case":	1,
			"size":	12
		}, {
			"switch":	78,
			"case":	2,
			"size":	12
		}, {
			"switch":	78,
			"case":	3,
			"size":	12
		}, {
			"switch":	78,
			"case":	18,
			"size":	12
		}, {
			"switch":	79,
			"case":	219,
			"size":	23
		}, {
			"switch":	80,
			"case":	1,
			"size":	23
		}, {
			"switch":	81,
			"case":	1,
			"size":	12
		}, {
			"switch":	81,
			"case":	2,
			"size":	12
		}, {
			"switch":	82,
			"case":	219,
			"size":	105
		}, {
			"switch":	83,
			"case":	1,
			"size":	105
		}, {
			"switch":	84,
			"case":	218,
			"size":	12
		}, {
			"switch":	85,
			"case":	1,
			"size":	12
		}, {
			"switch":	86,
			"case":	87,
			"size":	5
		}, {
			"switch":	87,
			"case":	1,
			"size":	5
		}],
	"func_locations":	[{
			"file":	"ext/spl/spl_directory.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"btowc",
					"begin":	317,
					"end":	320
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mbrlen",
					"begin":	328,
					"end":	332
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"spl_filesystem_dir_get_iterator",
					"begin":	1574,
					"end":	1591
				}, {
					"function":	"spl_filesystem_dir_it_current_data",
					"begin":	1618,
					"end":	1623
				}, {
					"function":	"spl_filesystem_dir_it_current_key",
					"begin":	1627,
					"end":	1633
				}, {
					"function":	"spl_filesystem_dir_it_dtor",
					"begin":	1595,
					"end":	1605
				}, {
					"function":	"spl_filesystem_dir_it_move_forward",
					"begin":	1637,
					"end":	1647
				}, {
					"function":	"spl_filesystem_dir_it_rewind",
					"begin":	1651,
					"end":	1660
				}, {
					"function":	"spl_filesystem_dir_it_valid",
					"begin":	1609,
					"end":	1614
				}, {
					"function":	"spl_filesystem_dir_open",
					"begin":	220,
					"end":	243
				}, {
					"function":	"spl_filesystem_dir_read",
					"begin":	199,
					"end":	207
				}, {
					"function":	"spl_filesystem_file_call",
					"begin":	2015,
					"end":	2062
				}, {
					"function":	"spl_filesystem_file_free_line",
					"begin":	62,
					"end":	72
				}, {
					"function":	"spl_filesystem_file_is_empty_line",
					"begin":	2145,
					"end":	2169
				}, {
					"function":	"spl_filesystem_file_open",
					"begin":	246,
					"end":	285
				}, {
					"function":	"spl_filesystem_file_read",
					"begin":	1965,
					"end":	2013
				}, {
					"function":	"spl_filesystem_file_read_csv",
					"begin":	2076,
					"end":	2103
				}, {
					"function":	"spl_filesystem_file_read_line",
					"begin":	2172,
					"end":	2182
				}, {
					"function":	"spl_filesystem_file_read_line_ex",
					"begin":	2106,
					"end":	2143
				}, {
					"function":	"spl_filesystem_file_rewind",
					"begin":	2185,
					"end":	2196
				}, {
					"function":	"spl_filesystem_info_set_filename",
					"begin":	350,
					"end":	375
				}, {
					"function":	"spl_filesystem_is_dot",
					"begin":	212,
					"end":	215
				}, {
					"function":	"spl_filesystem_is_invalid_or_dot",
					"begin":	520,
					"end":	523
				}, {
					"function":	"spl_filesystem_iterator_to_object",
					"begin":	113,
					"end":	116
				}, {
					"function":	"spl_filesystem_object_cast",
					"begin":	1796,
					"end":	1834
				}, {
					"function":	"spl_filesystem_object_clone",
					"begin":	294,
					"end":	347
				}, {
					"function":	"spl_filesystem_object_construct",
					"begin":	623,
					"end":	673
				}, {
					"function":	"spl_filesystem_object_create_info",
					"begin":	377,
					"end":	420
				}, {
					"function":	"spl_filesystem_object_create_type",
					"begin":	422,
					"end":	518
				}, {
					"function":	"spl_filesystem_object_free_storage",
					"begin":	74,
					"end":	123
				}, {
					"function":	"spl_filesystem_object_get_debug_info",
					"begin":	544,
					"end":	617
				}, {
					"function":	"spl_filesystem_object_get_file_name",
					"begin":	180,
					"end":	197
				}, {
					"function":	"spl_filesystem_object_get_path",
					"begin":	165,
					"end":	178
				}, {
					"function":	"spl_filesystem_object_get_pathname",
					"begin":	526,
					"end":	541
				}, {
					"function":	"spl_filesystem_object_new",
					"begin":	159,
					"end":	162
				}, {
					"function":	"spl_filesystem_object_new_ex",
					"begin":	136,
					"end":	154
				}, {
					"function":	"spl_filesystem_object_to_iterator",
					"begin":	108,
					"end":	111
				}, {
					"function":	"spl_filesystem_tree_get_iterator",
					"begin":	1775,
					"end":	1792
				}, {
					"function":	"spl_filesystem_tree_it_current_data",
					"begin":	1680,
					"end":	1702
				}, {
					"function":	"spl_filesystem_tree_it_current_key",
					"begin":	1706,
					"end":	1719
				}, {
					"function":	"spl_filesystem_tree_it_dtor",
					"begin":	1664,
					"end":	1676
				}, {
					"function":	"spl_filesystem_tree_it_move_forward",
					"begin":	1723,
					"end":	1740
				}, {
					"function":	"spl_filesystem_tree_it_rewind",
					"begin":	1744,
					"end":	1760
				}, {
					"function":	"spl_instantiate_arg_ex1",
					"begin":	33,
					"end":	39
				}, {
					"function":	"spl_instantiate_arg_ex2",
					"begin":	43,
					"end":	49
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wctob",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zim_spl_DirectoryIterator___construct",
					"begin":	678,
					"end":	681
				}, {
					"function":	"zim_spl_DirectoryIterator_current",
					"begin":	722,
					"end":	728
				}, {
					"function":	"zim_spl_DirectoryIterator_getBasename",
					"begin":	959,
					"end":	973
				}, {
					"function":	"zim_spl_DirectoryIterator_getExtension",
					"begin":	899,
					"end":	925
				}, {
					"function":	"zim_spl_DirectoryIterator_getFilename",
					"begin":	844,
					"end":	853
				}, {
					"function":	"zim_spl_DirectoryIterator_isDot",
					"begin":	1040,
					"end":	1049
				}, {
					"function":	"zim_spl_DirectoryIterator_key",
					"begin":	704,
					"end":	717
				}, {
					"function":	"zim_spl_DirectoryIterator_next",
					"begin":	733,
					"end":	750
				}, {
					"function":	"zim_spl_DirectoryIterator_rewind",
					"begin":	686,
					"end":	699
				}, {
					"function":	"zim_spl_DirectoryIterator_seek",
					"begin":	755,
					"end":	788
				}, {
					"function":	"zim_spl_DirectoryIterator_valid",
					"begin":	792,
					"end":	801
				}, {
					"function":	"zim_spl_FilesystemIterator___construct",
					"begin":	1358,
					"end":	1361
				}, {
					"function":	"zim_spl_FilesystemIterator_current",
					"begin":	1017,
					"end":	1035
				}, {
					"function":	"zim_spl_FilesystemIterator_getFlags",
					"begin":	1386,
					"end":	1395
				}, {
					"function":	"zim_spl_FilesystemIterator_key",
					"begin":	998,
					"end":	1012
				}, {
					"function":	"zim_spl_FilesystemIterator_rewind",
					"begin":	1366,
					"end":	1381
				}, {
					"function":	"zim_spl_FilesystemIterator_setFlags",
					"begin":	1399,
					"end":	1410
				}, {
					"function":	"zim_spl_GlobIterator___construct",
					"begin":	1528,
					"end":	1531
				}, {
					"function":	"zim_spl_GlobIterator_count",
					"begin":	1536,
					"end":	1550
				}, {
					"function":	"zim_spl_RecursiveDirectoryIterator___construct",
					"begin":	1519,
					"end":	1522
				}, {
					"function":	"zim_spl_RecursiveDirectoryIterator_getChildren",
					"begin":	1439,
					"end":	1474
				}, {
					"function":	"zim_spl_RecursiveDirectoryIterator_getSubPath",
					"begin":	1479,
					"end":	1492
				}, {
					"function":	"zim_spl_RecursiveDirectoryIterator_getSubPathname",
					"begin":	1497,
					"end":	1514
				}, {
					"function":	"zim_spl_RecursiveDirectoryIterator_hasChildren",
					"begin":	1414,
					"end":	1434
				}, {
					"function":	"zim_spl_SplFileInfo___construct",
					"begin":	1061,
					"end":	1082
				}, {
					"function":	"zim_spl_SplFileInfo_getATime",
					"begin":	1129,
					"end":	1129
				}, {
					"function":	"zim_spl_SplFileInfo_getBasename",
					"begin":	930,
					"end":	954
				}, {
					"function":	"zim_spl_SplFileInfo_getCTime",
					"begin":	1139,
					"end":	1139
				}, {
					"function":	"zim_spl_SplFileInfo_getExtension",
					"begin":	858,
					"end":	894
				}, {
					"function":	"zim_spl_SplFileInfo_getFileInfo",
					"begin":	1315,
					"end":	1328
				}, {
					"function":	"zim_spl_SplFileInfo_getFilename",
					"begin":	823,
					"end":	839
				}, {
					"function":	"zim_spl_SplFileInfo_getGroup",
					"begin":	1124,
					"end":	1124
				}, {
					"function":	"zim_spl_SplFileInfo_getInode",
					"begin":	1109,
					"end":	1109
				}, {
					"function":	"zim_spl_SplFileInfo_getLinkTarget",
					"begin":	1179,
					"end":	1221
				}, {
					"function":	"zim_spl_SplFileInfo_getMTime",
					"begin":	1134,
					"end":	1134
				}, {
					"function":	"zim_spl_SplFileInfo_getOwner",
					"begin":	1119,
					"end":	1119
				}, {
					"function":	"zim_spl_SplFileInfo_getPath",
					"begin":	806,
					"end":	818
				}, {
					"function":	"zim_spl_SplFileInfo_getPathInfo",
					"begin":	1333,
					"end":	1353
				}, {
					"function":	"zim_spl_SplFileInfo_getPathname",
					"begin":	978,
					"end":	993
				}, {
					"function":	"zim_spl_SplFileInfo_getPerms",
					"begin":	1104,
					"end":	1104
				}, {
					"function":	"zim_spl_SplFileInfo_getRealPath",
					"begin":	1227,
					"end":	1263
				}, {
					"function":	"zim_spl_SplFileInfo_getSize",
					"begin":	1114,
					"end":	1114
				}, {
					"function":	"zim_spl_SplFileInfo_getType",
					"begin":	1144,
					"end":	1144
				}, {
					"function":	"zim_spl_SplFileInfo_isDir",
					"begin":	1169,
					"end":	1169
				}, {
					"function":	"zim_spl_SplFileInfo_isExecutable",
					"begin":	1159,
					"end":	1159
				}, {
					"function":	"zim_spl_SplFileInfo_isFile",
					"begin":	1164,
					"end":	1164
				}, {
					"function":	"zim_spl_SplFileInfo_isLink",
					"begin":	1174,
					"end":	1174
				}, {
					"function":	"zim_spl_SplFileInfo_isReadable",
					"begin":	1154,
					"end":	1154
				}, {
					"function":	"zim_spl_SplFileInfo_isWritable",
					"begin":	1149,
					"end":	1149
				}, {
					"function":	"zim_spl_SplFileInfo_openFile",
					"begin":	1269,
					"end":	1274
				}, {
					"function":	"zim_spl_SplFileInfo_setFileClass",
					"begin":	1279,
					"end":	1292
				}, {
					"function":	"zim_spl_SplFileInfo_setInfoClass",
					"begin":	1297,
					"end":	1310
				}, {
					"function":	"zim_spl_SplFileObject___construct",
					"begin":	2200,
					"end":	2250
				}, {
					"function":	"zim_spl_SplFileObject_current",
					"begin":	2350,
					"end":	2367
				}, {
					"function":	"zim_spl_SplFileObject_eof",
					"begin":	2304,
					"end":	2313
				}, {
					"function":	"zim_spl_SplFileObject_fflush",
					"begin":	2635,
					"end":	2640
				}, {
					"function":	"zim_spl_SplFileObject_fgetc",
					"begin":	2673,
					"end":	2694
				}, {
					"function":	"zim_spl_SplFileObject_fgetcsv",
					"begin":	2490,
					"end":	2526
				}, {
					"function":	"zim_spl_SplFileObject_fgets",
					"begin":	2334,
					"end":	2346
				}, {
					"function":	"zim_spl_SplFileObject_fgetss",
					"begin":	2698,
					"end":	2716
				}, {
					"function":	"zim_spl_SplFileObject_flock",
					"begin":	2630,
					"end":	2630
				}, {
					"function":	"zim_spl_SplFileObject_fpassthru",
					"begin":	2720,
					"end":	2725
				}, {
					"function":	"zim_spl_SplFileObject_fputcsv",
					"begin":	2531,
					"end":	2563
				}, {
					"function":	"zim_spl_SplFileObject_fscanf",
					"begin":	2729,
					"end":	2737
				}, {
					"function":	"zim_spl_SplFileObject_fseek",
					"begin":	2658,
					"end":	2669
				}, {
					"function":	"zim_spl_SplFileObject_fstat",
					"begin":	2774,
					"end":	2774
				}, {
					"function":	"zim_spl_SplFileObject_ftell",
					"begin":	2644,
					"end":	2654
				}, {
					"function":	"zim_spl_SplFileObject_ftruncate",
					"begin":	2779,
					"end":	2794
				}, {
					"function":	"zim_spl_SplFileObject_fwrite",
					"begin":	2742,
					"end":	2770
				}, {
					"function":	"zim_spl_SplFileObject_getChildren",
					"begin":	2471,
					"end":	2477
				}, {
					"function":	"zim_spl_SplFileObject_getCsvControl",
					"begin":	2611,
					"end":	2625
				}, {
					"function":	"zim_spl_SplFileObject_getFlags",
					"begin":	2414,
					"end":	2423
				}, {
					"function":	"zim_spl_SplFileObject_getMaxLineLen",
					"begin":	2447,
					"end":	2456
				}, {
					"function":	"zim_spl_SplFileObject_hasChildren",
					"begin":	2460,
					"end":	2467
				}, {
					"function":	"zim_spl_SplFileObject_key",
					"begin":	2371,
					"end":	2384
				}, {
					"function":	"zim_spl_SplFileObject_next",
					"begin":	2388,
					"end":	2401
				}, {
					"function":	"zim_spl_SplFileObject_rewind",
					"begin":	2291,
					"end":	2300
				}, {
					"function":	"zim_spl_SplFileObject_seek",
					"begin":	2798,
					"end":	2818
				}, {
					"function":	"zim_spl_SplFileObject_setCsvControl",
					"begin":	2568,
					"end":	2606
				}, {
					"function":	"zim_spl_SplFileObject_setFlags",
					"begin":	2405,
					"end":	2410
				}, {
					"function":	"zim_spl_SplFileObject_setMaxLineLen",
					"begin":	2427,
					"end":	2443
				}, {
					"function":	"zim_spl_SplFileObject_valid",
					"begin":	2317,
					"end":	2330
				}, {
					"function":	"zim_spl_SplTempFileObject___construct",
					"begin":	2254,
					"end":	2287
				}, {
					"function":	"zm_startup_spl_directory",
					"begin":	2927,
					"end":	2978
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
