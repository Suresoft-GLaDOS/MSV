<?xml version="1.0" encoding="EUC-KR" ?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.ko.xsl"?>
<!-- English Revision: 105989:1818952 (outdated) -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_ext_filter.xml.meta">

<name>mod_ext_filter</name>
<description>응답 내용을 외부 프로그램으로 처리한 후 클라이언트로
보낸다</description>
<status>Extension</status>
<sourcefile>mod_ext_filter.c</sourcefile>
<identifier>ext_filter_module</identifier>

<summary>
    <p><module>mod_ext_filter</module>를 사용하면 간단하고 익숙한
    방법으로 <a href="../filter.html">필터</a>를 만들 수 있다.
    표준입력에서 읽고 표준출력에 쓰는 프로그램(즉, 유닉스식
    필터 명령어)을 아파치 필터로 사용할 수 있다. 이런 필터는
    아파치 API로 쓰여지고 아파치 서버 프로세스 안에서 실행되는
    필터에 비해 매우 느리지만, 다음과 같은 장점이 있다:</p>

    <ul>
      <li>프로그래밍 모델이 매우 간단하다</li>

      <li>프로그램이 표준입력에서 읽고 표준출력에 쓸 수만 있다면
      어떤 프로그래밍/스크립트 언어라도 사용할 수 있다</li>

      <li>이미 있는 프로그램을 수정없이 아파치 필터로 사용할
      수 있다</li>
    </ul>

    <p>실제 사용하기에는 성능이 떨어지지만,
    <module>mod_ext_filter</module>를 사용하여 필터를 빨리 만들어볼
    수 있다.</p>

</summary>
<seealso><a href="../filter.html">필터</a></seealso>

<section id="examples"><title>예제</title>

    <section><title>다른 type의 응답을 HTML로 만든다</title>
      <example>
        # mod_ext_filter 지시어를 가지고<br />
        # 외부 프로그램 /usr/bin/enscript를 사용하여<br />
        # 문서파일과 text/c 파일을 HTML로 만들고 결과의<br />
        # type을 text/html로 변경하는 필터를 정의한다<br />
        ExtFilterDefine c-to-html mode=output \<br />
        <indent>
          intype=text/c outtype=text/html \<br />
          cmd="/usr/bin/enscript --color -W html -Ec -o - -"<br />
        </indent>
        <br />
        &lt;Directory "/export/home/trawick/apacheinst/htdocs/c"&gt;<br />
        <indent>
          # 출력에 새로운 필터를 실행하는 core 지시어<br />
          SetOutputFilter c-to-html<br />
          <br />
          # .c 파일의 type을 text/c로 만드는 mod_mime<br />
          # 지시어<br />
          AddType text/c .c<br />
          <br />
          # 디버그 수준을 높여서 요청마다 현재 설정을<br />
          # 알려주는 로그문을 기록하는 mod_ext_filter<br />
          # 지시어<br />
          ExtFilterOptions DebugLevel=1<br />
        </indent>
        &lt;/Directory&gt;
      </example>
    </section>

    <section><title>content 인코딩 필터 구현하기</title>
      <p>Note: 아래 gzip 예제는 단지 설명을 예로 든 것이다.
      실제 서비스에 사용하려면 <module>mod_deflate</module>를
      참고하길 바란다.</p>

      <example>
        # 외부 필터를 정의하는 mod_ext_filter 지시어<br />
        ExtFilterDefine gzip mode=output cmd=/bin/gzip<br />
        <br />
        &lt;Location /gzipped&gt;<br />
        <indent>
          # 출력할때 gzip 필터를 실행하는 core 지시어<br />
          SetOutputFilter gzip<br />
          <br />
          # "Content-Encoding: gzip" 헤더를 추가하는<br />
          # mod_header 지시어<br />
          Header set Content-Encoding gzip<br />
        </indent>
        &lt;/Location&gt;
      </example>
    </section>

    <section><title>서버를 느리게 하기</title>
      <example>
        # cat으로 모든 내용을 통과하는 필터를 정의하는<br />
        # mod_ext_filter 지시어; cat은 아무것도 수정하지<br />
        # 않는다; 단지 처리경로를 길게 하여 자원을 더 소모한다<br />
        ExtFilterDefine slowdown mode=output cmd=/bin/cat \<br />
        <indent>
          preservescontentlength<br />
        </indent>
        <br />
        &lt;Location /&gt;<br />
        <indent>
          # 출력할때 slowdown 필터를 여러번 실행하는 core 지시어<br />
          #<br />
          SetOutputFilter slowdown;slowdown;slowdown<br />
        </indent>
        &lt;/Location&gt;
      </example>
    </section>

    <section><title>sed를 사용하여 응답에서 글을 대체하기</title>
      <example>
        # 응답에서 글을 대체하는 필터를 정의하는<br />
        # mod_ext_filter 지시어<br />
        #<br />
        ExtFilterDefine fixtext mode=output intype=text/html \<br />
        <indent>
          cmd="/bin/sed s/verdana/arial/g"<br />
        </indent>
        <br />
        &lt;Location /&gt;<br />
        <indent>
          # 출력할때 fixtext 필터를 실행하는 core 지시어<br />
          SetOutputFilter fixtext<br />
        </indent>
        &lt;/Location&gt;
      </example>
    </section>

    <section><title>다른 필터를 추적하기</title>
      <example>
        # 압축 문제가 있는 특정 클라이언트(IP 192.168.1.31)에<br />
        # 대해 mod_deflate가 읽고 쓰는 자료를 추적한다.<br />
        # 이 필터는 mod_deflate로 보내기 전 자료를 추적한다.<br />
        ExtFilterDefine tracebefore \<br />
        <indent>
          cmd="/bin/tracefilter.pl /tmp/tracebefore" \<br />
          EnableEnv=trace_this_client<br />
        </indent>
        <br />
        # 이 필터는 mod_deflate에서 나오는 자료를 추적한다.<br />
        # ftype 파라미터를 사용하지않는 경우, 기본 필터형<br />
        # AP_FTYPE_RESOURCE는 필터 순서를 mod_deflate *이전에*<br />
        # 둔다. AP_FTYPE_CONTENT_SET 보다 조금 높은 숫자값을<br />
        # 지정하면 mod_deflate 이후에 실행한다.<br />
        ExtFilterDefine traceafter \<br />
        <indent>
          cmd="/bin/tracefilter.pl /tmp/traceafter" \<br />
          EnableEnv=trace_this_client ftype=21<br />
        </indent>
        <br />
        &lt;Directory /usr/local/docs&gt;<br />
        <indent>
          SetEnvIf Remote_Addr 192.168.1.31 trace_this_client<br />
          SetOutputFilter tracebefore;deflate;traceafter<br />
        </indent>
        &lt;/Directory&gt;
      </example>

      <example><title>다음은 자료를 추적하는 필터이다:</title>
        #!/usr/local/bin/perl -w<br />
        use strict;<br />
        <br />
        open(SAVE, "&gt;$ARGV[0]")<br />
        <indent>
          or die "can't open $ARGV[0]: $?";<br />
        </indent>
        <br />
        while (&lt;STDIN&gt;) {<br />
        <indent>
          print SAVE $_;<br />
          print $_;<br />
        </indent>
        }<br />
        <br />
        close(SAVE);
      </example>
    </section>
</section> <!-- /Examples -->

<directivesynopsis>
<name>ExtFilterDefine</name>
<description>외부 필터를 정의한다</description>
<syntax>ExtFilterDefine <var>filtername</var> <var>parameters</var></syntax>
<contextlist><context>server config</context></contextlist>

<usage>
    <p><directive>ExtFilterDefine</directive> 지시어는 외부
    필터의 성질과 실행할 프로그램, 아규먼트를 정의한다.</p>

    <p><var>filtername</var>은 정의할 필터 이름을 지정한다.
    이 이름을 SetOutputFilter 지시어에서 사용한다. 등록한 모든
    필터들간에 이름이 겹치면 안된다. <em>현재 필터등록 API는
    오류를 보고하지 않는다. 그래서 사용자는 이름이 겹치는 문제를
    알지 못한다.</em></p>

    <p>실행할 외부 명령어와 다른 성질을 정의하는 나머지 아규먼트는
    어떤 순서로 나와도 가능하다. 단, <code>cmd=</code> 파라미터는
    반드시 필요하다. 사용할 수 있는 파라미터는 다음과 같다:</p>

    <dl>
      <dt><code>cmd=<var>cmdline</var></code></dt>

      <dd><code>cmd=</code> 키워드는 실행할 외부 명령어를 지정한다.
      프로그램명 뒤에 아규먼트가 있다면 명령행을 쌍따옴표로
      묶어야 한다 (<em>예를 들어</em>,
      <code>cmd="<var>/bin/mypgm</var> <var>arg1</var>
      <var>arg2</var>"</code>). 쉘을 거치지않고 직접 프로그램을
      실행하기때문에 일반적인 쉘 따옴표는 필요없다. 프로그램
      아규먼트들은 공백으로 구분한다. 프로그램 아규먼트에 공백이
      있다면 공백 앞에 백슬래쉬로 사용해야 한다. 백슬래쉬가
      아규먼트의 일부라면 백슬래쉬를 두번 사용해야 한다. 프로그램을
      실행할때 표준 CGI 환경변수와 추가로 DOCUMENT_URI,
      DOCUMENT_PATH_INFO, QUERY_STRING_UNESCAPED 변수를 설정한다.</dd>

      <dt><code>mode=<var>mode</var></code></dt>

      <dd>응답을 처리하는 필터는 (기본값인) <code>mode=output</code>을
      사용한다. 요청을 처리하는 필터는 <code>mode=input</code>을
      사용한다. <code>mode=input</code>은 아파치 2.1에 추가되었다.</dd>

      <dt><code>intype=<var>imt</var></code></dt>

      <dd>이 파라미터는 필터로 처리할 문서의 인터넷 media
      type(<em>즉</em>, MIME type)을 지정한다. 기본적으로 모든
      문서를 필터로 처리한다. <code>intype=</code>을 지정하면
      다른 type의 문서는 필터로 처리하지 않는다.</dd>

      <dt><code>outtype=<var>imt</var></code></dt>

      <dd>이 파라미터는 필터로 처리한 문서의 인터넷 media
      type(<em>즉</em>, MIME type)을 지정한다. 필터처리 작업중에
      인터넷 media type을 변경할때 유용하다. 기본적으로, 인터넷
      media type은 변하지 않는다.</dd>

      <dt><code>PreservesContentLength</code></dt>

      <dd><code>PreservesContentLength</code> 키워드는 필터가
      content length를 유지하도록 한다. 대부분의 필터가 content
      length를 변경하므로 이 키워드는 기본값이 아니다. 필터가
      길이를 유지할때만 이 키워드를 사용해야 한다.</dd>

      <dt><code>ftype=<var>filtertype</var></code></dt>

      <dd>이 파라미터는 필터 종류에 대한 숫자값을 지정한다.
      대부분의 경우 기본값인 AP_FTYPE_RESOURCE가 적당하다.
      필터를 실행하는 순서가 자원필터와 달라야하는 경우 이
      파라미터가 필요하다. 적당한 값을 알려면 util_filter.h에
      있는 AP_FTYPE_* 정의를 참고하라.</dd>

      <dt><code>disableenv=<var>env</var></code></dt>

      <dd>이 파라미터로 설정한 환경변수가 정의되었다면 필터를
      사용하지 않는다.</dd>

      <dt><code>enableenv=<var>env</var></code></dt>

      <dd>이 파라미터로 설정한 환경변수가 정의된 경우 필터를
      사용한다.</dd>
    </dl>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>ExtFilterOptions</name>
<description><module>mod_ext_filter</module> 옵션을 설정한다</description>
<syntax>ExtFilterOptions <var>option</var> [<var>option</var>] ...</syntax>
<default>ExtFilterOptions DebugLevel=0 NoLogStderr</default>
<contextlist><context>directory</context></contextlist>

<usage>
    <p><directive>ExtFilterOptions</directive> 지시어는
    <module>mod_ext_filter</module>의 특별한 처리옵션을 지정한다.
    <var>Option</var>은 다음중 하나다.</p>

    <dl>
      <dt><code>DebugLevel=<var>n</var></code></dt>

      <dd>
        <code>DebugLevel</code> 키워드는
        <module>mod_ext_filter</module>가 기록하는 디버그 문구
        수준을 정한다. 기본값은 디버그문을 기록하지 않는다.
        이는 <code>DebugLevel=0</code>과 같다. 높은 숫자를
        사용할수록, 더 많은 디버그문이 기록되고 서버 성능이
        떨어진다. 숫자값의 실제 의미는 <code>mod_ext_filter.c</code>
        앞부분에 있는 DBGLVL_ 상수 정의에 설명되있다.

        <p>주의: 필터 로그를 기록하려면 core 지시어 <directive
        module="core">LogLevel</directive>을 사용하여 디버그문을
        아파치 오류로그에 기록해야 한다.</p>
      </dd>

      <dt><code>LogStderr | NoLogStderr</code></dt>

      <dd><code>LogStderr</code> 키워드는 외부 필터 프로그램이
      표준오류로 출력하는 문구를 아파치 오류로그에 기록한다.
      <code>NoLogStderr</code>는 이 기능을 하지 않는다.</dd>
    </dl>

    <example><title>예제</title>
      ExtFilterOptions LogStderr DebugLevel=0
    </example>

    <p>위의 설정을 사용하면 필터가 표준오류로 출력하는 문구를
    아파치 오류로그에 기록하고, <module>mod_ext_filter</module>는
    자체 디버그문을 기록하지 않는다. </p>
</usage>
</directivesynopsis>

</modulesynopsis>
